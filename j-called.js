function ___udivdi3(a, f, d, c) {
    return ___udivmoddi4(a | 0, f | 0, d | 0, c | 0, 0) | 0
}
function ___udivmoddi4(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, a = a | 0,
        f = f | 0,
        d = d | 0,
        c = c | 0,
        b = b | 0;
    y = x = i = v = w = 0;
    e = a;
    g = f;
    h = d;
    j = c;
    if (0 == (g | 0)) {
        i = 0 != (b | 0);
        if (0 == (j | 0)) i && (HEAP32[b >> 2] = (e >>> 0) % (h >>> 0), HEAP32[b + 4 >> 2] = 0), b = 0, i = (e >>> 0) / (h >>> 0) >>> 0;
        else {
            if (!i) return (tempRet0 = 0, 0) | 0;
            HEAP32[b >> 2] = a & -1;
            HEAP32[b + 4 >> 2] = f & 0;
            i = b = 0
        }
        return (tempRet0 = b, i) | 0
    }
    l = 0 == (j | 0);
    do
        if (0 == (h | 0)) {
            if (l) return 0 != (b | 0) && (HEAP32[b >> 2] = (g >>> 0) % (h >>> 0), HEAP32[b + 4 >> 2] = 0), b = 0, i = (g >>> 0) / (h >>> 0) >>> 0, (tempRet0 = b, i) | 0;
            if (0 == (e | 0)) return 0 !=
                (b | 0) && (HEAP32[b >> 2] = 0, HEAP32[b + 4 >> 2] = (g >>> 0) % (j >>> 0)), b = 0, i = (g >>> 0) / (j >>> 0) >>> 0, (tempRet0 = b, i) | 0;
            k = j - 1 | 0;
            if (0 == (k & j | 0)) return 0 != (b | 0) && (HEAP32[b >> 2] = a & -1, HEAP32[b + 4 >> 2] = k & g | f & 0), b = 0, i = g >>> ((_llvm_cttz_i32(j | 0) | 0) >>> 0), (tempRet0 = b, i) | 0;
            k = _llvm_ctlz_i32(j | 0) | 0;
            k = k - _llvm_ctlz_i32(g | 0) | 0;
            if (30 >= k >>> 0) m = k + 1 | 0, n = 31 - k | 0, u = m, k = g << n | e >>> (m >>> 0), m = g >>> (m >>> 0), t = 0, n = e << n;
            else {
                if (0 == (b | 0)) return i = b = 0, (tempRet0 = b, i) | 0;
                HEAP32[b >> 2] = a & -1;
                HEAP32[b + 4 >> 2] = g | f & 0;
                i = b = 0;
                return (tempRet0 = b, i) | 0
            }
        } else {
            if (!l) {
                k = _llvm_ctlz_i32(j |
                    0) | 0;
                k = k - _llvm_ctlz_i32(g | 0) | 0;
                if (31 >= k >>> 0) {
                    f = k + 1 | 0;
                    a = 31 - k | 0;
                    h = k - 31 >> 31;
                    u = f;
                    k = e >>> (f >>> 0) & h | g << a;
                    m = g >>> (f >>> 0) & h;
                    t = 0;
                    n = e << a;
                    break
                }
                if (0 == (b | 0)) return i = b = 0, (tempRet0 = b, i) | 0;
                HEAP32[b >> 2] = a & -1;
                HEAP32[b + 4 >> 2] = g | f & 0;
                i = b = 0;
                return (tempRet0 = b, i) | 0
            }
            k = h - 1 | 0;
            if (0 != (k & h | 0)) k = _llvm_ctlz_i32(h | 0) + 33 | 0, n = k - _llvm_ctlz_i32(g | 0) | 0, p = 64 - n | 0, q = 32 - n | 0, r = q >> 31, s = n - 32 | 0, m = s >> 31, u = n, k = q - 1 >> 31 & g >>> (s >>> 0) | (g << q | e >>> (n >>> 0)) & m, m &= g >>> (n >>> 0), t = e << p & r, n = (g << p | e >>> (s >>> 0)) & r | e << q & n - 33 >> 31;
            else return 0 != (b | 0) && (HEAP32[b >> 2] =
                k & e, HEAP32[b + 4 >> 2] = 0), 1 == (h | 0) ? (b = g | f & 0, i = a & -1 | 0) : (i = _llvm_cttz_i32(h | 0) | 0, b = g >>> (i >>> 0) | 0, i = g << 32 - i | e >>> (i >>> 0) | 0), (tempRet0 = b, i) | 0
        }
    while (0);
    if (0 == (u | 0)) w = n, v = t, y = m, e = k, i = x = 0;
    else {
        e = d & -1 | 0;
        j |= c & 0;
        g = _i64Add(e, j, -1, -1) | 0;
        c = tempRet0;
        d = n;
        f = t;
        a = m;
        h = k;
        k = u;
        for (u = 0; !(w = f >>> 31 | d << 1, v = u | f << 1, x = h << 1 | d >>> 31 | 0, y = h >>> 31 | a << 1 | 0, _i64Subtract(g, c, x, y) | 0, u = tempRet0, d = u >> 31 | (0 > (u | 0) ? -1 : 0) << 1, i = d & 1, x = _i64Subtract(x, y, d & e, ((0 > (u | 0) ? -1 : 0) >> 31 | (0 > (u | 0) ? -1 : 0) << 1) & j) | 0, y = tempRet0, k = k - 1 | 0, 0 == (k | 0));) d = w, f = v, a = y, h = x, u = i;
        e =
            x;
        x = 0
    }
    0 != (b | 0) && (HEAP32[b >> 2] = e, HEAP32[b + 4 >> 2] = y);
    b = (v | 0) >>> 31 | (w | 0) << 1 | (0 | v >>> 31) & 0 | x;
    return (tempRet0 = b, (v << 1 | 0) & -2 | i) | 0
}
function ___uremdi3(a, f, d, c) {
    var b, e;
    e = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = e | 0;
    ___udivmoddi4(a | 0, f | 0, d | 0, c | 0, b) | 0;
    STACKTOP = e;
    return (tempRet0 = HEAP32[b + 4 >> 2] | 0, HEAP32[b >> 2] | 0) | 0
}
function __formatString(a, f) {
    function d(a) {
        var c;
        "double" === a ? c = HEAPF64[f + b >> 3] : "i64" == a ? (c = [HEAP32[f + b >> 2], HEAP32[f + (b + 8) >> 2]], b += 8) : (a = "i32", c = HEAP32[f + b >> 2]);
        b += Math.max(Runtime.getNativeFieldSize(a), Runtime.getAlignSize(a, null, !0));
        return c
    }
    for (var c = a, b = 0, e = [], g, h;;) {
        var j = c;
        g = HEAP8[c];
        if (0 === g) break;
        h = HEAP8[c + 1 | 0];
        if (37 == g) {
            var i = !1,
                l = !1,
                k = !1,
                m = !1,
                n = !1;
            a: for (;;) {
                switch (h) {
                    case 43:
                        i = !0;
                        break;
                    case 45:
                        l = !0;
                        break;
                    case 35:
                        k = !0;
                        break;
                    case 48:
                        if (m) break a;
                        else {
                            m = !0;
                            break
                        }
                    case 32:
                        n = !0;
                        break;
                    default:
                        break a
                }
                c++;
                h = HEAP8[c + 1 | 0]
            }
            var p = 0;
            if (42 == h) p = d("i32"), c++, h = HEAP8[c + 1 | 0];
            else
                for (; 48 <= h && 57 >= h;) p = 10 * p + (h - 48), c++, h = HEAP8[c + 1 | 0];
            var q = !1,
                r = -1;
            if (46 == h) {
                r = 0;
                q = !0;
                c++;
                h = HEAP8[c + 1 | 0];
                if (42 == h) r = d("i32"), c++;
                else
                    for (;;) {
                        h = HEAP8[c + 1 | 0];
                        if (48 > h || 57 < h) break;
                        r = 10 * r + (h - 48);
                        c++
                    }
                h = HEAP8[c + 1 | 0]
            }
            0 > r && (r = 6, q = !1);
            var s;
            switch (String.fromCharCode(h)) {
                case "h":
                    h = HEAP8[c + 2 | 0];
                    104 == h ? (c++, s = 1) : s = 2;
                    break;
                case "l":
                    h = HEAP8[c + 2 | 0];
                    108 == h ? (c++, s = 8) : s = 4;
                    break;
                case "L":
                case "q":
                case "j":
                    s = 8;
                    break;
                case "z":
                case "t":
                case "I":
                    s = 4;
                    break;
                default:
                    s = null
            }
            s && c++;
            h = HEAP8[c + 1 | 0];
            switch (String.fromCharCode(h)) {
                case "d":
                case "i":
                case "u":
                case "o":
                case "x":
                case "X":
                case "p":
                    j = 100 == h || 105 == h;
                    s = s || 4;
                    var t = g = d("i" + 8 * s),
                        u;
                    8 == s && (g = Runtime.makeBigInt(g[0], g[1], 117 == h));
                    if (4 >= s) {
                        var w = Math.pow(256, s) - 1;
                        g = (j ? reSign : unSign)(g & w, 8 * s)
                    }
                    w = Math.abs(g);
                    j = "";
                    if (100 == h || 105 == h) u = 8 == s && i64Math ? i64Math.stringify(t[0], t[1], null) : reSign(g, 8 * s, 1).toString(10);
                    else if (117 == h) u = 8 == s && i64Math ? i64Math.stringify(t[0], t[1], !0) : unSign(g, 8 * s, 1).toString(10), g = Math.abs(g);
                    else if (111 == h) u = (k ? "0" : "") + w.toString(8);
                    else if (120 == h || 88 == h) {
                        j = k && 0 != g ? "0x" : "";
                        if (8 == s && i64Math)
                            if (t[1]) {
                                u = (t[1] >>> 0).toString(16);
                                for (k = (t[0] >>> 0).toString(16); 8 > k.length;) k = "0" + k;
                                u += k
                            } else u = (t[0] >>> 0).toString(16);
                        else if (0 > g) {
                            g = -g;
                            u = (w - 1).toString(16);
                            t = [];
                            for (k = 0; k < u.length; k++) t.push((15 - parseInt(u[k], 16)).toString(16));
                            for (u = t.join(""); u.length < 2 * s;) u = "f" + u
                        } else u = w.toString(16);
                        88 == h && (j = j.toUpperCase(), u = u.toUpperCase())
                    } else 112 == h && (0 === w ? u = "(nil)" : (j = "0x", u = w.toString(16)));
                    if (q)
                        for (; u.length <
                            r;) u = "0" + u;
                    0 <= g && (i ? j = "+" + j : n && (j = " " + j));
                    "-" == u.charAt(0) && (j = "-" + j, u = u.substr(1));
                    for (; j.length + u.length < p;) l ? u += " " : m ? u = "0" + u : j = " " + j;
                    u = j + u;
                    u.split("").forEach(function(a) {
                        e.push(a.charCodeAt(0))
                    });
                    break;
                case "f":
                case "F":
                case "e":
                case "E":
                case "g":
                case "G":
                    g = d("double");
                    if (isNaN(g)) u = "nan", m = !1;
                    else if (isFinite(g)) {
                        q = !1;
                        s = Math.min(r, 20);
                        if (103 == h || 71 == h) q = !0, r = r || 1, s = parseInt(g.toExponential(s).split("e")[1], 10), r > s && -4 <= s ? (h = (103 == h ? "f" : "F").charCodeAt(0), r -= s + 1) : (h = (103 == h ? "e" : "E").charCodeAt(0),
                            r--), s = Math.min(r, 20);
                        if (101 == h || 69 == h) u = g.toExponential(s), /[eE][-+]\d$/.test(u) && (u = u.slice(0, -1) + "0" + u.slice(-1));
                        else if (102 == h || 70 == h) u = g.toFixed(s), 0 === g && __reallyNegative(g) && (u = "-" + u);
                        j = u.split("e");
                        if (q && !k)
                            for (; 1 < j[0].length && -1 != j[0].indexOf(".") && ("0" == j[0].slice(-1) || "." == j[0].slice(-1));) j[0] = j[0].slice(0, -1);
                        else
                            for (k && -1 == u.indexOf(".") && (j[0] += "."); r > s++;) j[0] += "0";
                        u = j[0] + (1 < j.length ? "e" + j[1] : "");
                        69 == h && (u = u.toUpperCase());
                        0 <= g && (i ? u = "+" + u : n && (u = " " + u))
                    } else u = (0 > g ? "-" : "") + "inf",
                        m = !1;
                    for (; u.length < p;) u = l ? u + " " : m && ("-" == u[0] || "+" == u[0]) ? u[0] + "0" + u.slice(1) : (m ? "0" : " ") + u;
                    97 > h && (u = u.toUpperCase());
                    u.split("").forEach(function(a) {
                        e.push(a.charCodeAt(0))
                    });
                    break;
                case "s":
                    m = (i = d("i8*")) ? _strlen(i) : 6;
                    q && (m = Math.min(m, r));
                    if (!l)
                        for (; m < p--;) e.push(32);
                    if (i)
                        for (k = 0; k < m; k++) e.push(HEAPU8[i++ | 0]);
                    else e = e.concat(intArrayFromString("(null)".substr(0, m), !0));
                    if (l)
                        for (; m < p--;) e.push(32);
                    break;
                case "c":
                    for (l && e.push(d("i8")); 0 < --p;) e.push(32);
                    l || e.push(d("i8"));
                    break;
                case "n":
                    l = d("i32*");
                    HEAP32[l >> 2] = e.length;
                    break;
                case "%":
                    e.push(g);
                    break;
                default:
                    for (k = j; k < c + 2; k++) e.push(HEAP8[k])
            }
            c += 2
        } else e.push(g), c += 1
    }
    return e
}
function _Jinput_(a) {
    _fputs(a, HEAP32[_stdout >> 2]);
    _fgets(124568, 3E4, HEAP32[_stdin >> 2]);
    return 124568
}

function _jtshapex(a, f) {
    var d, c;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 24 >> 2];
    c = _jtga(a, 4, d, 1, 0);
    0 == (c | 0) ? d = 0 : (_memcpy(c + HEAP32[c >> 2], f + 28, d << 2) | 0, d = c);
    return 0 == (HEAP32[f + 12 >> 2] & 192 | 0) ? d : d = _jtxco1(a, d)
}

function _jtnum1(a, f, d) {
    return 0 == (f | 0) | 0 == (d | 0) ? 0 : a = HEAP32[d + (HEAP32[d >> 2] + 16) >> 2]
}
function _jtscm00(a, f) {
    var d, c;
    if (0 == (f | 0)) return 0;
    d = 0 != (HEAP32[f + 12 >> 2] & 131074 | 0);
    c = d & 1;
    return (c | 0) < (HEAP32[f + 24 >> 2] | 0) ? d = _jtrank1ex(a, f, 0, c, 1042) : d = d ? _jtline(a, f, -1, 0, 0) : _jtlinf(a, HEAP32[31134], f, 0, 0)
}

function _jtunparsem(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = d;
    e = HEAP32[d >> 2];
    g = d = HEAP32[e + (b + 16) >> 2];
    h = HEAP32[d >> 2];
    d = g + h;
    j = h + (g + 4);
    i = HEAP32[j >> 2];
    l = h + (g + 8);
    k = HEAP32[l >> 2];
    m = HEAP32[i + 20 >> 2];
    n = h + (g + 16);
    p = HEAP32[n >> 2];
    q = h + (g + 20);
    r = HEAP32[q >> 2];
    s = HEAP32[p + 20 >> 2];
    u = (t = 0 != (s | 0)) ? 0 != (m | 0) ? 1 : 3 == (_jti0(a, HEAP32[e + (b + 8) >> 2]) | 0) ? 1 : 0 != (HEAP32[e + (b + 20) >> 2] & 524288 | 0) : 0;
    b = u & 1;
    if (0 == _jtequ(a, HEAP32[31086], HEAP32[l >> 2]) << 24 >> 24) c = 19;
    else if (0 == _jtequ(a, HEAP32[31086], HEAP32[q >>
            2]) << 24 >> 24) c = 19;
    else {
        e = 0 == (m | 0) ? 0 : HEAPU16[i + HEAP32[i >> 2] + (12 * (m - 1) & -1) + 8 >> 1] + 1;
        p = t ? HEAPU16[p + HEAP32[p >> 2] + (12 * (s - 1) & -1) + 8 >> 1] + 1 : 0;
        e = _jtga(a, 32, e + b + p, 1, 0);
        if (0 == (e | 0)) return 0;
        p = e + HEAP32[e >> 2];
        d = _jtunparse1a(a, m, HEAP32[d >> 2], HEAP32[j >> 2], p);
        if (0 == (d | 0)) return 0;
        if (u) {
            j = HEAP32[38956];
            HEAP32[d >> 2] = j;
            if (0 == (j | 0)) return 0;
            d += 4
        }
        d = _jtunparse1a(a, s, HEAP32[h + (g + 12) >> 2], HEAP32[n >> 2], d);
        if (0 == (d | 0)) return 0;
        if ((HEAP32[e + 20 >> 2] | 0) == (d - p >> 2 | 0)) w = e;
        else return d = HEAP32[a + 4408 >> 2], j = HEAP32[d + (HEAP32[d >> 2] + 80) >>
            2], _jtjsigstr(a, 20, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), _jtwri(a, 4, 161016, 11, 121264), 0
    }
    if (19 == c) {
        c = HEAP32[k + 20 >> 2];
        d = HEAP32[r + 20 >> 2];
        n = _jtga(a, 32, c + b + d, 1, 0);
        if (0 == (n | 0)) return 0;
        g = b = n + HEAP32[n >> 2];
        _memcpy(b, k + HEAP32[k >> 2], c << 2) | 0;
        k = g + (c << 2);
        if (u) {
            b = HEAP32[38956];
            HEAP32[k >> 2] = b;
            if (0 == (b | 0)) return 0;
            c = g + (c + 1 << 2)
        } else c = k;
        _memcpy(c, r + HEAP32[r >> 2], d << 2) | 0;
        w = n
    }
    if ((HEAP32[30648] | 0) != (f | 0)) return w;
    f = _jtope(a, w);
    return 0 == (f | 0) ? 0 : 1 != (HEAP32[f + 24 >> 2] | 0) ? f : a = _jttable(a, f)
}

function _jtlchar(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    b = HEAP32[40246];
    e = HEAP32[b + 20 >> 2];
    g = f + 20;
    h = HEAP32[g >> 2];
    j = h - e;
    i = f + 24;
    l = 1 == (HEAP32[i >> 2] | 0);
    k = HEAP32[f >> 2];
    m = f + k;
    n = HEAP8[m];
    a: do
        if (!(0 > (j | 0) | l ^ 1)) {
            if (0 != (e | 0)) {
                p = e;
                q = f + (k + j);
                for (k = b + HEAP32[b >> 2];;) {
                    if ((HEAP8[q] | 0) != (HEAP8[k] | 0)) break a;
                    p -= 1;
                    if (0 == (p | 0)) break;
                    else q += 1, k += 1
                }
            }
            if ((h | 0) == (e | 0)) {
                k = _jtga(a, 2, 2, 1, 0);
                if (0 == (k | 0)) return d = 0, STACKTOP = c, d;
                q = k + HEAP32[k >>
                    2];
                tempBigInt = 11873;
                HEAP8[q] = tempBigInt;
                tempBigInt >>= 8;
                HEAP8[q + 1 | 0] = tempBigInt;
                d = k;
                STACKTOP = c;
                return d
            }
            1 == (j | 0) ? (k = _jtga(a, 2, 1, 0, 0), 0 == (k | 0) ? i = 0 : (HEAP8[k + HEAP32[k >> 2]] = n, i = k)) : (k = _jtga(a, 2, j, 1, 0), 0 == (k | 0) ? i = 0 : (_memcpy(k + HEAP32[k >> 2], m, j) | 0, i = k));
            k = _jtlchar(a, i);
            if (0 == (k | 0)) return d = 0, STACKTOP = c, d;
            0 == _jtlp(a, k) << 24 >> 24 ? (q = _jtga(a, 2, 3, 1, 0), 0 == (q | 0) ? j = 0 : (p = q + HEAP32[q >> 2], HEAP8[p] = HEAP8[120568], HEAP8[p + 1 | 0] = HEAP8[120569], HEAP8[p + 2 | 0] = HEAP8[120570], j = q), d = _jtover(a, k, j)) : (q = _jtga(a, 2, 4, 1, 0), 0 == (q | 0) ? b =
                0 : (p = q + HEAP32[q >> 2], tempBigInt = 2116824673, HEAP8[p] = tempBigInt, tempBigInt >>= 8, HEAP8[p + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[p + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[p + 3 | 0] = tempBigInt, b = q), d = _jtover(a, b, k));
            STACKTOP = c;
            return d
        }
    while (0);
    if (l & (e | 0) == (h | 0) && (b = _jticap(a, _jtva2(a, f, b, -107)), 0 != (b | 0) && (j = HEAP32[b + 20 >> 2], !((e | 0) <= (j | 0))))) {
        if (1 == (j | 0)) {
            i = _jthead(a, b);
            if (0 == (i | 0)) return STACKTOP = c, 0;
            d = i
        } else d = b;
        b = _jtga(a, 2, 3, 1, 0);
        0 == (b | 0) ? g = 0 : (j = b + HEAP32[b >> 2], HEAP8[j] = HEAP8[120448], HEAP8[j + 1 | 0] = HEAP8[120449],
            HEAP8[j + 2 | 0] = HEAP8[120450], g = b);
        b = _jtlnum(a, d);
        0 == (b | 0) ? r = 0 : (j = HEAP32[a + 204552 >> 2], i = _jtlp(a, b) << 24 >> 24, r = FUNCTION_TABLE[j](a, i, b, 0));
        b = _jtover(a, g, r);
        i = _jtga(a, 2, 2, 1, 0);
        if (0 == (i | 0)) return m = 0, i = _jtfrom(a, d, f), s = _jtlchar(a, i), h = _jtover(a, m, s), t = _jtover(a, b, h), STACKTOP = c, t;
        j = i + HEAP32[i >> 2];
        tempBigInt = 32381;
        HEAP8[j] = tempBigInt;
        tempBigInt >>= 8;
        HEAP8[j + 1 | 0] = tempBigInt;
        m = i;
        i = _jtfrom(a, d, f);
        s = _jtlchar(a, i);
        h = _jtover(a, m, s);
        t = _jtover(a, b, h);
        STACKTOP = c;
        return t
    }
    7 < (h | 0) ? (r = m, u = 2, x = v = w = 1, d = 39) : 1 < (h | 0) ? (r = m,
        u = 2, w = 1, v = 1 < (HEAP32[i >> 2] | 0) | 0, x = 1, d = 39) : 0 < (h | 0) ? (r = m, u = 2, w = 1, v = 0, x = 1, d = 39) : (t = 1, s = 2, y = h);
    do
        if (39 == d) {
            for (;;) {
                d = 0;
                t = HEAP8[r];
                z = (39 == t << 24 >> 24 | 0) + u;
                A = t << 24 >> 24 == n << 24 >> 24 & v;
                t = 31 < t << 24 >> 24 ? 127 != t << 24 >> 24 | 0 : 0;
                D = t & w;
                if ((x | 0) >= (h | 0)) break;
                r += 1;
                u = z;
                w = D;
                v = A;
                x += 1;
                d = 39
            }
            0 == A << 24 >> 24 ? (y = h, s = z, t = 1) : (y = 1, s = 3 < (z | 0) ? 3 : z, t = 0);
            if (0 == D << 24 >> 24) {
                t = n & 255;
                h = _jtindexofsub(a, 0, HEAP32[40246], f);
                if (0 == (h | 0)) return d = 0, STACKTOP = c, d;
                do
                    if (l & (y | 0) < (e | 0) && !(0 != n << 24 >> 24 && (t | 0) != (e - y | 0))) {
                        s = t - 1;
                        m = y - 1 + t;
                        i = _jtga(a, 4, y, 1, 0);
                        do
                            if (0 ==
                                (i | 0)) B = 0;
                            else if ((s | 0) == (m | 0)) B = i;
                        else {
                            d = s;
                            for (r = i + HEAP32[i >> 2];;)
                                if (g = d + 1, HEAP32[r >> 2] = g, (g | 0) == (m | 0)) {
                                    B = i;
                                    break
                                } else d = g, r += 4
                        }
                        while (0);
                        if (0 != _jtequ(a, h, B) << 24 >> 24) return i = _jtga(a, 4, 1, 0, 0), 0 == (i | 0) ? B = 0 : (HEAP32[i + HEAP32[i >> 2] >> 2] = 0 != n << 24 >> 24 ? -y : y, B = i), i = _jtthorn1(a, B), m = _jtga(a, 2, 4, 1, 0), 0 == (m | 0) ? n = 0 : (s = m + HEAP32[m >> 2], tempBigInt = 778120827, HEAP8[s] = tempBigInt, tempBigInt >>= 8, HEAP8[s + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[s + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[s + 3 | 0] = tempBigInt, n = m), d = _jtover(a, i, n),
                            STACKTOP = c, d
                    }
                while (0);
                t = _jtlnum(a, h);
                if (0 == (t | 0)) return d = 0, STACKTOP = c, d;
                0 == _jtlp(a, t) << 24 >> 24 ? (i = _jtga(a, 2, 3, 1, 0), 0 == (i | 0) ? h = 0 : (m = i + HEAP32[i >> 2], HEAP8[m] = HEAP8[119848], HEAP8[m + 1 | 0] = HEAP8[119849], HEAP8[m + 2 | 0] = HEAP8[119850], h = i), d = _jtover(a, t, h)) : (i = _jtga(a, 2, 4, 1, 0), 0 == (i | 0) ? e = 0 : (m = i + HEAP32[i >> 2], tempBigInt = 2122002017, HEAP8[m] = tempBigInt, tempBigInt >>= 8, HEAP8[m + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[m + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[m + 3 | 0] = tempBigInt, e = i), d = _jtover(a, e, t));
                STACKTOP = c;
                return d
            }
        }
    while (0);
    e = _jtga(a, 2, y + s, 1, 0);
    if (0 == (e | 0)) return STACKTOP = c, 0;
    h = e;
    n = HEAP32[e >> 2];
    HEAP8[h + (s - 1 + y + n)] = 39;
    HEAP8[h + n] = 39;
    B = n + (h + 1);
    do
        if (2 == (s | 0)) _memcpy(B, m, y) | 0;
        else if (0 < (y | 0)) {
        r = m;
        u = B;
        for (l = 0;;)
            if (h = HEAP8[r], n = u + 1, HEAP8[u] = h, 39 == h << 24 >> 24 ? (HEAP8[n] = 39, h = u + 2) : h = n, n = l + 1, (n | 0) < (y | 0)) r += 1, u = h, l = n;
            else break
    } while (0);
    l = HEAP32[i >> 2];
    a: do
        if (t)
            if (0 == (l | 0)) i = HEAP32[31086];
            else {
                2 == (l | 0) && (d = 82);
                do
                    if (82 == d) {
                        i = 1 == (HEAP32[f + 32 >> 2] | 0);
                        if (1 == (HEAP32[f + 28 >> 2] | 0)) d = i ? -100 : -99;
                        else if (i) d = -100;
                        else break;
                        i = c;
                        _spellit(d, i);
                        d = 0 == (HEAP8[c + 2] | 0) ? 0 != (HEAP8[c + 1] | 0) ? 2 : 1 : 3;
                        h = _jtga(a, 2, d, 1, 0);
                        if (0 == (h | 0)) {
                            i = 0;
                            break a
                        }
                        _memcpy(h + HEAP32[h >> 2], i, d) | 0;
                        i = h;
                        break a
                    }
                while (0);
                1 >= (l | 0) ? 1 < (HEAP32[g >> 2] | 0) ? i = HEAP32[31086] : (h = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[h] = 44, i = _jtga(a, 2, 1, 1, 0), 0 == (i | 0) ? i = 0 : HEAP8[i + HEAP32[i >> 2]] = HEAP8[h]) : (i = _jtga(a, 4, l, 1, 0), 0 == (i | 0) ? i = 0 : _memcpy(i + HEAP32[i >> 2], f + 28, l << 2) | 0, i = _jtthorn1(a, i), h = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[h] = 36, u = _jtga(a, 2, 1, 1, 0), 0 == (u | 0) ? m = 0 : (HEAP8[u + HEAP32[u >> 2]] = HEAP8[h], m = u), i = _jtover(a, i,
                    m))
            } else i = _jtga(a, 4, l, 1, 0), 0 == (i | 0) ? i = 0 : _memcpy(i + HEAP32[i >> 2], f + 28, l << 2) | 0, i = _jtthorn1(a, i), u = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[u] = 36, h = _jtga(a, 2, 1, 1, 0), 0 == (h | 0) ? m = 0 : (HEAP8[h + HEAP32[h >> 2]] = HEAP8[u], m = h), i = _jtover(a, i, m);
    while (0);
    d = _jtover(a, i, e);
    STACKTOP = c;
    return d
}

function _xn1(a, f, d) {
    return _jtxdefn(a, 0, f, d)
}

function _jtlrr(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v;
    d = 0;
    for (c = f;;) {
        if (0 == (c | 0)) {
            b = 0;
            d = 149;
            break
        }
        e = c + 12;
        f = HEAP32[e >> 2];
        if (0 != (f & 805567999 | 0)) {
            d = 4;
            break
        }
        if (0 != (f & 33554432 | 0)) {
            d = 6;
            break
        }
        h = g = c;
        j = HEAP32[h >> 2];
        i = HEAP32[j + (g + 16) >> 2];
        l = HEAP32[j + (g + 20) >> 2];
        if (0 == (l & 2097152 | 0)) {
            d = 9;
            break
        } else c = i
    }
    if (4 == d) return b = _jtlnoun(a, c);
    if (6 == d) {
        f = HEAP32[c >> 2];
        k = HEAP32[c + 20 >> 2];
        b = _jtga(a, 2, k, 1, 0);
        if (0 == (b | 0)) return 0;
        _memcpy(b + HEAP32[b >> 2], f + (c + 14), k) | 0;
        return b
    }
    if (9 == d) {
        b = HEAP32[j + (g + 8) >> 2];
        k = HEAP32[j +
            (g + 12) >> 2];
        f = HEAP8[j + (g + 40)];
        j = 0 != (i | 0);
        m = 58 == f << 24 >> 24;
        n = (0 != (k | 0) | 0) + (0 != (b | 0) | 0) + (51 == f << 24 >> 24 | 0) + (j & m ? l >>> 20 & 1 : 0);
        if (0 == (n | 0)) return b = _jtlsymb(a, c);
        if (!(126 != f << 24 >> 24 | 0 == (b | 0)) && 0 != (HEAP32[b + 12 >> 2] & 33554432 | 0)) {
            g = HEAP32[b >> 2];
            p = HEAP32[b + 20 >> 2];
            q = _jtga(a, 2, p, 1, 0);
            if (0 == (q | 0)) return 0;
            _memcpy(q + HEAP32[q >> 2], g + (b + 14), p) | 0;
            return q
        }
        do
            if (!(0 != (l & 1048576 | 0) | j ^ 1) && 0 != (HEAP32[i + 12 >> 2] & 32 | 0) & m) {
                f = _jtunparsem(a, HEAP32[31058], c);
                if (0 == (f | 0)) return b = 0;
                q = HEAP32[f + 20 >> 2];
                p = f + HEAP32[f >> 2];
                f = _jtlrr(a, HEAP32[g +
                    (HEAP32[h >> 2] + 8) >> 2]);
                if (0 == (f | 0)) return b = 0;
                a: do
                    if (2 > (q | 0)) {
                        if (0 == (q | 0)) return g = _jtga(a, 2, 5, 1, 0), 0 == (g | 0) ? g = 0 : (e = g + HEAP32[g >> 2], HEAP8[e] = HEAP8[121416], HEAP8[e + 1 | 0] = HEAP8[121417], HEAP8[e + 2 | 0] = HEAP8[121418], HEAP8[e + 3 | 0] = HEAP8[121419], HEAP8[e + 4 | 0] = HEAP8[121420]), b = _jtover(a, f, g)
                    } else {
                        do
                            if (2 == (q | 0))
                                if (g = HEAP32[p >> 2], 1 != (HEAP32[g + 20 >> 2] | 0)) g = h = 0;
                                else if (58 == (HEAP8[g + HEAP32[g >> 2]] | 0)) break a;
                        else g = h = 0;
                        else g = h = 0;
                        while (0);
                        for (;;)
                            if (r = HEAP32[HEAP32[p + (g << 2) >> 2] + 20 >> 2] + h, g += 1, (g | 0) < (q | 0)) h = r;
                            else break;
                        g = _jtga(a, 2, r + (q + 2), 1, 0);
                        if (0 == (g | 0)) return b = 0;
                        e = g;
                        c = HEAP32[g >> 2];
                        g = e + c;
                        HEAP8[g] = 10;
                        b = g;
                        h = 0;
                        for (d = c + (e + 1);;)
                            if (e = HEAP32[p + (h << 2) >> 2], s = HEAP32[e + 20 >> 2], _memcpy(d, e + HEAP32[e >> 2], s) | 0, e = s + (b + 1), c = h + 1, t = s + (b + 2), HEAP8[e] = 10, (c | 0) < (q | 0)) b = e, h = c, d = t;
                            else break;
                        HEAP8[t] = 41;
                        d = s + (b + 3) - g;
                        h = _jtga(a, 2, d, 1, 0);
                        if (0 == (h | 0)) return b = 0;
                        _memcpy(h + HEAP32[h >> 2], g, d) | 0;
                        d = a + 204580;
                        c = HEAP32[d >> 2];
                        j = 0 == (c | 0) ? h : _jtover(a, c, h);
                        HEAP32[d >> 2] = j;
                        d = _jtga(a, 2, 4, 1, 0);
                        0 == (d | 0) ? u = 0 : (h = d + HEAP32[d >> 2], tempBigInt = 807418400, HEAP8[h] = tempBigInt,
                            tempBigInt >>= 8, HEAP8[h + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[h + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[h + 3 | 0] = tempBigInt, u = d);
                        return b = _jtover(a, f, u)
                    }
                while (0);
                d = 2 == (q | 0);
                h = _jtlrr(a, HEAP32[p + ((d & 1) << 2) >> 2]);
                d ? (d = _jtga(a, 2, 5, 1, 0), 0 == (d | 0) ? t = 0 : (c = d + HEAP32[d >> 2], HEAP8[c] = HEAP8[119840], HEAP8[c + 1 | 0] = HEAP8[119841], HEAP8[c + 2 | 0] = HEAP8[119842], HEAP8[c + 3 | 0] = HEAP8[119843], HEAP8[c + 4 | 0] = HEAP8[119844], t = d), r = _jtover(a, t, h)) : r = h;
                h = _jtga(a, 2, 3, 1, 0);
                0 == (h | 0) ? s = 0 : (d = h + HEAP32[h >> 2], HEAP8[d] = HEAP8[118920], HEAP8[d + 1 | 0] = HEAP8[118921],
                    HEAP8[d + 2 | 0] = HEAP8[118922], s = h);
                h = _jtover(a, f, s);
                0 == (r | 0) ? m = 0 : (d = HEAP32[a + 204552 >> 2], c = _jtlp(a, r) << 24 >> 24, m = FUNCTION_TABLE[d](a, c, r, 0));
                return b = _jtover(a, h, m)
            }
        while (0);
        m = _jtga(a, 32, n, 1, 0);
        if (0 == (m | 0)) return 0;
        s = r = m;
        t = HEAP32[s >> 2];
        u = r + t;
        if (2 < (n | 0) && (j = _jtlrr(a, i), HEAP32[t + (r + 8) >> 2] = j, 0 == (j | 0)) || 1 < (n | 0) && (0 == (l & 512 | 0) ? i = _jtlrr(a, k) : (i = HEAP32[a + 204584 >> 2], j = _jtevery(a, k, 0, 1906), i = FUNCTION_TABLE[i](a, j, 0)), HEAP32[t + (r + 4) >> 2] = i, 0 == (i | 0)) || 0 < (n | 0) && (0 == (l & 256 | 0) ? k = _jtlrr(a, b) : (i = HEAP32[a + 204584 >> 2], t =
                _jtevery(a, b, 0, 1906), k = FUNCTION_TABLE[i](a, t, 0)), HEAP32[u >> 2] = k, 0 == (k | 0))) return 0;
        k = HEAP32[m + 20 >> 2];
        u = HEAP32[s >> 2];
        w = 0 == (HEAP32[m + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[m + 4 >> 2] & 14 | 0) | 0;
        m = c & -w;
        w = 262144 == (HEAP32[e >> 2] | 0);
        e = HEAP32[h >> 2];
        h = HEAP8[e + (g + 40)];
        s = h << 24 >> 24;
        t = 58 == h << 24 >> 24 ? HEAP32[e + (g + 20) >> 2] >>> 20 & 1 : 0;
        0 < (k | 0) ? (b = 0 == (m | 0), l = HEAP32[r + u >> 2], j = b ? l : l + m, l = HEAP32[e + (g + 8) >> 2], 0 == (l | 0) ? d = 71 : 0 == (HEAP32[l + 12 >> 2] & 1835008 | 0) ? d = 71 : 3 > (HEAP8[l + (HEAP32[l >> 2] + 40)] | 0) - 50 >>> 0 ? q = 1 : d = 71, 71 == d && (q = 51 != h << 24 >> 24 ? 0 : 0 == (HEAP32[l +
            12 >> 2] & 805567999 | 0) ? 0 : 0 != _jtlp(a, j) << 24 >> 24 | 0), 1 >= (k | 0) ? (u = r = 0, l = j, w = q, b = m = 0) : (l = HEAP32[u + (r + 4) >> 2], n = b ? l : l + m, l = HEAP32[e + (g + 12) >> 2], i = 0 == (l | 0) ? 0 : 0 == (HEAP32[l + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[l + (HEAP32[l >> 2] + 40)] | 0, i = w ? 50 == (i | 0) ? 1 : 51 == (i | 0) | 0 : _jtlp(a, n) << 24 >> 24, 2 >= (k | 0) ? u = r = 0 : (l = HEAP32[u + (r + 8) >> 2], u = b ? l : l + m, l = HEAP32[e + (g + 16) >> 2], v = 0 == (l | 0) ? 0 : 0 == (HEAP32[l + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[l + (HEAP32[l >> 2] + 40)] | 0, w & 0 == t << 24 >> 24 ? (r = u, u = 50 == (v | 0) | 0) : (r = u, u = _jtlp(a, u) << 24 >> 24)), l = j, w = q, m = i, b = n)) : b = m = w = l = u = r = 0;
        j = 0 == t <<
            24 >> 24 ? s : 2 == (k | 0) ? 50 : 51;
        if (52 == (j | 0) | 50 == (j | 0)) {
            s = _jtga(a, 32, 3, 1, 0);
            if (0 == (s | 0)) return 0;
            n = s;
            i = HEAP32[s >> 2];
            q = n + i;
            j = a + 204552;
            u = HEAP32[j >> 2];
            0 == (w | 0) ? 0 == (l | 0) | 0 == (b | 0) ? g = 0 : (v = HEAP8[l + (HEAP32[l >> 2] - 1 + HEAP32[l + 20 >> 2])], g = 120 != v << 24 >> 24 && 5 != (HEAP8[113216 + (v << 24 >> 24)] | 0) ? 0 : 5 == (HEAP8[113216 + (HEAP8[b + HEAP32[b >> 2]] | 0)] | 0) | 0) : g = 1;
            v = FUNCTION_TABLE[u](a, g, l, 0);
            HEAP32[q >> 2] = v;
            q = FUNCTION_TABLE[HEAP32[j >> 2]](a, 0 == (m | 0) ? t & 255 : 1, b, 0);
            HEAP32[i + (n + 8) >> 2] = q;
            (j = 0 == (q | 0)) ? d = 104: 32 == (HEAP8[q + HEAP32[q >> 2]] | 0) ? p = 0 : d = 104;
            a: do
                if (104 == d)
                    if (52 != h << 24 >> 24) p = 1;
                    else {
                        do
                            if (!(0 == (v | 0) | j) && (g = HEAP8[113216 + (HEAP8[v + (HEAP32[v >> 2] - 1 + HEAP32[v + 20 >> 2])] | 0)], u = HEAP8[113216 + (HEAP8[q + HEAP32[q >> 2]] | 0)], 5 == g << 24 >> 24 | 2 == g << 24 >> 24 && 5 == u << 24 >> 24 | 2 == u << 24 >> 24)) {
                                p = 1;
                                break a
                            }
                        while (0);
                        p = 0 == _jtlp(a, v) << 24 >> 24 ? 0 : 0 != _jtlp(a, q) << 24 >> 24 | 0
                    }
            while (0);
            q = _jtga(a, 2, p, 1, 0);
            0 == (q | 0) ? g = 0 : (_memcpy(q + HEAP32[q >> 2], 117976, p) | 0, g = q);
            HEAP32[i + (n + 4) >> 2] = g;
            if (0 != (HEAP8[a + 204545] | 0)) return 0;
            b = _jtraze(a, s)
        } else if (51 == (j | 0)) {
            j = _jtga(a, 32, 5, 1, 0);
            if (0 == (j | 0)) return 0;
            s = j;
            g = HEAP32[j >> 2];
            n = s + g;
            i = a + 204552;
            q = HEAP32[i >> 2];
            0 == (w | 0) ? 0 == (l | 0) | 0 == (b | 0) ? p = 0 : (p = HEAP8[l + (HEAP32[l >> 2] - 1 + HEAP32[l + 20 >> 2])], p = 120 != p << 24 >> 24 && 5 != (HEAP8[113216 + (p << 24 >> 24)] | 0) ? 0 : 5 == (HEAP8[113216 + (HEAP8[b + HEAP32[b >> 2]] | 0)] | 0) | 0) : p = 1;
            p = FUNCTION_TABLE[q](a, p, l, 0);
            HEAP32[n >> 2] = p;
            if (0 == (p | 0)) return 0;
            p = HEAP32[i >> 2];
            0 == (m | 0) ? (0 == (b | 0) | 0 == (r | 0) ? h = 1 : (m = HEAP8[b + (HEAP32[b >> 2] - 1 + HEAP32[b + 20 >> 2])], h = 120 != m << 24 >> 24 && 5 != (HEAP8[113216 + (m << 24 >> 24)] | 0) ? 1 : 5 != (HEAP8[113216 + (HEAP8[r + HEAP32[r >> 2]] | 0)] | 0)), h = h ? t & 255 :
                1) : h = 1;
            t = FUNCTION_TABLE[p](a, h, b, 0);
            HEAP32[g + (s + 8) >> 2] = t;
            if (0 == (t | 0)) return 0;
            h = 32 != (HEAP8[t + HEAP32[t >> 2]] | 0) | 0;
            t = _jtga(a, 2, h, 1, 0);
            if (0 == (t | 0)) return HEAP32[g + (s + 4) >> 2] = 0;
            _memcpy(t + HEAP32[t >> 2], 117976, h) | 0;
            HEAP32[g + (s + 4) >> 2] = t;
            t = FUNCTION_TABLE[HEAP32[i >> 2]](a, u, r, 0);
            HEAP32[g + (s + 16) >> 2] = t;
            if (0 == (t | 0)) return 0;
            r = 32 != (HEAP8[t + HEAP32[t >> 2]] | 0) | 0;
            t = _jtga(a, 2, r, 1, 0);
            0 == (t | 0) ? b = HEAP32[g + (s + 12) >> 2] = 0 : (_memcpy(t + HEAP32[t >> 2], 117976, r) | 0, HEAP32[g + (s + 12) >> 2] = t, b = _jtraze(a, j))
        } else {
            j = a + 204552;
            t = HEAP32[j >> 2];
            p = 0 == (w | 0) ? 0 == (HEAP32[HEAP32[e + (g + 8) >> 2] + 12 >> 2] & 805567999 | 0) ? 0 : 0 != (HEAP32[e + (g + 20) >> 2] & 256 | 0) ? 0 : 0 != _jtlp(a, l) << 24 >> 24 | 0 : 1;
            g = FUNCTION_TABLE[t](a, p, l, 0);
            l = _jtlsymb(a, c);
            0 == (g | 0) | 0 == (l | 0) ? p = l : (c = HEAP8[113216 + (HEAP8[g + (HEAP32[g >> 2] - 1 + HEAP32[g + 20 >> 2])] | 0)], p = HEAP8[113216 + (HEAP8[l + HEAP32[l >> 2]] | 0)], p = 5 == c << 24 >> 24 | 2 == c << 24 >> 24 ? 5 == p << 24 >> 24 | 2 == p << 24 >> 24 ? _jtover(a, HEAP32[38930], l) : l : l);
            l = _jtover(a, g, p);
            if (1 == (k | 0)) return l;
            0 == (b | 0) ? g = 0 : (k = HEAP32[j >> 2], p = _jtlp(a, b) << 24 >> 24, g = FUNCTION_TABLE[k](a, p, b, 0), 0 == (l |
                0) | 0 == (g | 0) || (p = HEAP8[113216 + (HEAP8[l + (HEAP32[l >> 2] - 1 + HEAP32[l + 20 >> 2])] | 0)], k = HEAP8[113216 + (HEAP8[g + HEAP32[g >> 2]] | 0)], g = 5 == p << 24 >> 24 | 2 == p << 24 >> 24 ? 5 == k << 24 >> 24 | 2 == k << 24 >> 24 ? _jtover(a, HEAP32[38930], g) : g : g));
            b = _jtover(a, l, g)
        }
        return b
    }
    if (149 == d) return b
}

function _jtlsymb(a, f) {
    var d, c, b, e, g, h, j, i;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    b = c;
    e = HEAP32[f >> 2];
    if (0 == (HEAP32[e + (f + 20) >> 2] & 16777216 | 0)) {
        e = _jtspella(a, f);
        if (0 == (e | 0)) return STACKTOP = c, 0;
        d = e
    } else {
        g = e = HEAP32[e + (f + 16) >> 2];
        h = HEAP32[e >> 2];
        e = b;
        HEAP8[e] = 32;
        HEAP8[b + 1] = 40;
        j = _sprintf(b + 2, 120296, (d = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[d >> 2] = HEAP32[g + h >> 2], d));
        STACKTOP = d;
        _spellit(-93, j + (b + 2));
        i = j + 4;
        j = _sprintf(b + i, 120296, (d = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[d >> 2] = HEAP32[h + (g + 4) >> 2], d));
        STACKTOP = d;
        g = j +
            i;
        HEAP8[b + g] = 41;
        i = g + 1;
        g = _jtga(a, 2, i, 1, 0);
        if (0 == (g | 0)) return STACKTOP = c, 0;
        _memcpy(g + HEAP32[g >> 2], e, i) | 0;
        d = g
    }
    b = HEAP8[d + HEAP32[d >> 2]];
    if (!(46 == b << 24 >> 24 | 58 == b << 24 >> 24)) return STACKTOP = c, d;
    b = _jtover(a, HEAP32[38930], d);
    STACKTOP = c;
    return b
}

function _jtfolk2(a, f, d, c) {
    var b, e, g, h, j, i;
    b = c;
    e = HEAP32[c >> 2];
    c = HEAP32[e + (b + 8) >> 2];
    g = 0 == (c | 0) ? 0 : HEAP32[c + (HEAP32[c >> 2] + 4) >> 2];
    h = HEAP32[e + (b + 12) >> 2];
    j = 0 == (h | 0) ? 0 : HEAP32[h + (HEAP32[h >> 2] + 4) >> 2];
    i = HEAP32[e + (b + 16) >> 2];
    e = 0 == (i | 0) ? 0 : HEAP32[i + (HEAP32[i >> 2] + 4) >> 2];
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    e = FUNCTION_TABLE[e](a, f, d, i);
    i = FUNCTION_TABLE[g](a, f, d, c);
    c = FUNCTION_TABLE[j](a, i, e, h);
    if (0 == (c | 0)) return _jttpop(a, b), a = _jttpush(a, c);
    _jttraverse(a, c, 654);
    h = c + 16;
    HEAP32[h >> 2] += 1;
    _jttpop(a, b);
    return a = _jttpush(a,
        c)
}


function _jtright2(a, f, d) {
    return _jtlr2(a, 0, f, d)
}


function _jtnfb(a, f) {
    var d, c, b, e;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    if (0 == (HEAP32[f + 12 >> 2] & 32 | 0)) return b = HEAP32[a + 4408 >> 2], e = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = d, 0;
    if (0 != (HEAP32[f + 24 >> 2] | 0)) return e = HEAP32[a + 4408 >> 2], b = HEAP32[e + (HEAP32[e >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), STACKTOP = d, 0;
    b = _jtope(a, f);
    if (0 == (b | 0)) return STACKTOP = d, 0;
    if (2 <= (HEAP32[b + 24 >> 2] | 0)) return f = HEAP32[a + 4408 >> 2], e = HEAP32[f +
        (HEAP32[f >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = d, 0;
    0 == (HEAP32[b + 12 >> 2] & 2 | 0) ? (e = a + 205336, f = HEAP32[e >> 2], HEAP32[e >> 2] = 0, b = _jtccvt(a, 2, b, c), HEAP32[e >> 2] = f, 0 == b << 24 >> 24 ? (b = HEAP32[a + 4408 >> 2], f = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), e = 0) : e = HEAP32[c >> 2]) : e = b;
    if (0 == (e | 0)) return STACKTOP = d, 0;
    b = HEAP32[e + 20 >> 2];
    c = e + HEAP32[e >> 2];
    e = 0 == _jtvnm(a, b, c) << 24 >> 24;
    f = _jtnfs(a, b, c);
    if (!e) return STACKTOP = d, f;
    HEAP32[a + 1168 >> 2] = f;
    f = HEAP32[a + 4408 >> 2];
    e =
        HEAP32[f + (HEAP32[f >> 2] + 16) >> 2];
    _jtjsigstr(a, 4, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]);
    STACKTOP = d;
    return 0
}
function _free(a) {
    var f, d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B;
    if (0 != (a | 0)) {
        d = f = a - 8;
        c = HEAP32[40260];
        f >>> 0 < c >>> 0 && _abort();
        b = HEAP32[a - 4 >> 2];
        e = b & 3;
        1 == (e | 0) && _abort();
        g = b & -8;
        h = a + (g - 8);
        a: do
            if (0 == (b & 1 | 0)) {
                j = HEAP32[f >> 2];
                if (0 == (e | 0)) return;
                i = -8 - j;
                k = l = a + i;
                m = j + g;
                l >>> 0 < c >>> 0 && _abort();
                if ((k | 0) == (HEAP32[40261] | 0)) {
                    n = a + (g - 4);
                    if (3 != (HEAP32[n >> 2] & 3 | 0)) {
                        p = k;
                        q = m;
                        break
                    }
                    HEAP32[40258] = m;
                    HEAP32[n >> 2] &= -2;
                    HEAP32[i + (a + 4) >> 2] = m | 1;
                    HEAP32[h >> 2] = m;
                    return
                }
                n = j >>> 3;
                if (256 > j >>> 0) j = HEAP32[i + (a + 8) >> 2], p = HEAP32[i +
                    (a + 12) >> 2], r = 161064 + (n << 1 << 2), (j | 0) != (r | 0) && (j >>> 0 < c >>> 0 && _abort(), (HEAP32[j + 12 >> 2] | 0) != (k | 0) && _abort()), (p | 0) == (j | 0) ? HEAP32[40256] &= ~(1 << n) : ((p | 0) == (r | 0) ? s = p + 8 : (p >>> 0 < c >>> 0 && _abort(), t = p + 8, (HEAP32[t >> 2] | 0) == (k | 0) ? s = t : _abort()), HEAP32[j + 12 >> 2] = p, HEAP32[s >> 2] = j), p = k, q = m;
                else {
                    r = l;
                    n = HEAP32[i + (a + 24) >> 2];
                    t = HEAP32[i + (a + 12) >> 2];
                    do
                        if ((t | 0) == (r | 0)) {
                            j = i + (a + 20);
                            l = HEAP32[j >> 2];
                            if (0 == (l | 0)) {
                                if (u = i + (a + 16), w = HEAP32[u >> 2], 0 == (w | 0)) {
                                    v = 0;
                                    break
                                }
                            } else w = l, u = j;
                            for (;;)
                                if (j = w + 20, l = HEAP32[j >> 2], 0 != (l | 0)) w = l, u = j;
                                else if (j =
                                w + 16, l = HEAP32[j >> 2], 0 == (l | 0)) break;
                            else w = l, u = j;
                            u >>> 0 < c >>> 0 ? _abort() : (HEAP32[u >> 2] = 0, v = w)
                        } else j = HEAP32[i + (a + 8) >> 2], j >>> 0 < c >>> 0 && _abort(), l = j + 12, (HEAP32[l >> 2] | 0) != (r | 0) && _abort(), u = t + 8, (HEAP32[u >> 2] | 0) == (r | 0) ? (HEAP32[l >> 2] = t, HEAP32[u >> 2] = j, v = t) : _abort();
                    while (0);
                    if (0 == (n | 0)) p = k, q = m;
                    else {
                        t = HEAP32[i + (a + 28) >> 2];
                        l = 161328 + (t << 2);
                        do
                            if ((r | 0) == (HEAP32[l >> 2] | 0)) {
                                if (HEAP32[l >> 2] = v, 0 == (v | 0)) {
                                    HEAP32[40257] &= ~(1 << t);
                                    p = k;
                                    q = m;
                                    break a
                                }
                            } else if (n >>> 0 < HEAP32[40260] >>> 0 && _abort(), j = n + 16, (HEAP32[j >> 2] | 0) == (r | 0) ? HEAP32[j >>
                                2] = v : HEAP32[n + 20 >> 2] = v, 0 == (v | 0)) {
                            p = k;
                            q = m;
                            break a
                        } while (0);
                        v >>> 0 < HEAP32[40260] >>> 0 && _abort();
                        HEAP32[v + 24 >> 2] = n;
                        r = HEAP32[i + (a + 16) >> 2];
                        0 != (r | 0) && (r >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[v + 16 >> 2] = r, HEAP32[r + 24 >> 2] = v));
                        r = HEAP32[i + (a + 20) >> 2];
                        0 == (r | 0) ? (p = k, q = m) : r >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[v + 20 >> 2] = r, HEAP32[r + 24 >> 2] = v, p = k, q = m)
                    }
                }
            } else p = d, q = g;
        while (0);
        d = p;
        d >>> 0 >= h >>> 0 && _abort();
        v = a + (g - 4);
        c = HEAP32[v >> 2];
        0 == (c & 1 | 0) && _abort();
        do
            if (0 == (c & 2 | 0)) {
                if ((h | 0) == (HEAP32[40262] | 0)) {
                    w = HEAP32[40259] + q;
                    HEAP32[40259] =
                        w;
                    HEAP32[40262] = p;
                    HEAP32[p + 4 >> 2] = w | 1;
                    if ((p | 0) != (HEAP32[40261] | 0)) return;
                    HEAP32[40261] = 0;
                    HEAP32[40258] = 0;
                    return
                }
                if ((h | 0) == (HEAP32[40261] | 0)) {
                    w = HEAP32[40258] + q;
                    HEAP32[40258] = w;
                    HEAP32[40261] = p;
                    HEAP32[p + 4 >> 2] = w | 1;
                    HEAP32[d + w >> 2] = w;
                    return
                }
                w = (c & -8) + q;
                u = c >>> 3;
                a: do
                    if (256 > c >>> 0) s = HEAP32[a + g >> 2], e = HEAP32[a + (g | 4) >> 2], f = 161064 + (u << 1 << 2), (s | 0) != (f | 0) && (s >>> 0 < HEAP32[40260] >>> 0 && _abort(), (HEAP32[s + 12 >> 2] | 0) != (h | 0) && _abort()), (e | 0) == (s | 0) ? HEAP32[40256] &= ~(1 << u) : ((e | 0) == (f | 0) ? x = e + 8 : (e >>> 0 < HEAP32[40260] >>> 0 && _abort(),
                        b = e + 8, (HEAP32[b >> 2] | 0) == (h | 0) ? x = b : _abort()), HEAP32[s + 12 >> 2] = e, HEAP32[x >> 2] = s);
                    else {
                        f = h;
                        b = HEAP32[g + (a + 16) >> 2];
                        r = HEAP32[a + (g | 4) >> 2];
                        do
                            if ((r | 0) == (f | 0)) {
                                n = g + (a + 12);
                                t = HEAP32[n >> 2];
                                if (0 == (t | 0))
                                    if (l = g + (a + 8), j = HEAP32[l >> 2], 0 == (j | 0)) {
                                        y = 0;
                                        break
                                    } else e = j, k = l;
                                else e = t, k = n;
                                for (;;)
                                    if (n = e + 20, t = HEAP32[n >> 2], 0 != (t | 0)) e = t, k = n;
                                    else if (n = e + 16, t = HEAP32[n >> 2], 0 == (t | 0)) break;
                                else e = t, k = n;
                                k >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[k >> 2] = 0, y = e)
                            } else n = HEAP32[a + g >> 2], n >>> 0 < HEAP32[40260] >>> 0 && _abort(), t = n + 12, (HEAP32[t >> 2] | 0) !=
                                (f | 0) && _abort(), l = r + 8, (HEAP32[l >> 2] | 0) == (f | 0) ? (HEAP32[t >> 2] = r, HEAP32[l >> 2] = n, y = r) : _abort();
                        while (0);
                        if (0 != (b | 0)) {
                            r = HEAP32[g + (a + 20) >> 2];
                            s = 161328 + (r << 2);
                            do
                                if ((f | 0) == (HEAP32[s >> 2] | 0)) {
                                    if (HEAP32[s >> 2] = y, 0 == (y | 0)) {
                                        HEAP32[40257] &= ~(1 << r);
                                        break a
                                    }
                                } else if (b >>> 0 < HEAP32[40260] >>> 0 && _abort(), e = b + 16, (HEAP32[e >> 2] | 0) == (f | 0) ? HEAP32[e >> 2] = y : HEAP32[b + 20 >> 2] = y, 0 == (y | 0)) break a; while (0);
                            y >>> 0 < HEAP32[40260] >>> 0 && _abort();
                            HEAP32[y + 24 >> 2] = b;
                            f = HEAP32[g + (a + 8) >> 2];
                            0 != (f | 0) && (f >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[y +
                                16 >> 2] = f, HEAP32[f + 24 >> 2] = y));
                            f = HEAP32[g + (a + 12) >> 2];
                            0 != (f | 0) && (f >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[y + 20 >> 2] = f, HEAP32[f + 24 >> 2] = y))
                        }
                    }
                while (0);
                HEAP32[p + 4 >> 2] = w | 1;
                HEAP32[d + w >> 2] = w;
                if ((p | 0) != (HEAP32[40261] | 0)) f = w;
                else {
                    HEAP32[40258] = w;
                    return
                }
            } else HEAP32[v >> 2] = c & -2, HEAP32[p + 4 >> 2] = q | 1, f = HEAP32[d + q >> 2] = q;
        while (0);
        q = f >>> 3;
        if (256 > f >>> 0) d = q << 1, c = 161064 + (d << 2), v = HEAP32[40256], y = 1 << q, 0 == (v & y | 0) ? (HEAP32[40256] = v | y, z = c, A = 161064 + (d + 2 << 2)) : (q = 161064 + (d + 2 << 2), a = HEAP32[q >> 2], a >>> 0 >= HEAP32[40260] >>> 0 ? (z = a, A = q) : _abort()),
            HEAP32[A >> 2] = p, HEAP32[z + 12 >> 2] = p, HEAP32[p + 8 >> 2] = z, HEAP32[p + 12 >> 2] = c;
        else {
            c = p;
            z = f >>> 8;
            0 == (z | 0) ? g = 0 : 16777215 < f >>> 0 ? g = 31 : (A = z + 1048320 >>> 16 & 8, d = z << A, y = d + 520192 >>> 16 & 4, v = d << y, d = v + 245760 >>> 16 & 2, q = 14 - (y | A | d) + (v << d >>> 15), g = f >>> (q + 7 >>> 0) & 1 | q << 1);
            z = 161328 + (g << 2);
            HEAP32[p + 28 >> 2] = g;
            HEAP32[p + 20 >> 2] = 0;
            HEAP32[p + 16 >> 2] = 0;
            q = HEAP32[40257];
            d = 1 << g;
            a: do
                if (0 == (q & d | 0)) HEAP32[40257] = q | d, HEAP32[z >> 2] = c, HEAP32[p + 24 >> 2] = z, HEAP32[p + 12 >> 2] = p, HEAP32[p + 8 >> 2] = p;
                else {
                    v = HEAP32[z >> 2];
                    h = 31 == (g | 0) ? 0 : 25 - (g >>> 1);
                    b: do
                        if ((HEAP32[v + 4 >>
                                2] & -8 | 0) == (f | 0)) D = v;
                        else {
                            A = v;
                            for (y = f << h;;) {
                                B = A + 16 + (y >>> 31 << 2);
                                a = HEAP32[B >> 2];
                                if (0 == (a | 0)) break;
                                if ((HEAP32[a + 4 >> 2] & -8 | 0) == (f | 0)) {
                                    D = a;
                                    break b
                                } else A = a, y <<= 1
                            }
                            if (B >>> 0 < HEAP32[40260] >>> 0) _abort();
                            else {
                                HEAP32[B >> 2] = c;
                                HEAP32[p + 24 >> 2] = A;
                                HEAP32[p + 12 >> 2] = p;
                                HEAP32[p + 8 >> 2] = p;
                                break a
                            }
                        }
                    while (0);
                    v = D + 8;
                    w = HEAP32[v >> 2];
                    y = HEAP32[40260];
                    D >>> 0 < y >>> 0 && _abort();
                    w >>> 0 < y >>> 0 ? _abort() : (HEAP32[w + 12 >> 2] = c, HEAP32[v >> 2] = c, HEAP32[p + 8 >> 2] = w, HEAP32[p + 12 >> 2] = D, HEAP32[p + 24 >> 2] = 0)
                }
            while (0);
            p = HEAP32[40264] - 1;
            HEAP32[40264] = p;
            if (0 == (p |
                    0)) {
                for (a = 161480; !(p = HEAP32[a >> 2], 0 == (p | 0));) a = p + 8;
                HEAP32[40264] = -1
            }
        }
    }
}
function _i64Add(a, f, d, c) {
    a |= 0;
    d = a + (d | 0) >>> 0;
    return tempRet0 = (f | 0) + (c | 0) + (d >>> 0 < a >>> 0 | 0) >>> 0, d | 0
}
function _jdo(a, f) {
    var d, c, b, e, g, h;
    d = 0;
    c = a + 204545;
    HEAP8[c] = 0;
    HEAP32[a + 4400 >> 2] = 0;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    HEAP8[HEAP32[a >> 2]] = 0;
    e = _jtinpl(a, 0, _strlen(f), f);
    f = a + 204540;
    g = a + 204544;
    a: do
        if (0 != (HEAP8[g] | 0))
            for (;;) {
                h = HEAP32[f >> 2];
                if (0 == (h | 0)) break a;
                HEAP8[g] = 0;
                _jtimmex(a, h);
                HEAP8[c] = 0;
                _jttpop(a, b);
                if (0 == (HEAP8[g] | 0)) break
            }
        while (0);
    0 == (HEAP8[c] | 0) ? (_jtimmex(a, e), e = HEAP8[c], HEAP8[c] = 0, 0 != e << 24 >> 24 && (d = 7)) : (HEAP8[c] = 0, d = 7);
    7 == d && (e = a + 1176, 2 == (HEAP32[e >> 2] | 0) && (h = HEAP32[a + 1216 >> 2], 0 != (h | 0) &&
        (HEAP32[e >> 2] = 0, _jtimmex(a, h), HEAP8[c] = 0)));
    if (0 == (HEAP8[g] | 0)) _jtshowerr(a), _jtspfree(a), _jttpop(a, b);
    else {
        for (;;) {
            h = HEAP32[f >> 2];
            if (0 == (h | 0)) {
                d = 13;
                break
            }
            HEAP8[g] = 0;
            _jtimmex(a, h);
            HEAP8[c] = 0;
            _jttpop(a, b);
            if (0 == (HEAP8[g] | 0)) {
                d = 13;
                break
            }
        }
        13 == d && (_jtshowerr(a), _jtspfree(a), _jttpop(a, b))
    }
}
function _jtadv(a, f, d, c) {
    var b, e;
    b = HEAP32[c + (d << 2) >> 2];
    d = a + 205596;
    if (0 == (b | 0)) return 0;
    e = HEAP32[c + (f << 2) >> 2];
    f = HEAP32[d >> 2];
    c = HEAP32[b + HEAP32[b >> 2] >> 2];
    HEAP32[d >> 2] = b;
    a = getFUNCTION_TABLE(c)(a, e, b);
    HEAP32[d >> 2] = f;
    return a
}

function _jtsldot(a, f) {
    var d, c, b, e, g, h;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 12 >> 2];
    if (0 == (d & 805567999 | 0)) c = HEAP32[f >> 2], b = f + c, 0 == (d & 1835008 | 0) ? (e = c = 0, g = 1148, h = 1984) : (d = HEAP8[c + (f + 40)] | 0, 35 == (d | 0) ? (e = c = 0, g = 1148, h = 3226) : 47 == (d | 0) ? (b = d = HEAP32[c + (f + 8) >> 2], c = HEAP32[d >> 2], d = HEAP8[c + (b + 40)], -67 == d << 24 >> 24 ? (b = HEAP32[c + (b + 8) >> 2], 0 == (HEAP32[b + 12 >> 2] & 4 | 0) ? b = -67 : 0 != (HEAP32[b + 24 >> 2] | 0) ? b = -67 : (b = HEAP32[b + HEAP32[b >> 2] >> 2], b = 16 > b - 16 >>> 0 ? b & 255 : -67)) : b = d, 0 == (HEAP8[56 + (b & 255)] | 0) | 0 == b << 24 >> 24 ? (e = c = 0, g = 1148) : (e = c = 0, g = 1644),
        h = 546) : 60 == (d | 0) ? (e = c = 0, g = 1148, h = 2442) : 51 == (d | 0) ? 1334 == (HEAP32[b >> 2] | 0) ? (e = c = 0, g = 1148, h = 1824) : (d = HEAP32[c + (f + 8) >> 2], b = 0 == (d | 0) ? 0 : 0 == (HEAP32[d + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[d + (HEAP32[d >> 2] + 40)] | 0, d = HEAP32[c + (f + 12) >> 2], e = 0 == (d | 0) ? 0 : 0 == (HEAP32[d + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[d + (HEAP32[d >> 2] + 40)] | 0, d = HEAP32[c + (f + 16) >> 2], d = 0 == (d | 0) ? 0 : 0 == (HEAP32[d + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[d + (HEAP32[d >> 2] + 40)] | 0, 44 != (e | 0) ? (e = c = 0, g = 1148, h = 1984) : !(-84 == (b | 0) & 35 == (d | 0)) && !(35 == (b | 0) & -84 == (d | 0)) ? (e = c = 0, g = 1148, h = 1984) : (e = c = 0, g = 1148,
        h = 1574)) : (e = c = 0, g = 1148, h = 1984));
    else {
        d = _jtfxeachv(a, 1, f);
        if (0 == (d | 0)) return 0;
        c = 256;
        e = d;
        g = 1148;
        h = 1984
    }
    if (0 != (HEAP8[a + 204545] | 0)) return 0;
    d = _jtga(a, 262144, 1, 0, 0);
    if (0 == (d | 0)) return 0;
    a = d;
    b = HEAP32[d >> 2];
    HEAP32[a + b >> 2] = g;
    HEAP32[b + (a + 4) >> 2] = h;
    HEAP32[b + (a + 8) >> 2] = f;
    HEAP32[b + (a + 12) >> 2] = 0;
    HEAP32[b + (a + 16) >> 2] = e;
    HEAP32[b + (a + 20) >> 2] = c;
    HEAP32[b + (a + 24) >> 2] = 2147483647;
    HEAP32[b + (a + 28) >> 2] = 2147483647;
    HEAP32[b + (a + 32) >> 2] = 2147483647;
    HEAP32[b + (a + 36) >> 2] = 0;
    HEAP8[b + (a + 40)] = -92;
    return d
}

function _swap1(a, f, d) {
    var c, b;
    c = HEAP32[d + (HEAP32[d >> 2] + 8) >> 2];
    b = 0 == (c | 0) ? 0 : HEAP32[c + (HEAP32[c >> 2] + 4) >> 2];
    d = HEAP32[a + 205336 >> 2];
    0 == (d | 0) ? a = getFUNCTION_TABLE(b)(a, f, f, c) : (d = HEAP32[d + 4 >> 2], a = _jtirs2(a, f, f, c, d, d, b));
    return a
}

function _jtkey(a, f, d, c) {
    var b, e, g;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    e = 0 == (HEAP32[f + 24 >> 2] | 0) ? 1 : HEAP32[f + 28 >> 2];
    g = 0 == (HEAP32[d + 24 >> 2] | 0) ? 1 : HEAP32[d + 28 >> 2];
    if ((e | 0) != (g | 0)) return g = HEAP32[a + 4408 >> 2], e = HEAP32[g + (HEAP32[g >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    if (0 != (HEAP32[f + 12 >> 2] & 64512 | 0)) return a = _jtkeysp(a, f, d, c);
    e = _jtkeyi(a, _jtindexofsub(a, 0, f, f), d, c);
    0 != (e | 0) && (_jttraverse(a, e, 654), c = e + 16, HEAP32[c >> 2] += 1);
    _jttpop(a, b);
    return a = _jttpush(a,
        e)
}

function _jtkeyi(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    e = 0 == (HEAP32[f + 24 >> 2] | 0) ? 1 : HEAP32[f + 28 >> 2];
    g = f + HEAP32[f >> 2];
    h = a + 1096;
    j = HEAP32[h >> 2];
    i = a + 1104;
    l = HEAP32[i >> 2];
    HEAP32[h >> 2] = 1;
    HEAP32[i >> 2] = -1;
    k = 0 == (HEAP32[f + 12 >> 2] & 64512 | 0) ? _jtgr1(a, f) : _jtgrd1sp(a, f);
    HEAP32[h >> 2] = j;
    HEAP32[i >> 2] = l;
    if (0 == (k | 0)) return 0;
    l = HEAP32[k >> 2];
    i = _jtga(a, 1, e, 1, 0);
    if (0 == (i | 0)) return 0;
    if (0 < (e | 0)) {
        j = -1;
        h = i + HEAP32[i >> 2];
        f = k + l;
        for (l = 0;;)
            if (m = HEAP32[g + (HEAP32[f >> 2] <<
                    2) >> 2], HEAP8[h] = (j | 0) < (m | 0) | 0, l += 1, (l | 0) < (e | 0)) j = m, h += 1, f += 4;
            else break
    }
    l = _jtfrom(a, k, d);
    d = _jtcut(a, HEAP32[c + (HEAP32[c >> 2] + 8) >> 2], HEAP32[31058]);
    0 == (d | 0) ? f = 0 : (c =getFUNCTION_TABLE(HEAP32[d + (HEAP32[d >> 2] + 4) >> 2])(a, i, l, d), 0 == (c | 0) ? f = 0 : (_jttraverse(a, c, 654), k = c + 16, HEAP32[k >> 2] += 1, f = c));
    _jttpop(a, b);
    return a = _jttpush(a, f)
}

function _jtutype(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m;
    d = 0;
    c = HEAP32[a + 20 >> 2];
    if (0 == (c | 0)) return 1;
    e = (c | 0) / (f | 0) & -1;
    c = a + HEAP32[a >> 2];
    g = 0 == (HEAP32[a + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[a + 4 >> 2] & 14 | 0) | 0;
    h = a & -g;
    if (0 >= (f | 0)) return 0;
    g = 0 == (h | 0);
    if (0 < (e | 0)) j = 0;
    else {
        for (a = 0;;)
            if (i = a + 1, (i | 0) < (f | 0)) a = i;
            else {
                b = 0;
                break
            }
        return b
    }
    a: for (;;) {
        if (g)
            for (i = a = 0;;) {
                l = HEAP32[c + (i << 2) >> 2];
                do
                    if (0 == (HEAP32[l + 20 >> 2] | 0)) k = a;
                    else if (k = HEAP32[l + 12 >> 2], 0 == (a | 0)) {
                    if (0 != (k & 56 | 0)) {
                        b = 0;
                        d = 19;
                        break a
                    }
                } else if ((a | 0) == (k | 0)) k = a;
                else {
                    b = 0;
                    d = 19;
                    break a
                }
                while (0);
                l = i + 1;
                if ((l | 0) < (e | 0)) a = k, i = l;
                else {
                    m = k;
                    break
                }
            } else
                for (a = i = 0;;) {
                    l = HEAP32[c + (a << 2) >> 2] + h;
                    do
                        if (0 == (HEAP32[l + 20 >> 2] | 0)) k = i;
                        else if (k = HEAP32[l + 12 >> 2], 0 == (i | 0)) {
                        if (0 != (k & 56 | 0)) {
                            b = 0;
                            d = 19;
                            break a
                        }
                    } else if ((i | 0) == (k | 0)) k = i;
                    else {
                        b = 0;
                        d = 19;
                        break a
                    }
                    while (0);
                    l = a + 1;
                    if ((l | 0) < (e | 0)) i = k, a = l;
                    else {
                        m = k;
                        break
                    }
                }
        a = j + 1;
        if ((a | 0) < (f | 0)) j = a;
        else {
            b = m;
            d = 19;
            break
        }
    }
    if (19 == d) return b
}

function _jtioau(a, f, d, c, b, e, g, h, j, i, l, k, m, n, p, q) {
    var r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr;
    0 == (HEAP32[m + 12 >> 2] & 32 | 0) ? r = 0 :
        (s = m + 4, t = HEAP32[s >> 2], u = t & 14, w = 0 != (u | 0), r = v = w & 1);
    x = m & -r;
    0 == (HEAP32[n + 12 >> 2] & 32 | 0) ? y = 0 : (z = n + 4, A = HEAP32[z >> 2], D = A & 14, B = 0 != (D | 0), y = G = B & 1);
    C = n & -y;
    F = HEAP32[p >> 2];
    E = (l | 0) / 4 & -1;
    J = (e | 0) / 4 & -1;
    L = F + HEAP32[F >> 2];
    I = HEAP32[F + 20 >> 2];
    H = (k | 0) / 4 & -1;
    K = q + HEAP32[q >> 2];
    N = m + HEAP32[m >> 2];
    S = n + HEAP32[n >> 2];
    T = 30 > (f | 0);
    V = f - 30;
    Q = T ? f : V;
    (m | 0) == (n | 0) & (j | 0) == (i | 0) ? (P = 4 > f >>> 0) ? M = 1: (R = 5 == (f | 0), M = O = R & 1): M = 0;
    aa = (HEAP32[31134] | 0) == (n | 0) ? 0 : b;
    if (!(0 < (j | 0))) return q;
    Z = 0 == M << 24 >> 24;
    $ = 0 < (aa | 0);
    ba = 0 != (C | 0);
    ka = 0 == (x | 0);
    ea = Math_imul(J, b - 1) | 0;
    ha = 4 == (e | 0);
    da = q + 28;
    ga = q + 20;
    U = 0 < (I | 0);
    ca = 1 == (f | 0);
    X = d - 1;
    Y = Math_imul(J, X) | 0;
    ja = 0 < (d | 0);
    fa = 0 != (x | 0);
    ia = b - aa;
    ra = S;
    sa = N;
    wa = ta = K;
    za = 0;
    for (ua = Ba = K;;) {
        a: do
            if (T) {
                if (U)
                    for (ya = 0;;)
                        if (xa = L + (ya << 2), HEAP32[xa >> 2] = d, oa = ya + 1, pa = (oa | 0) < (I | 0)) ya = oa;
                        else break;
                if (Z) {
                    if (!ca) {
                        if (ja) la = 0, qa = sa;
                        else break;
                        for (;;) {
                            Da = HEAP32[qa >> 2];
                            fa ? (Aa = Da, Oa = Sa = Ea = Aa + x) : Oa = Da;
                            Ha = _jthiau(Oa);
                            Ga = (Ha >>> 0) % (I >>> 0) & -1;
                            Ma = L + (Ga << 2);
                            Ia = HEAP32[Ma >> 2];
                            db = (Ia | 0) < (d | 0);
                            b: do
                                if (db) {
                                    W = Ga;
                                    Xa = Ma;
                                    Ta = Ia;
                                    for (fb = Da;;) {
                                        fa ? (mb = fb, ab = ma = mb + x, Na = sa + (Ta << 2),
                                            Ua = $a = HEAP32[Na >> 2], La = bb = Pa = Ua + x, Ja = ab) : (Qa = sa + (Ta << 2), La = Ya = HEAP32[Qa >> 2], Ja = fb);
                                        lb = _jtequ(a, Ja, La);
                                        Ca = 0 == lb << 24 >> 24;
                                        if (!Ca) {
                                            gb = Xa;
                                            Fa = Ta;
                                            break b
                                        }
                                        Za = W + 1;
                                        ib = (qb = (Za | 0) == (I | 0)) ? 0 : Za;
                                        ub = L + (ib << 2);
                                        eb = HEAP32[ub >> 2];
                                        rb = (eb | 0) < (d | 0);
                                        if (!rb) {
                                            gb = ub;
                                            Fa = eb;
                                            break b
                                        }
                                        wb = HEAP32[qa >> 2];
                                        W = ib;
                                        Xa = ub;
                                        Ta = eb;
                                        fb = wb
                                    }
                                } else gb = Ma, Fa = Ia;
                            while (0);
                            (Ka = (Fa | 0) == (d | 0)) && (HEAP32[gb >> 2] = la);
                            Va = qa + 4;
                            nb = la + 1;
                            if (ob = (nb | 0) < (d | 0)) la = nb, qa = Va;
                            else break a
                        }
                    }
                    if (ja) {
                        cb = sa + (Y << 2);
                        Wa = X;
                        for (yb = cb;;) {
                            Cb = HEAP32[yb >> 2];
                            fa ? (Pb = Cb, ac = Zb = zb = Pb + x) :
                                ac = Cb;
                            Hb = _jthiau(ac);
                            Ib = (Hb >>> 0) % (I >>> 0) & -1;
                            Qb = L + (Ib << 2);
                            Rb = HEAP32[Qb >> 2];
                            Ob = (Rb | 0) < (d | 0);
                            b: do
                                if (Ob) {
                                    Bb = Ib;
                                    xb = Qb;
                                    dc = Rb;
                                    for (tb = Cb;;) {
                                        fa ? (oc = tb, Tb = Mb = oc + x, Ra = sa + (dc << 2), sb = Nb = HEAP32[Ra >> 2], Lb = Eb = Ab = sb + x, vb = Tb) : (wc = sa + (dc << 2), Lb = Ec = HEAP32[wc >> 2], vb = tb);
                                        yc = _jtequ(a, vb, Lb);
                                        Db = 0 == yc << 24 >> 24;
                                        if (!Db) {
                                            bc = xb;
                                            pb = dc;
                                            break b
                                        }
                                        Fb = Bb + 1;
                                        gc = (jb = (Fb | 0) == (I | 0)) ? 0 : Fb;
                                        ic = L + (gc << 2);
                                        vc = HEAP32[ic >> 2];
                                        hc = (vc | 0) < (d | 0);
                                        if (!hc) {
                                            bc = ic;
                                            pb = vc;
                                            break b
                                        }
                                        uc = HEAP32[yb >> 2];
                                        Bb = gc;
                                        xb = ic;
                                        dc = vc;
                                        tb = uc
                                    }
                                } else bc = Qb, pb = Rb;
                            while (0);
                            (Ac = (pb | 0) ==
                                (d | 0)) && (HEAP32[bc >> 2] = Wa);
                            xc = yb - 4;
                            cd = Wa - 1;
                            if (jc = 0 < (Wa | 0)) Wa = cd, yb = xc;
                            else break
                        }
                    }
                }
            }while (0);a: do switch (Q | 0) {
                case 13:
                    b: do
                        if ($) {
                            Tc = ra;
                            for (Fc = 0;;) {
                                Bc = HEAP32[Tc >> 2];
                                ba ? (ec = Bc, nc = sc = Xb = ec + C) : nc = Bc;
                                tc = _jthiau(nc);
                                Ub = (tc >>> 0) % (I >>> 0) & -1;
                                $c = L + (Ub << 2);
                                ad = HEAP32[$c >> 2];
                                qc = (ad | 0) < (d | 0);
                                c: do
                                    if (qc) {
                                        Uc = Ub;
                                        rc = ad;
                                        for (kb = Bc;;) {
                                            ba ? (Jb = kb, Vb = na = $b = Jb + C) : Vb = kb;
                                            kc = sa + (rc << 2);
                                            va = HEAP32[kc >> 2];
                                            ka ? Wc = va : (Yb = va, Wc = Kb = fc = Yb + x);
                                            Gb = _jtequ(a, Vb, Wc);
                                            gd = 0 == Gb << 24 >> 24;
                                            if (!gd) {
                                                mc = rc;
                                                break c
                                            }
                                            Gc = Uc + 1;
                                            kd = (dd = (Gc | 0) == (I | 0)) ? 0 : Gc;
                                            Fd = L + (kd << 2);
                                            Vc = HEAP32[Fd >> 2];
                                            Hd = (Vc | 0) < (d | 0);
                                            if (!Hd) {
                                                mc = Vc;
                                                break c
                                            }
                                            bd = HEAP32[Tc >> 2];
                                            Uc = kd;
                                            rc = Vc;
                                            kb = bd
                                        }
                                    } else mc = ad;
                                while (0);
                                if (cc = (mc | 0) == (d | 0)) {
                                    Ic = 0;
                                    break b
                                }
                                fd = Tc + 4;
                                xd = Fc + 1;
                                if (Xc = (xd | 0) < (aa | 0)) Tc = fd, Fc = xd;
                                else {
                                    Ic = 1;
                                    break
                                }
                            }
                        } else Ic = 1;
                    while (0);
                    Wd = ua + 1;
                    HEAP8[ua] = Ic;
                    Wb = Wd;
                    Sb = Ba;
                    pc = wa;
                    zc = ta;
                    break;
                case 1:
                    if (Z) {
                        if ($) hd = 0, Yc = ra, Ad = ta;
                        else {
                            Wb = ua;
                            Sb = Ba;
                            pc = wa;
                            zc = ta;
                            break a
                        }
                        for (;;) {
                            Gd = HEAP32[Yc >> 2];
                            ba ? (hb = Gd, Jc = ed = ld = hb + C) : Jc = Gd;
                            Oc = _jthiau(Jc);
                            Pc = (Oc >>> 0) % (I >>> 0) & -1;
                            ke = L + (Pc << 2);
                            Ed = HEAP32[ke >> 2];
                            pd = (Ed | 0) < (d |
                                0);
                            b: do
                                if (pd) {
                                    id = Pc;
                                    Cc = Ed;
                                    for (Qc = Gd;;) {
                                        ba ? (Zc = Qc, je = $d = vd = Zc + C) : je = Qc;
                                        Kc = sa + (Cc << 2);
                                        Bd = HEAP32[Kc >> 2];
                                        ka ? od = Bd : (Vd = Bd, od = Jd = Zd = Vd + x);
                                        Md = _jtequ(a, je, od);
                                        Cd = 0 == Md << 24 >> 24;
                                        if (!Cd) {
                                            fe = Cc;
                                            break b
                                        }
                                        Xd = id + 1;
                                        Od = (qd = (Xd | 0) == (I | 0)) ? 0 : Xd;
                                        Mc = L + (Od << 2);
                                        Dd = HEAP32[Mc >> 2];
                                        Td = (Dd | 0) < (d | 0);
                                        if (!Td) {
                                            fe = Dd;
                                            break b
                                        }
                                        le = HEAP32[Yc >> 2];
                                        id = Od;
                                        Cc = Dd;
                                        Qc = le
                                    }
                                } else fe = Ed;
                            while (0);
                            me = Ad + 4;
                            HEAP32[Ad >> 2] = fe;
                            wd = Yc + 4;
                            Ie = hd + 1;
                            if (xe = (Ie | 0) < (aa | 0)) hd = Ie, Yc = wd, Ad = me;
                            else break
                        }
                        ye = ta + (aa << 2);
                        Wb = ua;
                        Sb = Ba;
                        pc = wa;
                        zc = ye;
                        break a
                    }
                    Fe = ta + (b << 2);
                    if (!$) {
                        Wb =
                            ua;
                        Sb = Ba;
                        zc = pc = Fe;
                        break a
                    }
                    Je = nf = ra + (ea << 2);
                    Id = Fe;
                    for (Qe = aa;;) {
                        sd = Qe - 1;
                        ge = HEAP32[Je >> 2];
                        ba ? (ud = ge, ae = de = md = ud + C) : ae = ge;
                        Dc = _jthiau(ae);
                        Nc = (Dc >>> 0) % (I >>> 0) & -1;
                        yd = L + (Nc << 2);
                        jd = HEAP32[yd >> 2];
                        Sc = (jd | 0) < (d | 0);
                        b: do
                            if (Sc) {
                                lc = Nc;
                                nd = yd;
                                Rc = jd;
                                for (Hc = ge;;) {
                                    ba ? (Kd = Hc, be = Nd = Rd = Kd + C) : be = Hc;
                                    zd = sa + (Rc << 2);
                                    we = HEAP32[zd >> 2];
                                    ka ? Lc = we : (rd = we, Lc = Ud = se = rd + x);
                                    Cf = _jtequ(a, be, Lc);
                                    td = 0 == Cf << 24 >> 24;
                                    if (!td) {
                                        Te = nd;
                                        pe = Rc;
                                        break b
                                    }
                                    Pd = lc + 1;
                                    Sd = (Me = (Pd | 0) == (I | 0)) ? 0 : Pd;
                                    $e = L + (Sd << 2);
                                    qe = HEAP32[$e >> 2];
                                    Ce = (qe | 0) < (d | 0);
                                    if (!Ce) {
                                        Te = $e;
                                        pe = qe;
                                        break b
                                    }
                                    cf = HEAP32[Je >> 2];
                                    lc = Sd;
                                    nd = $e;
                                    Rc = qe;
                                    Hc = cf
                                }
                            } else Te = yd, pe = jd;
                        while (0);
                        Ue = (sf = (pe | 0) == (d | 0)) ? HEAP32[Te >> 2] = sd : pe;
                        kf = Id - 4;
                        HEAP32[kf >> 2] = Ue;
                        Re = Je - 4;
                        if (ce = 0 < (sd | 0)) Je = Re, Id = kf, Qe = sd;
                        else break
                    }
                    De = ta + (ia << 2);
                    Wb = ua;
                    Sb = Ba;
                    pc = De;
                    zc = Fe;
                    break;
                case 6:
                    if ($) Ge = ra, He = 0, We = ua;
                    else {
                        Wb = ua;
                        Sb = Ba;
                        pc = wa;
                        zc = ta;
                        break a
                    }
                    for (;;) {
                        Yd = HEAP32[Ge >> 2];
                        ba ? (Ne = Yd, Ld = Ee = Se = Ne + C) : Ld = Yd;
                        he = _jthiau(Ld);
                        Qd = (he >>> 0) % (I >>> 0) & -1;
                        re = L + (Qd << 2);
                        Ke = HEAP32[re >> 2];
                        Ae = (Ke | 0) < (d | 0);
                        b: do
                            if (Ae) {
                                te = Qd;
                                ie = Ke;
                                for (ff = Yd;;) {
                                    ba ? (ue = ff, ze = ne = Oe =
                                        ue + C) : ze = ff;
                                    vf = sa + (ie << 2);
                                    lf = HEAP32[vf >> 2];
                                    ka ? Xe = lf : (Be = lf, Xe = af = hf = Be + x);
                                    zf = _jtequ(a, ze, Xe);
                                    uf = 0 == zf << 24 >> 24;
                                    if (!uf) {
                                        ve = 1;
                                        break b
                                    }
                                    If = te + 1;
                                    Ef = (Df = (If | 0) == (I | 0)) ? 0 : If;
                                    Gf = L + (Ef << 2);
                                    of = HEAP32[Gf >> 2];
                                    Lf = (of | 0) < (d | 0);
                                    if (!Lf) {
                                        ve = 0;
                                        break b
                                    }
                                    pf = HEAP32[Ge >> 2];
                                    te = Ef;
                                    ie = of;
                                    ff = pf
                                }
                            } else ve = 0;
                        while (0);
                        bf = We + 1;
                        HEAP8[We] = ve;
                        Bf = Ge + 4;
                        Pf = He + 1;
                        if (Ye = (Pf | 0) < (aa | 0)) Ge = Bf, He = Pf, We = bf;
                        else break
                    }
                    Wb = Hf = ua + aa;
                    Sb = Ba;
                    pc = wa;
                    zc = ta;
                    break;
                case 0:
                    if (Z) {
                        if ($) jf = 0, mf = ra, Le = ta;
                        else {
                            Wb = ua;
                            Sb = Ba;
                            pc = wa;
                            zc = ta;
                            break a
                        }
                        for (;;) {
                            Ve = HEAP32[mf >>
                                2];
                            ba ? (df = Ve, Jf = Yf = wf = df + C) : Jf = Ve;
                            Qf = _jthiau(Jf);
                            Sf = (Qf >>> 0) % (I >>> 0) & -1;
                            Mf = L + (Sf << 2);
                            ee = HEAP32[Mf >> 2];
                            oe = (ee | 0) < (d | 0);
                            b: do
                                if (oe) {
                                    rf = Sf;
                                    Ff = ee;
                                    for (xf = Ve;;) {
                                        ba ? (Pe = xf, Nf = yf = qf = Pe + C) : Nf = xf;
                                        Zf = sa + (Ff << 2);
                                        tg = HEAP32[Zf >> 2];
                                        ka ? Ze = tg : (gf = tg, Ze = Kf = ef = gf + x);
                                        bg = _jtequ(a, Nf, Ze);
                                        lg = 0 == bg << 24 >> 24;
                                        if (!lg) {
                                            Rf = Ff;
                                            break b
                                        }
                                        Ug = rf + 1;
                                        Jg = (Vf = (Ug | 0) == (I | 0)) ? 0 : Ug;
                                        hg = L + (Jg << 2);
                                        Lg = HEAP32[hg >> 2];
                                        $f = (Lg | 0) < (d | 0);
                                        if (!$f) {
                                            Rf = Lg;
                                            break b
                                        }
                                        ah = HEAP32[mf >> 2];
                                        rf = Jg;
                                        Ff = Lg;
                                        xf = ah
                                    }
                                } else Rf = ee;
                            while (0);
                            nh = Le + 4;
                            HEAP32[Le >> 2] = Rf;
                            dh = mf + 4;
                            mg =
                                jf + 1;
                            if (yh = (mg | 0) < (aa | 0)) jf = mg, mf = dh, Le = nh;
                            else break
                        }
                        Bg = ta + (aa << 2);
                        Wb = ua;
                        Sb = Ba;
                        pc = wa;
                        zc = Bg;
                        break a
                    }
                    if ($) ig = 0, ng = ra, Ng = ta;
                    else {
                        Wb = ua;
                        Sb = Ba;
                        pc = wa;
                        zc = ta;
                        break a
                    }
                    for (;;) {
                        Ch = HEAP32[ng >> 2];
                        ba ? (Dg = Ch, zg = pg = Vg = Dg + C) : zg = Ch;
                        Pg = _jthiau(zg);
                        cg = (Pg >>> 0) % (I >>> 0) & -1;
                        dg = L + (cg << 2);
                        qg = HEAP32[dg >> 2];
                        vg = (qg | 0) < (d | 0);
                        b: do
                            if (vg) {
                                bh = cg;
                                Zg = dg;
                                Eg = qg;
                                for (wg = Ch;;) {
                                    ba ? (vh = wg, Ag = $g = Kh = vh + C) : Ag = wg;
                                    Lh = sa + (Eg << 2);
                                    xg = HEAP32[Lh >> 2];
                                    ka ? Mg = xg : (rg = xg, Mg = jg = Sg = rg + x);
                                    Uh = _jtequ(a, Ag, Mg);
                                    Of = 0 == Uh << 24 >> 24;
                                    if (!Of) {
                                        Tg = Zg;
                                        qi = Eg;
                                        break b
                                    }
                                    eg =
                                        bh + 1;
                                    kg = (gi = (eg | 0) == (I | 0)) ? 0 : eg;
                                    Qg = L + (kg << 2);
                                    Wg = HEAP32[Qg >> 2];
                                    wi = (Wg | 0) < (d | 0);
                                    if (!wi) {
                                        Tg = Qg;
                                        qi = Wg;
                                        break b
                                    }
                                    zh = HEAP32[ng >> 2];
                                    bh = kg;
                                    Zg = Qg;
                                    Eg = Wg;
                                    wg = zh
                                }
                            } else Tg = dg, qi = qg;
                        while (0);
                        di = (Wf = (qi | 0) == (d | 0)) ? HEAP32[Tg >> 2] = ig : qi;
                        ch = Ng + 4;
                        HEAP32[Ng >> 2] = di;
                        Mh = ng + 4;
                        Fg = ig + 1;
                        if (Rg = (Fg | 0) < (aa | 0)) ig = Fg, ng = Mh, Ng = ch;
                        else break
                    }
                    Vh = ta + (aa << 2);
                    Wb = ua;
                    Sb = Ba;
                    pc = wa;
                    zc = Vh;
                    break;
                case 7:
                    b: do
                        if ($) {
                            Gg = ra;
                            for (eh = 0;;) {
                                kh = HEAP32[Gg >> 2];
                                ba ? (fh = kh, og = qh = Wh = fh + C) : og = kh;
                                Og = _jthiau(og);
                                Kg = (Og >>> 0) % (I >>> 0) & -1;
                                Ih = L + (Kg << 2);
                                ai = HEAP32[Ih >> 2];
                                wh = (ai | 0) < (d | 0);
                                c: do
                                    if (wh) {
                                        Xh = Kg;
                                        Nh = ai;
                                        for (Jh = kh;;) {
                                            ba ? (lj = Jh, Ph = rh = gh = lj + C) : Ph = Jh;
                                            hi = sa + (Nh << 2);
                                            sh = HEAP32[hi >> 2];
                                            ka ? fg = sh : (Yi = sh, fg = xi = mj = Yi + x);
                                            Hi = _jtequ(a, Ph, fg);
                                            Ii = 0 == Hi << 24 >> 24;
                                            if (!Ii) {
                                                lh = Nh;
                                                break c
                                            }
                                            yg = Xh + 1;
                                            Ji = (vj = (yg | 0) == (I | 0)) ? 0 : yg;
                                            Xj = L + (Ji << 2);
                                            yi = HEAP32[Xj >> 2];
                                            hh = (yi | 0) < (d | 0);
                                            if (!hh) {
                                                lh = yi;
                                                break c
                                            }
                                            Aj = HEAP32[Gg >> 2];
                                            Xh = Ji;
                                            Nh = yi;
                                            Jh = Aj
                                        }
                                    } else lh = ai;
                                while (0);
                                if (ih = (lh | 0) == (d | 0)) {
                                    Hj = eh;
                                    break b
                                }
                                zi = Gg + 4;
                                ni = eh + 1;
                                if (ti = (ni | 0) < (aa | 0)) Gg = zi, eh = ni;
                                else {
                                    Hj = b;
                                    break
                                }
                            }
                        } else Hj = b;
                    while (0);
                    Cg = wa + 4;
                    HEAP32[wa >>
                        2] = Hj;
                    Wb = ua;
                    Sb = Ba;
                    pc = Cg;
                    zc = ta;
                    break;
                case 11:
                    if ($) {
                        Ah = 0;
                        th = ra;
                        for (oh = 0;;) {
                            Hg = HEAP32[th >> 2];
                            ba ? (bi = Hg, rj = gj = ui = bi + C) : rj = Hg;
                            Ki = _jthiau(rj);
                            Pj = (Ki >>> 0) % (I >>> 0) & -1;
                            Zi = L + (Pj << 2);
                            ii = HEAP32[Zi >> 2];
                            mh = (ii | 0) < (d | 0);
                            b: do
                                if (mh) {
                                    ji = Pj;
                                    vi = ii;
                                    for (Qh = Hg;;) {
                                        ba ? (Ij = Qh, Xg = hj = ik = Ij + C) : Xg = Qh;
                                        Li = sa + (vi << 2);
                                        ph = HEAP32[Li >> 2];
                                        ka ? al = ph : (oi = ph, al = ek = Yh = oi + x);
                                        ki = _jtequ(a, Xg, al);
                                        ci = 0 == ki << 24 >> 24;
                                        if (!ci) {
                                            Rh = 1;
                                            break b
                                        }
                                        Bj = ji + 1;
                                        Cj = (wj = (Bj | 0) == (I | 0)) ? 0 : Bj;
                                        Qi = L + (Cj << 2);
                                        Ri = HEAP32[Qi >> 2];
                                        Qj = (Ri | 0) < (d | 0);
                                        if (!Qj) {
                                            Rh = 0;
                                            break b
                                        }
                                        Dh = HEAP32[th >>
                                            2];
                                        ji = Cj;
                                        vi = Ri;
                                        Qh = Dh
                                    }
                                } else Rh = 0;
                            while (0);
                            Vk = Rh + Ah;
                            Sh = th + 4;
                            Dj = oh + 1;
                            if (xj = (Dj | 0) < (aa | 0)) Ah = Vk, th = Sh, oh = Dj;
                            else {
                                Eh = Vk;
                                break
                            }
                        }
                    } else Eh = 0;
                    Rj = wa + 4;
                    HEAP32[wa >> 2] = Eh;
                    Wb = ua;
                    Sb = Ba;
                    pc = Rj;
                    zc = ta;
                    break;
                case 2:
                    if ($) Ai = 0, Vi = ra, Yg = ua;
                    else {
                        Wb = ua;
                        Sb = Ba;
                        pc = wa;
                        zc = ta;
                        break a
                    }
                    for (;;) {
                        ri = HEAP32[Vi >> 2];
                        ba ? (Fh = ri, Nk = Ei = fk = Fh + C) : Nk = ri;
                        jk = _jthiau(Nk);
                        qk = (jk >>> 0) % (I >>> 0) & -1;
                        nj = L + (qk << 2);
                        pi = HEAP32[nj >> 2];
                        yj = (pi | 0) < (d | 0);
                        b: do
                            if (yj) {
                                Ig = qk;
                                Th = nj;
                                ij = pi;
                                for (Ej = ri;;) {
                                    ba ? (Yj = Ej, zk = Ik = $i = Yj + C) : zk = Ej;
                                    sj = sa + (ij << 2);
                                    Fj = HEAP32[sj >> 2];
                                    ka ?
                                        Jj = Fj : (Wk = Fj, Jj = jj = Fi = Wk + x);
                                    Ak = _jtequ(a, zk, Jj);
                                    jl = 0 == Ak << 24 >> 24;
                                    if (!jl) {
                                        Wi = Th;
                                        tk = ij;
                                        break b
                                    }
                                    ei = Ig + 1;
                                    zj = (Bk = (ei | 0) == (I | 0)) ? 0 : ei;
                                    kj = L + (zj << 2);
                                    Bi = HEAP32[kj >> 2];
                                    Ck = (Bi | 0) < (d | 0);
                                    if (!Ck) {
                                        Wi = kj;
                                        tk = Bi;
                                        break b
                                    }
                                    ol = HEAP32[Vi >> 2];
                                    Ig = zj;
                                    Th = kj;
                                    ij = Bi;
                                    Ej = ol
                                }
                            } else Wi = nj, tk = pi;
                        while (0);
                        (Ci = (tk | 0) == (d | 0)) ? (HEAP32[Wi >> 2] = Ai, Sj = 1) : Sj = 0;
                        Kj = Yg + 1;
                        HEAP8[Yg] = Sj;
                        Zj = Vi + 4;
                        Tj = Ai + 1;
                        if (bl = (Tj | 0) < (aa | 0)) Ai = Tj, Vi = Zj, Yg = Kj;
                        else break
                    }
                    Wb = Jk = ua + aa;
                    Sb = Ba;
                    pc = wa;
                    zc = ta;
                    break;
                case 8:
                    b: do
                        if ($) {
                            Ui = ra;
                            for (fi = 0;;) {
                                xh = HEAP32[Ui >> 2];
                                ba ? (oj = xh,
                                    cl = gk = Dk = oj + C) : cl = xh;
                                uk = _jthiau(cl);
                                sg = (uk >>> 0) % (I >>> 0) & -1;
                                Lj = L + (sg << 2);
                                ul = HEAP32[Lj >> 2];
                                pj = (ul | 0) < (d | 0);
                                c: do
                                    if (pj) {
                                        tf = sg;
                                        Xi = ul;
                                        for ($j = xh;;) {
                                            ba ? (Si = $j, Gh = Kk = gg = Si + C) : Gh = $j;
                                            ag = sa + (Xi << 2);
                                            jh = HEAP32[ag >> 2];
                                            ka ? Hh = jh : (Af = jh, Hh = kl = Mi = Af + x);
                                            si = _jtequ(a, Gh, Hh);
                                            Ok = 0 == si << 24 >> 24;
                                            if (!Ok) {
                                                Zh = fi;
                                                break b
                                            }
                                            dl = tf + 1;
                                            li = (Lk = (dl | 0) == (I | 0)) ? 0 : dl;
                                            Uj = L + (li << 2);
                                            fm = HEAP32[Uj >> 2];
                                            Di = (fm | 0) < (d | 0);
                                            if (!Di) break c;
                                            Mk = HEAP32[Ui >> 2];
                                            tf = li;
                                            Xi = fm;
                                            $j = Mk
                                        }
                                    }
                                while (0);
                                qj = Ui + 4;
                                Pk = fi + 1;
                                if (vl = (Pk | 0) < (aa | 0)) Ui = qj, fi = Pk;
                                else {
                                    Zh = b;
                                    break
                                }
                            }
                        } else Zh =
                            b;
                    while (0);
                    Mj = wa + 4;
                    HEAP32[wa >> 2] = Zh;
                    Wb = ua;
                    Sb = Ba;
                    pc = Mj;
                    zc = ta;
                    break;
                case 9:
                    b: do
                        if ($) {
                            mi = ak = ra + (ea << 2);
                            for (Jl = aa;;) {
                                Gi = Jl - 1;
                                Nj = HEAP32[mi >> 2];
                                ba ? (Oh = Nj, vk = ll = fl = Oh + C) : vk = Nj;
                                bk = _jthiau(vk);
                                Vj = (bk >>> 0) % (I >>> 0) & -1;
                                ck = L + (Vj << 2);
                                ml = HEAP32[ck >> 2];
                                rk = (ml | 0) < (d | 0);
                                c: do
                                    if (rk) {
                                        pl = Vj;
                                        Kl = ml;
                                        for (Qk = Nj;;) {
                                            ba ? (wl = Qk, Bl = sk = Ek = wl + C) : Bl = Qk;
                                            aj = sa + (Kl << 2);
                                            kk = HEAP32[aj >> 2];
                                            ka ? Ni = kk : (Oi = kk, Ni = mk = lk = Oi + x);
                                            nk = _jtequ(a, Bl, Ni);
                                            Fl = 0 == nk << 24 >> 24;
                                            if (!Fl) {
                                                Xk = Kl;
                                                break c
                                            }
                                            bj = pl + 1;
                                            $h = (Ll = (bj | 0) == (I | 0)) ? 0 : bj;
                                            gl = L + ($h << 2);
                                            Bh = HEAP32[gl >>
                                                2];
                                            cj = (Bh | 0) < (d | 0);
                                            if (!cj) {
                                                Xk = Bh;
                                                break c
                                            }
                                            Fk = HEAP32[mi >> 2];
                                            pl = $h;
                                            Kl = Bh;
                                            Qk = Fk
                                        }
                                    } else Xk = ml;
                                while (0);
                                if (Rk = (Xk | 0) == (d | 0)) {
                                    dj = Gi;
                                    break b
                                }
                                ql = mi - 4;
                                if (Sk = 0 < (Gi | 0)) mi = ql, Jl = Gi;
                                else {
                                    dj = b;
                                    break
                                }
                            }
                        } else dj = b;
                    while (0);
                    ej = wa + 4;
                    HEAP32[wa >> 2] = dj;
                    Wb = ua;
                    Sb = Ba;
                    pc = ej;
                    zc = ta;
                    break;
                case 14:
                    if ($) {
                        xl = ra;
                        dk = wa;
                        for (Gl = 0;;) {
                            hk = HEAP32[xl >> 2];
                            ba ? (nl = hk, Wj = ok = Yk = nl + C) : Wj = hk;
                            Rl = _jthiau(Wj);
                            pk = (Rl >>> 0) % (I >>> 0) & -1;
                            Vl = L + (pk << 2);
                            rl = HEAP32[Vl >> 2];
                            Zk = (rl | 0) < (d | 0);
                            b: do
                                if (Zk) {
                                    Gj = pk;
                                    Cl = rl;
                                    for (Gk = hk;;) {
                                        ba ? (gm = Gk, Xf = sl = hl = gm + C) : Xf = Gk;
                                        mm = sa +
                                            (Cl << 2);
                                        $k = HEAP32[mm >> 2];
                                        ka ? Dl = $k : (tl = $k, Dl = Ti = bm = tl + x);
                                        ug = _jtequ(a, Xf, Dl);
                                        Tf = 0 == ug << 24 >> 24;
                                        if (!Tf) break;
                                        uh = Gj + 1;
                                        tj = (Uf = (uh | 0) == (I | 0)) ? 0 : uh;
                                        uj = L + (tj << 2);
                                        Sl = HEAP32[uj >> 2];
                                        il = (Sl | 0) < (d | 0);
                                        if (!il) {
                                            Wl = dk;
                                            break b
                                        }
                                        yn = HEAP32[xl >> 2];
                                        Gj = tj;
                                        Cl = Sl;
                                        Gk = yn
                                    }
                                    im = dk + 4;
                                    HEAP32[dk >> 2] = Gl;
                                    Wl = im
                                } else Wl = dk;
                            while (0);
                            Im = xl + 4;
                            zl = Gl + 1;
                            if (Xl = (zl | 0) < (aa | 0)) xl = Im, dk = Wl, Gl = zl;
                            else {
                                vm = Wl;
                                break
                            }
                        }
                    } else vm = wa;
                    Tl = vm;
                    Ml = ta;
                    kn = Tl - Ml;
                    nm = kn >> 2;
                    HEAP32[ga >> 2] = nm;
                    HEAP32[da >> 2] = nm;
                    Wb = ua;
                    Sb = Ba;
                    pc = vm;
                    zc = ta;
                    break;
                case 5:
                    if ($) {
                        Fn = ra;
                        Nl = 0;
                        for (Gn =
                            wa;;) {
                            Pm = HEAP32[Fn >> 2];
                            ba ? (Hl = Pm, uo = Hn = Op = Hl + C) : uo = Pm;
                            Ol = _jthiau(uo);
                            Do = (Ol >>> 0) % (I >>> 0) & -1;
                            Xn = L + (Do << 2);
                            io = HEAP32[Xn >> 2];
                            ln = (io | 0) < (d | 0);
                            b: do
                                if (ln) {
                                    qm = Do;
                                    el = Xn;
                                    Il = io;
                                    for (mn = Pm;;) {
                                        ba ? ($m = mn, zm = om = Jm = $m + C) : zm = mn;
                                        Am = sa + (Il << 2);
                                        Eo = HEAP32[Am >> 2];
                                        ka ? jo = Eo : (hm = Eo, jo = ko = Fo = hm + x);
                                        pm = _jtequ(a, zm, jo);
                                        Bm = 0 == pm << 24 >> 24;
                                        if (!Bm) {
                                            Km = el;
                                            Cm = Il;
                                            break b
                                        }
                                        rm = qm + 1;
                                        Tm = (Lm = (rm | 0) == (I | 0)) ? 0 : rm;
                                        Qm = L + (Tm << 2);
                                        an = HEAP32[Qm >> 2];
                                        wk = (an | 0) < (d | 0);
                                        if (!wk) {
                                            Km = Qm;
                                            Cm = an;
                                            break b
                                        }
                                        Go = HEAP32[Fn >> 2];
                                        qm = Tm;
                                        el = Qm;
                                        Il = an;
                                        mn = Go
                                    }
                                } else Km = Xn, Cm =
                                    io;
                            while (0);
                            (nn = (Cm | 0) == (d | 0)) ? (HEAP32[Km >> 2] = Nl, on = Gn + 4, HEAP32[Gn >> 2] = Nl, cm = on) : cm = Gn;
                            In = Fn + 4;
                            bp = Nl + 1;
                            if (Dp = (bp | 0) < (aa | 0)) Fn = In, Nl = bp, Gn = cm;
                            else {
                                lo = cm;
                                break
                            }
                        }
                    } else lo = wa;
                    bn = lo;
                    cn = ta;
                    Um = bn - cn;
                    Ro = Um >> 2;
                    HEAP32[ga >> 2] = Ro;
                    HEAP32[da >> 2] = Ro;
                    Wb = ua;
                    Sb = Ba;
                    pc = lo;
                    zc = ta;
                    break;
                case 3:
                    do
                        if (ha) {
                            if ($) {
                                Yn = 0;
                                Yl = ra;
                                for (pn = wa;;) {
                                    Hk = HEAP32[Yl >> 2];
                                    ba ? (vo = Hk, vp = Pp = Ho = vo + C) : vp = Hk;
                                    mo = _jthiau(vp);
                                    Io = (mo >>> 0) % (I >>> 0) & -1;
                                    hp = L + (Io << 2);
                                    Vm = HEAP32[hp >> 2];
                                    sm = (Vm | 0) < (d | 0);
                                    b: do
                                        if (sm) {
                                            Zn = Io;
                                            Oj = hp;
                                            Mm = Vm;
                                            for (Yp = Hk;;) {
                                                ba ? (Tq = Yp, dn = Zl =
                                                    Dm = Tq + C) : dn = Yp;
                                                Nm = sa + (Mm << 2);
                                                Rm = HEAP32[Nm >> 2];
                                                ka ? jm = Rm : (Ep = Rm, jm = So = cp = Ep + x);
                                                Jo = _jtequ(a, dn, jm);
                                                Jn = 0 == Jo << 24 >> 24;
                                                if (!Jn) {
                                                    Ko = Oj;
                                                    $n = Mm;
                                                    break b
                                                }
                                                Em = Zn + 1;
                                                To = (dm = (Em | 0) == (I | 0)) ? 0 : Em;
                                                Kn = L + (To << 2);
                                                El = HEAP32[Kn >> 2];
                                                rq = (El | 0) < (d | 0);
                                                if (!rq) {
                                                    Ko = Kn;
                                                    $n = El;
                                                    break b
                                                }
                                                Zp = HEAP32[Yl >> 2];
                                                Zn = To;
                                                Oj = Kn;
                                                Mm = El;
                                                Yp = Zp
                                            }
                                        } else Ko = hp, $n = Vm;
                                    while (0);
                                    (Bq = ($n | 0) == (d | 0)) ? (zn = Yl, wp = HEAP32[zn >> 2], no = pn + 4, HEAP32[pn >> 2] = wp, HEAP32[Ko >> 2] = Yn, ip = no) : ip = pn;
                                    Er = Yl + 4;
                                    Lo = Yn + 1;
                                    if (sq = (Lo | 0) < (aa | 0)) Yn = Lo, Yl = Er, pn = ip;
                                    else {
                                        An = ip;
                                        break
                                    }
                                }
                            } else An = wa;
                            Ln =
                                Mo = jp = An
                        } else if ($) {
                        kp = 0;
                        en = ra;
                        for (Bn = Ba;;) {
                            Mn = HEAP32[en >> 2];
                            ba ? (gq = Mn, dp = Hq = Nn = gq + C) : dp = Mn;
                            wo = _jthiau(dp);
                            Fp = (wo >>> 0) % (I >>> 0) & -1;
                            fn = L + (Fp << 2);
                            On = HEAP32[fn >> 2];
                            ao = (On | 0) < (d | 0);
                            b: do
                                if (ao) {
                                    Qp = Fp;
                                    gn = fn;
                                    tm = On;
                                    for (um = Mn;;) {
                                        ba ? (xo = um, $l = Gp = No = xo + C) : $l = um;
                                        lp = sa + (tm << 2);
                                        km = HEAP32[lp >> 2];
                                        ka ? am = km : (mp = km, am = Ar = Fm = mp + x);
                                        hq = _jtequ(a, $l, am);
                                        iq = 0 == hq << 24 >> 24;
                                        if (!iq) {
                                            Hp = gn;
                                            hn = tm;
                                            break b
                                        }
                                        Pn = Qp + 1;
                                        np = (yo = (Pn | 0) == (I | 0)) ? 0 : Pn;
                                        qn = L + (np << 2);
                                        tq = HEAP32[qn >> 2];
                                        rn = (tq | 0) < (d | 0);
                                        if (!rn) {
                                            Hp = qn;
                                            hn = tq;
                                            break b
                                        }
                                        $p = HEAP32[en >> 2];
                                        Qp = np;
                                        gn = qn;
                                        tm = tq;
                                        um = $p
                                    }
                                } else Hp = fn, hn = On;
                            while (0);
                            (Uq = (hn | 0) == (d | 0)) ? (Rp = en, _memcpy(Bn, Rp, e) | 0, Cq = Bn + e, HEAP32[Hp >> 2] = kp, sn = Cq) : sn = Bn;
                            Qn = en + 4;
                            uq = kp + 1;
                            if (Iq = (uq | 0) < (aa | 0)) kp = uq, en = Qn, Bn = sn;
                            else {
                                Mo = sn;
                                Ln = wa;
                                break
                            }
                        }
                    } else Mo = Ba, Ln = wa;
                    while (0);
                    Uo = Mo;
                    Rn = ta;
                    Vo = Uo - Rn;
                    Sn = (Vo | 0) / (e | 0) & -1;
                    HEAP32[da >> 2] = Sn;
                    Ip = Math_imul(Sn, c) | 0;
                    HEAP32[ga >> 2] = Ip;
                    Wb = ua;
                    Sb = Mo;
                    pc = Ln;
                    zc = ta;
                    break;
                case 4:
                    do
                        if (ha) {
                            if ($) {
                                ep = 0;
                                Cn = ra;
                                for (Pi = wa;;) {
                                    xk = HEAP32[Cn >> 2];
                                    ba ? (Tk = xk, tn = yk = yl = Tk + C) : tn = xk;
                                    lm = _jthiau(tn);
                                    Tn = (lm >>> 0) % (I >>> 0) & -1;
                                    vq = L +
                                        (Tn << 2);
                                    Dn = HEAP32[vq >> 2];
                                    oo = (Dn | 0) < (d | 0);
                                    b: do
                                        if (oo) {
                                            Wo = Tn;
                                            wm = Dn;
                                            for (Pl = xk;;) {
                                                ba ? (Sp = Pl, Oo = Tp = Vq = Sp + C) : Oo = Pl;
                                                fp = sa + (wm << 2);
                                                jq = HEAP32[fp >> 2];
                                                ka ? un = jq : (Ul = jq, un = rr = op = Ul + x);
                                                Up = _jtequ(a, Oo, un);
                                                bo = 0 == Up << 24 >> 24;
                                                if (!bo) {
                                                    Po = wm;
                                                    break b
                                                }
                                                Un = Wo + 1;
                                                aq = (Jq = (Un | 0) == (I | 0)) ? 0 : Un;
                                                xp = L + (aq << 2);
                                                Gm = HEAP32[xp >> 2];
                                                kq = (Gm | 0) < (d | 0);
                                                if (!kq) {
                                                    Po = Gm;
                                                    break b
                                                }
                                                co = HEAP32[Cn >> 2];
                                                Wo = aq;
                                                wm = Gm;
                                                Pl = co
                                            }
                                        } else Po = Dn;
                                    while (0);
                                    (pp = (Po | 0) == (d | 0)) ? (En = Cn, Kq = HEAP32[En >> 2], eo = Pi + 4, HEAP32[Pi >> 2] = Kq, dr = eo) : dr = Pi;
                                    Ql = Cn + 4;
                                    Wq = ep + 1;
                                    if (kr = (Wq | 0) < (aa |
                                            0)) ep = Wq, Cn = Ql, Pi = dr;
                                    else {
                                        Xo = dr;
                                        break
                                    }
                                }
                            } else Xo = wa;
                            qp = Jp = yp = Xo
                        } else if ($) {
                        Yo = 0;
                        Wm = ra;
                        for (Vn = Ba;;) {
                            Vp = HEAP32[Wm >> 2];
                            ba ? (Zo = Vp, sr = Kp = lq = Zo + C) : sr = Vp;
                            Lp = _jthiau(sr);
                            mq = (Lp >>> 0) % (I >>> 0) & -1;
                            zo = L + (mq << 2);
                            fo = HEAP32[zo >> 2];
                            Br = (fo | 0) < (d | 0);
                            b: do
                                if (Br) {
                                    rp = mq;
                                    nq = fo;
                                    for (Xq = Vp;;) {
                                        ba ? (Yr = Xq, lr = Cr = Dq = Yr + C) : lr = Xq;
                                        tr = sa + (nq << 2);
                                        wq = HEAP32[tr >> 2];
                                        ka ? Lq = wq : (oq = wq, Lq = bq = er = oq + x);
                                        mr = _jtequ(a, lr, Lq);
                                        Yq = 0 == mr << 24 >> 24;
                                        if (!Yq) {
                                            po = nq;
                                            break b
                                        }
                                        qo = rp + 1;
                                        $o = (fr = (qo | 0) == (I | 0)) ? 0 : qo;
                                        Xm = L + ($o << 2);
                                        gp = HEAP32[Xm >> 2];
                                        go = (gp | 0) < (d | 0);
                                        if (!go) {
                                            po =
                                                gp;
                                            break b
                                        }
                                        Ym = HEAP32[Wm >> 2];
                                        rp = $o;
                                        nq = gp;
                                        Xq = Ym
                                    }
                                } else po = fo;
                            while (0);
                            (ro = (po | 0) == (d | 0)) ? (ap = Wm, _memcpy(Vn, ap, e) | 0, Zm = ho = Vn + e) : Zm = Vn;
                            Ao = Wm + 4;
                            Wn = Yo + 1;
                            if (so = (Wn | 0) < (aa | 0)) Yo = Wn, Wm = Ao, Vn = Zm;
                            else {
                                Jp = Zm;
                                qp = wa;
                                break
                            }
                        }
                    } else Jp = Ba, qp = wa;
                    while (0);
                    fj = Jp;
                    Mq = ta;
                    sp = fj - Mq;
                    tp = (sp | 0) / (e | 0) & -1;
                    HEAP32[da >> 2] = tp;
                    Zq = Math_imul(tp, c) | 0;
                    HEAP32[ga >> 2] = Zq;
                    Wb = ua;
                    Sb = Jp;
                    pc = qp;
                    zc = ta;
                    break;
                case 10:
                    b: do
                        if ($) {
                            zp = Uk = ra + (ea << 2);
                            for (em = aa;;) {
                                to = em - 1;
                                vn = HEAP32[zp >> 2];
                                ba ? (Hm = vn, Ap = wn = xm = Hm + C) : Ap = vn;
                                ym = _jthiau(Ap);
                                jn = (ym >>> 0) % (I >>> 0) & -1;
                                Om = L + (jn << 2);
                                Mp = HEAP32[Om >> 2];
                                xn = (Mp | 0) < (d | 0);
                                c: do
                                    if (xn) {
                                        Bo = jn;
                                        Zr = Mp;
                                        for (Ur = vn;;) {
                                            ba ? (Qo = Ur, Fr = xq = Wp = Qo + C) : Fr = Ur;
                                            Eq = sa + (Zr << 2);
                                            yq = HEAP32[Eq >> 2];
                                            ka ? qs = yq : (Lr = yq, qs = cq = ur = Lr + x);
                                            is = _jtequ(a, Fr, qs);
                                            Fq = 0 == is << 24 >> 24;
                                            if (!Fq) {
                                                nr = to;
                                                break b
                                            }
                                            Bp = Bo + 1;
                                            Gq = (Gr = (Bp | 0) == (I | 0)) ? 0 : Bp;
                                            pq = L + (Gq << 2);
                                            Mr = HEAP32[pq >> 2];
                                            $q = (Mr | 0) < (d | 0);
                                            if (!$q) break c;
                                            vr = HEAP32[zp >> 2];
                                            Bo = Gq;
                                            Zr = Mr;
                                            Ur = vr
                                        }
                                    }
                                while (0);
                                Nq = zp - 4;
                                if (js = 0 < (to | 0)) zp = Nq, em = to;
                                else {
                                    nr = b;
                                    break
                                }
                            }
                        } else nr = b;
                    while (0);
                    Hr = wa + 4;
                    HEAP32[wa >> 2] = nr;
                    Wb = ua;
                    Sb = Ba;
                    pc = Hr;
                    zc = ta;
                    break;
                case 12:
                    b: do
                        if ($) {
                            Np = ra;
                            for (qq = 0;;) {
                                Oq = HEAP32[Np >> 2];
                                ba ? (ar = Oq, br = wr = zq = ar + C) : br = Oq;
                                Al = _jthiau(br);
                                Co = (Al >>> 0) % (I >>> 0) & -1;
                                dq = L + (Co << 2);
                                Aq = HEAP32[dq >> 2];
                                Vr = (Aq | 0) < (d | 0);
                                c: do
                                    if (Vr) {
                                        eq = Co;
                                        Xp = Aq;
                                        for (fq = Oq;;) {
                                            ba ? ($r = fq, Rr = Nr = Ir = $r + C) : Rr = fq;
                                            Pq = sa + (Xp << 2);
                                            Or = HEAP32[Pq >> 2];
                                            ka ? Es = Or : (ks = Or, Es = ls = gr = ks + x);
                                            dt = _jtequ(a, Rr, Es);
                                            ms = 0 == dt << 24 >> 24;
                                            if (!ms) {
                                                Qq = 1;
                                                break b
                                            }
                                            as = eq + 1;
                                            Wr = (Jr = (as | 0) == (I | 0)) ? 0 : as;
                                            bs = L + (Wr << 2);
                                            nt = HEAP32[bs >> 2];
                                            Rq = (nt | 0) < (d | 0);
                                            if (!Rq) break c;
                                            or = HEAP32[Np >> 2];
                                            eq = Wr;
                                            Xp = nt;
                                            fq = or
                                        }
                                    }
                                while (0);
                                hr = Np +
                                    4;
                                Dr = qq + 1;
                                if (Fs = (Dr | 0) < (aa | 0)) Np = hr, qq = Dr;
                                else {
                                    Qq = 0;
                                    break
                                }
                            }
                        } else Qq = 0;
                    while (0);
                    Kr = ua + 1;
                    HEAP8[ua] = Qq;
                    Wb = Kr;
                    Sb = Ba;
                    pc = wa;
                    zc = ta;
                    break;
                default:
                    Wb = ua, Sb = Ba, pc = wa, zc = ta
            }
            while (0);
            As = za + 1;Gs = sa + (E << 2);ir = ra + (H << 2);
        if (pr = (As | 0) < (j | 0)) ra = ir,
        sa = Gs,
        ta = zc,
        wa = pc,
        za = As,
        Ba = Sb,
        ua = Wb;
        else break
    }
    return q
}

function _jthiau(a) {
    var f, d, c, b, e, g, h, j, i, l;
    f = 0;
    d = a;
    c = HEAP32[a >> 2];
    b = HEAP32[a + 20 >> 2];
    if (0 == (b | 0)) return 0;
    a = HEAP32[a + 12 >> 2];
    if (128 == (a | 0)) g = b << 1;
    else if (64 == (a | 0)) g = b;
    else {
        if (4 == (a | 0)) {
            a = b << 2;
            if (0 >= (b | 0)) return 0;
            j = h = 0;
            for (i = d + c;;)
                if (d = HEAP8[i], h = 0 == d << 24 >> 24 | -1 == d << 24 >> 24 ? h : Math_imul(d & 255, j + 1000003) ^ h << 1, d = j + 1, (d | 0) < (a | 0)) j = d, i += 1;
                else {
                    e = h;
                    break
                }
            return e
        }
        j = 2 == (a | 0) | 2097152 == (a | 0) | 33554432 == (a | 0) ? 1 : 131072 == (a | 0) ? 2 : 67108864 == (a | 0) | 134217728 == (a | 0) | 4194304 == (a | 0) | 8388608 == (a | 0) ? 4 : 32 == (a | 0) ? 4 : 1024 ==
            (a | 0) | 4096 == (a | 0) | 8192 == (a | 0) | 16384 == (a | 0) | 2048 == (a | 0) | 32768 == (a | 0) ? 16 : 262144 == (a | 0) | 524288 == (a | 0) | 1048576 == (a | 0) ? 44 : 16777216 == (a | 0) ? 12 : 65536 == (a | 0) ? 4 : 268435456 == (a | 0) ? 12 : 536870912 == (a | 0) ? 24 : 1 == (a | 0) | 8 == (a | 0) | 16 == (a | 0) ? a : -1;
        f = 28
    }
    if (28 == f) {
        f = Math_imul(j, b) | 0;
        if (0 >= (f | 0)) return 0;
        j = b = 0;
        for (a = d + c;;)
            if (h = Math_imul(HEAPU8[a], j + 1000003) ^ b << 1, i = j + 1, (i | 0) < (f | 0)) b = h, j = i, a += 1;
            else {
                e = h;
                break
            }
        return e
    }
    if (0 >= (g | 0)) return 2038074751;
    a = 2038074751;
    j = d + c;
    for (c = 0;;) {
        d = j + 4;
        b = HEAP32[j >> 2];
        f = HEAP32[b + 20 >> 2];
        h = f << 2;
        if (0 <
            (f | 0)) {
            i = f = 0;
            for (j = b + HEAP32[b >> 2];;)
                if (b = HEAP8[j], f = 0 == b << 24 >> 24 | -1 == b << 24 >> 24 ? f : Math_imul(b & 255, i + 1000003) ^ f << 1, b = i + 1, (b | 0) < (h | 0)) i = b, j += 1;
                else {
                    l = f;
                    break
                }
        } else l = 0;
        j = l + a;
        i = c + 1;
        if ((i | 0) < (g | 0)) a = j, j = d, c = i;
        else {
            e = j;
            break
        }
    }
    return e
}

function _jtgr1(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa;
    c = STACKTOP;
    STACKTOP = STACKTOP + 1088 | 0;
    b = c + 1024;
    e = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 == (f | 0)) return STACKTOP = c, 0;
    g = f + 12;
    h = HEAP32[g >> 2];
    j = f + 24;
    i = HEAP32[j >> 2];
    l = a + 205336;
    k = HEAP32[l >> 2];
    m = 0 == (k | 0) ? i : HEAP32[k + 4 >> 2];
    HEAP32[l >> 2] = 0;
    l = i - m;
    i = f + 28;
    do
        if (0 < (l | 0)) {
            k = 1;
            for (n = 0;;)
                if (p = k * (HEAP32[f + 28 + (n << 2) >> 2] | 0), q = n + 1, (q |
                        0) < (l | 0)) k = p, n = q;
                else break;
            2147483647 >= p ? (r = p, d = 8) : (n = HEAP32[a + 4408 >> 2], k = HEAP32[n + (HEAP32[n >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), d = 10)
        } else r = 1, d = 8;
    while (0);
    8 == d && (p = r & -1, 0 == (p | 0) ? d = 10 : (s = (HEAP32[f + 20 >> 2] | 0) / (p | 0) & -1, t = p));
    a: do
        if (10 == d) {
            do
                if (0 < (m | 0)) {
                    r = 1;
                    for (p = 0;;)
                        if (u = r * (HEAP32[f + 28 + (l + p << 2) >> 2] | 0), k = p + 1, (k | 0) < (m | 0)) r = u, p = k;
                        else break;
                    if (2147483647 >= u) w = u;
                    else {
                        p = HEAP32[a + 4408 >> 2];
                        r = HEAP32[p + (HEAP32[p >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]);
                        t = s = 0;
                        break a
                    }
                } else w =
                    1;
            while (0);
            s = w & -1;
            t = 0
        }
    while (0);
    v = (w = 0 != (m | 0)) ? HEAP32[f + 28 + (l << 2) >> 2] : 1;
    m = v | 0;
    u = (t | 0) * m;
    2147483647 < u ? (r = HEAP32[a + 4408 >> 2], p = HEAP32[r + (HEAP32[r >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), x = 0) : x = u & -1;
    if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = c, 0;
    u = _jtga(a, 4, x, l + 1, i);
    if (0 == (u | 0)) return STACKTOP = c, 0;
    w || (HEAP32[u + 28 + (l << 2) >> 2] = 1);
    if (0 == (s | 0) | 2 > (v | 0)) {
        l = HEAP32[u + 24 >> 2];
        w = _jtga(a, 4, l, 1, 0);
        0 == (w | 0) ? y = 0 : (_memcpy(w + HEAP32[w >> 2], u + 28, l << 2) | 0, y = w);
        w = v - 1;
        l = _jtga(a, 4, v, 1, 0);
        do
            if (0 == (l | 0)) z = 0;
            else if (0 ==
            (v | 0)) z = l;
        else {
            x = -1;
            for (p = l + HEAP32[l >> 2];;)
                if (r = x + 1, HEAP32[p >> 2] = r, (r | 0) == (w | 0)) {
                    z = l;
                    break
                } else x = r, p += 4
        }
        while (0);
        d = _jtreshape(a, y, z);
        STACKTOP = c;
        return d
    }
    do
        if (0 == (h & 1 | 0)) d = 127;
        else if (z = (s | 0) / (v | 0) & -1, 0 != (z & 3 | 0)) d = 127;
    else {
        y = u + HEAP32[u >> 2];
        l = b;
        if ((s | 0) > (v << 2 | 0) * Math_log(m)) {
            if (0 == _jtgrx(a, t, s, v, f, y) << 24 >> 24) d = 0;
            else break;
            STACKTOP = c;
            return d
        }
        w = (z | 0) / 4 & -1;
        p = f + HEAP32[f >> 2];
        x = 1 == (HEAP32[a + 1096 >> 2] | 0);
        if (7 < (z | 0)) {
            r = _jtga(a, 4, v, 1, 0);
            if (0 == (r | 0)) return d = 0, STACKTOP = c, d;
            A = r + HEAP32[r >> 2]
        } else A = 0;
        if (!(0 >=
                (t | 0))) {
            r = w & 1;
            k = 6 < z + 3 >>> 0;
            n = z - 4;
            q = 0 == r << 24 >> 24;
            D = r ^ 1;
            B = 0 < (v | 0);
            G = w - 1;
            C = 0 < (G | 0);
            F = b;
            E = b + 4;
            J = b + 8;
            L = b + 12;
            I = b + 16;
            H = b + 20;
            K = b + 24;
            N = b + 28;
            S = b + 32;
            T = b + 36;
            V = b + 40;
            Q = b + 44;
            P = b + 48;
            M = b + 52;
            R = b + 56;
            O = b + 60;
            aa = 0;
            w = p;
            for (p = Z = 0;;) {
                $ = w + z;
                do
                    if (k) {
                        ba = w + n;
                        ka = q ? A : y;
                        _memset(l, 0, 64) | 0;
                        if (B) {
                            ea = aa;
                            ha = ba;
                            for (da = 0;;)
                                if (ga = HEAP32[ha >> 2], ea = 16777217 == (ga | 0) ? 9 : 16777216 == (ga | 0) ? 1 : 16843009 == (ga | 0) ? 15 : 16842753 == (ga | 0) ? 11 : 65536 == (ga | 0) ? 2 : 16777473 == (ga | 0) ? 13 : 65792 == (ga | 0) ? 6 : 1 == (ga | 0) ? 8 : 65537 == (ga | 0) ? 10 : 257 == (ga | 0) ? 12 : 256 == (ga | 0) ? 4 : 16777472 ==
                                    (ga | 0) ? 5 : 0 == (ga | 0) ? 0 : 65793 == (ga | 0) ? 14 : 16843008 == (ga | 0) ? 7 : 16842752 == (ga | 0) ? 3 : ea, ga = b + (ea << 2), HEAP32[ga >> 2] += 1, ga = da + 1, (ga | 0) < (v | 0)) ha += z, da = ga;
                                else {
                                    U = ea;
                                    break
                                }
                        } else U = aa;
                        x ? (da = HEAP32[F >> 2], HEAP32[F >> 2] = 0, ha = HEAP32[E >> 2], HEAP32[E >> 2] = da, ea = ha + da, da = HEAP32[J >> 2], HEAP32[J >> 2] = ea, ha = da + ea, ea = HEAP32[L >> 2], HEAP32[L >> 2] = ha, da = ea + ha, ha = HEAP32[I >> 2], HEAP32[I >> 2] = da, ea = ha + da, da = HEAP32[H >> 2], HEAP32[H >> 2] = ea, ha = da + ea, ea = HEAP32[K >> 2], HEAP32[K >> 2] = ha, da = ea + ha, ha = HEAP32[N >> 2], HEAP32[N >> 2] = da, ea = ha + da, da = HEAP32[S >>
                            2], HEAP32[S >> 2] = ea, ha = da + ea, ea = HEAP32[T >> 2], HEAP32[T >> 2] = ha, da = ea + ha, ha = HEAP32[V >> 2], HEAP32[V >> 2] = da, ea = ha + da, da = HEAP32[Q >> 2], HEAP32[Q >> 2] = ea, ha = da + ea, ea = HEAP32[P >> 2], HEAP32[P >> 2] = ha, da = ea + ha, ha = HEAP32[M >> 2], HEAP32[M >> 2] = da, ea = ha + da, da = HEAP32[R >> 2], HEAP32[R >> 2] = ea, HEAP32[O >> 2] = da + ea) : (ea = HEAP32[O >> 2], HEAP32[O >> 2] = 0, da = HEAP32[R >> 2], HEAP32[R >> 2] = ea, ha = da + ea, ea = HEAP32[M >> 2], HEAP32[M >> 2] = ha, da = ea + ha, ha = HEAP32[P >> 2], HEAP32[P >> 2] = da, ea = ha + da, da = HEAP32[Q >> 2], HEAP32[Q >> 2] = ea, ha = da + ea, ea = HEAP32[V >> 2], HEAP32[V >>
                            2] = ha, da = ea + ha, ha = HEAP32[T >> 2], HEAP32[T >> 2] = da, ea = ha + da, da = HEAP32[S >> 2], HEAP32[S >> 2] = ea, ha = da + ea, ea = HEAP32[N >> 2], HEAP32[N >> 2] = ha, da = ea + ha, ha = HEAP32[K >> 2], HEAP32[K >> 2] = da, ea = ha + da, da = HEAP32[H >> 2], HEAP32[H >> 2] = ea, ha = da + ea, ea = HEAP32[I >> 2], HEAP32[I >> 2] = ha, da = ea + ha, ha = HEAP32[L >> 2], HEAP32[L >> 2] = da, ea = ha + da, da = HEAP32[J >> 2], HEAP32[J >> 2] = ea, ha = da + ea, ea = HEAP32[E >> 2], HEAP32[E >> 2] = ha, HEAP32[F >> 2] = ea + ha);
                        if (B) {
                            ga = U;
                            ca = ba;
                            for (X = 0;;)
                                if (ha = HEAP32[ca >> 2], ia = 16777473 == (ha | 0) ? 13 : 65792 == (ha | 0) ? 6 : 65537 == (ha | 0) ? 10 : 16842752 ==
                                    (ha | 0) ? 3 : 1 == (ha | 0) ? 8 : 16777216 == (ha | 0) ? 1 : 16777217 == (ha | 0) ? 9 : 65536 == (ha | 0) ? 2 : 16843009 == (ha | 0) ? 15 : 0 == (ha | 0) ? 0 : 65793 == (ha | 0) ? 14 : 16843008 == (ha | 0) ? 7 : 257 == (ha | 0) ? 12 : 16777472 == (ha | 0) ? 5 : 16842753 == (ha | 0) ? 11 : 256 == (ha | 0) ? 4 : ga, ha = b + (ia << 2), ea = HEAP32[ha >> 2], HEAP32[ha >> 2] = ea + 1, HEAP32[ka + (ea << 2) >> 2] = X, ea = X + 1, (ea | 0) < (v | 0)) ga = ia, ca += z, X = ea;
                                else {
                                    Y = D;
                                    ja = ba;
                                    fa = ia;
                                    break
                                }
                        } else Y = D, ja = ba, fa = U
                    } else Y = r, ja = $, fa = aa;
                while (0);
                if (C) {
                    $ = ja;
                    ba = 0;
                    ka = Z;
                    for (ea = Y;;) {
                        ha = $ - 4;
                        ga = (da = 0 == ea << 24 >> 24) ? y : A;
                        aa = da ? A : y;
                        X = da & 1;
                        _memset(l, 0, 64) | 0;
                        if (B) {
                            da = ka;
                            ka = ha;
                            for (ea = 0;;)
                                if (Z = HEAP32[ka >> 2], da = 16777217 == (Z | 0) ? 9 : 65536 == (Z | 0) ? 2 : 16843009 == (Z | 0) ? 15 : 16777473 == (Z | 0) ? 13 : 65792 == (Z | 0) ? 6 : 16842753 == (Z | 0) ? 11 : 256 == (Z | 0) ? 4 : 257 == (Z | 0) ? 12 : 16777472 == (Z | 0) ? 5 : 0 == (Z | 0) ? 0 : 65537 == (Z | 0) ? 10 : 16842752 == (Z | 0) ? 3 : 1 == (Z | 0) ? 8 : 16777216 == (Z | 0) ? 1 : 65793 == (Z | 0) ? 14 : 16843008 == (Z | 0) ? 7 : da, Z = b + (da << 2), HEAP32[Z >> 2] += 1, Z = ea + 1, (Z | 0) < (v | 0)) ka += z, ea = Z;
                                else {
                                    ra = da;
                                    break
                                }
                        } else ra = ka;
                        x ? (ea = HEAP32[F >> 2], HEAP32[F >> 2] = 0, ka = HEAP32[E >> 2], HEAP32[E >> 2] = ea, da = ka + ea, ea = HEAP32[J >> 2], HEAP32[J >> 2] =
                            da, ka = ea + da, da = HEAP32[L >> 2], HEAP32[L >> 2] = ka, ea = da + ka, ka = HEAP32[I >> 2], HEAP32[I >> 2] = ea, da = ka + ea, ea = HEAP32[H >> 2], HEAP32[H >> 2] = da, ka = ea + da, da = HEAP32[K >> 2], HEAP32[K >> 2] = ka, ea = da + ka, ka = HEAP32[N >> 2], HEAP32[N >> 2] = ea, da = ka + ea, ea = HEAP32[S >> 2], HEAP32[S >> 2] = da, ka = ea + da, da = HEAP32[T >> 2], HEAP32[T >> 2] = ka, ea = da + ka, ka = HEAP32[V >> 2], HEAP32[V >> 2] = ea, da = ka + ea, ea = HEAP32[Q >> 2], HEAP32[Q >> 2] = da, ka = ea + da, da = HEAP32[P >> 2], HEAP32[P >> 2] = ka, ea = da + ka, ka = HEAP32[M >> 2], HEAP32[M >> 2] = ea, da = ka + ea, ea = HEAP32[R >> 2], HEAP32[R >> 2] = da, HEAP32[O >>
                                2] = ea + da) : (da = HEAP32[O >> 2], HEAP32[O >> 2] = 0, ea = HEAP32[R >> 2], HEAP32[R >> 2] = da, ka = ea + da, da = HEAP32[M >> 2], HEAP32[M >> 2] = ka, ea = da + ka, ka = HEAP32[P >> 2], HEAP32[P >> 2] = ea, da = ka + ea, ea = HEAP32[Q >> 2], HEAP32[Q >> 2] = da, ka = ea + da, da = HEAP32[V >> 2], HEAP32[V >> 2] = ka, ea = da + ka, ka = HEAP32[T >> 2], HEAP32[T >> 2] = ea, da = ka + ea, ea = HEAP32[S >> 2], HEAP32[S >> 2] = da, ka = ea + da, da = HEAP32[N >> 2], HEAP32[N >> 2] = ka, ea = da + ka, ka = HEAP32[K >> 2], HEAP32[K >> 2] = ea, da = ka + ea, ea = HEAP32[H >> 2], HEAP32[H >> 2] = da, ka = ea + da, da = HEAP32[I >> 2], HEAP32[I >> 2] = ka, ea = da + ka, ka = HEAP32[L >>
                            2], HEAP32[L >> 2] = ea, da = ka + ea, ea = HEAP32[J >> 2], HEAP32[J >> 2] = da, ka = ea + da, da = HEAP32[E >> 2], HEAP32[E >> 2] = ka, HEAP32[F >> 2] = da + ka);
                        if (B) {
                            ka = ra;
                            for (da = 0;;)
                                if (ea = HEAP32[ga + (da << 2) >> 2], Z = HEAP32[$ + (Math_imul(ea, z) - 4) >> 2], ka = 16842753 == (Z | 0) ? 11 : 256 == (Z | 0) ? 4 : 65793 == (Z | 0) ? 14 : 16843008 == (Z | 0) ? 7 : 0 == (Z | 0) ? 0 : 257 == (Z | 0) ? 12 : 16777472 == (Z | 0) ? 5 : 16843009 == (Z | 0) ? 15 : 16777217 == (Z | 0) ? 9 : 65536 == (Z | 0) ? 2 : 1 == (Z | 0) ? 8 : 16777216 == (Z | 0) ? 1 : 65537 == (Z | 0) ? 10 : 16842752 == (Z | 0) ? 3 : 16777473 == (Z | 0) ? 13 : 65792 == (Z | 0) ? 6 : ka, Z = b + (ka << 2), ca = HEAP32[Z >> 2], HEAP32[Z >>
                                        2] = ca + 1, HEAP32[aa + (ca << 2) >> 2] = ea, ea = da + 1, (ea | 0) < (v | 0)) da = ea;
                                else {
                                    sa = ka;
                                    break
                                }
                        } else sa = ra;
                        da = ba + 1;
                        if ((da | 0) < (G | 0)) $ = ha, ba = da, ka = sa, ea = X;
                        else {
                            ta = sa;
                            break
                        }
                    }
                } else ta = Z;
                ea = p + 1;
                if ((ea | 0) < (t | 0)) aa = fa, w += s, Z = ta, p = ea, y += v << 2;
                else break
            }
        }
    }
    while (0);
    a: do
        if (127 == d) {
            if (0 != (h & 65536 | 0)) {
                ta = u + HEAP32[u >> 2];
                fa = HEAP32[f + 20 >> 2];
                sa = f + HEAP32[f >> 2];
                0 == (fa | 0) ? d = 131 : 0 != (HEAP32[g >> 2] & 65536 | 0) ? d = 131 : (ra = HEAP32[a + 4408 >> 2], ka = HEAP32[ra + (HEAP32[ra >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[ka + 20 >> 2], ka + HEAP32[ka >> 2]), wa = 0);
                do
                    if (131 ==
                        d)
                        if (ka = _jtga(a, 4, fa, HEAP32[j >> 2], i), 0 == (ka | 0)) wa = 0;
                        else if (0 >= (fa | 0)) wa = ka;
                else {
                    ra = HEAP32[a + 205568 >> 2];
                    b = ka + HEAP32[ka >> 2];
                    da = sa;
                    for (A = 0;;)
                        if (HEAP32[b >> 2] = HEAP32[ra + (44 * HEAP32[da >> 2] & -1) + 28 >> 2], Y = A + 1, (Y | 0) < (fa | 0)) b += 4, da += 4, A = Y;
                        else {
                            wa = ka;
                            break
                        }
                }
                while (0);
                if (0 == _jtgri(a, t, s, v, wa, ta) << 24 >> 24) d = 0;
                else break;
                STACKTOP = c;
                return d
            }
            if (0 != (h & 8 | 0)) {
                fa = u + HEAP32[u >> 2];
                if (!((s | 0) == (v | 0) & 18724 < (v | 0))) {
                    if (0 == _jtgrx(a, t, s, v, f, fa) << 24 >> 24) d = 0;
                    else break;
                    STACKTOP = c;
                    return d
                }
                sa = 1 == (HEAP32[a + 1096 >> 2] | 0);
                ka = sa & 1;
                A = f +
                    HEAP32[f >> 2];
                da = _jtga(a, 4, 65536, 1, 0);
                if (0 == (da | 0)) return d = 0, STACKTOP = c, d;
                b = da + HEAP32[da >> 2];
                da = _jtga(a, 4, s, 1, 0);
                if (0 == (da | 0)) return d = 0, STACKTOP = c, d;
                da = ra = da + HEAP32[da >> 2];
                if (0 >= (t | 0)) break;
                Y = 0 < (s | 0);
                ja = ka ^ 1;
                ia = da + (s << 2);
                X = 0;
                ca = A;
                for (A = fa;;) {
                    fa = ca;
                    if (Y) {
                        U = ga = 0;
                        for (ea = ca;;)
                            if (y = (0 > HEAPF64[ea >> 3] | 0) + ga, p = U + 1, (p | 0) < (s | 0)) ga = y, U = p, ea += 8;
                            else {
                                za = y;
                                break
                            }
                    } else za = 0;
                    U = (ea = 0 < (za | 0) & (za | 0) < (s | 0)) ? da : A;
                    ga = ea ? A : da;
                    (y = (za | 0) == (s | 0)) ? (_grcol(65536, 0, b, s, 0, ga, 4, fa, ja, 0, 0), _grcol(65536, 0, b, s, ga, U, 4, fa + 2, ja, 0, 0),
                        z = ja) : (_grcol(65536, 0, b, s, 0, ga, 4, fa, ka, 0, 0), _grcol(65536, 0, b, s, ga, U, 4, fa + 2, ka, 0, 0), z = ka);
                    _grcol(65536, 0, b, s, U, ga, 4, fa + 4, z, 0, 0);
                    _grcol(ea ? 65536 : 32768, y ? 32768 : 0, b, s, ga, U, 4, fa + 6, (sa ^ y) & 1, 0, 0);
                    b: do
                        if (ea && (sa ? (_memcpy(A + (za << 2), ra, s - za << 2) | 0, z = ia, p = A) : (y = da + (za << 2), U = s - za, _memcpy(A, y, U << 2) | 0, z = y, p = A + (U << 2)), !(-1 >= (za | 0)))) {
                            y = U = HEAPF64[ca + (HEAP32[z - 4 >> 2] << 3) >> 3];
                            ga = 0;
                            Z = z;
                            w = 0;
                            for (aa = U;;) {
                                U = Z - 4;
                                do
                                    if (y != aa)
                                        if (G = w - ga, 0 < (G | 0)) {
                                            fa = p;
                                            ta = Z;
                                            for (z = 0;;)
                                                if (HEAP32[fa >> 2] = HEAP32[ta >> 2], z += 1, (z | 0) < (G | 0)) fa += 4, ta += 4;
                                                else break;
                                            fa = p + (G << 2);
                                            G = w;
                                            ta = HEAPF64[ca + (HEAP32[U >> 2] << 3) >> 3]
                                        } else fa = p, G = w, ta = aa;
                                else fa = p, G = ga, ta = y; while (0);
                                if ((w | 0) >= (za | 0)) break b;
                                z = HEAPF64[ca + (HEAP32[Z - 8 >> 2] << 3) >> 3];
                                y = ta;
                                ga = G;
                                p = fa;
                                Z = U;
                                w += 1;
                                aa = z
                            }
                        }
                    while (0);
                    ea = X + 1;
                    if ((ea | 0) < (t | 0)) X = ea, ca += s << 3, A += s << 2;
                    else break a
                }
            }
            if (0 != (h & 4 | 0)) {
                if (0 == _jtgri(a, t, s, v, f, u + HEAP32[u >> 2]) << 24 >> 24) d = 0;
                else break;
                STACKTOP = c;
                return d
            }
            A = u + HEAP32[u >> 2];
            if (0 == (h & 131075 | 0)) {
                if (0 == _jtgrx(a, t, s, v, f, A) << 24 >> 24) d = 0;
                else break;
                STACKTOP = c;
                return d
            }
            ca = c;
            X = HEAP32[g >> 2];
            da = X & 131072;
            ia = (s << (da >>> 17) | 0) / (v | 0) & -1;
            if ((ia | 0) > Math_log(m)) {
                if (0 == _jtgrx(a, t, s, v, f, A) << 24 >> 24) d = 0;
                else break;
                STACKTOP = c;
                return d
            }
            ra = 0 != (X & 1 | 0) ? 2 : 256;
            sa = ra << 2;
            b = f + HEAP32[f >> 2];
            ka = 1 == (HEAP32[a + 1096 >> 2] | 0);
            if (1 < (ia | 0)) {
                ja = _jtga(a, 4, v, 1, 0);
                if (0 == (ja | 0)) return d = 0, STACKTOP = c, d;
                G = ja + HEAP32[ja >> 2]
            } else G = 0;
            if (!(0 >= (t | 0))) {
                ja = 0 != (da | 0);
                Y = ((X >>> 17 | -2) ^ 1) + ia;
                ta = ra - 1;
                ea = 0 == ((ia | 0) % 2 & 255) << 24 >> 24;
                fa = 0 < (v | 0);
                aa = ja ? 1 : (X >>> 16 | -3) ^ 2;
                w = ia - 1;
                Z = 0 < (w | 0);
                p = Math_imul(ia, v) | 0;
                ga = b;
                y = 0;
                for (X = A;;) {
                    ha = ga + Y;
                    z = ea ? G : X;
                    _memset(ca, 0, sa) |
                        0;
                    if (fa) {
                        B = ha;
                        for (F = 0;;)
                            if (E = c + (HEAPU8[B] << 2), HEAP32[E >> 2] += 1, E = F + 1, (E | 0) < (v | 0)) B += ia, F = E;
                            else break
                    }
                    if (ka)
                        for (B = F = 0;;)
                            if (E = c + (B << 2), J = HEAP32[E >> 2], HEAP32[E >> 2] = F, E = B + 1, (E | 0) < (ra | 0)) F = J + F, B = E;
                            else break;
                    else {
                        B = ta;
                        for (E = F = 0;;)
                            if (J = c + (B << 2), L = HEAP32[J >> 2], HEAP32[J >> 2] = F, J = E + 1, (J | 0) < (ra | 0)) B -= 1, F = L + F, E = J;
                            else break
                    }
                    if (fa) {
                        E = ha;
                        for (F = 0;;)
                            if (B = c + (HEAPU8[E] << 2), J = HEAP32[B >> 2], HEAP32[B >> 2] = J + 1, HEAP32[z + (J << 2) >> 2] = F, J = F + 1, (J | 0) < (v | 0)) E += ia, F = J;
                            else break
                    }
                    b: do
                        if (Z) {
                            if (fa) Ba = ha, ua = 0, ya = aa, xa = ea;
                            else
                                for (F =
                                    0;;) {
                                    _memset(ca, 0, sa) | 0;
                                    if (ka)
                                        for (z = E = 0;;)
                                            if (J = c + (z << 2), B = HEAP32[J >> 2], HEAP32[J >> 2] = E, J = z + 1, (J | 0) < (ra | 0)) E = B + E, z = J;
                                            else break;
                                    else {
                                        z = ta;
                                        for (U = E = 0;;)
                                            if (J = c + (z << 2), B = HEAP32[J >> 2], HEAP32[J >> 2] = E, J = U + 1, (J | 0) < (ra | 0)) z -= 1, E = B + E, U = J;
                                            else break
                                    }
                                    U = F + 1;
                                    if ((U | 0) < (w | 0)) F = U;
                                    else break b
                                }
                            for (;;) {
                                F = Ba + ya;
                                U = xa ? G : X;
                                _memset(ca, 0, sa) | 0;
                                E = F;
                                for (z = 0;;)
                                    if (J = c + (HEAPU8[E] << 2), HEAP32[J >> 2] += 1, J = z + 1, (J | 0) < (v | 0)) E += ia, z = J;
                                    else break;
                                z = xa ^ 1;
                                E = xa ? X : G;
                                if (ka)
                                    for (B = J = 0;;)
                                        if (L = c + (B << 2), I = HEAP32[L >> 2], HEAP32[L >> 2] = J, L = B + 1, (L | 0) < (ra |
                                                0)) J = I + J, B = L;
                                        else {
                                            oa = 0;
                                            break
                                        } else {
                                    B = ta;
                                    for (L = J = 0;;)
                                        if (I = c + (B << 2), H = HEAP32[I >> 2], HEAP32[I >> 2] = J, I = L + 1, (I | 0) < (ra | 0)) B -= 1, J = H + J, L = I;
                                        else {
                                            oa = 0;
                                            break
                                        }
                                }
                                for (;;)
                                    if (L = HEAP32[U + (oa << 2) >> 2], J = c + (HEAPU8[Ba + ((Math_imul(L, ia) | 0) + ya)] << 2), B = HEAP32[J >> 2], HEAP32[J >> 2] = B + 1, HEAP32[E + (B << 2) >> 2] = L, L = oa + 1, (L | 0) < (v | 0)) oa = L;
                                    else break;
                                b = ja ? 1 == (ya | 0) ? -3 : 1 : ya;
                                E = ua + 1;
                                if ((E | 0) < (w | 0)) Ba = F, ua = E, ya = b, xa = z;
                                else break
                            }
                        }
                    while (0);
                    ha = y + 1;
                    if ((ha | 0) < (t | 0)) ga += p, y = ha, X += v << 2;
                    else break
                }
            }
        }
    while (0);
    _jttraverse(a, u, 654);
    v = u + 16;
    HEAP32[v >>
        2] += 1;
    _jttpop(a, e);
    d = _jttpush(a, u);
    STACKTOP = c;
    return d
}

function _jtgri(a, f, d, c, b, e) {
    var g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I;
    g = b;
    h = HEAP32[b >> 2];
    j = g + h;
    i = (d | 0) / (c | 0) & -1;
    l = c << 2;
    k = HEAP32[b + 20 >> 2];
    m = (k | 0) / 2 & -1;
    (m << 1 | 0) < (k | 0) ? (n = HEAP32[j >> 2], p = h + (g + 4), r = q = n) : (n = 0 == (k | 0), p = j, q = n ? 0 : 2147483647, r = n ? 0 : -2147483648);
    if (1 < (k | 0)) {
        k = r;
        n = q;
        g = 0;
        for (h = p;;)
            if (p = HEAP32[h >> 2], s = HEAP32[h + 4 >> 2], (p | 0) < (s | 0) ? (t = (p | 0) < (n | 0) ? p : n, u = (k | 0) < (s | 0) ? s : k) : (t = (s | 0) < (n | 0) ? s : n, u = (k | 0) < (p | 0) ? p : k), p = g + 1, (p | 0) < (m | 0)) k = u, n = t, g = p, h += 8;
            else {
                w = u;
                v = t;
                break
            }
    } else w = r, v = q;
    q = w - v;
    w = 0 > (q | 0) | 2147483647 == (q | 0) ? 0 : q + 1;
    do
        if (!(0 == (w | 0) | (l | 0) < (w | 0)) && (q = c | 0, !(0.69 * (i | 0) * (w + (c << 1) | 0) > q * Math_log(q)))) {
            0 < (v | 0) ? (b = (q = (v | 0) < (l - w | 0)) ? 0 : v, w = (q ? v : 0) + w) : b = v;
            q = _jtga(a, 4, w, 1, 0);
            if (0 == (q | 0)) return x = 0;
            q = r = q + HEAP32[q >> 2];
            t = w << 2;
            u = 1 == (HEAP32[a + 1096 >> 2] | 0);
            if (1 < (i | 0)) {
                h = _jtga(a, 4, c, 1, 0);
                if (0 == (h | 0)) return x = 0;
                a = h + HEAP32[h >> 2]
            } else a = 0;
            if (0 >= (f | 0)) return x = 1;
            h = i - 1;
            g = 0 == (b | 0);
            n = i - 2;
            k = -1 < (n | 0);
            m = 0 < (c | 0);
            p = 0 < (w | 0);
            s = m ^ 1;
            for (v = 0;;) {
                _memset(r, 0, t) | 0;
                l = j + (h << 2);
                do
                    if (g) {
                        if (m) {
                            y = 0;
                            for (z = l;;)
                                if (A = q + (HEAP32[z >>
                                        2] << 2), HEAP32[A >> 2] += 1, A = y + 1, (A | 0) < (c | 0)) y = A, z += i << 2;
                                else break
                        }
                    } else if (m) {
                    y = 0;
                    for (z = l;;)
                        if (A = q + (HEAP32[z >> 2] - b << 2), HEAP32[A >> 2] += 1, A = y + 1, (A | 0) < (c | 0)) y = A, z += i << 2;
                        else break
                } while (0);
                do
                    if (u) {
                        if (p)
                            for (D = z = 0;;)
                                if (A = q + (z << 2), y = HEAP32[A >> 2], 0 == (y | 0) ? A = D : (HEAP32[A >> 2] = D, A = y + D), y = z + 1, (y | 0) < (w | 0)) z = y, D = A;
                                else break
                    } else if (p) {
                    B = D = 0;
                    for (y = w;;)
                        if (y -= 1, A = q + (y << 2), z = HEAP32[A >> 2], 0 == (z | 0) ? A = B : (HEAP32[A >> 2] = B, A = z + B), z = D + 1, (z | 0) < (w | 0)) D = z, B = A;
                        else break
                } while (0);
                do
                    if (g) {
                        if (m) {
                            A = l;
                            for (D = 0;;)
                                if (y = q + (HEAP32[A >>
                                        2] << 2), z = HEAP32[y >> 2], HEAP32[y >> 2] = z + 1, HEAP32[e + (z << 2) >> 2] = D, z = D + 1, (z | 0) < (c | 0)) A += i << 2, D = z;
                                else break
                        }
                    } else if (m) {
                    A = l;
                    for (D = 0;;)
                        if (z = q + (HEAP32[A >> 2] - b << 2), y = HEAP32[z >> 2], HEAP32[z >> 2] = y + 1, HEAP32[e + (y << 2) >> 2] = D, y = D + 1, (y | 0) < (c | 0)) A += i << 2, D = y;
                        else break
                } while (0);
                do
                    if (k) {
                        y = l;
                        z = n;
                        for (A = 0;;) {
                            D = y - 4;
                            G = (B = 0 == A << 24 >> 24) ? a : e;
                            C = B ? e : a;
                            B = A ^ 1;
                            _memset(r, 0, t) | 0;
                            do
                                if (g) {
                                    if (m)
                                        for (F = 0;;)
                                            if (E = q + (HEAP32[y + (Math_imul(HEAP32[C + (F << 2) >> 2], i) - 1 << 2) >> 2] << 2), HEAP32[E >> 2] += 1, E = F + 1, (E | 0) < (c | 0)) F = E;
                                            else break
                                } else if (m)
                                for (F =
                                    0;;)
                                    if (E = q + (HEAP32[y + (Math_imul(HEAP32[C + (F << 2) >> 2], i) - 1 << 2) >> 2] - b << 2), HEAP32[E >> 2] += 1, E = F + 1, (E | 0) < (c | 0)) F = E;
                                    else break;
                            while (0);
                            do
                                if (u) {
                                    if (p)
                                        for (L = J = 0;;)
                                            if (E = q + (L << 2), F = HEAP32[E >> 2], 0 == (F | 0) ? E = J : (HEAP32[E >> 2] = J, E = F + J), F = L + 1, (F | 0) < (w | 0)) J = E, L = F;
                                            else break
                                } else if (p) {
                                I = 0;
                                E = w;
                                for (J = 0;;)
                                    if (F = E - 1, E = q + (F << 2), L = HEAP32[E >> 2], 0 == (L | 0) ? E = I : (HEAP32[E >> 2] = I, E = L + I), L = J + 1, (L | 0) < (w | 0)) I = E, E = F, J = L;
                                    else break
                            } while (0);
                            do
                                if (g) {
                                    if (m)
                                        for (J = 0;;)
                                            if (L = HEAP32[C + (J << 2) >> 2], F = q + (HEAP32[y + (Math_imul(L, i) - 1 << 2) >> 2] << 2), E =
                                                HEAP32[F >> 2], HEAP32[F >> 2] = E + 1, HEAP32[G + (E << 2) >> 2] = L, L = J + 1, (L | 0) < (c | 0)) J = L;
                                            else break
                                } else if (m)
                                for (J = 0;;)
                                    if (L = HEAP32[C + (J << 2) >> 2], E = q + (HEAP32[y + (Math_imul(L, i) - 1 << 2) >> 2] - b << 2), F = HEAP32[E >> 2], HEAP32[E >> 2] = F + 1, HEAP32[G + (F << 2) >> 2] = L, L = J + 1, (L | 0) < (c | 0)) J = L;
                                    else break;
                            while (0);
                            if (0 < (z | 0)) y = D, z -= 1, A = B;
                            else break
                        }
                        if (!(1 == A << 24 >> 24 | s))
                            for (y = 0;;)
                                if (HEAP32[e + (y << 2) >> 2] = HEAP32[a + (y << 2) >> 2], z = y + 1, (z | 0) < (c | 0)) y = z;
                                else break
                    }
                while (0);
                l = v + 1;
                if ((l | 0) < (f | 0)) j += d << 2, v = l, e += c << 2;
                else {
                    x = 1;
                    break
                }
            }
            return x
        }
    while (0);
    if (!((d |
            0) == (c | 0) & 43690 < (c | 0))) return x = _jtgrx(a, f, d, c, b, e);
    b = 1 == (HEAP32[a + 1096 >> 2] | 0) | 0;
    c = _jtga(a, 4, 65536, 1, 0);
    if (0 == (c | 0)) return 0;
    y = c + HEAP32[c >> 2];
    c = _jtga(a, 4, d, 1, 0);
    if (0 == (c | 0)) return 0;
    a = c + HEAP32[c >> 2];
    if (0 < (f | 0)) c = 0, g = j, h = e;
    else return 1;
    for (;;)
        if (e = g, _grcol(65536, 0, y, d, 0, a, 2, e, b, 0, 0), _grcol(65536, 0, y, d, a, h, 2, e + 2, b, 1, 0), e = c + 1, (e | 0) < (f | 0)) c = e, g += d << 2, h += d << 2;
        else {
            x = 1;
            break
        }
    return x
}

function _ltII(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP32[j >> 2] | 0) < (HEAP32[g >> 2] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 4, j += 4, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 4;
                i = HEAP32[j >> 2];
                if (f) {
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP32[k >> 2] | 0) < (i | 0) | 0, a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 1;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b =
                g + 4;
            k = HEAP32[g >> 2];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = (k | 0) < (HEAP32[j >> 2] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 4, f += 1;
                    else break;
                a += c << 2
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _jtnub(a, f) {
    var d;
    if (0 == (f | 0)) return 0;
    if (0 == (HEAP32[f + 12 >> 2] & 64512 | 0)) {
        if (0 == (HEAP32[f + 4 >> 2] & 10 | 0)) return d = _jtindexofsub(a, 3, f, f);
        d = HEAP32[a + 205336 >> 2];
        0 != (d | 0) && (HEAP32[d >> 2] = HEAP32[d + 4 >> 2]);
        d = _jtindexofsub(a, 2, f, f)
    } else d = _jtnubsievesp(a, f);
    return d = _jtrepeat(a, d, f)
}

function _jtmat(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u;
    d = 0;
    if (0 == (f | 0)) return 0;
    b = HEAP32[f + 24 >> 2];
    e = f + HEAP32[f >> 2];
    1 < (b | 0) ? (g = b - 2, h = HEAP32[f + 28 + (g << 2) >> 2], j = g, d = 6) : 0 == (b | 0) ? (i = 0, m = k = l = 1, n = -2) : (h = 1, j = b - 2, d = 6);
    a: do
        if (6 == d) {
            g = HEAP32[f + 28 + (b - 1 << 2) >> 2];
            if (0 < (j | 0)) {
                for (p = 0;;) {
                    i = p + 1;
                    if (0 == (HEAP32[f + 28 + (p << 2) >> 2] | 0)) {
                        l = i = 0;
                        k = h;
                        m = g;
                        n = j;
                        break a
                    }
                    if ((i | 0) < (j | 0)) p = i;
                    else break
                }
                i = 0;
                q = 1;
                for (r = 2 < (b | 0) ? 2 - b : 0;;) {
                    d = Math_imul(HEAP32[f + 28 + (i << 2) >> 2], q) | 0;
                    if ((d | 0) < (q | 0)) break;
                    r = d + r;
                    q = i + 1;
                    if ((q | 0) < (j | 0)) i = q, q = d;
                    else {
                        i = r;
                        l = d;
                        k = h;
                        m = g;
                        n = j;
                        break a
                    }
                }
                g = HEAP32[a + 4408 >> 2];
                r = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2];
                _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]);
                return c = 0
            }
            i = 2 < (b | 0) ? 2 - b : 0;
            l = 1;
            k = h;
            m = g;
            n = j
        }
    while (0);
    j = k | 0;
    h = (l | 0) * j;
    2147483647 < h ? (p = HEAP32[a + 4408 >> 2], d = HEAP32[p + (HEAP32[p >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), s = 0) : s = h & -1;
    h = s + (0 != (k | 0) ? i : 0);
    i = a + 204545;
    if (0 != (HEAP8[i] | 0)) return 0;
    if (-1 >= (h | 0)) return s = HEAP32[a + 4408 >> 2], d = HEAP32[s + (HEAP32[s >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[d + 20 >> 2], d + HEAP32[d >>
        2]), 0;
    d = m | 0;
    s = (h | 0) * d;
    if (2147483647 < s)
        if (p = HEAP32[a + 4408 >> 2], r = HEAP32[p + (HEAP32[p >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), 0 == (HEAP8[i] | 0)) g = 0;
        else return 0;
    else g = s & -1;
    s = _jtga(a, 2, g, 2, 0);
    if (0 == (s | 0)) return 0;
    HEAP32[s + 28 >> 2] = h;
    HEAP32[s + 32 >> 2] = m;
    h = s + HEAP32[s >> 2];
    2 < (b | 0) && _memset(h, 32, g) | 0;
    if (0 == (g | 0)) return s;
    g = j * d;
    2147483647 < g ? (d = HEAP32[a + 4408 >> 2], j = HEAP32[d + (HEAP32[d >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), t = 0) : t = g & -1;
    if (0 != (HEAP8[i] | 0)) return 0;
    if (0 >= (l | 0)) return s;
    i = b - 1;
    b = 0;
    g = h;
    for (h = e;;) {
        e = Math_imul(b, k) | 0;
        j = 0 == (e | 0) ? 0 : i;
        if (0 < (j | 0)) {
            a = g;
            d = 1;
            for (r = 0;;)
                if (p = Math_imul(HEAP32[f + 28 + (n - r << 2) >> 2], d) | 0, g = a + (0 == ((e | 0) % (p | 0) & -1 | 0) ? m : 0), q = r + 1, (q | 0) < (j | 0)) a = g, d = p, r = q;
                else {
                    u = g;
                    break
                }
        } else u = g;
        _memcpy(u, h, t) | 0;
        r = b + 1;
        if ((r | 0) < (l | 0)) b = r, g = u + t, h += t;
        else {
            c = s;
            break
        }
    }
    return c
}

function _jtamp(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b, na,
        Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf, Mf,
        ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    e = b + 8;
    g = a + 1152;
    h = HEAPF64[g >> 3];
    j = 0 != (f | 0);
    if (0 == (d | 0) | j ^ 1) return i = 0, STACKTOP = b, i;
    l = HEAP32[f + 12 >> 2];
    k = (HEAP32[d +
        12 >> 2] >>> 18 & 1 | l >>> 17 & 2) ^ 3;
    if (2 == (k | 0)) {
        m = HEAP32[d >> 2];
        n = m + 40;
        p = d + n;
        q = HEAP8[p];
        r = f + 20;
        s = HEAP32[r >> 2];
        t = 0 == (s | 0);
        do
            if (t) u = q, c = 17;
            else if (w = f + 24, v = HEAP32[w >> 2], x = 0 == (v | 0)) u = q, c = 17;
        else {
            if (y = -94 == q << 24 >> 24) {
                z = HEAP32[30648];
                A = m + 12;
                B = D = d + A;
                G = HEAP32[B >> 2];
                C = _jtequ(a, z, G);
                F = 0 != C << 24 >> 24;
                E = F & 1;
                if (!F) {
                    u = -94;
                    c = 17;
                    break
                }
                J = m + 8;
                I = L = d + J;
                H = HEAP32[I >> 2];
                if (K = 0 == (H | 0)) {
                    u = 0;
                    c = 17;
                    break
                }
                N = H + 12;
                S = HEAP32[N >> 2];
                T = S & 1835008;
                if (V = 0 == (T | 0)) {
                    u = 0;
                    c = 17;
                    break
                }
                P = Q = H;
                M = HEAP32[P >> 2];
                R = M + 40;
                O = Q + R;
                Z = aa = HEAP8[O];
                $ = E
            } else Z = q, $ = 0;
            if (ba = -55 == Z << 24 >> 24) ka = 0;
            else if (ea = -54 == Z << 24 >> 24) ka = 1;
            else {
                u = Z;
                c = 17;
                break
            }(ha = 0 == $ << 24 >> 24) ? (da = HEAP32[31134], ga = _jtindexofsub(a, ka, f, da), U = f, ca = ga, X = 766) : (HEAPF64[g >> 3] = 0, Y = HEAP32[31134], ja = _jtindexofsub(a, ka, f, Y), HEAPF64[g >> 3] = h, U = f, ca = ja, X = 3246)
        }
        while (0);
        a: do
            if (17 == c) {
                fa = u << 24 >> 24;
                if (-97 == (fa | 0)) {
                    ia = _jtfsmvfya(a, f);
                    if (ra = 0 == (ia | 0)) i = 0;
                    else {
                        U = ia;
                        ca = 0;
                        X = 3026;
                        break
                    }
                    STACKTOP = b;
                    return i
                }
                if (-93 != (fa | 0)) U = f, ca = 0, X = 286;
                else if (sa = m + 8, wa = ta = d + sa, za = HEAP32[wa >> 2], Ba = 0 == (za | 0)) U = f, ca = 0, X = 286;
                else if (ua = m + 12,
                    xa = ya = d + ua, oa = HEAP32[xa >> 2], pa = 0 == (oa | 0)) U = f, ca = 0, X = 286;
                else {
                    la = za + 12;
                    qa = HEAP32[la >> 2];
                    Da = qa & 4;
                    Aa = 0 == (Da | 0);
                    do
                        if (Aa)
                            if (Ea = a + 205336, Sa = HEAP32[Ea >> 2], HEAP32[Ea >> 2] = 0, Oa = _jtccvt(a, 4, za, e), HEAP32[Ea >> 2] = Sa, Ha = 0 == Oa << 24 >> 24) {
                                Ga = a + 4408;
                                db = Ia = Ma = HEAP32[Ga >> 2];
                                W = HEAP32[db >> 2];
                                Xa = W + 12;
                                fb = Ta = Ia + Xa;
                                mb = HEAP32[fb >> 2];
                                ma = mb + 20;
                                ab = HEAP32[ma >> 2];
                                $a = Na = mb;
                                Ua = HEAP32[$a >> 2];
                                Pa = Na + Ua;
                                _jtjsigstr(a, 3, ab, Pa);
                                U = f;
                                ca = 0;
                                X = 286;
                                break a
                            } else if (bb = HEAP32[e >> 2], La = 0 == (bb | 0)) {
                        U = f;
                        ca = 0;
                        X = 286;
                        break a
                    } else Ja = bb;
                    else Ja = za;
                    while (0);
                    Qa = Ja + 24;
                    Ya = HEAP32[Qa >> 2];
                    if (lb = 0 == (Ya | 0))
                        if (yb = Wa = Ja, Cb = HEAP32[yb >> 2], zb = Pb = Wa + Cb, Zb = HEAP32[zb >> 2], ac = 128 == (Zb | 0))
                            if (Hb = HEAP32[xa >> 2], Ib = 0 == (Hb | 0)) U = f, ca = 0, X = 286;
                            else {
                                Qb = Hb + 12;
                                Rb = HEAP32[Qb >> 2];
                                Ob = Rb & 4;
                                Bb = 0 == (Ob | 0);
                                do
                                    if (Bb)
                                        if (xb = a + 205336, dc = HEAP32[xb >> 2], HEAP32[xb >> 2] = 0, tb = _jtccvt(a, 4, Hb, b), HEAP32[xb >> 2] = dc, oc = 0 == tb << 24 >> 24) {
                                            Mb = a + 4408;
                                            Nb = Ra = Tb = HEAP32[Mb >> 2];
                                            sb = HEAP32[Nb >> 2];
                                            Ab = sb + 12;
                                            Lb = Eb = Ra + Ab;
                                            vb = HEAP32[Lb >> 2];
                                            wc = vb + 20;
                                            Ec = HEAP32[wc >> 2];
                                            Db = yc = vb;
                                            bc = HEAP32[Db >> 2];
                                            pb = yc + bc;
                                            _jtjsigstr(a, 3, Ec, pb);
                                            U =
                                                f;
                                            ca = 0;
                                            X = 286;
                                            break a
                                        } else if (Fb = HEAP32[b >> 2], jb = 0 == (Fb | 0)) {
                                    U = f;
                                    ca = 0;
                                    X = 286;
                                    break a
                                } else gc = Fb;
                                else gc = Hb;
                                while (0);
                                ic = gc + 24;
                                vc = HEAP32[ic >> 2];
                                if (hc = 0 == (vc | 0))
                                    if (qc = ad = gc, Uc = HEAP32[qc >> 2], kb = rc = ad + Uc, Jb = HEAP32[kb >> 2], $b = 3 == (Jb | 0)) {
                                        if (na = 0 == (f | 0)) return i = 0, STACKTOP = b, i;
                                        Vb = _jtga(a, 32, 2, 1, 0);
                                        if (kc = 0 == (Vb | 0)) return i = 0, STACKTOP = b, i;
                                        Wc = va = Vb;
                                        Yb = HEAP32[Wc >> 2];
                                        fc = _jtcrcvalidate(a, f);
                                        Kb = a + 204545;
                                        Gb = HEAP8[Kb];
                                        gd = 0 == Gb << 24 >> 24;
                                        if (!gd) return i = 0, STACKTOP = b, i;
                                        Gc = mc = va + Yb;
                                        dd = _jtga(a, 4, 256, 1, 0);
                                        if (kd = 0 == (dd | 0)) return i =
                                            HEAP32[Gc >> 2] = 0, STACKTOP = b, i;
                                        Vc = Fd = dd;
                                        Hd = HEAP32[Vc >> 2];
                                        bd = Fd + Hd;
                                        _memcpy(bd, 154568, 1024) | 0;
                                        HEAP32[Gc >> 2] = dd;
                                        cc = _jtga(a, 4, 1, 0, 0);
                                        (Ic = 0 == (cc | 0)) ? fd = 0: (Xc = xd = cc, Wd = HEAP32[Xc >> 2], Sb = Wb = xd + Wd, HEAP32[Sb >> 2] = fc, fd = cc);
                                        pc = Yb + 4;
                                        hd = zc = va + pc;
                                        HEAP32[hd >> 2] = fd;
                                        Ad = (Yc = 0 == (fd | 0)) ? 0 : Vb;
                                        if (Gd = 0 == (Ad | 0)) return i = 0, STACKTOP = b, i;
                                        U = f;
                                        ca = Ad;
                                        X = 528
                                    } else U = f, ca = 0, X = 286;
                                else uc = a + 4408, cd = xc = Ac = HEAP32[uc >> 2], jc = HEAP32[cd >> 2], Tc = jc + 56, Bc = Fc = xc + Tc, ec = HEAP32[Bc >> 2], Xb = ec + 20, sc = HEAP32[Xb >> 2], tc = nc = ec, Ub = HEAP32[tc >> 2], $c = nc + Ub, _jtjsigstr(a,
                                    14, sc, $c), U = f, ca = 0, X = 286
                            } else U = f, ca = 0, X = 286;
                    else Ca = a + 4408, Za = Fa = gb = HEAP32[Ca >> 2], qb = HEAP32[Za >> 2], ib = qb + 56, eb = ub = Fa + ib, rb = HEAP32[eb >> 2], wb = rb + 20, Ka = HEAP32[wb >> 2], nb = Va = rb, ob = HEAP32[nb >> 2], cb = Va + ob, _jtjsigstr(a, 14, Ka, cb), U = f, ca = 0, X = 286
                }
            }
        while (0);
        hb = a + 204545;
        ld = HEAP8[hb];
        ed = 0 == ld << 24 >> 24;
        if (!ed) return i = 0, STACKTOP = b, i;
        Jc = _jtga(a, 262144, 1, 0, 0);
        if (Oc = 0 == (Jc | 0)) return i = 0, STACKTOP = b, i;
        Pc = HEAP32[Jc >> 2];
        ke = Jc + Pc;
        HEAP32[ke >> 2] = X;
        Ed = Pc + 4;
        pd = Jc + Ed;
        HEAP32[pd >> 2] = 258;
        id = Pc + 8;
        Cc = Jc + id;
        HEAP32[Cc >> 2] = U;
        Qc = Pc +
            12;
        Zc = Jc + Qc;
        HEAP32[Zc >> 2] = d;
        vd = Pc + 16;
        $d = Jc + vd;
        HEAP32[$d >> 2] = ca;
        je = Pc + 20;
        Kc = Jc + je;
        HEAP32[Kc >> 2] = 0;
        Bd = Pc + 24;
        od = Jc + Bd;
        HEAP32[od >> 2] = 2147483647;
        Vd = Pc + 28;
        Zd = Jc + Vd;
        HEAP32[Zd >> 2] = 2147483647;
        Jd = Pc + 32;
        Md = Jc + Jd;
        HEAP32[Md >> 2] = 2147483647;
        Cd = Pc + 36;
        fe = Jc + Cd;
        HEAP32[fe >> 2] = 0;
        Xd = Pc + 40;
        qd = Jc + Xd;
        HEAP8[qd] = 38;
        i = Jc
    } else if (3 == (k | 0)) Od = a + 4408, Mc = HEAP32[Od >> 2], Dd = HEAP32[Mc >> 2], Td = Dd + 12, le = Mc + Td, me = HEAP32[le >> 2], wd = me + 20, Ie = HEAP32[wd >> 2], xe = HEAP32[me >> 2], ye = me + xe, _jtjsigstr(a, 3, Ie, ye), i = 0;
    else if (1 == (k | 0)) {
        Fe = d + 20;
        nf = HEAP32[Fe >>
            2];
        Je = 0 == (nf | 0);
        do
            if (Je) Id = 0, Qe = 272;
            else if (sd = d + 24, ge = HEAP32[sd >> 2], ud = 0 == (ge | 0)) Id = 0, Qe = 272;
        else {
            de = md = f;
            ae = HEAP32[de >> 2];
            Dc = ae + 40;
            Nc = md + Dc;
            yd = HEAP8[Nc];
            jd = ae + 20;
            lc = Sc = md + jd;
            nd = HEAP32[lc >> 2];
            Rc = (nd | 0) % 256 & -1;
            (Hc = -94 == yd << 24 >> 24) ? (Kd = HEAP32[30648], Rd = ae + 12, be = Nd = md + Rd, zd = HEAP32[be >> 2], we = _jtequ(a, Kd, zd), Lc = 0 != we << 24 >> 24, rd = Lc & 1, Lc ? (Cf = ae + 8, Te = td = md + Cf, pe = HEAP32[Te >> 2], (Pd = 0 == (pe | 0)) ? se = 0 : (Me = pe + 12, Sd = HEAP32[Me >> 2], $e = Sd & 1835008, (qe = 0 == ($e | 0)) ? se = 0 : (cf = Ce = pe, sf = HEAP32[cf >> 2], Ue = sf + 40, kf = Ce + Ue, se =
                Re = HEAP8[kf])), Ud = rd) : (se = -94, Ud = 0)) : (se = yd, Ud = 0);
            ce = (Rc | 0) % 8 & -1;
            (De = 7 == (ce | 0)) ? (Ge = (Rc | 0) / 8 & -1, We = He = Ge + 7, c = 58) : (Yd = -60 == se << 24 >> 24) ? Ne = 6: (We = Ee = (Se = -116 == se << 24 >> 24) ? 4 : -1, c = 58);
            if (58 == c)
                if (Ld = -1 < (We | 0)) Ne = We;
                else {
                    Id = 0;
                    Qe = 272;
                    break
                }(he = 0 == Ud << 24 >> 24) ? (Qd = HEAP32[31134], Id = re = _jtindexofsub(a, Ne, d, Qd), Qe = 328) : (HEAPF64[g >> 3] = 0, Ke = HEAP32[31134], Ae = _jtindexofsub(a, Ne, d, Ke), HEAPF64[g >> 3] = h, Id = Ae, Qe = 1368)
        }
        while (0);
        te = a + 204545;
        ie = HEAP8[te];
        ff = 0 == ie << 24 >> 24;
        if (!ff) return i = 0, STACKTOP = b, i;
        ue = _jtga(a, 262144,
            1, 0, 0);
        if (Oe = 0 == (ue | 0)) return i = 0, STACKTOP = b, i;
        ne = HEAP32[ue >> 2];
        ze = ue + ne;
        HEAP32[ze >> 2] = Qe;
        vf = ne + 4;
        lf = ue + vf;
        HEAP32[lf >> 2] = 258;
        Xe = ne + 8;
        Be = ue + Xe;
        HEAP32[Be >> 2] = f;
        hf = ne + 12;
        af = ue + hf;
        HEAP32[af >> 2] = d;
        zf = ne + 16;
        uf = ue + zf;
        HEAP32[uf >> 2] = Id;
        ve = ne + 20;
        If = ue + ve;
        HEAP32[If >> 2] = 0;
        Df = ne + 24;
        Ef = ue + Df;
        HEAP32[Ef >> 2] = 2147483647;
        Gf = ne + 28;
        of = ue + Gf;
        HEAP32[of >> 2] = 2147483647;
        Lf = ne + 32;
        pf = ue + Lf;
        HEAP32[pf >> 2] = 2147483647;
        bf = ne + 36;
        Bf = ue + bf;
        HEAP32[Bf >> 2] = 0;
        Pf = ne + 40;
        Ye = ue + Pf;
        HEAP8[Ye] = 38;
        i = ue
    } else if (0 == (k | 0)) {
        Hf = HEAP32[d >> 2];
        jf = Hf + 40;
        mf = d + jf;
        Le = HEAP8[mf];
        Ve = Hf + 24;
        df = d + Ve;
        wf = HEAP32[df >> 2];
        a: do
            if (51 == Le << 24 >> 24) Yf = Hf + 16, Qf = Jf = d + Yf, Sf = HEAP32[Qf >> 2], (Mf = 0 == (Sf | 0)) ? ee = 0 : (oe = Sf + 12, rf = HEAP32[oe >> 2], Ff = rf & 1835008, (xf = 0 == (Ff | 0)) ? ee = 0 : (qf = Pe = Sf, yf = HEAP32[qf >> 2], Nf = yf + 40, Zf = Pe + Nf, ee = tg = HEAP8[Zf])), c = 69;
            else
        if (38 == Le << 24 >> 24) ee = 0, c = 69;
        else if (j)
            if (Kf = l & 1835008, bg = 0 == (Kf | 0)) Ze = 0, gf = 2046, ef = 2048;
            else switch (Rf = lg = f, Ug = HEAP32[Rf >> 2], Vf = Ug + 40, Jg = lg + Vf, hg = HEAP8[Jg], Lg = hg << 24 >> 24, Lg | 0) {
                case -91:
                    $f = -91 == Le << 24 >> 24;
                    if (!$f) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    Ze = 2048;
                    gf = 2002;
                    ef = 2048;
                    break a;
                case 47:
                    ah = 44 == Le << 24 >> 24;
                    if (!ah) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    Ze = 0;
                    gf = 2440;
                    ef = 2048;
                    break a;
                case -124:
                    Ze = 16384;
                    gf = 744;
                    ef = 2048;
                    break a;
                case -126:
                    Ze = 8192;
                    gf = 744;
                    ef = 2048;
                    break a;
                case 59:
                    nh = -98 == Le << 24 >> 24;
                    if (!nh) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    dh = Hf + 8;
                    yh = mg = d + dh;
                    ng = ig = Bg = HEAP32[yh >> 2];
                    Ng = HEAP32[ng >> 2];
                    Ch = Ng + 40;
                    Dg = ig + Ch;
                    Vg = HEAP8[Dg];
                    if (!(64 == Vg << 24 >> 24 | -75 == Vg << 24 >> 24 | 38 == Vg << 24 >> 24 | -73 == Vg << 24 >> 24)) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    pg = Ng + 8;
                    Pg = zg = ig + pg;
                    cg = HEAP32[Pg >>
                        2];
                    if (dg = 0 == (cg | 0)) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    qg = cg + 12;
                    vg = HEAP32[qg >> 2];
                    bh = vg & 1835008;
                    if (Zg = 0 == (bh | 0)) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    wg = Eg = cg;
                    vh = HEAP32[wg >> 2];
                    Kh = vh + 40;
                    $g = Eg + Kh;
                    Ag = HEAP8[$g];
                    Lh = 60 == Ag << 24 >> 24;
                    if (!Lh) {
                        Ze = 0;
                        gf = 2046;
                        ef = 2048;
                        break a
                    }
                    Ze = 0;
                    gf = 404;
                    ef = 2048;
                    break a;
                default:
                    Ze = 0;
                    gf = 2046;
                    ef = 2048;
                    break a
            } else Ze = 0, gf = 2046, ef = 2048;
        while (0);
        a: do
            if (69 == c)
                if (xg = Hf + 12, rg = Mg = d + xg, Sg = HEAP32[rg >> 2], jg = 0 == (Sg | 0)) Ze = 0, gf = 2046, ef = 2048;
                else
        if (Uh = Sg + 12, Of = HEAP32[Uh >> 2], Tg = Of & 1835008, qi = 0 == (Tg | 0)) Ze = 0,
            gf = 2046, ef = 2048;
        else if (gi = eg = Sg, kg = HEAP32[gi >> 2], Qg = kg + 40, Wg = eg + Qg, wi = HEAP8[Wg], zh = -55 == wi << 24 >> 24)
            if (0 == ee << 24 >> 24 | 91 == ee << 24 >> 24 | 93 == ee << 24 >> 24)
                if (Wf = HEAP32[40246], di = Hf + 8, Mh = ch = d + di, Fg = HEAP32[Mh >> 2], Rg = _jtequ(a, Wf, Fg), Vh = 0 == Rg << 24 >> 24) Ze = 0, gf = 2046, ef = 2048;
                else {
                    eh = Gg = f;
                    kh = HEAP32[eh >> 2];
                    fh = kh + 40;
                    Wh = Gg + fh;
                    qh = HEAP8[Wh];
                    switch (qh << 24 >> 24) {
                        case 60:
                        case -125:
                        case 61:
                        case -107:
                        case -123:
                        case 62:
                            break;
                        default:
                            Ze = 0;
                            gf = 2046;
                            ef = 2048;
                            break a
                    }
                    Ze = 0;
                    gf = 2046;
                    ef = 2352
                } else Ze = 0, gf = 2046, ef = 2048;
        else Ze = 0, gf = 2046,
            ef = 2048;
        while (0);
        og = a + 204545;
        Og = HEAP8[og];
        Kg = 0 == Og << 24 >> 24;
        if (!Kg) return i = 0, STACKTOP = b, i;
        Ih = _jtga(a, 262144, 1, 0, 0);
        if (ai = 0 == (Ih | 0)) return i = 0, STACKTOP = b, i;
        wh = HEAP32[Ih >> 2];
        Xh = Ih + wh;
        HEAP32[Xh >> 2] = gf;
        Nh = wh + 4;
        Jh = Ih + Nh;
        HEAP32[Jh >> 2] = ef;
        lj = wh + 8;
        gh = Ih + lj;
        HEAP32[gh >> 2] = f;
        rh = wh + 12;
        Ph = Ih + rh;
        HEAP32[Ph >> 2] = d;
        hi = wh + 16;
        sh = Ih + hi;
        HEAP32[sh >> 2] = 0;
        fg = wh + 20;
        Yi = Ih + fg;
        HEAP32[Yi >> 2] = Ze;
        mj = wh + 24;
        xi = Ih + mj;
        HEAP32[xi >> 2] = wf;
        Hi = wh + 28;
        Ii = Ih + Hi;
        HEAP32[Ii >> 2] = wf;
        lh = wh + 32;
        yg = Ih + lh;
        HEAP32[yg >> 2] = wf;
        vj = wh + 36;
        Ji = Ih + vj;
        HEAP32[Ji >>
            2] = 0;
        Xj = wh + 40;
        yi = Ih + Xj;
        HEAP8[yi] = 38;
        i = Ih
    } else hh = a + 4408, Aj = HEAP32[hh >> 2], ih = HEAP32[Aj >> 2], Hj = ih + 80, zi = Aj + Hj, ni = HEAP32[zi >> 2], ti = ni + 20, Cg = HEAP32[ti >> 2], Ah = HEAP32[ni >> 2], th = ni + Ah, _jtjsigstr(a, 20, Cg, th), _jtwri(a, 4, 161016, 3, 121080), i = 0;
    STACKTOP = b;
    return i
}
function _jtaro(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    for (b = f;;) {
        if (0 == (b | 0)) {
            e = 0;
            d = 46;
            break
        }
        g = b + 12;
        if (0 == (HEAP32[g >> 2] & 1835008 | 0)) {
            p = n = m = k = l = i = j = h = 0;
            break
        }
        q = b;
        r = HEAP32[b >> 2];
        s = HEAP32[r + (q + 16) >> 2];
        t = HEAP32[r + (q + 20) >> 2];
        if (0 == (t & 2097152 | 0)) {
            d = 5;
            break
        } else b = s
    }
    if (46 == d) return STACKTOP = c, e;
    if (5 == d)
        if (f = q + r, i = HEAP8[r + (q + 40)], m = HEAP32[r + (q + 8) >> 2], q = HEAP32[r + (q + 12) >> 2], l = t >>> 20 & 1, d = 0 != (s | 0), t = d & 58 == i << 24 >> 24 ? l ^ 1 : 0, 51 == i << 24 >> 24) h = f, j = 3, k = t, n = q, p = s;
        else {
            d = 0 == t <<
                24 >> 24 ? (e = 0 != l << 24 >> 24) ? d & e & 1 : 0 != (q | 0) | 0 : 1;
            d += 0 != (m | 0) | 0;
            if (0 == (d | 0)) return e = _jtspella(a, b), STACKTOP = c, e;
            e = d;
            if (126 != i << 24 >> 24) h = f, j = e, k = t, n = q, p = s;
            else if (0 == (m | 0)) h = f, j = e, i = 126, k = t, m = 0, n = q, p = s;
            else if (0 == (HEAP32[m + 12 >> 2] & 33554432 | 0)) h = f, j = e, i = 126, k = t, n = q, p = s;
            else {
                d = HEAP32[m >> 2];
                e = HEAP32[m + 20 >> 2];
                g = _jtga(a, 2, e, 1, 0);
                if (0 == (g | 0)) return STACKTOP = c, 0;
                _memcpy(g + HEAP32[g >> 2], d + (m + 14), e) | 0;
                STACKTOP = c;
                return g
            }
        }
    s = _jtga(a, 32, 2, 1, 0);
    if (0 == (s | 0)) return STACKTOP = c, 0;
    e = s;
    d = HEAP32[s >> 2];
    t = e + d;
    if (0 != (HEAP32[g >>
            2] & 805567999 | 0)) {
        g = _jtga(a, 2, 1, 0, 0);
        0 == (g | 0) ? u = 0 : (HEAP8[g + HEAP32[g >> 2]] = 48, u = g);
        g = _jtravel(a, u);
        HEAP32[t >> 2] = g;
        if (0 == (g | 0)) return STACKTOP = c, 0;
        HEAP32[d + (e + 4) >> 2] = b;
        STACKTOP = c;
        return s
    }
    g = _jtga(a, 32, j, 1, 0);
    if (0 == (g | 0)) return STACKTOP = c, 0;
    u = g;
    q = HEAP32[g >> 2];
    if (0 < (j | 0) && (r = _jtaro(a, m), HEAP32[u + q >> 2] = r, 0 == (r | 0) || !(1 >= (j | 0)) && (b = 0 == k << 24 >> 24 ? 0 != l << 24 >> 24 ? p : n : _jtunparsem(a, HEAP32[30648], b), r = _jtaro(a, b), HEAP32[q + (u + 4) >> 2] = r, 0 == (r | 0) || !(2 >= (j | 0)) && (r = _jtaro(a, p), HEAP32[q + (u + 8) >> 2] = r, 0 == (r | 0))))) return STACKTOP =
        c, 0;
    0 == l << 24 >> 24 ? 0 == (HEAP32[h + 20 >> 2] & 16777216 | 0) ? (u = c, _spellit(i, u), b = 0 == (HEAP8[c + 2] | 0) ? 0 != (HEAP8[c + 1] | 0) ? 2 : 1 : 3, q = _jtga(a, 2, b, 1, 0), 0 == (q | 0) ? b = 0 : (_memcpy(q + HEAP32[q >> 2], u, b) | 0, b = q)) : (q = p, u = HEAP32[p >> 2], j = HEAP32[q + u >> 2], b = _jtga(a, 4, 1, 0, 0), 0 == (b | 0) ? h = 0 : (HEAP32[b + HEAP32[b >> 2] >> 2] = j, h = b), b = HEAP32[u + (q + 4) >> 2], q = _jtga(a, 4, 1, 0, 0), 0 == (q | 0) ? b = 0 : (HEAP32[q + HEAP32[q >> 2] >> 2] = b, b = q), b = _jtaro(a, _jtforeign(a, h, b))) : b = _jtaro(a, n);
    HEAP32[t >> 2] = b;
    if (0 == (b | 0)) return STACKTOP = c, 0;
    HEAP32[d + (e + 4) >> 2] = g;
    STACKTOP = c;
    return s
}
function _jtatco(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return b = 0;
    e = 0 == (HEAP32[f + 12 >> 2] & 262144 | 0);
    do
        if (!e && (g = d + 12, h = HEAP32[g >> 2], j = h & 262144, i = 0 == (j | 0), !i)) {
            k = l = f;
            m = HEAP32[k >> 2];
            n = m + 40;
            p = l + n;
            q = HEAP8[p];
            r = m + 8;
            t = s = l + r;
            u = HEAP32[t >> 2];
            w = m + 12;
            x = v = l + w;
            y = HEAP32[x >> 2];
            (z = 0 == (u | 0)) ? A = 0: (D = u + 12, B = HEAP32[D >> 2], G = B & 1835008, (C = 0 == (G | 0)) ? A = 0 : (E = F = u, J = HEAP32[E >> 2], L = J + 40, I = F + L, H = HEAP8[I], A = K = H << 24 >> 24));
            S = N = d;
            T = HEAP32[S >> 2];
            V = T + 40;
            Q = N + V;
            P = HEAP8[Q];
            M = q << 24 >> 24;
            a: do switch (M | 0) {
                    case -116:
                        R = -115 == P << 24 >> 24;
                        if (!R) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        O = 4096;
                        aa = 1482;
                        Z = 2046;
                        break;
                    case 63:
                        $ = P - 35;
                        ba = 2 > ($ & 255);
                        if (!ba) {
                            O = 0;
                            aa =
                                2648;
                            Z = 2046;
                            break a
                        }
                        O = 0;
                        aa = 22;
                        Z = 2046;
                        break;
                    case -91:
                        ka = -91 == P << 24 >> 24;
                        if (!ka) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        O = 2048;
                        aa = 2648;
                        Z = 2002;
                        break;
                    case -72:
                        ea = P - 35;
                        ha = 2 > (ea & 255);
                        if (!ha) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        O = 0;
                        aa = 2064;
                        Z = 2046;
                        break;
                    case -126:
                        O = 8192;
                        aa = 3054;
                        Z = 744;
                        break;
                    case -53:
                        if (-107 == P << 24 >> 24) {
                            da = 7;
                            ga = 1402;
                            U = 1820;
                            c = 63;
                            break a
                        } else if (-94 != P << 24 >> 24) {
                            X = ca = P << 24 >> 24;
                            Y = 1820;
                            ja = 2046;
                            fa = 7;
                            ia = 2648;
                            c = 61;
                            break a
                        }
                        ra = T + 8;
                        ta = sa = N + ra;
                        wa = HEAP32[ta >> 2];
                        if (za = 0 == (wa | 0)) {
                            Ba = 2046;
                            ua = 7;
                            ya = 2648;
                            xa = -94;
                            c = 57;
                            break a
                        }
                        oa = wa +
                            12;
                        pa = HEAP32[oa >> 2];
                        la = pa & 1835008;
                        if (qa = 0 == (la | 0)) {
                            Da = 2648;
                            Aa = 7;
                            Ea = 2046;
                            c = 56;
                            break a
                        }
                        Oa = Sa = wa;
                        Ha = HEAP32[Oa >> 2];
                        Ga = Ha + 40;
                        Ma = Sa + Ga;
                        Ia = HEAP8[Ma];
                        db = -107 == Ia << 24 >> 24;
                        if (!db) {
                            Da = 2648;
                            Aa = 7;
                            Ea = 2046;
                            c = 56;
                            break a
                        }
                        W = HEAP32[30648];
                        Xa = T + 12;
                        fb = Ta = N + Xa;
                        mb = HEAP32[fb >> 2];
                        ma = _jtequ(a, W, mb);
                        if (ab = 0 == ma << 24 >> 24) {
                            Da = 2648;
                            Aa = 7;
                            Ea = 2046;
                            c = 56;
                            break a
                        }
                        Da = 2648;
                        Aa = 7;
                        Ea = 3154;
                        c = 56;
                        break;
                    case -124:
                        O = 16384;
                        aa = 3054;
                        Z = 744;
                        break;
                    case 38:
                        Na = HEAP32[30648];
                        $a = (y | 0) == (Na | 0);
                        Ua = HEAP32[31058];
                        Pa = (y | 0) == (Ua | 0);
                        bb = $a | Pa;
                        if (!bb) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        Ja = La = y;
                        Qa = HEAP32[Ja >> 2];
                        Ya = La + Qa;
                        lb = HEAP8[Ya];
                        Ca = lb << 24 >> 24;
                        if (gb = -55 == (A | 0)) {
                            Fa = Ca;
                            Za = 2648;
                            c = 55;
                            break a
                        }
                        qb = -54 == (A | 0);
                        ib = Ca + 2;
                        Fa = ub = qb ? ib : -1;
                        Za = 2648;
                        c = 55;
                        break;
                    case 47:
                        rb = eb = u;
                        wb = HEAP32[rb >> 2];
                        Ka = wb + 40;
                        Va = eb + Ka;
                        nb = HEAP8[Va];
                        (ob = -67 == nb << 24 >> 24) ? (cb = wb + 8, yb = Wa = eb + cb, Cb = HEAP32[yb >> 2], Pb = Cb + 12, zb = HEAP32[Pb >> 2], Zb = zb & 4, (ac = 0 == (Zb | 0)) ? Hb = -67 : (Ib = Cb + 24, Qb = HEAP32[Ib >> 2], (Rb = 0 == (Qb | 0)) ? (Bb = Ob = Cb, xb = HEAP32[Bb >> 2], tb = dc = Ob + xb, oc = HEAP32[tb >> 2], Mb = oc - 16, Tb = 16 > Mb >>> 0, Ra = oc & 255, Hb = Nb = Tb ? Ra : -67) :
                            Hb = -67)) : Hb = nb;
                        sb = Hb & 255;
                        Ab = sb + 56;
                        Eb = HEAP8[Ab];
                        Lb = 0 == Eb << 24 >> 24;
                        vb = 0 == Hb << 24 >> 24;
                        (wc = Lb | vb) ? Ec = 2648: ((yc = -67 == P << 24 >> 24) ? (Db = T + 8, pb = bc = N + Db, Fb = HEAP32[pb >> 2], jb = Fb + 12, gc = HEAP32[jb >> 2], ic = gc & 4, (vc = 0 == (ic | 0)) ? hc = -67 : (uc = Fb + 24, Ac = HEAP32[uc >> 2], (xc = 0 == (Ac | 0)) ? (jc = cd = Fb, Tc = HEAP32[jc >> 2], Bc = Fc = cd + Tc, ec = HEAP32[Bc >> 2], Xb = ec - 16, sc = 16 > Xb >>> 0, nc = ec & 255, hc = tc = sc ? nc : -67) : hc = -67)) : hc = P, Ub = hc & 255, $c = Ub + 56, ad = HEAP8[$c], qc = 0 == ad << 24 >> 24, Uc = 0 == hc << 24 >> 24, Ec = (rc = qc | Uc) ? 2648 : 2444);
                        if (kb = 44 == P << 24 >> 24) {
                            O = 0;
                            aa = Ec;
                            Z = 2440;
                            break a
                        }
                        if (Jb = 43 == (A | 0)) {
                            Da = Ec;
                            Aa = 4;
                            Ea = 2046;
                            c = 56;
                            break a
                        }
                        if ($b = -120 == (A | 0)) {
                            Da = Ec;
                            Aa = 5;
                            Ea = 2046;
                            c = 56;
                            break a
                        }
                        Fa = Vb = (na = -118 == (A | 0)) ? 6 : -1;
                        Za = Ec;
                        c = 55;
                        break;
                    case 59:
                        if (kc = 123 == P << 24 >> 24) {
                            O = 0;
                            aa = 884;
                            Z = 2046;
                            break a
                        }
                        va = -98 == P << 24 >> 24;
                        if (!va) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        Wc = T + 12;
                        fc = Yb = N + Wc;
                        Kb = HEAP32[fc >> 2];
                        Gb = _jti0(a, Kb);
                        gd = T + 8;
                        Gc = mc = N + gd;
                        dd = HEAP32[Gc >> 2];
                        kd = 0 == (dd | 0);
                        do
                            if (!kd && (Fd = dd + 12, Vc = HEAP32[Fd >> 2], Hd = Vc & 1835008, bd = 0 == (Hd | 0), !bd && (Ic = cc = dd, fd = HEAP32[Ic >> 2], xd = fd + 40, Xc = cc + xd, Wd = HEAP8[Xc], Wb = 60 == Wd << 24 >>
                                    24, Sb = 0 == (Gb | 0), pc = Wb & Sb))) {
                                O = 0;
                                aa = 402;
                                Z = 2046;
                                break a
                            }
                        while (0);
                        zc = HEAP32[S >> 2];
                        hd = zc + 8;
                        Ad = Yc = N + hd;
                        ld = hb = Gd = HEAP32[Ad >> 2];
                        ed = HEAP32[ld >> 2];
                        Jc = ed + 40;
                        Oc = hb + Jc;
                        Pc = HEAP8[Oc];
                        if (!(64 == Pc << 24 >> 24 | -75 == Pc << 24 >> 24 | 38 == Pc << 24 >> 24 | -73 == Pc << 24 >> 24)) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        ke = ed + 8;
                        pd = Ed = hb + ke;
                        id = HEAP32[pd >> 2];
                        if (Cc = 0 == (id | 0)) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        Qc = id + 12;
                        Zc = HEAP32[Qc >> 2];
                        vd = Zc & 1835008;
                        if ($d = 0 == (vd | 0)) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        Kc = je = id;
                        Bd = HEAP32[Kc >> 2];
                        od = Bd + 40;
                        Vd = je + od;
                        Zd = HEAP8[Vd];
                        Jd = 60 == Zd << 24 >>
                            24;
                        if (!Jd) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        Md = 0 != (Gb | 0);
                        Cd = -3 < (Gb | 0);
                        fe = Md & Cd;
                        Xd = 3 > (Gb | 0);
                        qd = fe & Xd;
                        if (!qd) {
                            O = 0;
                            aa = 2648;
                            Z = 2046;
                            break a
                        }
                        O = 0;
                        aa = 400;
                        Z = 404;
                        break;
                    default:
                        O = 0, aa = 2648, Z = 2046
                }
                while (0);
                55 == c && ((Od = -1 < (Fa | 0)) ? (Da = Za, Aa = Fa, Ea = 2046, c = 56) : (O = 0, aa = Za, Z = 2046));
            56 == c && (Mc = P << 24 >> 24, (Dd = -94 == P << 24 >> 24) ? (Ba = Ea, ua = Aa, ya = Da, xa = Mc, c = 57) : (X = Mc, Y = 1820, ja = Ea, fa = Aa, ia = Da, c = 61));
            57 == c && (Td = HEAP32[30648], le = T + 12, wd = me = N + le, Ie = HEAP32[wd >> 2], xe = _jtequ(a, Td, Ie), (ye = 0 == xe << 24 >> 24) ? (X = xa, Y = 1820, ja = Ba, fa = ua, ia = ya, c = 61) :
                (Fe = T + 8, Je = nf = N + Fe, Id = HEAP32[Je >> 2], (Qe = 0 == (Id | 0)) ? (O = 0, aa = ya, Z = Ba) : (sd = Id + 12, ge = HEAP32[sd >> 2], ud = ge & 1835008, (md = 0 == (ud | 0)) ? (O = 0, aa = ya, Z = Ba) : (ae = de = Id, Dc = HEAP32[ae >> 2], Nc = Dc + 40, yd = de + Nc, jd = HEAP8[yd], X = Sc = jd << 24 >> 24, Y = 1930, ja = Ba, fa = ua, ia = ya, c = 61))));
            a: do
                if (61 == c) switch (X | 0) {
                    case 61:
                        O = lc = fa << 3;
                        aa = Y;
                        Z = ja;
                        break a;
                    case 62:
                        nd = fa << 3;
                        O = Rc = nd | 5;
                        aa = Y;
                        Z = ja;
                        break a;
                    case -123:
                        Hc = fa << 3;
                        O = Kd = Hc | 4;
                        aa = Y;
                        Z = ja;
                        break a;
                    case -59:
                        Rd = fa << 3;
                        O = Nd = Rd | 6;
                        aa = Y;
                        Z = ja;
                        break a;
                    case -107:
                        da = fa;
                        ga = ja;
                        U = Y;
                        c = 63;
                        break a;
                    case 60:
                        be = fa <<
                            3;
                        O = zd = be | 2;
                        aa = Y;
                        Z = ja;
                        break a;
                    case -60:
                        we = fa << 3;
                        O = Lc = we | 7;
                        aa = Y;
                        Z = ja;
                        break a;
                    case -125:
                        rd = fa << 3;
                        O = se = rd | 3;
                        aa = Y;
                        Z = ja;
                        break a;
                    default:
                        O = 0;
                        aa = ia;
                        Z = ja;
                        break a
                }
                while (0);
            63 == c && (Ud = da << 3, O = Cf = Ud | 1, aa = U, Z = ga);
            td = a + 204545;
            Te = HEAP8[td];
            pe = 0 == Te << 24 >> 24;
            if (!pe) return b = 0;
            Pd = _jtga(a, 262144, 1, 0, 0);
            if (Me = 0 == (Pd | 0)) return b = 0;
            $e = Sd = Pd;
            qe = HEAP32[$e >> 2];
            Ce = Sd + qe;
            sf = (cf = 0 == (Z | 0)) ? 1982 : Z;
            Ue = Ce;
            HEAP32[Ue >> 2] = sf;
            Re = (kf = 0 == (aa | 0)) ? 1980 : aa;
            ce = qe + 4;
            Ge = De = Sd + ce;
            HEAP32[Ge >> 2] = Re;
            He = qe + 8;
            Yd = We = Sd + He;
            HEAP32[Yd >> 2] = f;
            Ne = qe + 12;
            Ee = Se = Sd + Ne;
            HEAP32[Ee >> 2] = d;
            Ld = qe + 16;
            Qd = he = Sd + Ld;
            HEAP32[Qd >> 2] = 0;
            re = qe + 20;
            Ae = Ke = Sd + re;
            HEAP32[Ae >> 2] = O;
            te = qe + 24;
            ff = ie = Sd + te;
            HEAP32[ff >> 2] = 2147483647;
            ue = qe + 28;
            ne = Oe = Sd + ue;
            HEAP32[ne >> 2] = 2147483647;
            ze = qe + 32;
            lf = vf = Sd + ze;
            HEAP32[lf >> 2] = 2147483647;
            Xe = qe + 36;
            hf = Be = Sd + Xe;
            HEAP32[hf >> 2] = 0;
            af = qe + 40;
            zf = Sd + af;
            HEAP8[zf] = -75;
            return b = Pd
        }
    while (0);
    uf = HEAP32[a + 4408 >> 2];
    ve = HEAP32[uf + (HEAP32[uf >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[ve + 20 >> 2], ve + HEAP32[ve >> 2]);
    return b = 0
}
function _jtatop(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return e = 0, STACKTOP = b, e;
    g = 0 == (HEAP32[f + 12 >> 2] & 262144 | 0);
    do
        if (!g && (h = d + 12, j = HEAP32[h >> 2], i = j & 262144, l = 0 == (i | 0), !l)) {
            m = k = f;
            n = HEAP32[m >> 2];
            p = n + 40;
            q = k + p;
            r = HEAP8[q];
            t = s = d;
            u = HEAP32[t >> 2];
            w = u + 40;
            v = s + w;
            x = HEAP8[v];
            y = r << 24 >> 24;
            a: do switch (y | 0) {
                    case -126:
                        z = 0;
                        A = 8192;
                        D = 744;
                        B = 3054;
                        c = 52;
                        break;
                    case -72:
                        G = x - 35;
                        C = 2 > (G & 255);
                        if (!C) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        A = z = 0;
                        D = 2046;
                        B = 2064;
                        c = 52;
                        break;
                    case -53:
                        if (-107 == x << 24 >> 24) {
                            F = 2648;
                            E = 1402;
                            L = J =
                                0;
                            c = 53;
                            break a
                        } else if (-94 != x << 24 >> 24) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        I = u + 8;
                        K = H = s + I;
                        N = HEAP32[K >> 2];
                        if (S = 0 == (N | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        T = N + 12;
                        V = HEAP32[T >> 2];
                        Q = V & 1835008;
                        if (P = 0 == (Q | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        R = M = N;
                        O = HEAP32[R >> 2];
                        aa = O + 40;
                        Z = M + aa;
                        $ = HEAP8[Z];
                        ba = -107 == $ << 24 >> 24;
                        if (!ba) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        ka = HEAP32[30648];
                        ea = u + 12;
                        da = ha = s + ea;
                        ga = HEAP32[da >> 2];
                        U = _jtequ(a, ka, ga);
                        if (ca = 0 == U << 24 >> 24) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        A = z = 0;
                        D = 3154;
                        B = 2648;
                        c = 52;
                        break;
                    case 94:
                        (X = -45 == x << 24 >> 24) ? (F = 2648, E = 1340, L = J = 0, c = 53) : (A = z = 0, D = 2046, B = 2648, c = 52);
                        break;
                    case 34:
                        Y = -79 == x << 24 >> 24;
                        if (!Y) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        ja = n + 8;
                        ia = fa = k + ja;
                        ra = HEAP32[ia >> 2];
                        if (sa = 0 == (ra | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        ta = ra + 12;
                        wa = HEAP32[ta >> 2];
                        za = wa & 1835008;
                        if (Ba = 0 == (za | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        ya = ua = ra;
                        xa = HEAP32[ya >> 2];
                        oa = xa + 40;
                        pa = ua + oa;
                        la = HEAP8[pa];
                        qa = -80 == la << 24 >> 24;
                        if (!qa) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        Da = HEAP32[30648];
                        Aa = n + 12;
                        Sa = Ea = k + Aa;
                        Oa = HEAP32[Sa >> 2];
                        Ha = _jtequ(a, Da,
                            Oa);
                        if (Ga = 0 == Ha << 24 >> 24) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        A = z = 0;
                        D = 3212;
                        B = 2648;
                        c = 52;
                        break;
                    case 59:
                        Ma = -98 == x << 24 >> 24;
                        if (!Ma) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        Ia = u + 8;
                        W = db = s + Ia;
                        fb = Ta = Xa = HEAP32[W >> 2];
                        mb = HEAP32[fb >> 2];
                        ma = mb + 40;
                        ab = Ta + ma;
                        Na = HEAP8[ab];
                        if (!(64 == Na << 24 >> 24 | -75 == Na << 24 >> 24 | 38 == Na << 24 >> 24 | -73 == Na << 24 >> 24)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        $a = mb + 8;
                        Pa = Ua = Ta + $a;
                        bb = HEAP32[Pa >> 2];
                        if (La = 0 == (bb | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        Ja = bb + 12;
                        Qa = HEAP32[Ja >> 2];
                        Ya = Qa & 1835008;
                        if (lb = 0 == (Ya | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        gb = Ca = bb;
                        Fa = HEAP32[gb >> 2];
                        Za = Fa + 40;
                        qb = Ca + Za;
                        ib = HEAP8[qb];
                        ub = 60 == ib << 24 >> 24;
                        if (!ub) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        F = 400;
                        E = 404;
                        L = J = 0;
                        c = 53;
                        break;
                    case -124:
                        z = 0;
                        A = 16384;
                        D = 744;
                        B = 3054;
                        c = 52;
                        break;
                    case 63:
                        eb = x - 35;
                        rb = 2 > (eb & 255);
                        if (!rb) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        A = z = 0;
                        D = 2046;
                        B = 22;
                        c = 52;
                        break;
                    case 47:
                        (wb = 44 == x << 24 >> 24) ? (F = 2648, E = 2440, L = J = 0, c = 53) : (A = z = 0, D = 2046, B = 2648, c = 52);
                        break;
                    case -116:
                        (Ka = -115 == x << 24 >> 24) ? (F = 1482, E = 2046, J = 4096, L = 0, c = 53) : (A = z = 0, D = 2046, B = 2648, c = 52);
                        break;
                    case 38:
                        Va =
                            n + 8;
                        ob = nb = k + Va;
                        cb = HEAP32[ob >> 2];
                        Wa = cb + 12;
                        yb = HEAP32[Wa >> 2];
                        Cb = yb & 128;
                        if (Pb = 0 == (Cb | 0)) zb = cb;
                        else {
                            Zb = a + 205336;
                            ac = HEAP32[Zb >> 2];
                            HEAP32[Zb >> 2] = 0;
                            Hb = _jtccvt(a, 64, cb, b);
                            HEAP32[Zb >> 2] = ac;
                            Ib = 0 != Hb << 24 >> 24;
                            Qb = HEAP32[b >> 2];
                            Rb = Ib ? Qb : cb;
                            if (Ob = 0 == (Rb | 0)) return e = 0, STACKTOP = b, e;
                            zb = Rb
                        }
                        Bb = 94 == x << 24 >> 24;
                        if (!Bb) {
                            xb = 38 == x << 24 >> 24;
                            if (!xb) {
                                A = z = 0;
                                D = 2046;
                                B = 2648;
                                c = 52;
                                break a
                            }
                            dc = u + 12;
                            oc = tb = s + dc;
                            Mb = HEAP32[oc >> 2];
                            if (Tb = 0 == (Mb | 0)) {
                                F = 2648;
                                E = 2046;
                                L = J = 0;
                                c = 53;
                                break a
                            }
                            Ra = Mb + 12;
                            Nb = HEAP32[Ra >> 2];
                            sb = Nb & 1835008;
                            if (Ab = 0 == (sb | 0)) {
                                A = z = 0;
                                D = 2046;
                                B = 2648;
                                c = 52;
                                break a
                            }
                            Lb = Eb = Mb;
                            vb = HEAP32[Lb >> 2];
                            wc = vb + 40;
                            Ec = Eb + wc;
                            yc = HEAP8[Ec];
                            Db = 94 == yc << 24 >> 24;
                            if (!Db) {
                                A = z = 0;
                                D = 2046;
                                B = 2648;
                                c = 52;
                                break a
                            }
                        }
                        bc = zb + 12;
                        pb = HEAP32[bc >> 2];
                        Fb = pb & 68;
                        if (jb = 0 == (Fb | 0)) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        gc = zb + 24;
                        ic = HEAP32[gc >> 2];
                        vc = 0 == (ic | 0);
                        if (!vc) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        hc = n + 12;
                        Ac = uc = k + hc;
                        xc = HEAP32[Ac >> 2];
                        if (cd = 0 == (xc | 0)) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        jc = xc + 12;
                        Tc = HEAP32[jc >> 2];
                        Fc = Tc & 1835008;
                        if (Bc = 0 == (Fc | 0)) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        Xb = ec = xc;
                        sc = HEAP32[Xb >>
                            2];
                        nc = sc + 40;
                        tc = ec + nc;
                        Ub = HEAP8[tc];
                        $c = 124 == Ub << 24 >> 24;
                        if (!$c) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        ad = Bb ? 2194 : 2648;
                        qc = Bb ? 2046 : 2196;
                        z = zb;
                        A = 32768;
                        D = qc;
                        B = ad;
                        c = 52;
                        break;
                    case -92:
                        Uc = 47 == x << 24 >> 24;
                        if (!Uc) {
                            A = z = 0;
                            D = 2046;
                            B = 2648;
                            c = 52;
                            break a
                        }
                        rc = n + 8;
                        Jb = kb = k + rc;
                        $b = HEAP32[Jb >> 2];
                        if (na = 0 == ($b | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        Vb = $b + 12;
                        kc = HEAP32[Vb >> 2];
                        va = kc & 1835008;
                        if (Wc = 0 == (va | 0)) {
                            F = 2648;
                            E = 2046;
                            L = J = 0;
                            c = 53;
                            break a
                        }
                        fc = Yb = $b;
                        Kb = HEAP32[fc >> 2];
                        Gb = Kb + 40;
                        gd = Yb + Gb;
                        mc = HEAP8[gd];
                        Gc = 47 == mc << 24 >> 24;
                        if (!Gc) {
                            F = 2648;
                            E = 2046;
                            L =
                                J = 0;
                            c = 53;
                            break a
                        }
                        F = 2254;
                        E = 2046;
                        L = J = 0;
                        c = 53;
                        break;
                    case -91:
                        (dd = -91 == x << 24 >> 24) ? (F = 2648, E = 2002, J = 2048, L = 0, c = 53) : (A = z = 0, D = 2046, B = 2648, c = 52);
                        break;
                    default:
                        A = z = 0, D = 2046, B = 2648, c = 52
                }
                while (0);
                52 == c && (kd = x + 60, (Fd = 2 > (kd & 255)) ? (Vc = 0, Hd = B, bd = D, cc = A, Ic = z, c = 58) : (F = B, E = D, J = A, L = z, c = 53));
            53 == c && (fd = HEAP8[v], (xd = -94 == fd << 24 >> 24) ? (pc = u + 8, hd = zc = s + pc, Yc = HEAP32[hd >> 2], (Ad = 0 == (Yc | 0)) ? (Xc = J, Wd = F, Wb = E, Sb = L) : (Gd = Yc + 12, hb = HEAP32[Gd >> 2], ld = hb & 1835008, (ed = 0 == (ld | 0)) ? (Xc = J, Wd = F, Wb = E, Sb = L) : (Oc = Jc = Yc, Pc = HEAP32[Oc >> 2], ke = Pc + 40, Ed =
                Jc + ke, pd = HEAP8[Ed], (id = -60 == pd << 24 >> 24) ? (Cc = HEAP32[30648], Qc = u + 12, vd = Zc = s + Qc, $d = HEAP32[vd >> 2], je = _jtequ(a, Cc, $d), (Kc = 0 == je << 24 >> 24) ? (Xc = J, Wd = F, Wb = E, Sb = L) : (Vc = 1, Hd = F, bd = E, cc = J, Ic = L, c = 58)) : (Xc = J, Wd = F, Wb = E, Sb = L)))) : (Xc = J, Wd = F, Wb = E, Sb = L));
            a: do
                if (58 == c) {
                    Bd = n + 8;
                    Vd = od = k + Bd;
                    Zd = HEAP32[Vd >> 2];
                    Jd = n + 12;
                    Cd = Md = k + Jd;
                    fe = HEAP32[Cd >> 2];
                    (Xd = 0 == (Zd | 0)) ? qd = 0: (Od = Zd + 12, Mc = HEAP32[Od >> 2], Dd = Mc & 1835008, (Td = 0 == (Dd | 0)) ? qd = 0 : (me = le = Zd, wd = HEAP32[me >> 2], Ie = wd + 40, xe = le + Ie, ye = HEAP8[xe], qd = Fe = ye << 24 >> 24));
                    (nf = 0 == Vc << 24 >> 24) ? Je =
                        x: (Id = u + 8, sd = Qe = s + Id, ge = HEAP32[sd >> 2], (ud = 0 == (ge | 0)) ? Je = 0 : (md = ge + 12, de = HEAP32[md >> 2], ae = de & 1835008, (Dc = 0 == (ae | 0)) ? Je = 0 : (yd = Nc = ge, jd = HEAP32[yd >> 2], Sc = jd + 40, lc = Nc + Sc, Je = nd = HEAP8[lc])));
                    do
                        if (47 == r << 24 >> 24) Hc = (Rc = 43 == (qd | 0)) ? 4 : (Kd = -120 == (qd | 0)) ? 5 : Nd = (Rd = -118 == (qd | 0)) ? 6 : -1;
                        else if (38 == r << 24 >> 24) {
                        be = HEAP32[30648];
                        zd = (fe | 0) == (be | 0);
                        we = HEAP32[31058];
                        Lc = (fe | 0) == (we | 0);
                        rd = zd | Lc;
                        if (!rd) {
                            Xc = cc;
                            Wd = Hd;
                            Wb = bd;
                            Sb = Ic;
                            break a
                        }
                        Ud = se = fe;
                        Cf = HEAP32[Ud >> 2];
                        td = se + Cf;
                        Te = HEAP8[td];
                        if (-55 == (qd | 0)) Hc = pe = Te << 24 >> 24;
                        else if (-54 ==
                            (qd | 0)) Pd = Te << 24 >> 24, Hc = Me = Pd + 2;
                        else {
                            Xc = cc;
                            Wd = Hd;
                            Wb = bd;
                            Sb = Ic;
                            break a
                        }
                    } else if (-53 == r << 24 >> 24) Hc = 7;
                    else {
                        Xc = cc;
                        Wd = Hd;
                        Wb = bd;
                        Sb = Ic;
                        break a
                    }
                    while (0);
                    Sd = -1 < (Hc | 0);
                    $e = Je << 24 >> 24;
                    qe = Sd ? $e : -1; - 60 == (qe | 0) ? (cf = (Ce = 0 != Vc << 24 >> 24) ? 1930 : 1820, sf = Hc << 3, Xc = Ue = sf | 7, Wd = cf) : -59 == (qe | 0) ? (Re = (kf = 0 != Vc << 24 >> 24) ? 1930 : 1820, ce = Hc << 3, Xc = De = ce | 6, Wd = Re) : (Xc = cc, Wd = Hd);
                    Wb = bd;
                    Sb = Ic
                }
            while (0);
            Ge = u + 24;
            We = He = s + Ge;
            Yd = HEAP32[We >> 2];
            Ne = u + 28;
            Ee = Se = s + Ne;
            Ld = HEAP32[Ee >> 2];
            he = u + 32;
            re = Qd = s + he;
            Ke = HEAP32[re >> 2];
            Ae = a + 204545;
            te = HEAP8[Ae];
            ie = 0 ==
                te << 24 >> 24;
            if (!ie) return e = 0, STACKTOP = b, e;
            ff = _jtga(a, 262144, 1, 0, 0);
            if (ue = 0 == (ff | 0)) return e = 0, STACKTOP = b, e;
            ne = Oe = ff;
            ze = HEAP32[ne >> 2];
            vf = Oe + ze;
            Xe = (lf = 0 == (Wb | 0)) ? 1982 : Wb;
            Be = vf;
            HEAP32[Be >> 2] = Xe;
            af = (hf = 0 == (Wd | 0)) ? 1980 : Wd;
            zf = ze + 4;
            ve = uf = Oe + zf;
            HEAP32[ve >> 2] = af;
            If = ze + 8;
            Ef = Df = Oe + If;
            HEAP32[Ef >> 2] = f;
            Gf = ze + 12;
            Lf = of = Oe + Gf;
            HEAP32[Lf >> 2] = d;
            pf = ze + 16;
            Bf = bf = Oe + pf;
            HEAP32[Bf >> 2] = Sb;
            Pf = ze + 20;
            Hf = Ye = Oe + Pf;
            HEAP32[Hf >> 2] = Xc;
            jf = ze + 24;
            Le = mf = Oe + jf;
            HEAP32[Le >> 2] = Yd;
            Ve = ze + 28;
            wf = df = Oe + Ve;
            HEAP32[wf >> 2] = Ld;
            Yf = ze + 32;
            Qf = Jf = Oe + Yf;
            HEAP32[Qf >>
                2] = Ke;
            Sf = ze + 36;
            ee = Mf = Oe + Sf;
            HEAP32[ee >> 2] = 0;
            oe = ze + 40;
            rf = Oe + oe;
            HEAP8[rf] = 64;
            e = ff;
            STACKTOP = b;
            return e
        }
    while (0);
    Ff = HEAP32[a + 4408 >> 2];
    xf = HEAP32[Ff + (HEAP32[Ff >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[xf + 20 >> 2], xf + HEAP32[xf >> 2]);
    e = 0;
    STACKTOP = b;
    return e
}
function _jtbcvt(a, f, d) {
    var c, b, e, g, h, j, i, l, k;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (d | 0)) return STACKTOP = b, 0;
    e = a + 204496;
    g = HEAPF64[e >> 3];
    h = a + 205336;
    j = HEAP32[h >> 2];
    HEAPF64[e >> 3] = 0;
    HEAP32[h >> 2] = 0;
    i = d + 12;
    l = 0 == (HEAP32[i >> 2] & 128 | 0) ? d : (l = 0 != _jtccvt(a, 64, d, b) << 24 >> 24) ? HEAP32[b >> 2] : d;
    0 == f << 24 >> 24 ? 0 == (HEAP32[i >> 2] & 192 | 0) ? c = 6 : k = l : c = 6;
    6 == c && (k = 0 != _jtccvt(a, 1, d, b) << 24 >> 24 ? HEAP32[b >> 2] : 0 == _jtccvt(a, 4, d, b) << 24 >> 24 ? (l = 0 != _jtccvt(a, 8, d, b) << 24 >> 24) ? HEAP32[b >> 2] : d : HEAP32[b >> 2]);
    HEAPF64[e >> 3] = g;
    HEAP32[h >> 2] = j;
    a = 0 != (HEAP8[a + 204545] | 0) ? 0 : k;
    STACKTOP = b;
    return a
}
function _jtbdot(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0)) return b = 0, STACKTOP = c, b;
    e = HEAP32[f + 12 >> 2];
    if (0 != (e & 262144 |
            0)) {
        g = a + 204545;
        h = HEAP8[g];
        j = 0 == h << 24 >> 24;
        if (!j) return b = 0, STACKTOP = c, b;
        i = _jtga(a, 262144, 1, 0, 0);
        if (l = 0 == (i | 0)) return b = 0, STACKTOP = c, b;
        k = HEAP32[i >> 2];
        m = i + k;
        HEAP32[m >> 2] = 1830;
        n = k + 4;
        p = i + n;
        HEAP32[p >> 2] = 1980;
        q = k + 8;
        r = i + q;
        HEAP32[r >> 2] = f;
        s = k + 12;
        t = i + s;
        HEAP32[t >> 2] = 0;
        u = k + 16;
        w = i + u;
        HEAP32[w >> 2] = 0;
        v = k + 20;
        x = i + v;
        HEAP32[x >> 2] = 0;
        y = k + 24;
        z = i + y;
        HEAP32[z >> 2] = 0;
        A = k + 28;
        D = i + A;
        HEAP32[D >> 2] = 0;
        B = k + 32;
        G = i + B;
        HEAP32[G >> 2] = 0;
        C = k + 36;
        F = i + C;
        HEAP32[F >> 2] = 0;
        E = k + 40;
        J = i + E;
        HEAP8[J] = -67;
        b = i;
        STACKTOP = c;
        return b
    }
    if (0 == (e & 4 | 0)) {
        L = a + 205336;
        I = HEAP32[L >> 2];
        HEAP32[L >> 2] = 0;
        H = _jtccvt(a, 4, f, c);
        HEAP32[L >> 2] = I;
        if (K = 0 == H << 24 >> 24) return N = a + 4408, S = HEAP32[N >> 2], T = HEAP32[S >> 2], V = T + 12, Q = S + V, P = HEAP32[Q >> 2], M = P + 20, R = HEAP32[M >> 2], O = HEAP32[P >> 2], aa = P + O, _jtjsigstr(a, 3, R, aa), b = 0, STACKTOP = c, b;
        Z = HEAP32[c >> 2];
        if ($ = 0 == (Z | 0)) return b = 0, STACKTOP = c, b;
        ba = Z
    } else ba = f;
    ka = HEAP32[ba + 20 >> 2];
    ea = ba + HEAP32[ba >> 2];
    ha = 1 == (ka | 0);
    a: do
        if (ha)
            if (da = HEAP32[ea >> 2], ga = da + 16, U = 51 > ga >>> 0) ca = da, d = 17;
            else return X = a + 4408, fa = ja = Y = HEAP32[X >> 2], ia = HEAP32[fa >> 2], ra = ia + 24, ta = sa = ja + ra,
                wa = HEAP32[ta >> 2], za = wa + 20, Ba = HEAP32[za >> 2], ya = ua = wa, xa = HEAP32[ya >> 2], oa = ua + xa, _jtjsigstr(a, 6, Ba, oa), b = 0, STACKTOP = c, b;
    else if (pa = 0 < (ka | 0)) {
        la = ea;
        for (qa = 0;;) {
            Da = HEAP32[la >> 2];
            Aa = Da + 16;
            Ea = 32 > Aa >>> 0;
            if (!Ea) break;
            Sa = la + 4;
            Oa = qa + 1;
            if (Ha = (Oa | 0) < (ka | 0)) la = Sa, qa = Oa;
            else {
                ca = Da;
                d = 17;
                break a
            }
        }
        Ga = a + 4408;
        db = Ia = Ma = HEAP32[Ga >> 2];
        W = HEAP32[db >> 2];
        Xa = W + 24;
        fb = Ta = Ia + Xa;
        mb = HEAP32[fb >> 2];
        ma = mb + 20;
        ab = HEAP32[ma >> 2];
        $a = Na = mb;
        Ua = HEAP32[$a >> 2];
        Pa = Na + Ua;
        _jtjsigstr(a, 6, ab, Pa);
        b = 0;
        STACKTOP = c;
        return b
    }
    while (0);
    if (17 == d && (bb = 1 != (ka |
            0), La = 16 > (ca | 0), Ja = bb | La, !Ja)) switch (ca | 0) {
        case 23:
            Qa = a + 204545;
            Ya = HEAP8[Qa];
            lb = 0 == Ya << 24 >> 24;
            if (!lb) return b = 0, STACKTOP = c, b;
            Ca = _jtga(a, 262144, 1, 0, 0);
            if (gb = 0 == (Ca | 0)) return b = 0, STACKTOP = c, b;
            Fa = HEAP32[Ca >> 2];
            Za = Ca + Fa;
            HEAP32[Za >> 2] = 3292;
            qb = Fa + 4;
            ib = Ca + qb;
            HEAP32[ib >> 2] = 1968;
            ub = Fa + 8;
            eb = Ca + ub;
            HEAP32[eb >> 2] = ba;
            rb = Fa + 12;
            wb = Ca + rb;
            HEAP32[wb >> 2] = 0;
            Ka = Fa + 16;
            Va = Ca + Ka;
            HEAP32[Va >> 2] = 0;
            nb = Fa + 20;
            ob = Ca + nb;
            HEAP32[ob >> 2] = 4096;
            cb = Fa + 24;
            Wa = Ca + cb;
            HEAP32[Wa >> 2] = 0;
            yb = Fa + 28;
            Cb = Ca + yb;
            HEAP32[Cb >> 2] = 0;
            Pb = Fa + 32;
            zb = Ca + Pb;
            HEAP32[zb >>
                2] = 0;
            Zb = Fa + 36;
            ac = Ca + Zb;
            HEAP32[ac >> 2] = 0;
            Hb = Fa + 40;
            Ib = Ca + Hb;
            HEAP8[Ib] = -67;
            b = Ca;
            STACKTOP = c;
            return b;
        case 24:
            Qb = a + 204545;
            Rb = HEAP8[Qb];
            Ob = 0 == Rb << 24 >> 24;
            if (!Ob) return b = 0, STACKTOP = c, b;
            Bb = _jtga(a, 262144, 1, 0, 0);
            if (xb = 0 == (Bb | 0)) return b = 0, STACKTOP = c, b;
            dc = HEAP32[Bb >> 2];
            tb = Bb + dc;
            HEAP32[tb >> 2] = 3292;
            oc = dc + 4;
            Mb = Bb + oc;
            HEAP32[Mb >> 2] = 572;
            Tb = dc + 8;
            Ra = Bb + Tb;
            HEAP32[Ra >> 2] = ba;
            Nb = dc + 12;
            sb = Bb + Nb;
            HEAP32[sb >> 2] = 0;
            Ab = dc + 16;
            Eb = Bb + Ab;
            HEAP32[Eb >> 2] = 0;
            Lb = dc + 20;
            vb = Bb + Lb;
            HEAP32[vb >> 2] = 4096;
            wc = dc + 24;
            Ec = Bb + wc;
            HEAP32[Ec >> 2] = 0;
            yc = dc +
                28;
            Db = Bb + yc;
            HEAP32[Db >> 2] = 0;
            bc = dc + 32;
            pb = Bb + bc;
            HEAP32[pb >> 2] = 0;
            Fb = dc + 36;
            jb = Bb + Fb;
            HEAP32[jb >> 2] = 0;
            gc = dc + 40;
            ic = Bb + gc;
            HEAP8[ic] = -67;
            b = Bb;
            STACKTOP = c;
            return b;
        case 26:
            vc = a + 204545;
            hc = HEAP8[vc];
            uc = 0 == hc << 24 >> 24;
            if (!uc) return b = 0, STACKTOP = c, b;
            Ac = _jtga(a, 262144, 1, 0, 0);
            if (xc = 0 == (Ac | 0)) return b = 0, STACKTOP = c, b;
            cd = HEAP32[Ac >> 2];
            jc = Ac + cd;
            HEAP32[jc >> 2] = 3292;
            Tc = cd + 4;
            Fc = Ac + Tc;
            HEAP32[Fc >> 2] = 354;
            Bc = cd + 8;
            ec = Ac + Bc;
            HEAP32[ec >> 2] = ba;
            Xb = cd + 12;
            sc = Ac + Xb;
            HEAP32[sc >> 2] = 0;
            nc = cd + 16;
            tc = Ac + nc;
            HEAP32[tc >> 2] = 0;
            Ub = cd + 20;
            $c = Ac + Ub;
            HEAP32[$c >>
                2] = 4096;
            ad = cd + 24;
            qc = Ac + ad;
            HEAP32[qc >> 2] = 0;
            Uc = cd + 28;
            rc = Ac + Uc;
            HEAP32[rc >> 2] = 0;
            kb = cd + 32;
            Jb = Ac + kb;
            HEAP32[Jb >> 2] = 0;
            $b = cd + 36;
            na = Ac + $b;
            HEAP32[na >> 2] = 0;
            Vb = cd + 40;
            kc = Ac + Vb;
            HEAP8[kc] = -67;
            b = Ac;
            STACKTOP = c;
            return b;
        case 25:
            va = a + 204545;
            Wc = HEAP8[va];
            Yb = 0 == Wc << 24 >> 24;
            if (!Yb) return b = 0, STACKTOP = c, b;
            fc = _jtga(a, 262144, 1, 0, 0);
            if (Kb = 0 == (fc | 0)) return b = 0, STACKTOP = c, b;
            Gb = HEAP32[fc >> 2];
            gd = fc + Gb;
            HEAP32[gd >> 2] = 3292;
            mc = Gb + 4;
            Gc = fc + mc;
            HEAP32[Gc >> 2] = 570;
            dd = Gb + 8;
            kd = fc + dd;
            HEAP32[kd >> 2] = ba;
            Fd = Gb + 12;
            Vc = fc + Fd;
            HEAP32[Vc >> 2] = 0;
            Hd = Gb +
                16;
            bd = fc + Hd;
            HEAP32[bd >> 2] = 0;
            cc = Gb + 20;
            Ic = fc + cc;
            HEAP32[Ic >> 2] = 4096;
            fd = Gb + 24;
            xd = fc + fd;
            HEAP32[xd >> 2] = 0;
            Xc = Gb + 28;
            Wd = fc + Xc;
            HEAP32[Wd >> 2] = 0;
            Wb = Gb + 32;
            Sb = fc + Wb;
            HEAP32[Sb >> 2] = 0;
            pc = Gb + 36;
            zc = fc + pc;
            HEAP32[zc >> 2] = 0;
            hd = Gb + 40;
            Yc = fc + hd;
            HEAP8[Yc] = -67;
            b = fc;
            STACKTOP = c;
            return b;
        case 20:
            Ad = a + 204545;
            Gd = HEAP8[Ad];
            hb = 0 == Gd << 24 >> 24;
            if (!hb) return b = 0, STACKTOP = c, b;
            ld = _jtga(a, 262144, 1, 0, 0);
            if (ed = 0 == (ld | 0)) return b = 0, STACKTOP = c, b;
            Jc = HEAP32[ld >> 2];
            Oc = ld + Jc;
            HEAP32[Oc >> 2] = 3292;
            Pc = Jc + 4;
            ke = ld + Pc;
            HEAP32[ke >> 2] = 2220;
            Ed = Jc + 8;
            pd = ld + Ed;
            HEAP32[pd >> 2] = ba;
            id = Jc + 12;
            Cc = ld + id;
            HEAP32[Cc >> 2] = 0;
            Qc = Jc + 16;
            Zc = ld + Qc;
            HEAP32[Zc >> 2] = 0;
            vd = Jc + 20;
            $d = ld + vd;
            HEAP32[$d >> 2] = 4096;
            je = Jc + 24;
            Kc = ld + je;
            HEAP32[Kc >> 2] = 0;
            Bd = Jc + 28;
            od = ld + Bd;
            HEAP32[od >> 2] = 0;
            Vd = Jc + 32;
            Zd = ld + Vd;
            HEAP32[Zd >> 2] = 0;
            Jd = Jc + 36;
            Md = ld + Jd;
            HEAP32[Md >> 2] = 0;
            Cd = Jc + 40;
            fe = ld + Cd;
            HEAP8[fe] = -67;
            b = ld;
            STACKTOP = c;
            return b;
        case 17:
            Xd = a + 204545;
            qd = HEAP8[Xd];
            Od = 0 == qd << 24 >> 24;
            if (!Od) return b = 0, STACKTOP = c, b;
            Mc = _jtga(a, 262144, 1, 0, 0);
            if (Dd = 0 == (Mc | 0)) return b = 0, STACKTOP = c, b;
            Td = HEAP32[Mc >> 2];
            le = Mc + Td;
            HEAP32[le >> 2] =
                3292;
            me = Td + 4;
            wd = Mc + me;
            HEAP32[wd >> 2] = 132;
            Ie = Td + 8;
            xe = Mc + Ie;
            HEAP32[xe >> 2] = ba;
            ye = Td + 12;
            Fe = Mc + ye;
            HEAP32[Fe >> 2] = 0;
            nf = Td + 16;
            Je = Mc + nf;
            HEAP32[Je >> 2] = 0;
            Id = Td + 20;
            Qe = Mc + Id;
            HEAP32[Qe >> 2] = 4096;
            sd = Td + 24;
            ge = Mc + sd;
            HEAP32[ge >> 2] = 0;
            ud = Td + 28;
            md = Mc + ud;
            HEAP32[md >> 2] = 0;
            de = Td + 32;
            ae = Mc + de;
            HEAP32[ae >> 2] = 0;
            Dc = Td + 36;
            Nc = Mc + Dc;
            HEAP32[Nc >> 2] = 0;
            yd = Td + 40;
            jd = Mc + yd;
            HEAP8[jd] = -67;
            b = Mc;
            STACKTOP = c;
            return b;
        case 33:
            Sc = a + 204545;
            lc = HEAP8[Sc];
            nd = 0 == lc << 24 >> 24;
            if (!nd) return b = 0, STACKTOP = c, b;
            Rc = _jtga(a, 262144, 1, 0, 0);
            if (Hc = 0 == (Rc | 0)) return b =
                0, STACKTOP = c, b;
            Kd = HEAP32[Rc >> 2];
            Rd = Rc + Kd;
            HEAP32[Rd >> 2] = 3292;
            Nd = Kd + 4;
            be = Rc + Nd;
            HEAP32[be >> 2] = 370;
            zd = Kd + 8;
            we = Rc + zd;
            HEAP32[we >> 2] = ba;
            Lc = Kd + 12;
            rd = Rc + Lc;
            HEAP32[rd >> 2] = 0;
            se = Kd + 16;
            Ud = Rc + se;
            HEAP32[Ud >> 2] = 0;
            Cf = Kd + 20;
            td = Rc + Cf;
            HEAP32[td >> 2] = 0;
            Te = Kd + 24;
            pe = Rc + Te;
            HEAP32[pe >> 2] = 0;
            Pd = Kd + 28;
            Me = Rc + Pd;
            HEAP32[Me >> 2] = 0;
            Sd = Kd + 32;
            $e = Rc + Sd;
            HEAP32[$e >> 2] = 0;
            qe = Kd + 36;
            Ce = Rc + qe;
            HEAP32[Ce >> 2] = 0;
            cf = Kd + 40;
            sf = Rc + cf;
            HEAP8[sf] = -67;
            b = Rc;
            STACKTOP = c;
            return b;
        case 19:
            Ue = a + 204545;
            kf = HEAP8[Ue];
            Re = 0 == kf << 24 >> 24;
            if (!Re) return b = 0, STACKTOP =
                c, b;
            ce = _jtga(a, 262144, 1, 0, 0);
            if (De = 0 == (ce | 0)) return b = 0, STACKTOP = c, b;
            Ge = HEAP32[ce >> 2];
            He = ce + Ge;
            HEAP32[He >> 2] = 3292;
            We = Ge + 4;
            Yd = ce + We;
            HEAP32[Yd >> 2] = 348;
            Ne = Ge + 8;
            Se = ce + Ne;
            HEAP32[Se >> 2] = ba;
            Ee = Ge + 12;
            Ld = ce + Ee;
            HEAP32[Ld >> 2] = 0;
            he = Ge + 16;
            Qd = ce + he;
            HEAP32[Qd >> 2] = 0;
            re = Ge + 20;
            Ke = ce + re;
            HEAP32[Ke >> 2] = 4096;
            Ae = Ge + 24;
            te = ce + Ae;
            HEAP32[te >> 2] = 0;
            ie = Ge + 28;
            ff = ce + ie;
            HEAP32[ff >> 2] = 0;
            ue = Ge + 32;
            Oe = ce + ue;
            HEAP32[Oe >> 2] = 0;
            ne = Ge + 36;
            ze = ce + ne;
            HEAP32[ze >> 2] = 0;
            vf = Ge + 40;
            lf = ce + vf;
            HEAP8[lf] = -67;
            b = ce;
            STACKTOP = c;
            return b;
        case 16:
            Xe = a + 204545;
            Be = HEAP8[Xe];
            hf = 0 == Be << 24 >> 24;
            if (!hf) return b = 0, STACKTOP = c, b;
            af = _jtga(a, 262144, 1, 0, 0);
            if (zf = 0 == (af | 0)) return b = 0, STACKTOP = c, b;
            uf = HEAP32[af >> 2];
            ve = af + uf;
            HEAP32[ve >> 2] = 3292;
            If = uf + 4;
            Df = af + If;
            HEAP32[Df >> 2] = 130;
            Ef = uf + 8;
            Gf = af + Ef;
            HEAP32[Gf >> 2] = ba;
            of = uf + 12;
            Lf = af + of;
            HEAP32[Lf >> 2] = 0;
            pf = uf + 16;
            bf = af + pf;
            HEAP32[bf >> 2] = 0;
            Bf = uf + 20;
            Pf = af + Bf;
            HEAP32[Pf >> 2] = 4096;
            Ye = uf + 24;
            Hf = af + Ye;
            HEAP32[Hf >> 2] = 0;
            jf = uf + 28;
            mf = af + jf;
            HEAP32[mf >> 2] = 0;
            Le = uf + 32;
            Ve = af + Le;
            HEAP32[Ve >> 2] = 0;
            df = uf + 36;
            wf = af + df;
            HEAP32[wf >> 2] = 0;
            Yf = uf + 40;
            Jf = af + Yf;
            HEAP8[Jf] = -67;
            b = af;
            STACKTOP = c;
            return b;
        case 32:
            Qf = a + 204545;
            Sf = HEAP8[Qf];
            Mf = 0 == Sf << 24 >> 24;
            if (!Mf) return b = 0, STACKTOP = c, b;
            ee = _jtga(a, 262144, 1, 0, 0);
            if (oe = 0 == (ee | 0)) return b = 0, STACKTOP = c, b;
            rf = HEAP32[ee >> 2];
            Ff = ee + rf;
            HEAP32[Ff >> 2] = 3292;
            xf = rf + 4;
            Pe = ee + xf;
            HEAP32[Pe >> 2] = 2200;
            qf = rf + 8;
            yf = ee + qf;
            HEAP32[yf >> 2] = ba;
            Nf = rf + 12;
            Zf = ee + Nf;
            HEAP32[Zf >> 2] = 0;
            tg = rf + 16;
            Ze = ee + tg;
            HEAP32[Ze >> 2] = 0;
            gf = rf + 20;
            ef = ee + gf;
            HEAP32[ef >> 2] = 0;
            Kf = rf + 24;
            bg = ee + Kf;
            HEAP32[bg >> 2] = 0;
            lg = rf + 28;
            Rf = ee + lg;
            HEAP32[Rf >> 2] = 0;
            Ug = rf + 32;
            Vf = ee + Ug;
            HEAP32[Vf >> 2] = 0;
            Jg = rf + 36;
            hg = ee + Jg;
            HEAP32[hg >> 2] = 0;
            Lg = rf + 40;
            $f = ee + Lg;
            HEAP8[$f] = -67;
            b = ee;
            STACKTOP = c;
            return b;
        case 34:
            ah = a + 204545;
            nh = HEAP8[ah];
            dh = 0 == nh << 24 >> 24;
            if (!dh) return b = 0, STACKTOP = c, b;
            mg = _jtga(a, 262144, 1, 0, 0);
            if (yh = 0 == (mg | 0)) return b = 0, STACKTOP = c, b;
            Bg = HEAP32[mg >> 2];
            ig = mg + Bg;
            HEAP32[ig >> 2] = 3292;
            ng = Bg + 4;
            Ng = mg + ng;
            HEAP32[Ng >> 2] = 2136;
            Ch = Bg + 8;
            Dg = mg + Ch;
            HEAP32[Dg >> 2] = ba;
            Vg = Bg + 12;
            pg = mg + Vg;
            HEAP32[pg >> 2] = 0;
            zg = Bg + 16;
            Pg = mg + zg;
            HEAP32[Pg >> 2] = 0;
            cg = Bg + 20;
            dg = mg + cg;
            HEAP32[dg >> 2] = 0;
            qg = Bg + 24;
            vg = mg + qg;
            HEAP32[vg >> 2] = 0;
            bh = Bg + 28;
            Zg = mg + bh;
            HEAP32[Zg >>
                2] = 0;
            Eg = Bg + 32;
            wg = mg + Eg;
            HEAP32[wg >> 2] = 0;
            vh = Bg + 36;
            Kh = mg + vh;
            HEAP32[Kh >> 2] = 0;
            $g = Bg + 40;
            Ag = mg + $g;
            HEAP8[Ag] = -67;
            b = mg;
            STACKTOP = c;
            return b;
        case 21:
            Lh = a + 204545;
            xg = HEAP8[Lh];
            Mg = 0 == xg << 24 >> 24;
            if (!Mg) return b = 0, STACKTOP = c, b;
            rg = _jtga(a, 262144, 1, 0, 0);
            if (Sg = 0 == (rg | 0)) return b = 0, STACKTOP = c, b;
            jg = HEAP32[rg >> 2];
            Uh = rg + jg;
            HEAP32[Uh >> 2] = 3292;
            Of = jg + 4;
            Tg = rg + Of;
            HEAP32[Tg >> 2] = 2218;
            qi = jg + 8;
            eg = rg + qi;
            HEAP32[eg >> 2] = ba;
            gi = jg + 12;
            kg = rg + gi;
            HEAP32[kg >> 2] = 0;
            Qg = jg + 16;
            Wg = rg + Qg;
            HEAP32[Wg >> 2] = 0;
            wi = jg + 20;
            zh = rg + wi;
            HEAP32[zh >> 2] = 4096;
            Wf = jg +
                24;
            di = rg + Wf;
            HEAP32[di >> 2] = 0;
            ch = jg + 28;
            Mh = rg + ch;
            HEAP32[Mh >> 2] = 0;
            Fg = jg + 32;
            Rg = rg + Fg;
            HEAP32[Rg >> 2] = 0;
            Vh = jg + 36;
            Gg = rg + Vh;
            HEAP32[Gg >> 2] = 0;
            eh = jg + 40;
            kh = rg + eh;
            HEAP8[kh] = -67;
            b = rg;
            STACKTOP = c;
            return b;
        case 29:
            fh = a + 204545;
            Wh = HEAP8[fh];
            qh = 0 == Wh << 24 >> 24;
            if (!qh) return b = 0, STACKTOP = c, b;
            og = _jtga(a, 262144, 1, 0, 0);
            if (Og = 0 == (og | 0)) return b = 0, STACKTOP = c, b;
            Kg = HEAP32[og >> 2];
            Ih = og + Kg;
            HEAP32[Ih >> 2] = 3292;
            ai = Kg + 4;
            wh = og + ai;
            HEAP32[wh >> 2] = 824;
            Xh = Kg + 8;
            Nh = og + Xh;
            HEAP32[Nh >> 2] = ba;
            Jh = Kg + 12;
            lj = og + Jh;
            HEAP32[lj >> 2] = 0;
            gh = Kg + 16;
            rh = og + gh;
            HEAP32[rh >>
                2] = 0;
            Ph = Kg + 20;
            hi = og + Ph;
            HEAP32[hi >> 2] = 4096;
            sh = Kg + 24;
            fg = og + sh;
            HEAP32[fg >> 2] = 0;
            Yi = Kg + 28;
            mj = og + Yi;
            HEAP32[mj >> 2] = 0;
            xi = Kg + 32;
            Hi = og + xi;
            HEAP32[Hi >> 2] = 0;
            Ii = Kg + 36;
            lh = og + Ii;
            HEAP32[lh >> 2] = 0;
            yg = Kg + 40;
            vj = og + yg;
            HEAP8[vj] = -67;
            b = og;
            STACKTOP = c;
            return b;
        case 30:
            Ji = a + 204545;
            Xj = HEAP8[Ji];
            yi = 0 == Xj << 24 >> 24;
            if (!yi) return b = 0, STACKTOP = c, b;
            hh = _jtga(a, 262144, 1, 0, 0);
            if (Aj = 0 == (hh | 0)) return b = 0, STACKTOP = c, b;
            ih = HEAP32[hh >> 2];
            Hj = hh + ih;
            HEAP32[Hj >> 2] = 3292;
            zi = ih + 4;
            ni = hh + zi;
            HEAP32[ni >> 2] = 1024;
            ti = ih + 8;
            Cg = hh + ti;
            HEAP32[Cg >> 2] = ba;
            Ah = ih +
                12;
            th = hh + Ah;
            HEAP32[th >> 2] = 0;
            oh = ih + 16;
            Hg = hh + oh;
            HEAP32[Hg >> 2] = 0;
            bi = ih + 20;
            ui = hh + bi;
            HEAP32[ui >> 2] = 4096;
            gj = ih + 24;
            rj = hh + gj;
            HEAP32[rj >> 2] = 0;
            Ki = ih + 28;
            Pj = hh + Ki;
            HEAP32[Pj >> 2] = 0;
            Zi = ih + 32;
            ii = hh + Zi;
            HEAP32[ii >> 2] = 0;
            mh = ih + 36;
            ji = hh + mh;
            HEAP32[ji >> 2] = 0;
            vi = ih + 40;
            Qh = hh + vi;
            HEAP8[Qh] = -67;
            b = hh;
            STACKTOP = c;
            return b;
        case 27:
            Ij = a + 204545;
            ik = HEAP8[Ij];
            hj = 0 == ik << 24 >> 24;
            if (!hj) return b = 0, STACKTOP = c, b;
            Xg = _jtga(a, 262144, 1, 0, 0);
            if (Li = 0 == (Xg | 0)) return b = 0, STACKTOP = c, b;
            ph = HEAP32[Xg >> 2];
            al = Xg + ph;
            HEAP32[al >> 2] = 3292;
            oi = ph + 4;
            Yh = Xg + oi;
            HEAP32[Yh >>
                2] = 356;
            ek = ph + 8;
            ki = Xg + ek;
            HEAP32[ki >> 2] = ba;
            ci = ph + 12;
            Rh = Xg + ci;
            HEAP32[Rh >> 2] = 0;
            Bj = ph + 16;
            wj = Xg + Bj;
            HEAP32[wj >> 2] = 0;
            Cj = ph + 20;
            Qi = Xg + Cj;
            HEAP32[Qi >> 2] = 4096;
            Ri = ph + 24;
            Qj = Xg + Ri;
            HEAP32[Qj >> 2] = 0;
            Dh = ph + 28;
            Vk = Xg + Dh;
            HEAP32[Vk >> 2] = 0;
            Sh = ph + 32;
            Dj = Xg + Sh;
            HEAP32[Dj >> 2] = 0;
            xj = ph + 36;
            Eh = Xg + xj;
            HEAP32[Eh >> 2] = 0;
            Rj = ph + 40;
            Ai = Xg + Rj;
            HEAP8[Ai] = -67;
            b = Xg;
            STACKTOP = c;
            return b;
        case 22:
            Vi = a + 204545;
            Yg = HEAP8[Vi];
            ri = 0 == Yg << 24 >> 24;
            if (!ri) return b = 0, STACKTOP = c, b;
            Fh = _jtga(a, 262144, 1, 0, 0);
            if (fk = 0 == (Fh | 0)) return b = 0, STACKTOP = c, b;
            Ei = HEAP32[Fh >> 2];
            Nk = Fh + Ei;
            HEAP32[Nk >> 2] = 3292;
            jk = Ei + 4;
            qk = Fh + jk;
            HEAP32[qk >> 2] = 1966;
            nj = Ei + 8;
            pi = Fh + nj;
            HEAP32[pi >> 2] = ba;
            yj = Ei + 12;
            Ig = Fh + yj;
            HEAP32[Ig >> 2] = 0;
            Th = Ei + 16;
            ij = Fh + Th;
            HEAP32[ij >> 2] = 0;
            Ej = Ei + 20;
            Yj = Fh + Ej;
            HEAP32[Yj >> 2] = 4096;
            $i = Ei + 24;
            Ik = Fh + $i;
            HEAP32[Ik >> 2] = 0;
            zk = Ei + 28;
            sj = Fh + zk;
            HEAP32[sj >> 2] = 0;
            Fj = Ei + 32;
            Jj = Fh + Fj;
            HEAP32[Jj >> 2] = 0;
            Wk = Ei + 36;
            Fi = Fh + Wk;
            HEAP32[Fi >> 2] = 0;
            jj = Ei + 40;
            Ak = Fh + jj;
            HEAP8[Ak] = -67;
            b = Fh;
            STACKTOP = c;
            return b;
        case 31:
            jl = a + 204545;
            Wi = HEAP8[jl];
            tk = 0 == Wi << 24 >> 24;
            if (!tk) return b = 0, STACKTOP = c, b;
            ei = _jtga(a, 262144, 1, 0, 0);
            if (Bk = 0 == (ei | 0)) return b = 0, STACKTOP = c, b;
            zj = HEAP32[ei >> 2];
            kj = ei + zj;
            HEAP32[kj >> 2] = 3292;
            Bi = zj + 4;
            Ck = ei + Bi;
            HEAP32[Ck >> 2] = 1022;
            ol = zj + 8;
            Ci = ei + ol;
            HEAP32[Ci >> 2] = ba;
            Sj = zj + 12;
            Kj = ei + Sj;
            HEAP32[Kj >> 2] = 0;
            Zj = zj + 16;
            Tj = ei + Zj;
            HEAP32[Tj >> 2] = 0;
            bl = zj + 20;
            Jk = ei + bl;
            HEAP32[Jk >> 2] = 4096;
            Ui = zj + 24;
            fi = ei + Ui;
            HEAP32[fi >> 2] = 0;
            xh = zj + 28;
            oj = ei + xh;
            HEAP32[oj >> 2] = 0;
            Dk = zj + 32;
            gk = ei + Dk;
            HEAP32[gk >> 2] = 0;
            cl = zj + 36;
            uk = ei + cl;
            HEAP32[uk >> 2] = 0;
            sg = zj + 40;
            Lj = ei + sg;
            HEAP8[Lj] = -67;
            b = ei;
            STACKTOP = c;
            return b;
        case 28:
            ul = a + 204545;
            pj = HEAP8[ul];
            tf = 0 == pj << 24 >> 24;
            if (!tf) return b = 0, STACKTOP = c, b;
            Xi = _jtga(a, 262144, 1, 0, 0);
            if ($j = 0 == (Xi | 0)) return b = 0, STACKTOP = c, b;
            Si = HEAP32[Xi >> 2];
            gg = Xi + Si;
            HEAP32[gg >> 2] = 3292;
            Kk = Si + 4;
            Gh = Xi + Kk;
            HEAP32[Gh >> 2] = 822;
            ag = Si + 8;
            jh = Xi + ag;
            HEAP32[jh >> 2] = ba;
            Hh = Si + 12;
            Af = Xi + Hh;
            HEAP32[Af >> 2] = 0;
            Mi = Si + 16;
            kl = Xi + Mi;
            HEAP32[kl >> 2] = 0;
            si = Si + 20;
            Ok = Xi + si;
            HEAP32[Ok >> 2] = 4096;
            Zh = Si + 24;
            dl = Xi + Zh;
            HEAP32[dl >> 2] = 0;
            Lk = Si + 28;
            li = Xi + Lk;
            HEAP32[li >> 2] = 0;
            Uj = Si + 32;
            fm = Xi + Uj;
            HEAP32[fm >> 2] = 0;
            Di = Si + 36;
            Mk = Xi + Di;
            HEAP32[Mk >> 2] = 0;
            qj = Si + 40;
            Pk = Xi + qj;
            HEAP8[Pk] = -67;
            b = Xi;
            STACKTOP = c;
            return b;
        case 18:
            vl = a + 204545;
            Mj = HEAP8[vl];
            ak = 0 == Mj << 24 >> 24;
            if (!ak) return b = 0, STACKTOP = c, b;
            mi = _jtga(a, 262144, 1, 0, 0);
            if (Jl = 0 == (mi | 0)) return b = 0, STACKTOP = c, b;
            Gi = HEAP32[mi >> 2];
            Nj = mi + Gi;
            HEAP32[Nj >> 2] = 3292;
            Oh = Gi + 4;
            fl = mi + Oh;
            HEAP32[fl >> 2] = 350;
            ll = Gi + 8;
            vk = mi + ll;
            HEAP32[vk >> 2] = ba;
            bk = Gi + 12;
            Vj = mi + bk;
            HEAP32[Vj >> 2] = 0;
            ck = Gi + 16;
            ml = mi + ck;
            HEAP32[ml >> 2] = 0;
            rk = Gi + 20;
            pl = mi + rk;
            HEAP32[pl >> 2] = 4096;
            Kl = Gi + 24;
            Qk = mi + Kl;
            HEAP32[Qk >> 2] = 0;
            wl = Gi + 28;
            Ek = mi + wl;
            HEAP32[Ek >> 2] = 0;
            sk = Gi + 32;
            Bl = mi + sk;
            HEAP32[Bl >> 2] = 0;
            aj = Gi + 36;
            kk = mi + aj;
            HEAP32[kk >> 2] = 0;
            Ni = Gi + 40;
            Oi = mi + Ni;
            HEAP8[Oi] = -67;
            b = mi;
            STACKTOP = c;
            return b;
        default:
            return lk = a + 4408, mk = HEAP32[lk >> 2], nk = HEAP32[mk >> 2], Fl = nk + 44, Xk = mk + Fl, bj = HEAP32[Xk >> 2], Ll = bj + 20, $h = HEAP32[Ll >> 2], gl = HEAP32[bj >> 2], Bh = bj + gl, _jtjsigstr(a, 11, $h, Bh), b = 0, STACKTOP = c, b
    }
    cj = _jtga(a, 1, 64, 2, 0);
    if (0 == (cj | 0)) return b = 0, STACKTOP = c, b;
    HEAP32[cj + 28 >> 2] = 16;
    HEAP32[cj + 32 >> 2] = 4;
    _memcpy(cj + HEAP32[cj >> 2], 114288, 64) | 0;
    Fk = HEAP32[ba + 24 >> 2];
    Rk = Fk - 1;
    dj = _jtga(a, 4, Fk, 1, 0);
    ql = 0 == (dj | 0);
    do
        if (ql) Sk = 0;
        else if (ej = 0 == (Fk | 0)) Sk = dj;
    else {
        xl = dj;
        dk = HEAP32[xl >>
            2];
        Gl = dj;
        nl = hk = Gl + dk;
        Yk = -1;
        for (ok = nl;;)
            if (Wj = Yk + 1, Rl = ok + 4, HEAP32[ok >> 2] = Wj, pk = (Wj | 0) == (Rk | 0)) {
                Sk = dj;
                break
            } else Yk = Wj, ok = Rl
    }
    while (0);
    Vl = _jtfrom(a, ba, cj);
    rl = _jtcant2(a, Sk, Vl);
    if (0 == (rl | 0) || 0 != HEAP8[a + 204545] << 24 >> 24) return b = 0, STACKTOP = c, b;
    Zk = _jtga(a, 262144, 1, 0, 0);
    if (0 == (Zk | 0)) return b = 0, STACKTOP = c, b;
    Gj = HEAP32[Zk >> 2];
    HEAP32[Zk + Gj >> 2] = 2422;
    HEAP32[Zk + (Gj + 4) >> 2] = 2418;
    HEAP32[Zk + (Gj + 8) >> 2] = ba;
    HEAP32[Zk + (Gj + 12) >> 2] = 0;
    HEAP32[Zk + (Gj + 16) >> 2] = rl;
    HEAP32[Zk + (Gj + 20) >> 2] = 0;
    HEAP32[Zk + (Gj + 24) >> 2] = 2147483647;
    HEAP32[Zk +
        (Gj + 28) >> 2] = 0;
    HEAP32[Zk + (Gj + 32) >> 2] = 0;
    HEAP32[Zk + (Gj + 36) >> 2] = 0;
    HEAP8[Zk + (Gj + 40)] = -67;
    b = Zk;
    STACKTOP = c;
    return b
}
function _jtbehead(a, f) {
    return _jtdrop(a, HEAP32[31058], f)
}
function _jtbident(a, f, d, c) {
    return _jthook(a, HEAP32[c + (f << 2) >> 2], HEAP32[c + (d << 2) >> 2])
}
function _jtbsdot(a, f) {
    var d, c, b, e;
    if (0 == (f | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 805567999 | 0)) {
        d = _jtfxeachv(a, 1, f);
        c = HEAP8[a + 204545];
        if (0 != c << 24 >> 24) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = HEAP32[c >> 2];
        HEAP32[c + b >> 2] = 2500;
        e = c + (b + 4);
        HEAP32[e >> 2] = 214;
        e = c + (b + 8);
        HEAP32[e >> 2] = f;
        e = c + (b + 12);
        HEAP32[e >> 2] = 0;
        e = c + (b + 16);
        HEAP32[e >> 2] = d;
        d = c + (b + 20);
        HEAP32[d >> 2] = 256;
        d = c + (b + 24);
        HEAP32[d >> 2] = 2147483647;
        d = c + (b + 28);
        HEAP32[d >> 2] = 0;
        d = c + (b + 32);
        HEAP32[d >> 2] = 2147483647;
        d = c + (b + 36);
        HEAP32[d >> 2] = 0;
        b = c + (b + 40);
        HEAP8[b] = 92;
        return c
    }
    d = HEAP32[f >> 2];
    e = HEAP8[f + (d + 40)] << 24 >> 24;
    a: do
        if (35 == (e | 0)) c = 2088, b = 1358;
        else
    if (47 == (e | 0)) switch (c = d + 8, c = f + c, b = HEAP32[c >> 2], (c = 0 == (b | 0)) ? c = 0 : (c = b + 12, c = HEAP32[c >> 2], c &= 1835008, (c = 0 == (c | 0)) ? c = 0 : (c = b, b = HEAP32[b >> 2], d = b + 40, d = c + d, d = HEAP8[d], (e = -67 == d << 24 >> 24) ? (b += 8, c += b, c = HEAP32[c >> 2], b = c + 12, b = HEAP32[b >> 2], b &= 4, (b = 0 == (b | 0)) ? c = -67 : (b = c + 24, b = HEAP32[b >> 2], (b = 0 == (b | 0)) ? (b = c, c = HEAP32[c >> 2], c = b + c, c = HEAP32[c >> 2], c &= 255) : c = -67)) : c = d)), c = c << 24 >> 24, c | 0) {
        case 43:
        case 61:
        case -107:
        case 22:
        case 25:
            c =
                912;
            b = 1258;
            break a;
        case 42:
        case -124:
        case -126:
        case -120:
        case -118:
        case 16:
        case 17:
        case 19:
        case 21:
        case 23:
        case 31:
            c = 1556;
            b = 1258;
            break a;
        default:
            c = 2088;
            b = 1258;
            break a
    } else c = 2088, b = 146;
    while (0);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return 0;
    d = _jtga(a, 262144, 1, 0, 0);
    if (0 == (d | 0)) return 0;
    e = HEAP32[d >> 2];
    HEAP32[d + e >> 2] = b;
    HEAP32[d + (e + 4) >> 2] = c;
    HEAP32[d + (e + 8) >> 2] = f;
    HEAP32[d + (e + 12) >> 2] = 0;
    HEAP32[d + (e + 16) >> 2] = 0;
    HEAP32[d + (e + 20) >> 2] = 0;
    HEAP32[d + (e + 24) >> 2] = 2147483647;
    HEAP32[d + (e + 28) >> 2] = 0;
    HEAP32[d + (e + 32) >> 2] = 2147483647;
    HEAP32[d + (e + 36) >> 2] = 0;
    HEAP8[d + (e + 40)] = -90;
    return d
}
function _jtccvt(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 48 | 0;
    g = e;
    h = e + 8;
    j = e + 16;
    i = e + 24;
    l = e + 32;
    if (0 == (d | 0)) return k = 0, STACKTOP = e, k;
    m = HEAP32[d + 24 >> 2];
    n = d + 28;
    p = HEAP32[d + 12 >> 2];
    q = 0 != (p & 64512 | 0) | (0 != (f & 64512 | 0) ? 2 : 0);
    do {
        if (2 == (q | 0)) {
            r = 0 == (f &
                1024 | 0) ? 0 != (f & 4096 | 0) ? 4 : 0 != (f & 8192 | 0) ? 8 : 0 != (f & 16384 | 0) ? 16 : 0 != (f & 2048 | 0) ? 2 : f >>> 10 & 32 : 1;
            s = a + 205336;
            t = HEAP32[s >> 2];
            HEAP32[s >> 2] = 0;
            u = _jtccvt(a, r, d, g);
            HEAP32[s >> 2] = t;
            0 == u << 24 >> 24 ? (u = HEAP32[a + 4408 >> 2], t = HEAP32[u + (HEAP32[u >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), w = 0) : w = HEAP32[g >> 2];
            t = m - 1;
            u = _jtga(a, 4, m, 1, 0);
            do
                if (0 == (u | 0)) v = 0;
                else if (0 == (m | 0)) v = u;
            else {
                x = -1;
                for (y = u + HEAP32[u >> 2];;)
                    if (z = x + 1, HEAP32[y >> 2] = z, (z | 0) == (t | 0)) {
                        v = u;
                        break
                    } else x = z, y += 4
            }
            while (0);
            u = HEAP32[30648];
            t = HEAP32[s >> 2];
            HEAP32[s >>
                2] = 0;
            y = _jtccvt(a, f, u, h);
            HEAP32[s >> 2] = t;
            0 == y << 24 >> 24 ? (y = HEAP32[a + 4408 >> 2], t = HEAP32[y + (HEAP32[y >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), A = 0) : A = HEAP32[h >> 2];
            t = _jtsparseit(a, w, v, A);
            HEAP32[c >> 2] = t;
            k = 0 != (t | 0) | 0;
            STACKTOP = e;
            return k
        }
        if (3 == (q | 0)) {
            D = 0 == (f & 1024 | 0) ? 0 != (f & 4096 | 0) ? 4 : 0 != (f & 8192 | 0) ? 8 : 0 != (f & 16384 | 0) ? 16 : 0 != (f & 2048 | 0) ? 2 : f >>> 10 & 32 : 1;
            s = _jtga(a, f, 1, m, n);
            HEAP32[c >> 2] = s;
            if (0 == (s | 0)) return k = 0, STACKTOP = e, k;
            t = s;
            y = HEAP32[s >> 2];
            s = t + y;
            u = d;
            x = HEAP32[d >> 2];
            z = s;
            B = _jtca(a, u + (HEAP32[u + x >> 2] + x)) -
                z;
            HEAP32[s >> 2] = B;
            if (0 == (t + (B + y) | 0)) return k = 0, STACKTOP = e, k;
            B = _jtca(a, u + (HEAP32[x + (u + 8) >> 2] + x)) - z;
            HEAP32[y + (t + 8) >> 2] = B;
            if (0 == (t + (B + y) | 0)) return k = 0, STACKTOP = e, k;
            B = u + (HEAP32[x + (u + 4) >> 2] + x);
            s = a + 205336;
            G = HEAP32[s >> 2];
            HEAP32[s >> 2] = 0;
            C = _jtccvt(a, D, B, j);
            HEAP32[s >> 2] = G;
            0 == C << 24 >> 24 ? (C = HEAP32[a + 4408 >> 2], G = HEAP32[C + (HEAP32[C >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), F = 0) : F = HEAP32[j >> 2];
            G = F - z;
            HEAP32[y + (t + 4) >> 2] = G;
            if (0 == (t + (G + y) | 0)) return k = 0, STACKTOP = e, k;
            G = u + (HEAP32[x + (u + 12) >> 2] + x);
            x = HEAP32[s >>
                2];
            HEAP32[s >> 2] = 0;
            u = _jtccvt(a, D, G, i);
            HEAP32[s >> 2] = x;
            0 == u << 24 >> 24 ? (u = HEAP32[a + 4408 >> 2], x = HEAP32[u + (HEAP32[u >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2]), E = 0) : E = HEAP32[i >> 2];
            x = E - z;
            HEAP32[y + (t + 12) >> 2] = x;
            k = 0 != (t + (x + y) | 0) | 0;
            STACKTOP = e;
            return k
        }
        if (1 == (q | 0)) {
            y = _jtdenseit(a, d);
            if (0 == (y | 0)) return k = 0, STACKTOP = e, k;
            J = y;
            L = HEAP32[y + 12 >> 2]
        } else J = d, L = p
    } while (0);
    p = J + 20;
    d = HEAP32[p >> 2];
    E = q = J;
    D = i = q + HEAP32[E >> 2];
    if ((L | 0) == (f | 0)) return F = _jtca(a, J), HEAP32[c >> 2] = F, k = 0 != (F | 0) | 0, STACKTOP = e, k;
    F = _jtga(a, f, d,
        m, n);
    HEAP32[c >> 2] = F;
    if (0 == (F | 0)) return k = 0, STACKTOP = e, k;
    j = F;
    A = HEAP32[F >> 2];
    v = F = j + A;
    0 != (f & 16 | 0) && _fillv(f, d, F);
    if (0 == (d | 0)) return k = 1, STACKTOP = e, k;
    w = (L << 10) + f;
    if (8320 == (w | 0)) return k = _jtQfromD(a, J, F), STACKTOP = e, k;
    if (8208 == (w | 0)) {
        if (0 >= (d | 0)) return k = 1, STACKTOP = e, k;
        L = F;
        h = i;
        for (g = 0;;)
            if (r = h + 8, y = HEAPF64[h >> 3], 0 != y ? b = 133 : (x = HEAP32[h + 4 >> 2] & 2147483647, t = 2146435072, x >>> 0 > t >>> 0 | x >>> 0 == t >>> 0 & 0 < (HEAP32[h >> 2] & -1) >>> 0 ? b = 133 : I = 0), 133 == b && (b = 0, I = y), HEAPF64[L >> 3] = I, y = g + 1, (y | 0) < (d | 0)) L += 16, h = r, g = y;
            else {
                k = 1;
                break
            }
        STACKTOP =
            e;
        return k
    }
    if (16448 == (w | 0)) {
        g = _jtga(a, 8, d, m, n);
        if (0 == (g | 0)) return k = 0, STACKTOP = e, k;
        h = HEAP32[p >> 2];
        L = q + HEAP32[E >> 2];
        I = g + HEAP32[g >> 2];
        y = a + 204496;
        r = 0 < (h | 0);
        a: do
            if (0 != HEAPF64[y >> 3]) {
                if (r) {
                    H = I;
                    K = L;
                    for (N = 0;;) {
                        t = HEAPF64[K + 8 >> 3];
                        S = 0 > t ? -0 - t : t;
                        if (S == HEAPF64[14142]) {
                            k = 0;
                            b = 290;
                            break
                        }
                        t = HEAPF64[K >> 3];
                        T = 0 > t ? -0 - t : t;
                        if (S > HEAPF64[y >> 3] * T) {
                            k = 0;
                            b = 290;
                            break
                        }
                        HEAPF64[H >> 3] = t;
                        t = N + 1;
                        if ((t | 0) < (h | 0)) H += 8, K += 16, N = t;
                        else break a
                    }
                    if (290 == b) return STACKTOP = e, k
                }
            } else
        if (r) {
            V = I;
            Q = L;
            for (P = 0;;) {
                if (0 != HEAPF64[Q + 8 >> 3]) {
                    k = 0;
                    break
                }
                HEAPF64[V >>
                    3] = HEAPF64[Q >> 3];
                t = P + 1;
                if ((t | 0) < (h | 0)) V += 8, Q += 16, P = t;
                else break a
            }
            STACKTOP = e;
            return k
        }
        while (0);
        P = F;
        Q = HEAP32[g + 20 >> 2];
        if (0 < (Q | 0))
            for (g = 0;;)
                if (HEAP32[P + (g << 2) >> 2] = _jtxd1(a, HEAPF64[I + (g << 3) >> 3]), V = g + 1, (V | 0) < (Q | 0)) g = V;
                else break;
        k = 0 == (HEAP8[a + 204545] | 0) | 0;
        STACKTOP = e;
        return k
    }
    if (4104 == (w | 0)) {
        if (0 >= (d | 0)) return k = 1, STACKTOP = e, k;
        g = F;
        Q = D;
        for (I = 0;;)
            if (HEAPF64[g >> 3] = HEAP32[Q >> 2] | 0, P = I + 1, (P | 0) < (d | 0)) g += 8, Q += 4, I = P;
            else {
                k = 1;
                break
            }
        STACKTOP = e;
        return k
    }
    if (4112 == (w | 0)) {
        if (0 >= (d | 0)) return k = 1, STACKTOP = e, k;
        I = F;
        Q = D;
        for (D = 0;;)
            if (HEAPF64[I >> 3] = HEAP32[Q >> 2] | 0, g = D + 1, (g | 0) < (d | 0)) I += 16, Q += 4, D = g;
            else {
                k = 1;
                break
            }
        STACKTOP = e;
        return k
    }
    if (1028 == (w | 0)) {
        if (0 < (d | 0)) M = 0, R = i, O = v;
        else return k = 1, STACKTOP = e, k;
        for (;;)
            if (HEAP32[O >> 2] = HEAP8[R] | 0, v = M + 1, (v | 0) < (d | 0)) M = v, R += 1, O += 4;
            else {
                k = 1;
                break
            }
        STACKTOP = e;
        return k
    }
    if (134217730 == (w | 0)) {
        O = HEAP32[p >> 2];
        if (0 >= (O | 0)) return k = 1, STACKTOP = e, k;
        R = F;
        M = q + HEAP32[E >> 2];
        for (v = 0;;) {
            D = HEAP16[M >> 1];
            if (256 <= (D & 65535)) {
                k = 0;
                b = 290;
                break
            }
            HEAP8[R] = D;
            D = v + 1;
            if ((D | 0) < (O | 0)) R += 1, M += 2, v = D;
            else {
                k = 1;
                b = 290;
                break
            }
        }
        if (290 ==
            b) return STACKTOP = e, k
    } else {
        if (133120 == (w | 0)) {
            v = HEAP32[p >> 2];
            if (0 >= (v | 0)) return k = 1, STACKTOP = e, k;
            M = F;
            R = 0;
            for (O = q + HEAP32[E >> 2];;)
                if (HEAP16[M >> 1] = HEAPU8[O], D = R + 1, (D | 0) < (v | 0)) M += 2, R = D, O += 1;
                else {
                    k = 1;
                    break
                }
            STACKTOP = e;
            return k
        }
        if (4352 == (w | 0)) return k = _jtcvt2bit(a, J, F), STACKTOP = e, k;
        if (4097 == (w | 0)) {
            O = HEAP32[p >> 2];
            if (0 >= (O | 0)) return k = 1, STACKTOP = e, k;
            R = F;
            M = q + HEAP32[E >> 2];
            for (v = 0;;) {
                D = HEAP32[M >> 2];
                if (2 <= D >>> 0) {
                    k = 0;
                    b = 290;
                    break
                }
                HEAP8[R] = D;
                D = v + 1;
                if ((D | 0) < (O | 0)) R += 1, M += 4, v = D;
                else {
                    k = 1;
                    b = 290;
                    break
                }
            }
            if (290 == b) return STACKTOP =
                e, k
        } else {
            if (1152 == (w | 0)) {
                v = _jtga(a, 64, d, m, n);
                if (0 == (v | 0)) return k = 0, STACKTOP = e, k;
                R = M = v;
                O = HEAP32[p >> 2];
                D = HEAP32[E >> 2];
                Q = M + HEAP32[R >> 2];
                if (0 < (O | 0))
                    for (I = 0;;)
                        if (g = HEAP8[q + (I + D)], P = _jtga(a, 4, 1, 1, 0), 0 == (P | 0) ? aa = 0 : (V = P + HEAP32[P >> 2], tempBigInt = g << 24 >> 24, HEAP8[V] = tempBigInt, tempBigInt >>= 8, HEAP8[V + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[V + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[V + 3 | 0] = tempBigInt, aa = P), HEAP32[Q + (I << 2) >> 2] = aa, P = I + 1, (P | 0) < (O | 0)) I = P;
                        else break;
                if (0 != (HEAP8[a + 204545] | 0)) return k = 0, STACKTOP = e, k;
                I = HEAP32[v +
                    20 >> 2];
                if (0 >= (I | 0)) return k = 1, STACKTOP = e, k;
                v = HEAP32[31138];
                O = F;
                aa = 0;
                for (Q = M + HEAP32[R >> 2];;)
                    if (HEAP32[O >> 2] = HEAP32[Q >> 2], HEAP32[O + 4 >> 2] = v, R = aa + 1, (R | 0) < (I | 0)) O += 8, aa = R, Q += 4;
                    else {
                        k = 1;
                        break
                    }
                STACKTOP = e;
                return k
            }
            if (1280 == (w | 0) || 8448 == (w | 0)) return k = _jtcvt2bit(a, J, F), STACKTOP = e, k;
            if (16388 == (w | 0)) {
                Q = _jtga(a, 8, d, m, n);
                if (0 == (Q | 0)) return k = 0, STACKTOP = e, k;
                aa = HEAP32[p >> 2];
                O = q + HEAP32[E >> 2];
                I = Q + HEAP32[Q >> 2];
                v = a + 204496;
                R = 0 < (aa | 0);
                a: do
                    if (0 != HEAPF64[v >> 3]) {
                        if (R) {
                            Z = I;
                            $ = O;
                            for (ba = 0;;) {
                                M = HEAPF64[$ + 8 >> 3];
                                ka = 0 > M ? -0 - M : M;
                                if (ka == HEAPF64[14142]) {
                                    k = 0;
                                    b = 290;
                                    break
                                }
                                M = HEAPF64[$ >> 3];
                                ea = 0 > M ? -0 - M : M;
                                if (ka > HEAPF64[v >> 3] * ea) {
                                    k = 0;
                                    b = 290;
                                    break
                                }
                                HEAPF64[Z >> 3] = M;
                                M = ba + 1;
                                if ((M | 0) < (aa | 0)) Z += 8, $ += 16, ba = M;
                                else break a
                            }
                            if (290 == b) return STACKTOP = e, k
                        }
                    } else
                if (R) {
                    ha = I;
                    da = O;
                    for (ga = 0;;) {
                        if (0 != HEAPF64[da + 8 >> 3]) {
                            k = 0;
                            break
                        }
                        HEAPF64[ha >> 3] = HEAPF64[da >> 3];
                        M = ga + 1;
                        if ((M | 0) < (aa | 0)) ha += 8, da += 16, ga = M;
                        else break a
                    }
                    STACKTOP = e;
                    return k
                }
                while (0);
                k = _jtIfromD(HEAPF64[v >> 3], Q, F);
                STACKTOP = e;
                return k
            }
            if (1040 == (w | 0)) {
                if (0 >= (d | 0)) return k = 1, STACKTOP = e, k;
                Q = F;
                v = i;
                for (ga =
                    0;;)
                    if (HEAPF64[Q >> 3] = HEAP8[v] | 0, da = ga + 1, (da | 0) < (d | 0)) Q += 16, v += 1, ga = da;
                    else {
                        k = 1;
                        break
                    }
                STACKTOP = e;
                return k
            }
            if (8193 == (w | 0)) {
                ga = HEAP32[p >> 2];
                if (0 >= (ga | 0)) return k = 1, STACKTOP = e, k;
                v = a + 204496;
                Q = q + HEAP32[E >> 2];
                da = F;
                for (ha = 0;;) {
                    aa = Q + 8;
                    O = HEAPF64[Q >> 3];
                    if (-2 > O | 2 < O) {
                        k = 0;
                        b = 290;
                        break
                    }
                    if (0 != O)
                        if (I = 1 - O, U = 0 > I ? -0 - I : I, I = HEAPF64[v >> 3], ca = 0 > O ? (R = -1 < O) ? R ? 1 : O : -0 - O : 1 > O ? 1 : O, U > I * ca) {
                            k = 0;
                            b = 290;
                            break
                        } else X = 1;
                    else X = 0;
                    HEAP8[da] = X;
                    O = ha + 1;
                    if ((O | 0) < (ga | 0)) Q = aa, da += 1, ha = O;
                    else {
                        k = 1;
                        b = 290;
                        break
                    }
                }
                if (290 == b) return STACKTOP = e, k
            } else if (65537 ==
                (w | 0)) {
                ha = q + HEAP32[E >> 2];
                da = HEAP32[p >> 2];
                if (0 < (da | 0)) Y = 0;
                else return k = 1, STACKTOP = e, k;
                for (;;) {
                    Q = HEAP32[ha + (Y << 2) >> 2];
                    ga = HEAP32[Q + HEAP32[Q >> 2] >> 2];
                    if (!(1 == (HEAP32[Q + 20 >> 2] | 0) & 2 > ga >>> 0)) {
                        k = 0;
                        b = 290;
                        break
                    }
                    HEAP8[j + (Y + A)] = ga;
                    ga = Y + 1;
                    if ((ga | 0) < (da | 0)) Y = ga;
                    else {
                        k = 1;
                        b = 290;
                        break
                    }
                }
                if (290 == b) return STACKTOP = e, k
            } else {
                if (65540 == (w | 0)) return k = _jtIfromX(a, J, F), STACKTOP = e, k;
                if (65664 == (w | 0)) {
                    Y = HEAP32[p >> 2];
                    if (0 >= (Y | 0)) return k = 1, STACKTOP = e, k;
                    da = HEAP32[31138];
                    ha = F;
                    ga = 0;
                    for (Q = q + HEAP32[E >> 2];;)
                        if (HEAP32[ha >> 2] = HEAP32[Q >>
                                2], HEAP32[ha + 4 >> 2] = da, X = ga + 1, (X | 0) < (Y | 0)) ha += 8, ga = X, Q += 4;
                        else {
                            k = 1;
                            break
                        }
                    STACKTOP = e;
                    return k
                }
                if (65544 == (w | 0)) {
                    Q = F;
                    ga = HEAP32[p >> 2];
                    ha = q + HEAP32[E >> 2];
                    if (0 >= (ga | 0)) return k = 1, STACKTOP = e, k;
                    Y = a + 205756;
                    da = 0;
                    a: for (;;) {
                        X = HEAP32[ha + (da << 2) >> 2];
                        ca = HEAP32[X + 20 >> 2];
                        U = X + HEAP32[X >> 2];
                        X = HEAP32[U + (ca - 1 << 2) >> 2];
                        do
                            if (99999 == (X | 0)) ja = HEAPF64[14142];
                            else if (-99999 == (X | 0)) ja = HEAPF64[14141];
                        else {
                            do
                                if (0 < (ca | 0))
                                    if (v = X | 0, 1 >= (ca | 0)) fa = v;
                                    else {
                                        O = 1;
                                        R = U + (ca - 2 << 2);
                                        for (ba = v;;)
                                            if (v = O + 1, $ = (HEAP32[R >> 2] | 0) + 1E4 * ba, (v | 0) < (ca | 0)) O = v,
                                                R -= 4, ba = $;
                                            else {
                                                fa = $;
                                                break
                                            }
                                    } else fa = 0; while (0);
                            if (0 != (HEAP8[Y] | 0)) ja = fa;
                            else if (-1.7976931348623157E308 > fa | 1.7976931348623157E308 < fa) break a;
                            else ja = fa
                        }
                        while (0);
                        HEAPF64[Q + (da << 3) >> 3] = ja;
                        ca = da + 1;
                        if ((ca | 0) < (ga | 0)) da = ca;
                        else {
                            k = 1;
                            b = 290;
                            break
                        }
                    }
                    if (290 == b) return STACKTOP = e, k;
                    da = HEAP32[a + 4408 >> 2];
                    ga = HEAP32[da + (HEAP32[da >> 2] + 12) >> 2];
                    _jtjsigstr(a, 3, HEAP32[ga + 20 >> 2], ga + HEAP32[ga >> 2]);
                    k = 0;
                    STACKTOP = e;
                    return k
                }
                if (65552 == (w | 0)) {
                    ga = _jtga(a, 8, d, m, n);
                    if (0 == (ga | 0)) return k = 0, STACKTOP = e, k;
                    da = ga + HEAP32[ga >> 2];
                    ja = HEAP32[p >>
                        2];
                    Q = q + HEAP32[E >> 2];
                    a: do
                        if (0 < (ja | 0)) {
                            fa = a + 205756;
                            Y = 0;
                            b: for (;;) {
                                ha = HEAP32[Q + (Y << 2) >> 2];
                                ca = HEAP32[ha + 20 >> 2];
                                U = ha + HEAP32[ha >> 2];
                                ha = HEAP32[U + (ca - 1 << 2) >> 2];
                                do
                                    if (99999 == (ha | 0)) ia = HEAPF64[14142];
                                    else if (-99999 == (ha | 0)) ia = HEAPF64[14141];
                                else {
                                    do
                                        if (0 < (ca | 0))
                                            if (X = ha | 0, 1 >= (ca | 0)) ra = X;
                                            else {
                                                aa = 1;
                                                I = U + (ca - 2 << 2);
                                                for (ba = X;;)
                                                    if (X = aa + 1, R = (HEAP32[I >> 2] | 0) + 1E4 * ba, (X | 0) < (ca | 0)) aa = X, I -= 4, ba = R;
                                                    else {
                                                        ra = R;
                                                        break
                                                    }
                                            } else ra = 0; while (0);
                                    if (0 != (HEAP8[fa] | 0)) ia = ra;
                                    else if (-1.7976931348623157E308 > ra | 1.7976931348623157E308 < ra) break b;
                                    else ia = ra
                                }
                                while (0);
                                HEAPF64[da + (Y << 3) >> 3] = ia;
                                ca = Y + 1;
                                if ((ca | 0) < (ja | 0)) Y = ca;
                                else break a
                            }
                            Y = HEAP32[a + 4408 >> 2];
                            fa = HEAP32[Y + (HEAP32[Y >> 2] + 12) >> 2];
                            _jtjsigstr(a, 3, HEAP32[fa + 20 >> 2], fa + HEAP32[fa >> 2]);
                            k = 0;
                            STACKTOP = e;
                            return k
                        }
                    while (0);
                    k = _jtccvt(a, f, ga, c);
                    STACKTOP = e;
                    return k
                }
                if (131073 == (w | 0)) {
                    ga = _jtga(a, 64, d, m, n);
                    if (0 == (ga | 0)) return k = 0, STACKTOP = e, k;
                    ia = ja = ga;
                    da = HEAP32[p >> 2];
                    a: do
                        if (0 < (da | 0)) {
                            ra = q + HEAP32[E >> 2];
                            Q = ja + HEAP32[ia >> 2];
                            for (fa = 0;;) {
                                if (0 == _jtequ(a, HEAP32[31138], HEAP32[ra + 4 >> 2]) << 24 >> 24) {
                                    k = 0;
                                    break
                                }
                                HEAP32[Q >>
                                    2] = HEAP32[ra >> 2];
                                Y = fa + 1;
                                if ((Y | 0) < (da | 0)) ra += 8, Q += 4, fa = Y;
                                else break a
                            }
                            STACKTOP = e;
                            return k
                        }
                    while (0);
                    if (0 != (HEAP8[a + 204545] | 0)) return k = 0, STACKTOP = e, k;
                    da = ja + HEAP32[ia >> 2];
                    ia = HEAP32[ga + 20 >> 2];
                    if (0 < (ia | 0)) sa = 0;
                    else return k = 1, STACKTOP = e, k;
                    for (;;) {
                        ga = HEAP32[da + (sa << 2) >> 2];
                        ja = HEAP32[ga + HEAP32[ga >> 2] >> 2];
                        if (!(1 == (HEAP32[ga + 20 >> 2] | 0) & 2 > ja >>> 0)) {
                            k = 0;
                            b = 290;
                            break
                        }
                        HEAP8[j + (sa + A)] = ja;
                        ja = sa + 1;
                        if ((ja | 0) < (ia | 0)) sa = ja;
                        else {
                            k = 1;
                            b = 290;
                            break
                        }
                    }
                    if (290 == b) return STACKTOP = e, k
                } else {
                    if (4160 == (w | 0)) {
                        sa = l;
                        ia = HEAP32[p >> 2];
                        A = q +
                            HEAP32[E >> 2];
                        j = F;
                        if (0 < (ia | 0)) {
                            da = l + 4;
                            ja = l + 8;
                            ga = l;
                            for (fa = 0;;)
                                if (Q = HEAP32[A + (fa << 2) >> 2], ta = (ra = -2147483648 == (Q | 0)) ? 2147483647 : -1 < (Q | 0) ? Q : -Q, Y = ((ta | 0) / 1E4 & -1 | 0) % 1E4 & -1, HEAP32[da >> 2] = Y, ca = ((ta | 0) / 1E8 & -1 | 0) % 1E4 & -1, HEAP32[ja >> 2] = ca, U = 0 == (ca | 0) ? 0 != (Y | 0) ? 2 : 1 : 3, ha = ((ta | 0) % 1E4 & -1) + (ra & 1), HEAP32[ga >> 2] = ha, 0 > (Q | 0) && (HEAP32[ga >> 2] = -ha, HEAP32[da >> 2] = -Y, HEAP32[ja >> 2] = -ca), ca = _jtga(a, 4, U, 1, 0), 0 == (ca | 0) ? wa = 0 : (_memcpy(ca + HEAP32[ca >> 2], sa, U << 2) | 0, wa = ca), HEAP32[j + (fa << 2) >> 2] = wa, ca = fa + 1, (ca | 0) < (ia | 0)) fa = ca;
                                else break
                        }
                        k =
                            0 == (HEAP8[a + 204545] | 0) | 0;
                        STACKTOP = e;
                        return k
                    }
                    if (1088 == (w | 0)) {
                        fa = HEAP32[p >> 2];
                        ia = HEAP32[E >> 2];
                        wa = F;
                        if (0 < (fa | 0))
                            for (j = 0;;)
                                if (sa = HEAP8[q + (j + ia)], ja = _jtga(a, 4, 1, 1, 0), 0 == (ja | 0) ? za = 0 : (da = ja + HEAP32[ja >> 2], tempBigInt = sa << 24 >> 24, HEAP8[da] = tempBigInt, tempBigInt >>= 8, HEAP8[da + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[da + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[da + 3 | 0] = tempBigInt, za = ja), HEAP32[wa + (j << 2) >> 2] = za, ja = j + 1, (ja | 0) < (fa | 0)) j = ja;
                                else break;
                        k = 0 == (HEAP8[a + 204545] | 0) | 0;
                        STACKTOP = e;
                        return k
                    }
                    if (16512 == (w | 0)) {
                        j = _jtga(a,
                            8, d, m, n);
                        if (0 == (j | 0)) return k = 0, STACKTOP = e, k;
                        fa = HEAP32[p >> 2];
                        za = q + HEAP32[E >> 2];
                        wa = j + HEAP32[j >> 2];
                        ia = a + 204496;
                        ja = 0 < (fa | 0);
                        a: do
                            if (0 != HEAPF64[ia >> 3]) {
                                if (ja) {
                                    Ba = wa;
                                    ua = za;
                                    for (ya = 0;;) {
                                        da = HEAPF64[ua + 8 >> 3];
                                        xa = 0 > da ? -0 - da : da;
                                        if (xa == HEAPF64[14142]) {
                                            k = 0;
                                            b = 290;
                                            break
                                        }
                                        da = HEAPF64[ua >> 3];
                                        oa = 0 > da ? -0 - da : da;
                                        if (xa > HEAPF64[ia >> 3] * oa) {
                                            k = 0;
                                            b = 290;
                                            break
                                        }
                                        HEAPF64[Ba >> 3] = da;
                                        da = ya + 1;
                                        if ((da | 0) < (fa | 0)) Ba += 8, ua += 16, ya = da;
                                        else break a
                                    }
                                    if (290 == b) return STACKTOP = e, k
                                }
                            } else
                        if (ja) {
                            pa = wa;
                            la = za;
                            for (qa = 0;;) {
                                if (0 != HEAPF64[la + 8 >> 3]) {
                                    k = 0;
                                    break
                                }
                                HEAPF64[pa >> 3] = HEAPF64[la >> 3];
                                da = qa + 1;
                                if ((da | 0) < (fa | 0)) pa += 8, la += 16, qa = da;
                                else break a
                            }
                            STACKTOP = e;
                            return k
                        }
                        while (0);
                        k = _jtQfromD(a, j, F);
                        STACKTOP = e;
                        return k
                    }
                    if (16640 == (w | 0)) {
                        j = _jtga(a, 8, d, m, n);
                        if (0 == (j | 0)) return k = 0, STACKTOP = e, k;
                        qa = HEAP32[p >> 2];
                        la = q + HEAP32[E >> 2];
                        pa = j + HEAP32[j >> 2];
                        fa = a + 204496;
                        za = 0 < (qa | 0);
                        a: do
                            if (0 != HEAPF64[fa >> 3]) {
                                if (za) {
                                    Da = pa;
                                    Aa = la;
                                    for (Ea = 0;;) {
                                        wa = HEAPF64[Aa + 8 >> 3];
                                        Sa = 0 > wa ? -0 - wa : wa;
                                        if (Sa == HEAPF64[14142]) {
                                            k = 0;
                                            b = 290;
                                            break
                                        }
                                        wa = HEAPF64[Aa >> 3];
                                        Oa = 0 > wa ? -0 - wa : wa;
                                        if (Sa > HEAPF64[fa >> 3] * Oa) {
                                            k =
                                                0;
                                            b = 290;
                                            break
                                        }
                                        HEAPF64[Da >> 3] = wa;
                                        wa = Ea + 1;
                                        if ((wa | 0) < (qa | 0)) Da += 8, Aa += 16, Ea = wa;
                                        else break a
                                    }
                                    if (290 == b) return STACKTOP = e, k
                                }
                            } else
                        if (za) {
                            Ha = pa;
                            Ga = la;
                            for (Ma = 0;;) {
                                if (0 != HEAPF64[Ga + 8 >> 3]) {
                                    k = 0;
                                    break
                                }
                                HEAPF64[Ha >> 3] = HEAPF64[Ga >> 3];
                                wa = Ma + 1;
                                if ((wa | 0) < (qa | 0)) Ha += 8, Ga += 16, Ma = wa;
                                else break a
                            }
                            STACKTOP = e;
                            return k
                        }
                        while (0);
                        k = _jtcvt2bit(a, j, F);
                        STACKTOP = e;
                        return k
                    }
                    if (16385 == (w | 0)) {
                        j = _jtga(a, 8, d, m, n);
                        if (0 == (j | 0)) return k = 0, STACKTOP = e, k;
                        Ma = HEAP32[p >> 2];
                        Ga = q + HEAP32[E >> 2];
                        Ha = j + HEAP32[j >> 2];
                        qa = a + 204496;
                        la = 0 < (Ma | 0);
                        a: do
                            if (0 !=
                                HEAPF64[qa >> 3]) {
                                if (la) {
                                    Ia = Ha;
                                    db = Ga;
                                    for (W = 0;;) {
                                        pa = HEAPF64[db + 8 >> 3];
                                        Xa = 0 > pa ? -0 - pa : pa;
                                        if (Xa == HEAPF64[14142]) {
                                            k = 0;
                                            b = 290;
                                            break
                                        }
                                        pa = HEAPF64[db >> 3];
                                        Ta = 0 > pa ? -0 - pa : pa;
                                        if (Xa > HEAPF64[qa >> 3] * Ta) {
                                            k = 0;
                                            b = 290;
                                            break
                                        }
                                        HEAPF64[Ia >> 3] = pa;
                                        pa = W + 1;
                                        if ((pa | 0) < (Ma | 0)) Ia += 8, db += 16, W = pa;
                                        else break a
                                    }
                                    if (290 == b) return STACKTOP = e, k
                                }
                            } else
                        if (la) {
                            fb = Ha;
                            mb = Ga;
                            for (ma = 0;;) {
                                if (0 != HEAPF64[mb + 8 >> 3]) {
                                    k = 0;
                                    break
                                }
                                HEAPF64[fb >> 3] = HEAPF64[mb >> 3];
                                pa = ma + 1;
                                if ((pa | 0) < (Ma | 0)) fb += 8, mb += 16, ma = pa;
                                else break a
                            }
                            STACKTOP = e;
                            return k
                        }
                        while (0);
                        ma = HEAP32[j + 20 >>
                            2];
                        if (0 < (ma | 0)) ab = Ha, Na = F, $a = 0;
                        else return k = 1, STACKTOP = e, k;
                        for (;;) {
                            Ha = ab + 8;
                            j = HEAPF64[ab >> 3];
                            if (-2 > j | 2 < j) {
                                k = 0;
                                b = 290;
                                break
                            }
                            if (0 != j)
                                if (mb = 1 - j, Ua = 0 > mb ? -0 - mb : mb, mb = HEAPF64[qa >> 3], Pa = 0 > j ? (fb = -1 < j) ? fb ? 1 : j : -0 - j : 1 > j ? 1 : j, Ua > mb * Pa) {
                                    k = 0;
                                    b = 290;
                                    break
                                } else bb = 1;
                            else bb = 0;
                            HEAP8[Na] = bb;
                            j = $a + 1;
                            if ((j | 0) < (ma | 0)) ab = Ha, Na += 1, $a = j;
                            else {
                                k = 1;
                                b = 290;
                                break
                            }
                        }
                        if (290 == b) return STACKTOP = e, k
                    } else {
                        if (1032 == (w | 0)) {
                            if (0 >= (d | 0)) return k = 1, STACKTOP = e, k;
                            $a = F;
                            Na = i;
                            for (i = 0;;)
                                if (HEAPF64[$a >> 3] = HEAP8[Na] | 0, ab = i + 1, (ab | 0) < (d | 0)) $a += 8, Na += 1,
                                    i = ab;
                                else {
                                    k = 1;
                                    break
                                }
                            STACKTOP = e;
                            return k
                        }
                        if (4224 == (w | 0)) {
                            i = _jtga(a, 64, d, m, n);
                            if (0 == (i | 0)) return k = 0, STACKTOP = e, k;
                            $a = Na = i;
                            ab = l;
                            ma = HEAP32[p >> 2];
                            bb = q + HEAP32[E >> 2];
                            Pa = Na + HEAP32[$a >> 2];
                            if (0 < (ma | 0)) {
                                Ua = l + 4;
                                qa = l + 8;
                                j = l;
                                for (l = 0;;)
                                    if (fb = HEAP32[bb + (l << 2) >> 2], La = (Ma = -2147483648 == (fb | 0)) ? 2147483647 : -1 < (fb | 0) ? fb : -fb, Ga = ((La | 0) / 1E4 & -1 | 0) % 1E4 & -1, HEAP32[Ua >> 2] = Ga, la = ((La | 0) / 1E8 & -1 | 0) % 1E4 & -1, HEAP32[qa >> 2] = la, W = 0 == (la | 0) ? 0 != (Ga | 0) ? 2 : 1 : 3, db = ((La | 0) % 1E4 & -1) + (Ma & 1), HEAP32[j >> 2] = db, 0 > (fb | 0) && (HEAP32[j >> 2] = -db, HEAP32[Ua >>
                                            2] = -Ga, HEAP32[qa >> 2] = -la), la = _jtga(a, 4, W, 1, 0), 0 == (la | 0) ? Ja = 0 : (_memcpy(la + HEAP32[la >> 2], ab, W << 2) | 0, Ja = la), HEAP32[Pa + (l << 2) >> 2] = Ja, la = l + 1, (la | 0) < (ma | 0)) l = la;
                                    else break
                            }
                            if (0 != (HEAP8[a + 204545] | 0)) return k = 0, STACKTOP = e, k;
                            l = HEAP32[i + 20 >> 2];
                            if (0 >= (l | 0)) return k = 1, STACKTOP = e, k;
                            i = HEAP32[31138];
                            ma = F;
                            Ja = 0;
                            for (Pa = Na + HEAP32[$a >> 2];;)
                                if (HEAP32[ma >> 2] = HEAP32[Pa >> 2], HEAP32[ma + 4 >> 2] = i, $a = Ja + 1, ($a | 0) < (l | 0)) ma += 8, Ja = $a, Pa += 4;
                                else {
                                    k = 1;
                                    break
                                }
                            STACKTOP = e;
                            return k
                        }
                        if (8196 == (w | 0)) return k = _jtIfromD(HEAPF64[a + 204496 >> 3], J,
                            F), STACKTOP = e, k;
                        if (8256 == (w | 0)) {
                            Pa = q + HEAP32[E >> 2];
                            Ja = F;
                            ma = HEAP32[p >> 2];
                            if (0 < (ma | 0))
                                for (l = 0;;)
                                    if (HEAP32[Ja + (l << 2) >> 2] = _jtxd1(a, HEAPF64[Pa + (l << 3) >> 3]), i = l + 1, (i | 0) < (ma | 0)) l = i;
                                    else break;
                            k = 0 == (HEAP8[a + 204545] | 0) | 0;
                            STACKTOP = e;
                            return k
                        }
                        if (16392 == (w | 0)) {
                            l = HEAP32[p >> 2];
                            ma = q + HEAP32[E >> 2];
                            Pa = F;
                            Ja = a + 204496;
                            i = 0 < (l | 0);
                            if (0 == HEAPF64[Ja >> 3]) {
                                if (i) Qa = Pa, Ya = ma, lb = 0;
                                else return k = 1, STACKTOP = e, k;
                                for (;;) {
                                    if (0 != HEAPF64[Ya + 8 >> 3]) {
                                        k = 0;
                                        b = 290;
                                        break
                                    }
                                    HEAPF64[Qa >> 3] = HEAPF64[Ya >> 3];
                                    $a = lb + 1;
                                    if (($a | 0) < (l | 0)) Qa += 8, Ya += 16, lb = $a;
                                    else {
                                        k = 1;
                                        b = 290;
                                        break
                                    }
                                }
                                if (290 == b) return STACKTOP = e, k
                            }
                            if (i) Ca = Pa, gb = ma, Fa = 0;
                            else return k = 1, STACKTOP = e, k;
                            for (;;) {
                                ma = HEAPF64[gb + 8 >> 3];
                                Za = 0 > ma ? -0 - ma : ma;
                                if (Za == HEAPF64[14142]) {
                                    k = 0;
                                    b = 290;
                                    break
                                }
                                ma = HEAPF64[gb >> 3];
                                qb = 0 > ma ? -0 - ma : ma;
                                if (Za > HEAPF64[Ja >> 3] * qb) {
                                    k = 0;
                                    b = 290;
                                    break
                                }
                                HEAPF64[Ca >> 3] = ma;
                                ma = Fa + 1;
                                if ((ma | 0) < (l | 0)) Ca += 8, gb += 16, Fa = ma;
                                else {
                                    k = 1;
                                    b = 290;
                                    break
                                }
                            }
                            if (290 == b) return STACKTOP = e, k
                        } else {
                            if (131076 == (w | 0)) {
                                b = _jtga(a, 64, d, m, n);
                                if (0 == (b | 0)) return k = 0, STACKTOP = e, k;
                                Fa = HEAP32[p >> 2];
                                a: do
                                    if (0 < (Fa | 0)) {
                                        gb = q + HEAP32[E >>
                                            2];
                                        Ca = b + HEAP32[b >> 2];
                                        for (l = 0;;) {
                                            if (0 == _jtequ(a, HEAP32[31138], HEAP32[gb + 4 >> 2]) << 24 >> 24) {
                                                k = 0;
                                                break
                                            }
                                            HEAP32[Ca >> 2] = HEAP32[gb >> 2];
                                            qb = l + 1;
                                            if ((qb | 0) < (Fa | 0)) gb += 8, Ca += 4, l = qb;
                                            else break a
                                        }
                                        STACKTOP = e;
                                        return k
                                    }
                                while (0);
                                if (0 != (HEAP8[a + 204545] | 0)) return k = 0, STACKTOP = e, k;
                                k = _jtIfromX(a, b, F)
                            } else if (131136 == (w | 0)) {
                                b = HEAP32[p >> 2];
                                a: do
                                    if (0 < (b | 0)) {
                                        p = q + HEAP32[E >> 2];
                                        Fa = F;
                                        for (l = 0;;) {
                                            if (0 == _jtequ(a, HEAP32[31138], HEAP32[p + 4 >> 2]) << 24 >> 24) {
                                                k = 0;
                                                break
                                            }
                                            HEAP32[Fa >> 2] = HEAP32[p >> 2];
                                            Ca = l + 1;
                                            if ((Ca | 0) < (b | 0)) p += 8, Fa += 4, l = Ca;
                                            else break a
                                        }
                                        STACKTOP =
                                            e;
                                        return k
                                    }
                                while (0);
                                k = 0 == (HEAP8[a + 204545] | 0) | 0
                            } else if (131080 == (w | 0)) k = _jtDfromQ(a, J, F);
                            else if (131088 == (w | 0)) {
                                w = _jtga(a, 8, d, m, n);
                                if (0 == (w | 0) || 0 == _jtDfromQ(a, J, w + HEAP32[w >> 2]) << 24 >> 24) return k = 0, STACKTOP = e, k;
                                k = _jtccvt(a, f, w, c)
                            } else c = HEAP32[a + 4408 >> 2], w = HEAP32[c + (HEAP32[c >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[w + 20 >> 2], w + HEAP32[w >> 2]), k = 0;
                            STACKTOP = e;
                            return k
                        }
                    }
                }
            }
        }
    }
}
function _jtcolon(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs, ss,
        cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu, Qr,
        iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz, HC,
        ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 208 | 0;
    e = b + 8;
    g = b + 16;
    h = b + 24;
    j = b + 32;
    i = b + 40;
    l = b + 200;
    if (0 == (f | 0) | 0 == (d | 0)) return k = 0, STACKTOP = b, k;
    if (0 != (HEAP32[f + 12 >> 2] & 262144 | 0) && (m = d + 12, n = HEAP32[m >> 2], p = n & 262144, q = 0 == (p | 0), !q)) {
        r = HEAP32[f >> 2];
        s = r + 40;
        t = f + s;
        u = HEAP8[t];
        (w = 58 == u << 24 >> 24) ? (v = r + 8, x = f + v, y = HEAP32[x >> 2], z = y + 12, A = HEAP32[z >> 2], D = A &
            262144, (B = 0 == (D | 0)) ? G = f : (C = r + 12, F = f + C, E = HEAP32[F >> 2], J = E + 12, L = HEAP32[J >> 2], I = L & 262144, G = K = (H = 0 == (I | 0)) ? f : y)) : G = f;
        N = HEAP32[d >> 2];
        S = N + 40;
        T = d + S;
        V = HEAP8[T];
        (Q = 58 == V << 24 >> 24) ? (P = N + 8, M = d + P, R = HEAP32[M >> 2], O = R + 12, aa = HEAP32[O >> 2], Z = aa & 262144, ($ = 0 == (Z | 0)) ? (ba = d, ka = N) : (ea = N + 12, ha = d + ea, da = HEAP32[ha >> 2], ga = da + 12, U = HEAP32[ga >> 2], ca = U & 262144, Y = (X = 0 == (ca | 0)) ? d : da, ja = HEAP32[Y >> 2], ba = Y, ka = ja)) : (ba = d, ka = N);
        ia = fa = G;
        ra = HEAP32[ia >> 2];
        sa = ra + 24;
        ta = fa + sa;
        wa = HEAP32[ta >> 2];
        za = ba;
        Ba = ka + 28;
        ua = za + Ba;
        ya = HEAP32[ua >> 2];
        xa = ka + 32;
        oa = za + xa;
        pa = HEAP32[oa >> 2];
        la = a + 204545;
        qa = HEAP8[la];
        Da = 0 == qa << 24 >> 24;
        if (!Da) return k = 0, STACKTOP = b, k;
        Aa = _jtga(a, 262144, 1, 0, 0);
        if (Ea = 0 == (Aa | 0)) return k = 0, STACKTOP = b, k;
        Sa = HEAP32[Aa >> 2];
        Oa = Aa + Sa;
        HEAP32[Oa >> 2] = 2246;
        Ha = Sa + 4;
        Ga = Aa + Ha;
        HEAP32[Ga >> 2] = 2244;
        Ma = Sa + 8;
        Ia = Aa + Ma;
        HEAP32[Ia >> 2] = G;
        db = Sa + 12;
        W = Aa + db;
        HEAP32[W >> 2] = ba;
        Xa = Sa + 16;
        Ta = Aa + Xa;
        HEAP32[Ta >> 2] = 0;
        fb = Sa + 20;
        mb = Aa + fb;
        HEAP32[mb >> 2] = 0;
        ma = Sa + 24;
        ab = Aa + ma;
        HEAP32[ab >> 2] = wa;
        Na = Sa + 28;
        $a = Aa + Na;
        HEAP32[$a >> 2] = ya;
        Ua = Sa + 32;
        Pa = Aa + Ua;
        HEAP32[Pa >> 2] = pa;
        bb = Sa + 36;
        La = Aa + bb;
        HEAP32[La >> 2] = 0;
        Ja = Sa + 40;
        Qa = Aa + Ja;
        HEAP8[Qa] = 58;
        k = Aa;
        STACKTOP = b;
        return k
    }

    
    Ya = _jti0(a, f);
    lb = a + 204545;
    if (0 != HEAP8[lb] << 24 >> 24) return k = 0, STACKTOP = b, k;
    Ca = 0 == _jtequ(a, d, HEAP32[30648]) << 24 >> 24;
    do
        if (Ca) gb = d;
        else {
            Fa = _jtga(a, 2, 300, 1, 0);
            if (Za = 0 == (Fa | 0)) return k = 0, STACKTOP = b, k;
            qb = Fa + 8;
            ib = HEAP32[qb >> 2];
            ub = Fa + 28;
            HEAP32[ub >> 2] = ib;
            eb = Fa + 20;
            HEAP32[eb >> 2] = ib;
            rb = Fa;
            wb = HEAP32[rb >> 2];
            Ka = _jtjgets(a, 120704);
            Va = HEAP8[lb];
            nb = 0 == Va << 24 >> 24;
            if (!nb) return k = 0, STACKTOP = b, k;
            ob = Fa;
            cb = ob + wb;
            Wa = Fa;
            yb = cb;
            Cb = 0;
            Pb = Ka;
            a: for (;;) {
                if (zb =
                    0 == (Pb | 0)) {
                    c = 29;
                    break
                }
                Zb = Pb + 20;
                ac = HEAP32[Zb >> 2];
                Ib = Hb = Pb;
                Qb = HEAP32[Ib >> 2];
                Rb = Hb + Qb;
                Ob = 0 == (ac | 0);
                b: do
                    if (!Ob) {
                        for (Bb = Rb;;) {
                            xb = HEAP8[Bb];
                            if (41 == xb << 24 >> 24) {
                                dc = Bb;
                                break
                            } else if (32 != xb << 24 >> 24) break b;
                            Bb = tb = Bb + 1
                        }
                        for (;;)
                            if (oc = dc + 1, Mb = HEAP8[oc], Tb = 32 == Mb << 24 >> 24) dc = oc;
                            else break;
                        Ra = Qb + ac;
                        Nb = Hb + Ra;
                        sb = oc >>> 0 < Nb >>> 0;
                        if (!sb) {
                            c = 29;
                            break a
                        }
                    }
                while (0);
                Ab = Wa + 20;
                Eb = HEAP32[Ab >> 2];
                Lb = ac + Cb;
                if (vb = (Eb | 0) > (Lb | 0)) wc = Wa, Ec = yb;
                else {
                    for (yc = Wa;;) {
                        Db = _jtext(a, 0, yc);
                        if (bc = 0 == (Db | 0)) {
                            k = 0;
                            c = 247;
                            break a
                        }
                        pb = Db + 20;
                        Fb = HEAP32[pb >>
                            2];
                        if (jb = (Fb | 0) > (Lb | 0)) break;
                        else yc = Db
                    }
                    gc = Db;
                    ic = HEAP32[gc >> 2];
                    vc = Db;
                    hc = vc + ic;
                    wc = Db;
                    Ec = hc
                }
                uc = Ec + Cb;
                _memcpy(uc, Rb, ac) | 0;
                Ac = Ec + Lb;
                HEAP8[Ac] = 10;
                xc = Lb + 1;
                cd = _jtjgets(a, 120704);
                jc = HEAP8[lb];
                if (Tc = 0 == jc << 24 >> 24) Wa = wc, yb = Ec, Cb = xc, Pb = cd;
                else {
                    k = 0;
                    c = 247;
                    break
                }
            }
            if (29 == c) {
                Fc = _jtga(a, 2, Cb, 1, 0);
                if (Bc = 0 == (Fc | 0)) return k = 0, STACKTOP = b, k;
                Xb = ec = Fc;
                sc = HEAP32[Xb >> 2];
                nc = ec + sc;
                _memcpy(nc, yb, Cb) | 0;
                if (tc = 0 == (Ya | 0)) return k = Fc, STACKTOP = b, k;
                gb = Fc
            } else if (247 == c) return STACKTOP = b, k
        }
    while (0);
    if (0 == (HEAP32[gb + 12 >> 2] & 131072 | 0)) Ub =
        gb;
    else {
        $c = a + 205336;
        ad = HEAP32[$c >> 2];
        HEAP32[$c >> 2] = 0;
        qc = _jtccvt(a, 2, gb, l);
        HEAP32[$c >> 2] = ad;
        if (Uc = 0 == qc << 24 >> 24) return rc = a + 4408, kb = HEAP32[rc >> 2], Jb = HEAP32[kb >> 2], $b = Jb + 12, na = kb + $b, Vb = HEAP32[na >> 2], kc = Vb + 20, va = HEAP32[kc >> 2], Wc = HEAP32[Vb >> 2], Yb = Vb + Wc, _jtjsigstr(a, 3, va, Yb), k = 0, STACKTOP = b, k;
        fc = HEAP32[l >> 2];
        if (Kb = 0 == (fc | 0)) return k = 0, STACKTOP = b, k;
        Ub = fc
    }
    Gb = 10 < (Ya | 0);
    do
        if (Gb)
            if (mc = gd = Ub, Gc = HEAP32[mc >> 2], dd = gd + Gc, kd = Ub + 20, Fd = HEAP32[kd >> 2], Vc = 0 == (Fd | 0)) bd = Hd = 0, cc = Ub, Ic = 0, c = 149;
            else {
                fd = Fd - 1;
                xd = fd + Gc;
                Xc = gd +
                    xd;
                Wd = HEAP8[Xc];
                if (Wb = 10 == Wd << 24 >> 24) {
                    hb = _jtga(a, 2, fd, 1, 0);
                    if (ld = 0 == (hb | 0)) return k = 0, STACKTOP = b, k;
                    Jc = ed = hb;
                    Oc = HEAP32[Jc >> 2];
                    Pc = ed + Oc;
                    _memcpy(Pc, dd, fd) | 0;
                    Sb = hb
                } else Sb = Ub;
                Gd = Ad = Yc = hd = zc = pc = 0;
                c = 118
            } else {
        ke = Ub + 12;
        Ed = HEAP32[ke >> 2];
        pd = Ed & 32;
        id = 0 == (pd | 0);
        do
            if (id) {
                Cc = Ub + 20;
                Qc = HEAP32[Cc >> 2];
                Zc = 0 == (Qc | 0);
                if (!Zc && (vd = Ed & 2, $d = 0 == (vd | 0))) return je = a + 4408, od = Bd = Kc = HEAP32[je >> 2], Vd = HEAP32[od >> 2], Zd = Vd + 12, Md = Jd = Bd + Zd, Cd = HEAP32[Md >> 2], fe = Cd + 20, Xd = HEAP32[fe >> 2], Od = qd = Cd, Mc = HEAP32[Od >> 2], Dd = qd + Mc, _jtjsigstr(a, 3,
                    Xd, Dd), k = 0, STACKTOP = b, k;
                Td = Ub + 24;
                le = HEAP32[Td >> 2];
                me = 3 > (le | 0);
                if (!me) return wd = a + 4408, ye = xe = Ie = HEAP32[wd >> 2], Fe = HEAP32[ye >> 2], nf = Fe + 56, Id = Je = xe + nf, Qe = HEAP32[Id >> 2], sd = Qe + 20, ge = HEAP32[sd >> 2], md = ud = Qe, de = HEAP32[md >> 2], ae = ud + de, _jtjsigstr(a, 14, ge, ae), k = 0, STACKTOP = b, k;
                Dc = 1 < (le | 0);
                do {
                    if (Dc) Nc = _jtga(a, 2, 1, 0, 0), (yd = 0 == (Nc | 0)) ? jd = 0 : (lc = Sc = Nc, nd = HEAP32[lc >> 2], Rc = Sc + nd, HEAP8[Rc] = 10, jd = Nc), Hc = _jtstitch(a, Ub, jd), Rd = Kd = _jtravel(a, Hc);
                    else {
                        Nd = 0 == (Ub | 0);
                        be = Zc | Nd;
                        if (!be && (we = zd = Ub, Lc = HEAP32[we >> 2], rd = Lc - 1, se = rd +
                                Qc, Ud = zd + se, Cf = HEAP8[Ud], td = 10 == Cf << 24 >> 24)) {
                            Te = Ub;
                            pe = Lc;
                            Pd = Qc;
                            break
                        }
                        Me = _jtga(a, 2, 1, 0, 0);
                        (Sd = 0 == (Me | 0)) ? $e = 0: (Ce = qe = Me, cf = HEAP32[Ce >> 2], sf = qe + cf, HEAP8[sf] = 10, $e = Me);
                        Rd = Ue = _jtover(a, Ub, $e)
                    }
                    c = 90
                } while (0);
                if (90 == c) {
                    if (kf = 0 == (Rd | 0)) return k = 0, STACKTOP = b, k;
                    Re = Rd;
                    ce = HEAP32[Re >> 2];
                    De = Rd + 20;
                    Ge = HEAP32[De >> 2];
                    Te = Rd;
                    pe = ce;
                    Pd = Ge
                }
                He = Te;
                We = He + pe;
                Yd = Pd + pe;
                Ne = He + Yd;
                Se = (pe | 0) < (Yd | 0);
                a: do
                    if (Se) {
                        Ee = We;
                        b: for (;;) {
                            for (Ld = Ee;;) {
                                he = HEAP8[Ld];
                                if (58 == he << 24 >> 24) {
                                    Qd = Ld;
                                    c = 97;
                                    break
                                } else if (32 != he << 24 >> 24) {
                                    c = 100;
                                    break
                                }
                                Ld = re =
                                    Ld + 1
                            }
                            if (97 == c) {
                                for (;;)
                                    if (c = 0, Ke = Qd + 1, Ae = HEAP8[Ke], 32 == Ae << 24 >> 24) Qd = Ke, c = 97;
                                    else if (10 == Ae << 24 >> 24) break b;
                                else break;
                                ie = te = Qd + 2;
                                c = 101
                            } else 100 == c && (c = 0, ff = Ld + 1, (ue = 10 == he << 24 >> 24) ? Oe = ff : (ie = ff, c = 101));
                            if (101 == c)
                                for (;;)
                                    if (c = 0, ne = HEAP8[ie], ze = ie + 1, vf = 10 == ne << 24 >> 24) {
                                        Oe = ze;
                                        break
                                    } else ie = ze, c = 101;
                            if (lf = Oe >>> 0 < Ne >>> 0) Ee = Oe;
                            else {
                                Xe = Oe;
                                Be = We;
                                hf = Ee;
                                break a
                            }
                        }
                        Be = Xe = af = Qd + 2;
                        hf = Ee
                    } else Be = Xe = We, hf = Ne;
                while (0);
                uf = (zf = (Xe | 0) == (Ne | 0)) ? Ne : hf;
                ve = zf ? Ne : Be;
                If = uf;
                Df = We;
                Ef = If - Df;
                Gf = _jtga(a, 2, Ef, 1, 0);
                (of = 0 == (Gf | 0)) ? Lf =
                    0: (bf = pf = Gf, Bf = HEAP32[bf >> 2], Pf = pf + Bf, _memcpy(Pf, We, Ef) | 0, Lf = Gf);
                Ye = HEAP32[30858];
                Hf = HEAP32[31067];
                jf = _jtcut(a, Ye, Hf);
                (mf = 0 == (jf | 0)) ? Le = 0: (df = Ve = jf, wf = HEAP32[df >> 2], Jf = Yf = Ve + wf, Sf = Qf = HEAP32[Jf >> 2], Le = Mf = getFUNCTION_TABLE(Sf)(a, Lf, jf));
                ee = Ne;
                oe = ve;
                rf = ee - oe;
                Ff = _jtga(a, 2, rf, 1, 0);
                (xf = 0 == (Ff | 0)) ? Pe = 0: (yf = qf = Ff, Nf = HEAP32[yf >> 2], Zf = qf + Nf, _memcpy(Zf, ve, rf) | 0, Pe = Ff);
                tg = HEAP32[30858];
                Ze = HEAP32[31067];
                gf = _jtcut(a, tg, Ze);
                (ef = 0 == (gf | 0)) ? (Kf = Le, bg = 0) : (Rf = lg = gf, Ug = HEAP32[Rf >> 2], Jg = Vf = lg + Ug, Lg = hg = HEAP32[Jg >> 2], $f = getFUNCTION_TABLE(Lg)(a,
                    Pe, gf), Kf = Le, bg = $f)
            } else {
                ah = Ub + 24;
                nh = HEAP32[ah >> 2];
                dh = 2 > (nh | 0);
                if (!dh) return mg = a + 4408, ig = Bg = yh = HEAP32[mg >> 2], ng = HEAP32[ig >> 2], Ng = ng + 56, Dg = Ch = Bg + Ng, Vg = HEAP32[Dg >> 2], pg = Vg + 20, zg = HEAP32[pg >> 2], cg = Pg = Vg, dg = HEAP32[cg >> 2], qg = Pg + dg, _jtjsigstr(a, 14, zg, qg), k = 0, STACKTOP = b, k;
                bh = vg = Ub;
                Zg = HEAP32[bh >> 2];
                wg = Eg = vg + Zg;
                vh = Ub;
                Kh = Ub + 4;
                $g = HEAP32[Kh >> 2];
                Ag = $g & 14;
                xg = (Lh = 0 != (Ag | 0)) ? vh : 0;
                Mg = Ub + 20;
                rg = HEAP32[Mg >> 2];
                Sg = Ub + 28;
                jg = _jtga(a, 32, rg, nh, Sg);
                if (Uh = 0 == (jg | 0)) return k = 0, STACKTOP = b, k;
                Tg = Of = jg;
                qi = HEAP32[Tg >> 2];
                gi = eg = Of +
                    qi;
                kg = HEAP32[Mg >> 2];
                Qg = 0 < (kg | 0);
                a: do
                    if (Qg) {
                        if (Wg = 0 == (xg | 0)) {
                            wi = a + 205336;
                            zh = a + 4408;
                            for (Wf = 0;;) {
                                di = wg + (Wf << 2);
                                ch = HEAP32[di >> 2];
                                if (Mh = 0 == (ch | 0)) break;
                                Fg = ch + 24;
                                Rg = HEAP32[Fg >> 2];
                                Vh = 2 > (Rg | 0);
                                if (!Vh) {
                                    c = 51;
                                    break
                                }
                                Gg = ch + 12;
                                eh = HEAP32[Gg >> 2];
                                kh = eh & 2;
                                (fh = 0 == (kh | 0)) ? (Wh = HEAP32[wi >> 2], HEAP32[wi >> 2] = 0, qh = _jtccvt(a, 2, ch, g), HEAP32[wi >> 2] = Wh, (og = 0 == qh << 24 >> 24) ? (Ih = Kg = Og = HEAP32[zh >> 2], ai = HEAP32[Ih >> 2], wh = ai + 12, Nh = Xh = Kg + wh, Jh = HEAP32[Nh >> 2], lj = Jh + 20, gh = HEAP32[lj >> 2], Ph = rh = Jh, hi = HEAP32[Ph >> 2], sh = rh + hi, _jtjsigstr(a, 3, gh,
                                    sh), fg = 0) : fg = Yi = HEAP32[g >> 2]) : fg = ch;
                                mj = gi + (Wf << 2);
                                HEAP32[mj >> 2] = fg;
                                xi = 0 == (fg | 0);
                                Hi = Wf + 1;
                                if (xi) {
                                    k = 0;
                                    c = 247;
                                    break
                                }
                                if (Ii = (Hi | 0) < (kg | 0)) Wf = Hi;
                                else break a
                            }
                            if (51 == c) vj = yg = lh = HEAP32[zh >> 2], Ji = HEAP32[vj >> 2], Xj = Ji + 56, hh = yi = yg + Xj, Aj = HEAP32[hh >> 2], ih = Aj + 20, Hj = HEAP32[ih >> 2], ni = zi = Aj, ti = HEAP32[ni >> 2], Cg = zi + ti, _jtjsigstr(a, 14, Hj, Cg);
                            else if (247 == c) return STACKTOP = b, k;
                            Ah = gi + (Wf << 2);
                            HEAP32[Ah >> 2] = 0
                        } else {
                            th = a + 205336;
                            oh = a + 4408;
                            for (Hg = 0;;) {
                                bi = wg + (Hg << 2);
                                gj = ui = HEAP32[bi >> 2];
                                Ki = rj = gj + xg;
                                if (Pj = 0 == (rj | 0)) break;
                                Zi = Ki + 24;
                                ii = HEAP32[Zi >> 2];
                                mh = 2 > (ii | 0);
                                if (!mh) {
                                    c = 61;
                                    break
                                }
                                ji = Ki + 12;
                                vi = HEAP32[ji >> 2];
                                Qh = vi & 2;
                                (Ij = 0 == (Qh | 0)) ? (ik = HEAP32[th >> 2], HEAP32[th >> 2] = 0, hj = _jtccvt(a, 2, Ki, e), HEAP32[th >> 2] = ik, (Xg = 0 == hj << 24 >> 24) ? (al = ph = Li = HEAP32[oh >> 2], oi = HEAP32[al >> 2], Yh = oi + 12, ki = ek = ph + Yh, ci = HEAP32[ki >> 2], Rh = ci + 20, Bj = HEAP32[Rh >> 2], Cj = wj = ci, Qi = HEAP32[Cj >> 2], Ri = wj + Qi, _jtjsigstr(a, 3, Bj, Ri), Qj = 0) : Qj = Dh = HEAP32[e >> 2]) : Qj = Ki;
                                Vk = gi + (Hg << 2);
                                HEAP32[Vk >> 2] = Qj;
                                Sh = 0 == (Qj | 0);
                                Dj = Hg + 1;
                                if (Sh) {
                                    k = 0;
                                    c = 247;
                                    break
                                }
                                if (xj = (Dj | 0) < (kg | 0)) Hg = Dj;
                                else break a
                            }
                            if (61 ==
                                c) Ai = Rj = Eh = HEAP32[oh >> 2], Vi = HEAP32[Ai >> 2], Yg = Vi + 56, Fh = ri = Rj + Yg, fk = HEAP32[Fh >> 2], Ei = fk + 20, Nk = HEAP32[Ei >> 2], qk = jk = fk, nj = HEAP32[qk >> 2], pi = jk + nj, _jtjsigstr(a, 14, Nk, pi);
                            else if (247 == c) return STACKTOP = b, k;
                            yj = gi + (Hg << 2);
                            HEAP32[yj >> 2] = 0
                        }
                        k = 0;
                        STACKTOP = b;
                        return k
                    }
                while (0);
                Ig = HEAP32[38956];
                Th = _jtga(a, 2, 1, 1, 0);
                (ij = 0 == (Th | 0)) ? Ej = 0: ($i = Yj = Th, Ik = HEAP32[$i >> 2], zk = Yj + Ik, HEAP8[zk] = 58, Ej = Th);
                sj = _jtlink(a, Ig, Ej);
                Fj = _jtindexofsub(a, 0, jg, sj);
                if (Jj = 0 == (Fj | 0)) return k = 0, STACKTOP = b, k;
                Fi = Wk = Fj;
                jj = HEAP32[Fi >> 2];
                jl = Ak = Wk + jj;
                Wi = HEAP32[jl >> 2];
                tk = jj + 4;
                Bk = ei = Wk + tk;
                zj = HEAP32[Bk >> 2];
                Bi = (kj = (Wi | 0) < (zj | 0)) ? Wi : zj;
                Ck = _jtga(a, 4, 1, 0, 0);
                (ol = 0 == (Ck | 0)) ? Ci = 0: (Kj = Sj = Ck, Zj = HEAP32[Kj >> 2], bl = Tj = Sj + Zj, HEAP32[bl >> 2] = Bi, Ci = Ck);
                Jk = _jttake(a, Ci, jg);
                Ui = _jtga(a, 4, 1, 0, 0);
                (fi = 0 == (Ui | 0)) ? xh = 0: (oj = Bi + 1, gk = Dk = Ui, cl = HEAP32[gk >> 2], sg = uk = Dk + cl, HEAP32[sg >> 2] = oj, xh = Ui);
                Lj = _jtdrop(a, xh, jg);
                Kf = Jk;
                bg = Lj
            }
        while (0);
        (ul = 4 == (Ya | 0)) ? (pj = Kf + 20, tf = HEAP32[pj >> 2], (Xi = 0 == (tf | 0)) ? $j = bg : (Si = bg + 20, gg = HEAP32[Si >> 2], $j = Gh = (Kk = 0 == (gg | 0)) ? Kf : bg), jh = ag = HEAP32[31086], Hh = $j) :
        (jh = Kf, Hh = bg);
        Af = _jtga(a, 32, 6, 1, 0);
        if (Mi = 0 == (Af | 0)) return k = 0, STACKTOP = b, k;
        si = kl = Af;
        Ok = HEAP32[si >> 2];
        dl = Zh = kl + Ok;
        Lk = Ok + 4;
        Uj = li = kl + Lk;
        fm = _jtpreparse(a, jh, dl, Uj);
        Di = HEAP8[lb];
        Mk = 0 == Di << 24 >> 24;
        if (!Mk) return k = 0, STACKTOP = b, k;
        Pk = (qj = 0 == fm << 24 >> 24) ? 0 : 4194304;
        vl = a + 205356;
        Mj = HEAP8[vl];
        ak = 0 != Mj << 24 >> 24;
        mi = HEAP32[31086];
        Jl = ak ? jh : mi;
        Gi = Ok + 8;
        Oh = Nj = kl + Gi;
        HEAP32[Oh >> 2] = Jl;
        fl = Ok + 12;
        vk = ll = kl + fl;
        bk = Ok + 16;
        ck = Vj = kl + bk;
        ml = _jtpreparse(a, Hh, vk, ck);
        rk = HEAP8[lb];
        if (pl = 0 == rk << 24 >> 24) Kl = 0 == ml << 24 >> 24, Qk = Pk | 8388608, wl = Kl ? Pk :
            Qk, Ek = HEAP8[vl], sk = 0 != Ek << 24 >> 24, Bl = HEAP32[31086], aj = sk ? Hh : Bl, kk = Ok + 20, Oi = Ni = kl + kk, HEAP32[Oi >> 2] = aj, Sb = Ub, pc = Af, zc = wl, hd = dl, Yc = ml, Ad = jh, Gd = Hh, c = 118;
        else return k = 0, STACKTOP = b, k
    } while (0);
    do
        if (118 == c) {
            if (lk = 0 == (Ya | 0)) return k = mk = _jtca(a, Sb), STACKTOP = b, k;
            if (nk = 3 > (Ya | 0)) {
                Fl = a + 2388;
                Xk = HEAP8[Fl];
                Ll = (bj = 0 != Xk << 24 >> 24) ? 12 : 6;
                $h = _jtga(a, 4, Ll, 1, 0);
                gl = 0 == ($h | 0);
                a: do
                    if (gl) Bh = 0;
                    else
                if (Fk = cj = $h, Rk = HEAP32[Fk >> 2], ql = dj = cj + Rk, ej = Sk = HEAP32[31128], HEAP32[ql >> 2] = ej, dk = xl = HEAP32[31082], Gl = Rk + 4, nl = hk = cj + Gl, HEAP32[nl >>
                        2] = dk, ok = Yk = HEAP32[30730], Wj = Rk + 8, pk = Rl = cj + Wj, HEAP32[pk >> 2] = ok, rl = Vl = HEAP32[30726], Zk = Rk + 12, Cl = Gj = cj + Zk, HEAP32[Cl >> 2] = rl, gm = Gk = HEAP32[30658], hl = Rk + 16, Xf = sl = cj + hl, HEAP32[Xf >> 2] = gm, $k = mm = HEAP32[30650], Dl = Rk + 20, bm = tl = cj + Dl, HEAP32[bm >> 2] = $k, Ti = HEAP8[Fl], ug = 0 == Ti << 24 >> 24, ug || (uh = Tf = HEAP32[31132], Uf = Rk + 24, uj = tj = cj + Uf, HEAP32[uj >> 2] = uh, il = Sl = HEAP32[31084], Wl = Rk + 28, im = yn = cj + Wl, HEAP32[im >> 2] = il, zl = Im = HEAP32[30732], Xl = Rk + 32, Tl = vm = cj + Xl, HEAP32[Tl >> 2] = zl, kn = Ml = HEAP32[30728], nm = Rk + 36, Nl = Fn = cj + nm, HEAP32[Nl >> 2] =
                        kn, Pm = Gn = HEAP32[30660], Hl = Rk + 40, Hn = Op = cj + Hl, HEAP32[Hn >> 2] = Pm, Ol = uo = HEAP32[30652], Do = Rk + 44, io = Xn = cj + Do, HEAP32[io >> 2] = Ol), ln = _jtga(a, 4, 2, 1, 0), (qm = 0 == (ln | 0)) ? el = 0 : (mn = Il = ln, $m = HEAP32[mn >> 2], om = Jm = Il + $m, zm = $m + 4, Eo = Am = Il + zm, HEAP32[om >> 2] = 0, HEAP32[Eo >> 2] = 3, el = ln), jo = _jtfrom(a, el, pc), hm = _jtraze(a, jo), Fo = 0 == (hm | 0)) Bh = 0;
                else if (ko = hm + 12, HEAP32[ko >> 2] = 4, pm = _jteps(a, $h, hm), Bm = 0 == (pm | 0)) Bh = 0;
                else {
                    Cm = Km = pm;
                    rm = HEAP32[Cm >> 2];
                    Lm = Km + rm;
                    Tm = HEAP8[Lm];
                    (Qm = 0 == Tm << 24 >> 24) ? (an = rm + 1, wk = Km + an, Go = HEAP8[wk], (nn = 0 == Go << 24 >>
                        24) ? (on = rm + 2, cm = Km + on, In = HEAP8[cm], (bp = 0 == In << 24 >> 24) ? (Dp = rm + 3, lo = Km + Dp, bn = HEAP8[lo], (cn = 0 == bn << 24 >> 24) || (c = 132)) : c = 132) : c = 132) : c = 132;
                    if (132 == c) {
                        Um = rm + 4;
                        Ro = Km + Um;
                        Yn = HEAP8[Ro];
                        Yl = 0 == Yn << 24 >> 24;
                        if (!Yl) {
                            Bh = 1;
                            break
                        }
                        pn = rm + 5;
                        Hk = Km + pn;
                        vo = HEAP8[Hk];
                        Ho = 0 != vo << 24 >> 24;
                        Pp = Ho & 1;
                        if (Ho) {
                            Bh = Pp;
                            break
                        }
                    }
                    vp = HEAP8[Fl];
                    if (mo = 0 == vp << 24 >> 24) Bh = 0;
                    else {
                        Io = rm + 6;
                        hp = Km + Io;
                        Vm = HEAP8[hp];
                        sm = 0 == Vm << 24 >> 24;
                        do
                            if (sm && (Zn = rm + 7, Oj = Km + Zn, Mm = HEAP8[Oj], Yp = 0 == Mm << 24 >> 24))
                                if (Tq = rm + 8, Dm = Km + Tq, Zl = HEAP8[Dm], dn = 0 == Zl << 24 >> 24)
                                    if (Nm = rm + 9, Rm = Km +
                                        Nm, jm = HEAP8[Rm], Ep = 0 == jm << 24 >> 24) {
                                        Bh = 0;
                                        break a
                                    }
                        while (0);
                        cp = rm + 10;
                        So = Km + cp;
                        Jo = HEAP8[So];
                        (Jn = 0 == Jo << 24 >> 24) ? (Ko = rm + 11, $n = Km + Ko, Em = HEAP8[$n], dm = 0 != Em << 24 >> 24, Bh = To = dm & 1) : Bh = 1
                    }
                }
                while (0);
                Kn = HEAP8[lb];
                El = 0 == Kn << 24 >> 24;
                if (!El) return k = 0, STACKTOP = b, k;
                if (rq = 0 == Bh << 24 >> 24)
                    if (Bq = 2 == (Ya | 0))
                        if (zn = Ad + 20, wp = HEAP32[zn >> 2], no = 0 == (wp | 0)) ip = zc | 262144, Er = HEAP32[31080], Lo = Er + (Ya << 2), sq = HEAP32[Lo >> 2], An = ip, jp = pc, Mo = 2258, Ln = sq;
                        else {
                            kp = Gd + 20;
                            en = HEAP32[kp >> 2];
                            if (Bn = 0 == (en | 0)) Mn = hd + 12, gq = HEAP32[hd >> 2], Nn = HEAP32[Mn >> 2], Hq =
                                hd + 4, HEAP32[hd >> 2] = Nn, dp = hd + 16, HEAP32[Mn >> 2] = gq, wo = HEAP32[Hq >> 2], Fp = HEAP32[dp >> 2], fn = hd + 8, HEAP32[Hq >> 2] = Fp, On = hd + 20, HEAP32[dp >> 2] = wo, ao = HEAP32[fn >> 2], Qp = HEAP32[On >> 2], HEAP32[fn >> 2] = Qp, HEAP32[On >> 2] = ao;
                            Hd = zc;
                            bd = 0;
                            cc = Sb;
                            Ic = pc;
                            c = 149
                        } else Hd = zc, bd = 0, cc = Sb, Ic = pc, c = 149;
                else Hd = Zp = zc | 524288, bd = Bh, cc = Sb, Ic = pc, c = 149
            } else Hd = zc, bd = Yc, cc = Sb, Ic = pc, c = 149
        }
    while (0);
    a: do
        if (149 == c) switch (gn = Hd | 262144, Ya | 0) {
            case 4:
                tm = HEAP32[31073];
                um = HEAP8[lb];
                xo = 0 == um << 24 >> 24;
                if (!xo) return k = 0, STACKTOP = b, k;
                No = _jtga(a, 262144, 1, 0,
                    0);
                if (Gp = 0 == (No | 0)) return k = 0, STACKTOP = b, k;
                lp = $l = No;
                km = HEAP32[lp >> 2];
                mp = am = $l + km;
                HEAP32[mp >> 2] = 3098;
                Fm = km + 4;
                hq = Ar = $l + Fm;
                HEAP32[hq >> 2] = 2258;
                iq = km + 8;
                hn = Hp = $l + iq;
                HEAP32[hn >> 2] = tm;
                Pn = km + 12;
                np = yo = $l + Pn;
                HEAP32[np >> 2] = 0;
                qn = km + 16;
                rn = tq = $l + qn;
                HEAP32[rn >> 2] = Ic;
                $p = km + 20;
                Rp = Uq = $l + $p;
                HEAP32[Rp >> 2] = gn;
                Cq = km + 24;
                Qn = sn = $l + Cq;
                HEAP32[Qn >> 2] = 2147483647;
                uq = km + 28;
                Uo = Iq = $l + uq;
                HEAP32[Uo >> 2] = 2147483647;
                Rn = km + 32;
                Sn = Vo = $l + Rn;
                HEAP32[Sn >> 2] = 2147483647;
                Ip = km + 36;
                Cn = ep = $l + Ip;
                HEAP32[Cn >> 2] = 0;
                Pi = km + 40;
                xk = $l + Pi;
                HEAP8[xk] = 58;
                k = No;
                STACKTOP =
                    b;
                return k;
            case 3:
                Tk = HEAP32[31072];
                yl = HEAP8[lb];
                yk = 0 == yl << 24 >> 24;
                if (!yk) return k = 0, STACKTOP = b, k;
                tn = _jtga(a, 262144, 1, 0, 0);
                if (lm = 0 == (tn | 0)) return k = 0, STACKTOP = b, k;
                vq = Tn = tn;
                Dn = HEAP32[vq >> 2];
                Wo = oo = Tn + Dn;
                HEAP32[Wo >> 2] = 3098;
                wm = Dn + 4;
                Sp = Pl = Tn + wm;
                HEAP32[Sp >> 2] = 2258;
                Vq = Dn + 8;
                Oo = Tp = Tn + Vq;
                HEAP32[Oo >> 2] = Tk;
                fp = Dn + 12;
                un = jq = Tn + fp;
                HEAP32[un >> 2] = 0;
                Ul = Dn + 16;
                rr = op = Tn + Ul;
                HEAP32[rr >> 2] = Ic;
                Up = Dn + 20;
                Po = bo = Tn + Up;
                HEAP32[Po >> 2] = gn;
                Un = Dn + 24;
                aq = Jq = Tn + Un;
                HEAP32[aq >> 2] = 2147483647;
                xp = Dn + 28;
                kq = Gm = Tn + xp;
                HEAP32[kq >> 2] = 2147483647;
                co =
                    Dn + 32;
                En = pp = Tn + co;
                HEAP32[En >> 2] = 2147483647;
                Kq = Dn + 36;
                dr = eo = Tn + Kq;
                HEAP32[dr >> 2] = 0;
                Ql = Dn + 40;
                Wq = Tn + Ql;
                HEAP8[Wq] = 58;
                k = tn;
                STACKTOP = b;
                return k;
            case 13:
                kr = a + 205692;
                Xo = HEAP32[kr >> 2];
                yp = a + 205752;
                Jp = HEAP32[yp >> 2];
                qp = Jp + Xo;
                Yo = a + 204564;
                Wm = HEAP32[Yo >> 2];
                Vn = a + 205708;
                Vp = HEAP8[Vn];
                Zo = a + 205736;
                lq = HEAP32[Zo >> 2];
                Kp = a + 205748;
                sr = HEAP8[Kp];
                Lp = _jtga(a, 2, 1, 1, 0);
                if (mq = 0 == (Lp | 0)) return zo = i, k = HEAP32[zo >> 2] = 0, STACKTOP = b, k;
                Br = fo = Lp;
                rp = HEAP32[Br >> 2];
                nq = fo + rp;
                HEAP8[nq] = 120;
                Yr = Xq = i;
                HEAP32[Yr >> 2] = Lp;
                Dq = HEAP32[30889];
                Cr = i + 4;
                HEAP32[Cr >>
                    2] = Dq;
                lr = _jtga(a, 2, 1, 1, 0);
                if (tr = 0 == (lr | 0)) return wq = i + 8, k = HEAP32[wq >> 2] = 0, STACKTOP = b, k;
                oq = Lq = lr;
                er = HEAP32[oq >> 2];
                bq = Lq + er;
                HEAP8[bq] = 121;
                mr = i + 8;
                HEAP32[mr >> 2] = lr;
                Yq = HEAP32[30891];
                po = i + 12;
                HEAP32[po >> 2] = Yq;
                qo = a + 2388;
                fr = HEAP8[qo];
                if ($o = 0 == fr << 24 >> 24) Xm = 2;
                else {
                    gp = j;
                    _spellit(-31, gp);
                    go = j + 2;
                    Ym = HEAP8[go];
                    (ro = 0 == Ym << 24 >> 24) ? (ap = j + 1, ho = HEAP8[ap], Wn = Ao = (Zm = 0 != ho << 24 >> 24) ? 2 : 1) : Wn = 3;
                    so = _jtga(a, 2, Wn, 1, 0);
                    if (fj = 0 == (so | 0)) return Mq = i + 16, k = HEAP32[Mq >> 2] = 0, STACKTOP = b, k;
                    tp = sp = so;
                    Zq = HEAP32[tp >> 2];
                    Uk = sp + Zq;
                    _memcpy(Uk,
                        gp, Wn) | 0;
                    zp = i + 16;
                    HEAP32[zp >> 2] = so;
                    em = HEAP32[30889];
                    to = i + 20;
                    HEAP32[to >> 2] = em;
                    _spellit(-29, gp);
                    vn = HEAP8[go];
                    (Hm = 0 == vn << 24 >> 24) ? (xm = j + 1, wn = HEAP8[xm], jn = ym = (Ap = 0 != wn << 24 >> 24) ? 2 : 1) : jn = 3;
                    Om = _jtga(a, 2, jn, 1, 0);
                    if (Mp = 0 == (Om | 0)) return Fr = i + 24, k = HEAP32[Fr >> 2] = 0, STACKTOP = b, k;
                    Bo = xn = Om;
                    Zr = HEAP32[Bo >> 2];
                    Ur = xn + Zr;
                    _memcpy(Ur, gp, jn) | 0;
                    Qo = i + 24;
                    HEAP32[Qo >> 2] = Om;
                    Wp = HEAP32[30891];
                    xq = i + 28;
                    HEAP32[xq >> 2] = Wp;
                    Xm = 4
                }
                Eq = a + 205744;
                yq = a + 205740;
                qs = a + 4400;
                Lr = 0 == (cc | 0);
                ur = h;
                cq = a + 4408;
                is = cc + 24;
                Fq = cc + 12;
                nr = a + 205336;
                for (Bp = 0;;) {
                    Lr ? Gr =
                        0 : (Gq = HEAP32[is >> 2], (pq = 2 > (Gq | 0)) ? (Co = HEAP32[Fq >> 2], dq = Co & 2, (Aq = 0 == (dq | 0)) ? (Vr = HEAP32[nr >> 2], HEAP32[nr >> 2] = 0, eq = _jtccvt(a, 2, cc, b), HEAP32[nr >> 2] = Vr, (Xp = 0 == eq << 24 >> 24) ? (Ir = $r = fq = HEAP32[cq >> 2], Nr = HEAP32[Ir >> 2], Rr = Nr + 12, Or = Pq = $r + Rr, Es = HEAP32[Or >> 2], ks = Es + 20, gr = HEAP32[ks >> 2], dt = ls = Es, ms = HEAP32[dt >> 2], Qq = ls + ms, _jtjsigstr(a, 3, gr, Qq), Gr = 0) : Gr = as = HEAP32[b >> 2]) : Gr = cc) : (vr = $q = Mr = HEAP32[cq >> 2], Nq = HEAP32[vr >> 2], js = Nq + 56, Np = Hr = $q + js, qq = HEAP32[Np >> 2], Oq = qq + 20, ar = HEAP32[Oq >> 2], wr = zq = qq, br = HEAP32[wr >> 2], Al = zq + br,
                            _jtjsigstr(a, 14, ar, Al), Gr = 0));
                    Jr = _jtwordil(a, Gr);
                    Wr = _jtenqueue(a, Jr, Gr);
                    if (bs = 0 == (Wr | 0)) {
                        k = 0;
                        c = 247;
                        break
                    }
                    nt = Wr + 20;
                    Rq = HEAP32[nt >> 2];
                    or = Wr;
                    hr = HEAP32[or >> 2];
                    HEAP8[Vn] = 1;
                    Dr = Rq + 5;
                    Fs = Dr << 1;
                    As = Kr = _jtga(a, 32, Fs, 2, 0);
                    if (Gs = 0 == (Kr | 0)) {
                        k = 0;
                        c = 247;
                        break
                    }
                    ir = Kr + 28;
                    pr = Kr + 32;
                    HEAP32[ir >> 2] = Dr;
                    HEAP32[pr >> 2] = 2;
                    Xr = Kr;
                    Vs = HEAP32[Xr >> 2];
                    Bs = As + Vs;
                    Ws = HEAP32[31134];
                    rs = Bs;
                    HEAP32[rs >> 2] = Ws;
                    Js = Vs + 4;
                    Sr = Cp = As + Js;
                    HEAP32[Sr >> 2] = 0;
                    cs = Vs + 8;
                    cr = ss = As + cs;
                    if (jr = 0 < (Rq | 0)) {
                        et = Wr;
                        ku = Wt = et + hr;
                        Xt = Rq << 3;
                        ft = Xt + 8;
                        Ps = ft + Vs;
                        Xs = HEAP32[30658];
                        Cs = HEAP32[30660];
                        Dt = ku;
                        vt = cr;
                        for (ot = 0;;)
                            if (ns = Dt + 4, Ks = HEAP32[Dt >> 2], Ds = vt, HEAP32[Ds >> 2] = Ks, Tr = vt + 4, HEAP32[Tr >> 2] = 0, Ys = vt + 8, (lu = (Ks | 0) == (Xs | 0)) ? c = 190 : (Yt = HEAP8[qo], Nt = 0 != Yt << 24 >> 24, xt = (Ks | 0) == (Cs | 0), (xr = Nt & xt) && (c = 190)), 190 == c && (c = 0, HEAP8[Vn] = 0), qr = ot + 1, Zs = (qr | 0) < (Rq | 0)) Dt = ns, vt = Ys, ot = qr;
                            else break;
                        gt = Ku = Et = As + Ps
                    } else gt = cr;
                    Qs = HEAP32[31134];
                    xs = gt;
                    HEAP32[xs >> 2] = Qs;
                    pt = gt + 4;
                    HEAP32[pt >> 2] = 0;
                    $s = HEAP32[31134];
                    Zt = gt + 8;
                    HEAP32[Zt >> 2] = $s;
                    qt = gt + 12;
                    HEAP32[qt >> 2] = 0;
                    ds = HEAP32[31134];
                    yt = gt + 16;
                    HEAP32[yt >> 2] = ds;
                    ys = gt + 20;
                    HEAP32[ys >>
                        2] = 0;
                    Lu = HEAP32[31134];
                    us = gt + 24;
                    HEAP32[us >> 2] = Lu;
                    at = gt + 28;
                    HEAP32[at >> 2] = 0;
                    HEAP32[Zo >> 2] = Xq;
                    HEAP32[Eq >> 2] = Xm;
                    HEAP32[yq >> 2] = Xm;
                    zs = _jtstcreate(a, 2, 1, 0, 0);
                    HEAP32[Yo >> 2] = zs;
                    if (Rs = 0 == (zs | 0)) {
                        k = 0;
                        c = 247;
                        break
                    }
                    Pr = HEAP32[30650];
                    os = HEAP32[31058];
                    _jtsymbis(a, Pr, os, zs);
                    $t = HEAP8[Vn];
                    if (Ls = 0 == $t << 24 >> 24) Ss = HEAP32[30658], ht = HEAP32[31058], wt = HEAP32[Yo >> 2], _jtsymbis(a, Ss, ht, wt);
                    yu = HEAP8[qo];
                    kv = 0 == yu << 24 >> 24;
                    if (!kv && (Ft = HEAP32[31025], uv = HEAP32[31058], au = HEAP32[Yo >> 2], _jtsymbis(a, Ft, uv, au), rt = HEAP8[Vn], mu = 0 == rt << 24 >>
                            24)) vv = HEAP32[31023], wv = HEAP32[31058], Mu = HEAP32[Yo >> 2], _jtsymbis(a, vv, wv, Mu);
                    Sm = 0 == (Bp | 0);
                    es = Sm & 1;
                    HEAP8[Kp] = es;
                    vs = HEAP32[Xr >> 2];
                    it = bu = As + vs;
                    Ot = HEAP32[ir >> 2];
                    zt = zu = qw = Ot - 4;
                    b: for (;;) {
                        Gt = it + (zu << 3);
                        jt = HEAP32[Gt >> 2];
                        cu = jt + 12;
                        nu = HEAP32[cu >> 2];
                        Zu = Gt + 8;
                        st = Gt + 16;
                        kt = Gt + 24;
                        ws = 0;
                        c: for (;;) {
                            lt = 113704 + (36 * ws & -1);
                            xv = HEAP32[lt >> 2];
                            qy = nu & xv;
                            Pv = 0 == (qy | 0);
                            do
                                if (!Pv && (Nu = 113708 + (36 * ws & -1), Pt = HEAP32[Nu >> 2], cw = HEAP32[Zu >> 2], ou = cw + 12, dw = HEAP32[ou >> 2], Ou = dw & Pt, Qv = 0 == (Ou | 0), !Qv && (At = 113712 + (36 * ws & -1), yv = HEAP32[At >> 2], zv =
                                        HEAP32[st >> 2], lv = zv + 12, Pu = HEAP32[lv >> 2], $u = Pu & yv, Av = 0 == ($u | 0), !Av && (Ms = 113716 + (36 * ws & -1), rw = HEAP32[Ms >> 2], Hs = HEAP32[kt >> 2], du = Hs + 12, mt = HEAP32[du >> 2], Au = mt & rw, Bu = 0 == (Au | 0), !Bu)))) {
                                    c = 206;
                                    break c
                                }
                            while (0);
                            mv = ws + 1;
                            if (Bv = 9 > (mv | 0)) ws = mv;
                            else {
                                c = 209;
                                break
                            }
                        }
                        do
                            if (206 == c) {
                                c = 0;
                                sw = 113728 + (36 * ws & -1);
                                av = HEAP32[sw >> 2];
                                Rv = av + zu;
                                Qt = 113732 + (36 * ws & -1);
                                pu = HEAP32[Qt >> 2];
                                Ew = pu + zu;
                                bt = it + (Ew << 3);
                                yr = 113724 + (36 * ws & -1);
                                Cv = Rt = HEAP32[yr >> 2];
                                getFUNCTION_TABLE(Cv)(ur, a, Rv, Ew, it);
                                Ht = bt;
                                qu = h;
                                ix = HEAP32[qu >> 2];
                                Fw = h + 4;
                                ct = HEAP32[Fw >> 2];
                                Sv = Ht;
                                HEAP32[Sv >> 2] = ix;
                                Dv = Ht + 4;
                                HEAP32[Dv >> 2] = ct;
                                Ru = Qu = ix;
                                if (Bt = 0 == (Ru | 0)) {
                                    Is = 0;
                                    break b
                                }
                                Tv = ws - 7;
                                if (Ev = 1 < Tv >>> 0) {
                                    bv = Rv;
                                    It = Ew;
                                    for (Jt = 0;;)
                                        if (Ts = It - 1, vx = it + (Ts << 3), Fv = bv - 1, Tu = Su = it + (Fv << 3), Du = vx, Pw = Tu, ru = HEAP32[Pw >> 2], Qw = Tu + 4, Kt = HEAP32[Qw >> 2], wx = Du, HEAP32[wx >> 2] = ru, hs = Du + 4, HEAP32[hs >> 2] = Kt, up = Jt + 1, tw = (up | 0) < (av | 0)) bv = Fv, It = Ts, Jt = up;
                                        else break;
                                    gs = Ix = Ew - av
                                } else gs = Ew;
                                Cu = zt
                            } else if (209 == c) {
                            c = 0;
                            Us = zu - 1;
                            ts = it + (Us << 3);
                            Sq = zt - 1;
                            uw = (xx = 0 > (Sq | 0)) ? 0 : Sq;
                            vw = it + (uw << 3);
                            eu = HEAP32[vw >> 2];
                            Uv = it + (uw << 3) + 4;
                            ew = HEAP32[Uv >>
                                2];
                            fw = eu + 12;
                            Jx = HEAP32[fw >> 2];
                            Uu = Jx & 33554432;
                            Vv = 0 == (Uu | 0);
                            c: do
                                if (Vv) su = eu, nv = ew;
                                else
                            if (gw = nu & 2097152, hw = 0 == (gw | 0))
                                if (fu = _jtnameref(a, eu), (Gv = 0 == (eu | 0)) ? gu = 0 : (Qr = eu, iw = HEAP32[Qr >> 2], cv = eu + 20, Hv = HEAP32[cv >> 2], tu = _jtga(a, 2, Hv, 1, 0), (Vu = 0 == (tu | 0)) ? gu = 0 : (ww = iw + 14, Ns = eu, uu = Ns + ww, St = Lt = tu, Kx = HEAP32[St >> 2], hu = Lt + Kx, _memcpy(hu, uu, Hv) | 0, gu = tu)), Rw = HEAP32[yq >> 2], Wv = 0 < (Rw | 0)) {
                                    Lx = HEAP32[Zo >> 2];
                                    Iz = 0;
                                    for (Xv = Lx;;) {
                                        iu = Xv;
                                        ov = HEAP32[iu >> 2];
                                        Iv = _jtequ(a, gu, ov);
                                        pv = 0 == Iv << 24 >> 24;
                                        if (!pv) break;
                                        Os = Xv + 8;
                                        tt = Iz + 1;
                                        if (Tt = (tt | 0) <
                                            (Rw | 0)) Iz = tt, Xv = Os;
                                        else {
                                            su = fu;
                                            nv = 0;
                                            break c
                                        }
                                    }
                                    Sw = HEAP8[Kp];
                                    jx = 0 == Sw << 24 >> 24;
                                    do
                                        if (!jx && (yx = HEAP32[Eq >> 2], Mx = (yx | 0) > (Iz | 0), !Mx)) {
                                            Wu = _jtga(a, 4, 1, 0, 0);
                                            (jw = 0 == (Wu | 0)) ? Tw = 0: (ut = Iz + 5485900, xw = Dy = Wu, kx = HEAP32[xw >> 2], vu = Ey = Dy + kx, HEAP32[vu >> 2] = ut, Tw = Wu);
                                            Jv = HEAP32[31068];
                                            Gw = _jtqq(a, Tw, Jv);
                                            su = fu;
                                            nv = Gw;
                                            break c
                                        }
                                    while (0);
                                    dy = Xv + 4;
                                    kA = HEAP32[dy >> 2];
                                    su = fu;
                                    nv = kA
                                } else su = fu, nv = 0;
                            else su = eu, nv = ew;
                            while (0);
                            Eu = ts;
                            Vy = su;
                            Xy = zx = Wy = nv;
                            Yy = Vy;
                            Uw = 0 | Yy;
                            Nx = Xy | 0;
                            kw = Eu;
                            HEAP32[kw >> 2] = Uw;
                            ey = Eu + 4;
                            HEAP32[ey >> 2] = Nx;
                            Fy = HEAP8[lb];
                            fy = 0 == Fy <<
                                24 >> 24;
                            if (!fy) {
                                Is = 0;
                                break b
                            }
                            yw = 0 < (zt | 0);
                            Yv = yw & 1;
                            gs = Kv = zu - Yv;
                            Cu = Sq
                        } while (0);
                        if (Zy = -1 < (Cu | 0)) zu = gs, zt = Cu;
                        else {
                            c = 228;
                            break
                        }
                    }
                    b: do
                        if (228 == c) {
                            c = 0;
                            Lv = gs + 1;
                            Hw = it + (Lv << 3);
                            Xu = HEAP32[Hw >> 2];
                            Ox = it + (Lv << 3) + 4;
                            Zv = HEAP32[Ox >> 2];
                            Ut = Xu + 12;
                            Fu = HEAP32[Ut >> 2];
                            Vw = Fu & 805567999;
                            Px = 0 == (Vw | 0);
                            do
                                if (!Px && (Qx = gs + 2, Rx = it + (Qx << 3), ry = HEAP32[Rx >> 2], Ax = ry + 12, zr = HEAP32[Ax >> 2], qv = zr & 4194304, lx = 0 == (qv | 0), !lx)) {
                                    Sx = 0 == (Zv | 0);
                                    if (!Sx) {
                                        Is = Tx = _jtvfinal(a, Zv);
                                        break b
                                    }
                                    Jz = Xu + 24;
                                    sy = HEAP32[Jz >> 2];
                                    gy = 0 == (sy | 0);
                                    do
                                        if (gy && (Iw = Fu & 4, Ww = 0 == (Iw | 0), !Ww &&
                                                (zw = dv = Xu, Mt = HEAP32[zw >> 2], MA = Ux = dv + Mt, mx = HEAP32[MA >> 2], Bx = mx + 9, Gy = 19 > Bx >>> 0))) {
                                            Vx = HEAP8[lb];
                                            rv = 0 == Vx << 24 >> 24;
                                            if (!rv) {
                                                Is = 0;
                                                break b
                                            }
                                            Cx = _jtga(a, 262144, 1, 0, 0);
                                            if (Hy = 0 == (Cx | 0)) {
                                                Is = 0;
                                                break b
                                            }
                                            NA = lw = Cx;
                                            Gu = HEAP32[NA >> 2];
                                            ty = nx = lw + Gu;
                                            HEAP32[ty >> 2] = 1972;
                                            ox = Gu + 4;
                                            Jw = Iy = lw + ox;
                                            HEAP32[Jw >> 2] = 1970;
                                            Aw = Gu + 8;
                                            Wx = ev = lw + Aw;
                                            HEAP32[Wx >> 2] = 0;
                                            Xx = Gu + 12;
                                            uy = Xw = lw + Xx;
                                            HEAP32[uy >> 2] = 0;
                                            hy = Gu + 16;
                                            sv = qz = lw + hy;
                                            HEAP32[sv >> 2] = Xu;
                                            lA = Gu + 20;
                                            px = vy = lw + lA;
                                            HEAP32[px >> 2] = 0;
                                            wy = Gu + 24;
                                            xy = fv = lw + wy;
                                            HEAP32[xy >> 2] = 2147483647;
                                            Dx = Gu + 28;
                                            Ex = mw = lw + Dx;
                                            HEAP32[Ex >>
                                                2] = 2147483647;
                                            qx = Gu + 32;
                                            Kz = gv = lw + qx;
                                            HEAP32[Kz >> 2] = 2147483647;
                                            Ct = Gu + 36;
                                            mA = Hu = lw + Ct;
                                            HEAP32[mA >> 2] = 0;
                                            $y = Gu + 40;
                                            nA = lw + $y;
                                            HEAP8[nA] = -24;
                                            Is = Cx;
                                            break b
                                        }
                                    while (0);
                                    Lz = HEAP32[40248];
                                    Is = az = _jtqq(a, Xu, Lz);
                                    break b
                                }
                            while (0);
                            rz = bz = OA = HEAP32[cq >> 2];
                            Jy = HEAP32[rz >> 2];
                            Mz = Jy + 76;
                            Yw = rx = bz + Mz;
                            nw = HEAP32[Yw >> 2];
                            Iu = nw + 20;
                            oA = HEAP32[Iu >> 2];
                            Yx = Ky = nw;
                            Nz = HEAP32[Yx >> 2];
                            Zx = Ky + Nz;
                            _jtjsigstr(a, 19, oA, Zx);
                            Is = 0
                        }
                    while (0);
                    HEAP8[lb] = 0;
                    HEAP32[qs >> 2] = 0;
                    Ly = 0 != (Bp | 0);
                    pA = 0 == (Is | 0);
                    (PA = Ly & pA) ? (Yu = HEAP8[Vn], Zw = Yu << 24 >> 24, Mv = 4 - Zw, QA = HEAP32[31080],
                        $v = QA + (Mv << 2), sz = HEAP32[$v >> 2], My = Kw = _jtcolon(a, sz, cc)) : My = Is;
                    $x = HEAP32[Yo >> 2];
                    _jtsymfreeh(a, $x, 0);
                    qA = Bp + 1;
                    Fx = 0 == (My | 0);
                    tz = 2 > (qA | 0);
                    if (iy = Fx & tz) Bp = qA;
                    else {
                        c = 243;
                        break
                    }
                }
                if (243 == c) return HEAP32[Yo >> 2] = Wm, HEAP8[Vn] = Vp, HEAP32[Zo >> 2] = lq, HEAP8[Kp] = sr, Fx || (_jttraverse(a, My, 654), ow = My + 16, $w = HEAP32[ow >> 2], RA = $w + 1, HEAP32[ow >> 2] = RA), _jttpop(a, qp), k = kB = _jttpush(a, My), STACKTOP = b, k;
                if (247 == c) return STACKTOP = b, k;
                break;
            case 1:
                cz = (ND = 0 != bd << 24 >> 24) ? 396 : 2170;
                dz = HEAP32[31070];
                Oz = HEAP8[lb];
                HC = 0 == Oz << 24 >> 24;
                if (!HC) return k =
                    0, STACKTOP = b, k;
                ez = _jtga(a, 524288, 1, 0, 0);
                if (SA = 0 == (ez | 0)) return k = 0, STACKTOP = b, k;
                rA = pw = ez;
                hv = HEAP32[rA >> 2];
                iv = Bw = pw + hv;
                HEAP32[iv >> 2] = cz;
                fz = hv + 4;
                ax = Pz = pw + fz;
                HEAP32[ax >> 2] = 1980;
                iD = hv + 8;
                bx = Qz = pw + iD;
                HEAP32[bx >> 2] = dz;
                uz = hv + 12;
                vz = OD = pw + uz;
                HEAP32[vz >> 2] = 0;
                lB = hv + 16;
                jy = cx = pw + lB;
                HEAP32[jy >> 2] = Ic;
                gz = hv + 20;
                BB = Ny = pw + gz;
                HEAP32[BB >> 2] = gn;
                IC = hv + 24;
                JC = jD = pw + IC;
                HEAP32[JC >> 2] = 2147483647;
                PD = hv + 28;
                ky = eC = pw + PD;
                HEAP32[ky >> 2] = 2147483647;
                Rz = hv + 32;
                ly = Sz = pw + Rz;
                HEAP32[ly >> 2] = 2147483647;
                ay = hv + 36;
                Oy = kD = pw + ay;
                HEAP32[Oy >> 2] = 0;
                AE =
                    hv + 40;
                Tz = pw + AE;
                HEAP8[Tz] = 58;
                k = ez;
                STACKTOP = b;
                return k;
            case 2:
                by = HEAP8[lb];
                Vt = 0 == by << 24 >> 24;
                hz = (wz = 0 != bd << 24 >> 24) ? 398 : 2258;
                Py = HEAP32[31080];
                Cw = Py + (Ya << 2);
                Qy = HEAP32[Cw >> 2];
                if (Vt) {
                    An = gn;
                    jp = Ic;
                    Mo = hz;
                    Ln = Qy;
                    break a
                } else k = 0;
                STACKTOP = b;
                return k;
            default:
                return Dw = a + 4408, mB = cy = iz = HEAP32[Dw >> 2], fC = HEAP32[mB >> 2], Uz = fC + 12, gC = lD = cy + Uz, xz = HEAP32[gC >> 2], hC = xz + 20, iC = HEAP32[hC >> 2], nB = yz = xz, CB = HEAP32[nB >> 2], QD = yz + CB, _jtjsigstr(a, 3, iC, QD), k = 0, STACKTOP = b, k
        }
        while (0);
    dx = _jtga(a, 1048576, 1, 0, 0);
    if (0 == (dx | 0)) return k = 0, STACKTOP =
        b, k;
    aw = HEAP32[dx >> 2];
    HEAP32[dx + aw >> 2] = 1982;
    HEAP32[dx + (aw + 4) >> 2] = Mo;
    HEAP32[dx + (aw + 8) >> 2] = Ln;
    HEAP32[dx + (aw + 12) >> 2] = 0;
    HEAP32[dx + (aw + 16) >> 2] = jp;
    HEAP32[dx + (aw + 20) >> 2] = An;
    HEAP32[dx + (aw + 24) >> 2] = 2147483647;
    HEAP32[dx + (aw + 28) >> 2] = 2147483647;
    HEAP32[dx + (aw + 32) >> 2] = 2147483647;
    HEAP32[dx + (aw + 36) >> 2] = 0;
    HEAP8[dx + (aw + 40)] = 58;
    k = dx;
    STACKTOP = b;
    return k
}
function _jtconj(a, f, d, c) {
    var b, e, g;
    b = HEAP32[c + (f + 1 << 2) >> 2];
    e = a + 205596;
    if (0 == (b | 0)) return 0;
    g = HEAP32[c + (d << 2) >> 2];
    d = HEAP32[c + (f << 2) >> 2];
    f = HEAP32[e >> 2];
    c = HEAP32[b + (HEAP32[b >> 2] + 4) >> 2];
    HEAP32[e >> 2] = b;
    //TEST
    //console.log(c);
    a = getFUNCTION_TABLE(c)(a, d, g, b);
    HEAP32[e >> 2] = f;
    return a
}
function _jtconnum(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 40 | 0;
    e = b;
    g = b + 8;
    h = b + 16;
    j = b + 24;
    i = b + 32;
    l = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (2 == (f | 0)) {
        if (95 == (HEAP8[d] | 0) && (k = HEAP8[d + 1] | 0, !(10 <= k - 48 >>> 0))) return a = HEAP32[HEAP32[31080] + (48 - k << 2) >> 2], STACKTOP = b, a
    } else if (1 == (f | 0)) return k = (HEAP8[d] | 0) - 48, a = 10 > k >>> 0 ? HEAP32[HEAP32[31080] + (k << 2) >> 2] : HEAP32[40248], STACKTOP = b, a;
    k = f + 1;
    m = _jtga(a, 2, k, 1, 0);
    if (0 == (m | 0)) return STACKTOP = b, 0;
    p = n = m;
    _memcpy(n +
        HEAP32[p >> 2], d, k) | 0;
    d = HEAP32[p >> 2];
    p = n + d;
    HEAP8[n + (d + f)] = 0;
    m = _jtga(a, 4, k, 1, 0);
    if (0 == (m | 0)) return STACKTOP = b, 0;
    k = m + HEAP32[m >> 2];
    do
        if (0 < (f | 0)) {
            m = 1;
            q = p;
            for (s = r = 0;;)
                if (t = HEAP8[q], t = 95 == t << 24 >> 24 ? 45 : 9 == t << 24 >> 24 | 32 == t << 24 >> 24 ? 0 : t, HEAP8[q] = t, t = 0 == t << 24 >> 24, HEAP8[e] = t & 1, u = t & 1, (m | 0) == (u | 0) ? w = r : (HEAP32[k + (r << 2) >> 2] = s, w = r + 1), t = s + 1, (t | 0) < (f | 0)) m = u, q += 1, r = w, s = t;
                else break;
            0 == (w & 1 | 0) ? m = w : (HEAP32[k + (w << 2) >> 2] = f, m = w + 1)
        } else m = 0;
    while (0);
    w = (m | 0) / 2 & -1;
    _jtnumcase(f, p, e, h, i, j, g);
    0 == (HEAP8[j] | 0) ? 0 != (HEAP8[i] | 0) ? (q = 4,
        r = 2004, u = 64) : 0 != (HEAP8[e] | 0) ? (q = 16, r = 870, u = 16) : 0 != (HEAP8[h] | 0) ? (q = 16, r = 870, u = 16) : (f = (p = 0 != (HEAP8[g] | 0)) ? 4 : 8, q = p ? 4 : f, r = 0 != (HEAP8[g] | 0) ? 2E3 : 2302, u = f) : (q = 8, r = 958, u = 128);
    h = 1 < m - 2 >>> 0 | 0;
    e = _jtga(a, u, w, h, 0);
    if (0 == (e | 0)) return STACKTOP = b, 0;
    i = e + HEAP32[e >> 2];
    a: do
        if (0 == (HEAP8[g] | 0)) v = i, x = r, y = u, z = e, c = 38;
        else
    if (1 < (m | 0)) {
        A = i;
        D = 0;
        b: for (;;) {
            j = D << 1;
            f = HEAP32[k + (j << 2) >> 2];
            p = HEAP32[k + ((j | 1) << 2) >> 2] - f;
            j = f + d;
            f = n + j;
            if (t = 45 == (HEAP8[f] | 0))
                if (s = p - 1, 0 == (s | 0)) break;
                else p = j + (n + 1);
            else s = p, p = f;
            if (20 <= (s | 0)) break;
            if (0 < (s | 0)) {
                f =
                    _memchr(117712, HEAP8[p] | 0, 10);
                if (0 == (f | 0)) break;
                else j = 1, C = -117712, F = p;
                for (;;) {
                    E = f + C;
                    if ((j | 0) >= (s | 0)) break;
                    f = F + 1;
                    p = _memchr(117712, HEAP8[f] | 0, 10);
                    if (0 == (p | 0)) break b;
                    else j += 1, C = (10 * E & -1) - 117712, F = f, f = p
                }
                if (-1 < (E | 0) | t & -2147483648 == (E | 0)) f = E;
                else break
            } else f = 0;
            HEAP32[A >> 2] = 0 > (f | 0) | t ^ 1 ? f : -f;
            p = D + 1;
            if ((p | 0) < (w | 0)) A += q, D = p;
            else {
                B = u;
                G = e;
                break a
            }
        }
        HEAP8[g] = 0;
        p = _jtga(a, 8, w, h, 0);
        if (0 == (p | 0)) return a = 0, STACKTOP = b, a;
        v = p + HEAP32[p >> 2];
        x = 2302;
        y = 8;
        z = p;
        c = 38
    } else B = u, G = e;
    while (0);
    a: do
        if (38 == c)
            if (1 >= (m | 0)) B = y, G = z;
            else {
                h =
                    x;
                g = v;
                for (e = 0;;) {
                    u = e << 1;
                    D = HEAP32[k + (u << 2) >> 2];
                    if (0 == getFUNCTION_TABLE(h)(a, HEAP32[k + ((u | 1) << 2) >> 2] - D, n + (D + d), g) << 24 >> 24) break;
                    D = e + 1;
                    if ((D | 0) < (w | 0)) g += q, e = D;
                    else {
                        B = y;
                        G = z;
                        break a
                    }
                }
                e = HEAP32[a + 4408 >> 2];
                g = HEAP32[e + (HEAP32[e >> 2] + 20) >> 2];
                _jtjsigstr(a, 5, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]);
                a = 0;
                STACKTOP = b;
                return a
            }
    while (0);
    do
        if (0 != (B & 24 | 0)) {
            if (0 == (G | 0)) return a = 0, STACKTOP = b, a;
            z = HEAP32[G + 12 >> 2];
            y = HEAP32[G + 20 >> 2];
            if (0 != (y | 0) && 0 != (z & 24 | 0) && (q = y << (z >>> 4 & 1), z = HEAP32[31130], y = HEAP32[31131], !(0 >= (q | 0)))) {
                w = G + HEAP32[G >>
                    2];
                for (d = 0;;)
                    if ((z | 0) == (HEAP32[w >> 2] | 0) && (n = w + 4, (y | 0) == (HEAP32[n >> 2] | 0) && (HEAP32[n >> 2] = 0, HEAP32[w >> 2] = 0)), t = d + 1, (t | 0) < (q | 0)) w += 8, d = t;
                    else break
            }
        }
    while (0);
    B = _jtbcvt(a, 0, G);
    0 != (B | 0) && (_jttraverse(a, B, 654), G = B + 16, HEAP32[G >> 2] += 1);
    _jttpop(a, l);
    a = _jttpush(a, B);
    STACKTOP = b;
    return a
}
function _jtconword(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb,
        $b, na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf,
        Sf, Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj;
    c = 2 < (f | 0);
    a: do
        if (c && (b = f - 1, e = d + b, g = HEAP8[e], h = 46 ==
                g << 24 >> 24)) switch (j = HEAP8[d], i = j << 24 >> 24, i | 0) {
            case 101:
                if (l = 0 == (f | 0)) return k = 6;
                m = 0 == j << 24 >> 24;
                b: do
                    if (m) n = 121736, p = 0;
                    else {
                        q = d;
                        r = 121736;
                        s = f;
                        for (t = j;;) {
                            u = s - 1;
                            w = HEAP8[r];
                            v = 0 != w << 24 >> 24;
                            x = 0 != (u | 0);
                            y = x & v;
                            z = t << 24 >> 24 == w << 24 >> 24;
                            A = y & z;
                            if (!A) {
                                n = r;
                                p = t;
                                break b
                            }
                            D = q + 1;
                            B = r + 1;
                            G = HEAP8[D];
                            if (C = 0 == G << 24 >> 24) {
                                n = B;
                                p = 0;
                                break
                            } else q = D, r = B, s = u, t = G
                        }
                    }
                while (0);
                F = HEAP8[n];
                if (E = p << 24 >> 24 == F << 24 >> 24) return k = 6;
                b: do
                    if (m) J = 122288, L = 0;
                    else {
                        I = d;
                        H = 122288;
                        K = f;
                        for (N = j;;) {
                            S = K - 1;
                            T = HEAP8[H];
                            V = 0 != T << 24 >> 24;
                            Q = 0 != (S | 0);
                            P = Q & V;
                            M = N << 24 >>
                                24 == T << 24 >> 24;
                            R = P & M;
                            if (!R) {
                                J = H;
                                L = N;
                                break b
                            }
                            O = I + 1;
                            aa = H + 1;
                            Z = HEAP8[O];
                            if ($ = 0 == Z << 24 >> 24) {
                                J = aa;
                                L = 0;
                                break
                            } else I = O, H = aa, K = S, N = Z
                        }
                    }
                while (0);
                ba = HEAP8[J];
                if (ka = L << 24 >> 24 == ba << 24 >> 24) return k = 5;
                b: do
                    if (m) ea = 121968, ha = 0;
                    else {
                        da = d;
                        ga = 121968;
                        U = f;
                        for (ca = j;;) {
                            X = U - 1;
                            Y = HEAP8[ga];
                            ja = 0 != Y << 24 >> 24;
                            fa = 0 != (X | 0);
                            ia = fa & ja;
                            ra = ca << 24 >> 24 == Y << 24 >> 24;
                            sa = ia & ra;
                            if (!sa) {
                                ea = ga;
                                ha = ca;
                                break b
                            }
                            ta = da + 1;
                            wa = ga + 1;
                            za = HEAP8[ta];
                            if (Ba = 0 == za << 24 >> 24) {
                                ea = wa;
                                ha = 0;
                                break
                            } else da = ta, ga = wa, U = X, ca = za
                        }
                    }
                while (0);
                ua = HEAP8[ea];
                if (ya = ha << 24 >> 24 == ua <<
                    24 >> 24) k = 9;
                else break a;
                return k;
            case 102:
                if (xa = 0 == (f | 0)) return k = 17;
                oa = 0 == j << 24 >> 24;
                b: do
                    if (oa) pa = 121336, la = 0;
                    else {
                        qa = d;
                        Da = 121336;
                        Aa = f;
                        for (Ea = j;;) {
                            Sa = Aa - 1;
                            Oa = HEAP8[Da];
                            Ha = 0 != Oa << 24 >> 24;
                            Ga = 0 != (Sa | 0);
                            Ma = Ga & Ha;
                            Ia = Ea << 24 >> 24 == Oa << 24 >> 24;
                            db = Ma & Ia;
                            if (!db) {
                                pa = Da;
                                la = Ea;
                                break b
                            }
                            W = qa + 1;
                            Xa = Da + 1;
                            Ta = HEAP8[W];
                            if (fb = 0 == Ta << 24 >> 24) {
                                pa = Xa;
                                la = 0;
                                break
                            } else qa = W, Da = Xa, Aa = Sa, Ea = Ta
                        }
                    }
                while (0);
                mb = HEAP8[pa];
                if (ma = la << 24 >> 24 == mb << 24 >> 24) return k = 17;
                b: do
                    if (oa) ab = 119616, Na = 0;
                    else {
                        $a = d;
                        Ua = 119616;
                        Pa = 4;
                        for (bb = j;;) {
                            La = Pa - 1;
                            Ja =
                                HEAP8[Ua];
                            Qa = 0 != Ja << 24 >> 24;
                            Ya = 0 != (La | 0);
                            lb = Ya & Qa;
                            Ca = bb << 24 >> 24 == Ja << 24 >> 24;
                            gb = lb & Ca;
                            if (!gb) {
                                ab = Ua;
                                Na = bb;
                                break b
                            }
                            Fa = $a + 1;
                            Za = Ua + 1;
                            qb = HEAP8[Fa];
                            if (ib = 0 == qb << 24 >> 24) {
                                ab = Za;
                                Na = 0;
                                break
                            } else $a = Fa, Ua = Za, Pa = La, bb = qb
                        }
                    }
                while (0);
                ub = HEAP8[ab];
                if (eb = Na << 24 >> 24 == ub << 24 >> 24) {
                    rb = f - 5;
                    wb = d + 4;
                    Ka = _jtvnm(a, rb, wb);
                    Va = 0 == Ka << 24 >> 24;
                    if (!Va) return k = 17;
                    nb = _jtnfs(a, rb, wb);
                    ob = a + 1168;
                    HEAP32[ob >> 2] = nb;
                    cb = a + 4408;
                    Cb = yb = Wa = HEAP32[cb >> 2];
                    Pb = HEAP32[Cb >> 2];
                    zb = Pb + 16;
                    ac = Zb = yb + zb;
                    Hb = HEAP32[ac >> 2];
                    Ib = Hb + 20;
                    Qb = HEAP32[Ib >> 2];
                    Ob = Rb = Hb;
                    Bb =
                        HEAP32[Ob >> 2];
                    xb = Rb + Bb;
                    _jtjsigstr(a, 4, Qb, xb);
                    return k = 0
                }
                b: do
                    if (oa) dc = 121560, tb = 0;
                    else {
                        oc = d;
                        Mb = 121560;
                        Tb = f;
                        for (Ra = j;;) {
                            Nb = Tb - 1;
                            sb = HEAP8[Mb];
                            Ab = 0 != sb << 24 >> 24;
                            Eb = 0 != (Nb | 0);
                            Lb = Eb & Ab;
                            vb = Ra << 24 >> 24 == sb << 24 >> 24;
                            wc = Lb & vb;
                            if (!wc) {
                                dc = Mb;
                                tb = Ra;
                                break b
                            }
                            Ec = oc + 1;
                            yc = Mb + 1;
                            Db = HEAP8[Ec];
                            if (bc = 0 == Db << 24 >> 24) {
                                dc = yc;
                                tb = 0;
                                break
                            } else oc = Ec, Mb = yc, Tb = Nb, Ra = Db
                        }
                    }
                while (0);
                pb = HEAP8[dc];
                if (Fb = tb << 24 >> 24 == pb << 24 >> 24) k = 22;
                else break a;
                return k;
            case 103:
                jb = 0 == j << 24 >> 24;
                b: do
                    if (jb) gc = 119504, ic = 0;
                    else {
                        vc = d;
                        hc = 119504;
                        uc = 5;
                        for (Ac = j;;) {
                            xc =
                                uc - 1;
                            cd = HEAP8[hc];
                            jc = 0 != cd << 24 >> 24;
                            Tc = 0 != (xc | 0);
                            Fc = Tc & jc;
                            Bc = Ac << 24 >> 24 == cd << 24 >> 24;
                            ec = Fc & Bc;
                            if (!ec) {
                                gc = hc;
                                ic = Ac;
                                break b
                            }
                            Xb = vc + 1;
                            sc = hc + 1;
                            nc = HEAP8[Xb];
                            if (tc = 0 == nc << 24 >> 24) {
                                gc = sc;
                                ic = 0;
                                break
                            } else vc = Xb, hc = sc, uc = xc, Ac = nc
                        }
                    }
                while (0);
                Ub = HEAP8[gc];
                if ($c = ic << 24 >> 24 == Ub << 24 >> 24) k = 15;
                else break a;
                return k;
            case 105:
                if (ad = 0 == (f | 0)) return k = 4;
                qc = 0 == j << 24 >> 24;
                b: do
                    if (qc) Uc = 120912, rc = 0;
                    else {
                        kb = d;
                        Jb = 120912;
                        $b = f;
                        for (na = j;;) {
                            Vb = $b - 1;
                            kc = HEAP8[Jb];
                            va = 0 != kc << 24 >> 24;
                            Wc = 0 != (Vb | 0);
                            Yb = Wc & va;
                            fc = na << 24 >> 24 == kc << 24 >> 24;
                            Kb = Yb &
                                fc;
                            if (!Kb) {
                                Uc = Jb;
                                rc = na;
                                break b
                            }
                            Gb = kb + 1;
                            gd = Jb + 1;
                            mc = HEAP8[Gb];
                            if (Gc = 0 == mc << 24 >> 24) {
                                Uc = gd;
                                rc = 0;
                                break
                            } else kb = Gb, Jb = gd, $b = Vb, na = mc
                        }
                    }
                while (0);
                dd = HEAP8[Uc];
                if (kd = rc << 24 >> 24 == dd << 24 >> 24) k = 4;
                else break a;
                return k;
            case 97:
                if (Fd = 0 == (f | 0)) return k = 25;
                Vc = 0 == j << 24 >> 24;
                b: do
                    if (Vc) Hd = 120304, bd = 0;
                    else {
                        cc = d;
                        Ic = 120304;
                        fd = f;
                        for (xd = j;;) {
                            Xc = fd - 1;
                            Wd = HEAP8[Ic];
                            Wb = 0 != Wd << 24 >> 24;
                            Sb = 0 != (Xc | 0);
                            pc = Sb & Wb;
                            zc = xd << 24 >> 24 == Wd << 24 >> 24;
                            hd = pc & zc;
                            if (!hd) {
                                Hd = Ic;
                                bd = xd;
                                break b
                            }
                            Yc = cc + 1;
                            Ad = Ic + 1;
                            Gd = HEAP8[Yc];
                            if (hb = 0 == Gd << 24 >> 24) {
                                Hd = Ad;
                                bd =
                                    0;
                                break
                            } else cc = Yc, Ic = Ad, fd = Xc, xd = Gd
                        }
                    }
                while (0);
                ld = HEAP8[Hd];
                if (ed = bd << 24 >> 24 == ld << 24 >> 24) k = 25;
                else break a;
                return k;
            case 116:
                if (Jc = 0 == (f | 0)) return k = 26;
                Oc = 0 == j << 24 >> 24;
                b: do
                    if (Oc) Pc = 120160, ke = 0;
                    else {
                        Ed = d;
                        pd = 120160;
                        id = f;
                        for (Cc = j;;) {
                            Qc = id - 1;
                            Zc = HEAP8[pd];
                            vd = 0 != Zc << 24 >> 24;
                            $d = 0 != (Qc | 0);
                            je = $d & vd;
                            Kc = Cc << 24 >> 24 == Zc << 24 >> 24;
                            Bd = je & Kc;
                            if (!Bd) {
                                Pc = pd;
                                ke = Cc;
                                break b
                            }
                            od = Ed + 1;
                            Vd = pd + 1;
                            Zd = HEAP8[od];
                            if (Jd = 0 == Zd << 24 >> 24) {
                                Pc = Vd;
                                ke = 0;
                                break
                            } else Ed = od, pd = Vd, id = Qc, Cc = Zd
                        }
                    }
                while (0);
                Md = HEAP8[Pc];
                if (Cd = ke << 24 >> 24 == Md << 24 >> 24) return k =
                    26;
                b: do
                    if (Oc) fe = 120024, Xd = 0;
                    else {
                        qd = d;
                        Od = 120024;
                        Mc = f;
                        for (Dd = j;;) {
                            Td = Mc - 1;
                            le = HEAP8[Od];
                            me = 0 != le << 24 >> 24;
                            wd = 0 != (Td | 0);
                            Ie = wd & me;
                            xe = Dd << 24 >> 24 == le << 24 >> 24;
                            ye = Ie & xe;
                            if (!ye) {
                                fe = Od;
                                Xd = Dd;
                                break b
                            }
                            Fe = qd + 1;
                            nf = Od + 1;
                            Je = HEAP8[Fe];
                            if (Id = 0 == Je << 24 >> 24) {
                                fe = nf;
                                Xd = 0;
                                break
                            } else qd = Fe, Od = nf, Mc = Td, Dd = Je
                        }
                    }
                while (0);
                Qe = HEAP8[fe];
                if (sd = Xd << 24 >> 24 == Qe << 24 >> 24) k = 10;
                else break a;
                return k;
            case 119:
                if (ge = 0 == (f | 0)) return k = 7;
                ud = 0 == j << 24 >> 24;
                b: do
                    if (ud) md = 119880, de = 0;
                    else {
                        ae = d;
                        Dc = 119880;
                        Nc = f;
                        for (yd = j;;) {
                            jd = Nc - 1;
                            Sc = HEAP8[Dc];
                            lc =
                                0 != Sc << 24 >> 24;
                            nd = 0 != (jd | 0);
                            Rc = nd & lc;
                            Hc = yd << 24 >> 24 == Sc << 24 >> 24;
                            Kd = Rc & Hc;
                            if (!Kd) {
                                md = Dc;
                                de = yd;
                                break b
                            }
                            Rd = ae + 1;
                            Nd = Dc + 1;
                            be = HEAP8[Rd];
                            if (zd = 0 == be << 24 >> 24) {
                                md = Nd;
                                de = 0;
                                break
                            } else ae = Rd, Dc = Nd, Nc = jd, yd = be
                        }
                    }
                while (0);
                we = HEAP8[md];
                if (Lc = de << 24 >> 24 == we << 24 >> 24) return k = 7;
                b: do
                    if (ud) rd = 119784, se = 0;
                    else {
                        Ud = d;
                        Cf = 119784;
                        td = f;
                        for (Te = j;;) {
                            pe = td - 1;
                            Pd = HEAP8[Cf];
                            Me = 0 != Pd << 24 >> 24;
                            Sd = 0 != (pe | 0);
                            $e = Sd & Me;
                            qe = Te << 24 >> 24 == Pd << 24 >> 24;
                            Ce = $e & qe;
                            if (!Ce) {
                                rd = Cf;
                                se = Te;
                                break b
                            }
                            cf = Ud + 1;
                            sf = Cf + 1;
                            Ue = HEAP8[cf];
                            if (kf = 0 == Ue << 24 >> 24) {
                                rd = sf;
                                se =
                                    0;
                                break
                            } else Ud = cf, Cf = sf, td = pe, Te = Ue
                        }
                    }
                while (0);
                Re = HEAP8[rd];
                if (ce = se << 24 >> 24 == Re << 24 >> 24) k = 8;
                else break a;
                return k;
            case 114:
                if (De = 0 == (f | 0)) return k = 16;
                Ge = 0 == j << 24 >> 24;
                b: do
                    if (Ge) He = 120616, We = 0;
                    else {
                        Yd = d;
                        Ne = 120616;
                        Se = f;
                        for (Ee = j;;) {
                            Ld = Se - 1;
                            he = HEAP8[Ne];
                            Qd = 0 != he << 24 >> 24;
                            re = 0 != (Ld | 0);
                            Ke = re & Qd;
                            Ae = Ee << 24 >> 24 == he << 24 >> 24;
                            te = Ke & Ae;
                            if (!te) {
                                He = Ne;
                                We = Ee;
                                break b
                            }
                            ie = Yd + 1;
                            ff = Ne + 1;
                            ue = HEAP8[ie];
                            if (Oe = 0 == ue << 24 >> 24) {
                                He = ff;
                                We = 0;
                                break
                            } else Yd = ie, Ne = ff, Se = Ld, Ee = ue
                        }
                    }
                while (0);
                ne = HEAP8[He];
                if (ze = We << 24 >> 24 == ne << 24 >> 24) k =
                    16;
                else break a;
                return k;
            case 99:
                if (vf = 0 == (f | 0)) return k = 21;
                lf = 0 == j << 24 >> 24;
                b: do
                    if (lf) Xe = 118144, Be = 0;
                    else {
                        hf = d;
                        af = 118144;
                        zf = f;
                        for (uf = j;;) {
                            ve = zf - 1;
                            If = HEAP8[af];
                            Df = 0 != If << 24 >> 24;
                            Ef = 0 != (ve | 0);
                            Gf = Ef & Df;
                            of = uf << 24 >> 24 == If << 24 >> 24;
                            Lf = Gf & of;
                            if (!Lf) {
                                Xe = af;
                                Be = uf;
                                break b
                            }
                            pf = hf + 1;
                            bf = af + 1;
                            Bf = HEAP8[pf];
                            if (Pf = 0 == Bf << 24 >> 24) {
                                Xe = bf;
                                Be = 0;
                                break
                            } else hf = pf, af = bf, zf = ve, uf = Bf
                        }
                    }
                while (0);
                Ye = HEAP8[Xe];
                if (Hf = Be << 24 >> 24 == Ye << 24 >> 24) return k = 21;
                b: do
                    if (lf) jf = 117504, mf = 0;
                    else {
                        Le = d;
                        Ve = 117504;
                        df = f;
                        for (wf = j;;) {
                            Yf = df - 1;
                            Jf = HEAP8[Ve];
                            Qf = 0 != Jf << 24 >> 24;
                            Sf = 0 != (Yf | 0);
                            Mf = Sf & Qf;
                            ee = wf << 24 >> 24 == Jf << 24 >> 24;
                            oe = Mf & ee;
                            if (!oe) {
                                jf = Ve;
                                mf = wf;
                                break b
                            }
                            rf = Le + 1;
                            Ff = Ve + 1;
                            xf = HEAP8[rf];
                            if (Pe = 0 == xf << 24 >> 24) {
                                jf = Ff;
                                mf = 0;
                                break
                            } else Le = rf, Ve = Ff, df = Yf, wf = xf
                        }
                    }
                while (0);
                qf = HEAP8[jf];
                if (yf = mf << 24 >> 24 == qf << 24 >> 24) return k = 13;
                b: do
                    if (lf) Nf = 117984, Zf = 0;
                    else {
                        tg = d;
                        Ze = 117984;
                        gf = f;
                        for (ef = j;;) {
                            Kf = gf - 1;
                            bg = HEAP8[Ze];
                            lg = 0 != bg << 24 >> 24;
                            Rf = 0 != (Kf | 0);
                            Ug = Rf & lg;
                            Vf = ef << 24 >> 24 == bg << 24 >> 24;
                            Jg = Ug & Vf;
                            if (!Jg) {
                                Nf = Ze;
                                Zf = ef;
                                break b
                            }
                            hg = tg + 1;
                            Lg = Ze + 1;
                            $f = HEAP8[hg];
                            if (ah = 0 == $f << 24 >> 24) {
                                Nf =
                                    Lg;
                                Zf = 0;
                                break
                            } else tg = hg, Ze = Lg, gf = Kf, ef = $f
                        }
                    }
                while (0);
                nh = HEAP8[Nf];
                if (dh = Zf << 24 >> 24 == nh << 24 >> 24) return k = 11;
                b: do
                    if (lf) mg = 117728, yh = 0;
                    else {
                        Bg = d;
                        ig = 117728;
                        ng = f;
                        for (Ng = j;;) {
                            Ch = ng - 1;
                            Dg = HEAP8[ig];
                            Vg = 0 != Dg << 24 >> 24;
                            pg = 0 != (Ch | 0);
                            zg = pg & Vg;
                            Pg = Ng << 24 >> 24 == Dg << 24 >> 24;
                            cg = zg & Pg;
                            if (!cg) {
                                mg = ig;
                                yh = Ng;
                                break b
                            }
                            dg = Bg + 1;
                            qg = ig + 1;
                            vg = HEAP8[dg];
                            if (bh = 0 == vg << 24 >> 24) {
                                mg = qg;
                                yh = 0;
                                break
                            } else Bg = dg, ig = qg, ng = Ch, Ng = vg
                        }
                    }
                while (0);
                Zg = HEAP8[mg];
                if (Eg = yh << 24 >> 24 == Zg << 24 >> 24) return k = 27;
                b: do
                    if (lf) wg = 117640, vh = 0;
                    else {
                        Kh = d;
                        $g = 117640;
                        Ag =
                            f;
                        for (Lh = j;;) {
                            xg = Ag - 1;
                            Mg = HEAP8[$g];
                            rg = 0 != Mg << 24 >> 24;
                            Sg = 0 != (xg | 0);
                            jg = Sg & rg;
                            Uh = Lh << 24 >> 24 == Mg << 24 >> 24;
                            Of = jg & Uh;
                            if (!Of) {
                                wg = $g;
                                vh = Lh;
                                break b
                            }
                            Tg = Kh + 1;
                            qi = $g + 1;
                            eg = HEAP8[Tg];
                            if (gi = 0 == eg << 24 >> 24) {
                                wg = qi;
                                vh = 0;
                                break
                            } else Kh = Tg, $g = qi, Ag = xg, Lh = eg
                        }
                    }
                while (0);
                kg = HEAP8[wg];
                if (Qg = vh << 24 >> 24 == kg << 24 >> 24) k = 28;
                else break a;
                return k;
            case 98:
                if (Wg = 0 == (f | 0)) return k = 12;
                wi = 0 == j << 24 >> 24;
                b: do
                    if (wi) zh = 118536, Wf = 0;
                    else {
                        di = d;
                        ch = 118536;
                        Mh = f;
                        for (Fg = j;;) {
                            Rg = Mh - 1;
                            Vh = HEAP8[ch];
                            Gg = 0 != Vh << 24 >> 24;
                            eh = 0 != (Rg | 0);
                            kh = eh & Gg;
                            fh = Fg << 24 >> 24 ==
                                Vh << 24 >> 24;
                            Wh = kh & fh;
                            if (!Wh) {
                                zh = ch;
                                Wf = Fg;
                                break b
                            }
                            qh = di + 1;
                            og = ch + 1;
                            Og = HEAP8[qh];
                            if (Kg = 0 == Og << 24 >> 24) {
                                zh = og;
                                Wf = 0;
                                break
                            } else di = qh, ch = og, Mh = Rg, Fg = Og
                        }
                    }
                while (0);
                Ih = HEAP8[zh];
                if (ai = Wf << 24 >> 24 == Ih << 24 >> 24) k = 12;
                else break a;
                return k;
            case 115:
                if (wh = 0 == (f | 0)) return k = 20;
                Xh = 0 == j << 24 >> 24;
                b: do
                    if (Xh) Nh = 120480, Jh = 0;
                    else {
                        lj = d;
                        gh = 120480;
                        rh = f;
                        for (Ph = j;;) {
                            hi = rh - 1;
                            sh = HEAP8[gh];
                            fg = 0 != sh << 24 >> 24;
                            Yi = 0 != (hi | 0);
                            mj = Yi & fg;
                            xi = Ph << 24 >> 24 == sh << 24 >> 24;
                            Hi = mj & xi;
                            if (!Hi) {
                                Nh = gh;
                                Jh = Ph;
                                break b
                            }
                            Ii = lj + 1;
                            lh = gh + 1;
                            yg = HEAP8[Ii];
                            if (vj = 0 == yg <<
                                24 >> 24) {
                                Nh = lh;
                                Jh = 0;
                                break
                            } else lj = Ii, gh = lh, rh = hi, Ph = yg
                        }
                    }
                while (0);
                Ji = HEAP8[Nh];
                if (Xj = Jh << 24 >> 24 == Ji << 24 >> 24) k = 20;
                else break a;
                return k;
            case 108:
                yi = 0 == j << 24 >> 24;
                b: do
                    if (yi) hh = 119416, Aj = 0;
                    else {
                        ih = d;
                        Hj = 119416;
                        zi = 6;
                        for (ni = j;;) {
                            ti = zi - 1;
                            Cg = HEAP8[Hj];
                            Ah = 0 != Cg << 24 >> 24;
                            th = 0 != (ti | 0);
                            oh = th & Ah;
                            Hg = ni << 24 >> 24 == Cg << 24 >> 24;
                            bi = oh & Hg;
                            if (!bi) {
                                hh = Hj;
                                Aj = ni;
                                break b
                            }
                            ui = ih + 1;
                            gj = Hj + 1;
                            rj = HEAP8[ui];
                            if (Ki = 0 == rj << 24 >> 24) {
                                hh = gj;
                                Aj = 0;
                                break
                            } else ih = ui, Hj = gj, zi = ti, ni = rj
                        }
                    }
                while (0);
                Pj = HEAP8[hh];
                if (Zi = Aj << 24 >> 24 == Pj << 24 >> 24) k = 14;
                else break a;
                return k;
            case 100:
                if (ii = 0 == (f | 0)) return k = 3;
                mh = 0 == j << 24 >> 24;
                b: do
                    if (mh) ji = 122440, vi = 0;
                    else {
                        Qh = d;
                        Ij = 122440;
                        ik = f;
                        for (hj = j;;) {
                            Xg = ik - 1;
                            Li = HEAP8[Ij];
                            ph = 0 != Li << 24 >> 24;
                            al = 0 != (Xg | 0);
                            oi = al & ph;
                            Yh = hj << 24 >> 24 == Li << 24 >> 24;
                            ek = oi & Yh;
                            if (!ek) {
                                ji = Ij;
                                vi = hj;
                                break b
                            }
                            ki = Qh + 1;
                            ci = Ij + 1;
                            Rh = HEAP8[ki];
                            if (Bj = 0 == Rh << 24 >> 24) {
                                ji = ci;
                                vi = 0;
                                break
                            } else Qh = ki, Ij = ci, ik = Xg, hj = Rh
                        }
                    }
                while (0);
                wj = HEAP8[ji];
                if (Cj = vi << 24 >> 24 == wj << 24 >> 24) k = 3;
                else break a;
                return k;
            default:
                break a
        }
        while (0);
    return k = 0
}
function _jtminus(a, f, d) {
    return _jtva2(a, f, d, 45)
}
function _jtge(a, f, d) {
    return _jtva2(a, f, d, -123)
} 
function _jtcorx1(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s;
    c = 0;
    b = d;
    e = HEAP32[d >> 2];
    d = HEAP32[e + (b + 8) >> 2];
    g = 0 == (d | 0) ? 0 : HEAP32[d + HEAP32[d >> 2] >> 2];
    h = HEAP32[e + (b + 12) >> 2];
    j = 0 == (h | 0) ? 0 : HEAP32[h + (HEAP32[h >> 2] + 4) >> 2];
    i = HEAP32[e + (b + 16) >> 2];
    l = 0 == (i | 0) ? 0 : HEAP32[i + HEAP32[i >> 2] >> 2];
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    for (e = d;;) {
        k = e;
        e = HEAP32[e >> 2];
        m = e + (k + 40);
        n = HEAP8[m];
        if (126 != n << 24 >> 24) {
            p = n;
            c = 15;
            break
        }
        q = HEAP32[e + (k + 8) >> 2];
        if (0 == (HEAP32[q + 12 >> 2] & 33554432 | 0)) {
            c = 18;
            break
        }
        if (0 == (q | 0)) {
            c = 14;
            break
        }
        k = _jtsyrd(a, q,
            0);
        if (0 == (k | 0)) {
            c = 12;
            break
        }
        e = HEAP32[k + 4 >> 2];
        if (0 == (e | 0)) {
            c = 14;
            break
        }
    }
    12 == c && (HEAP32[a + 1168 >> 2] = q, q = HEAP32[a + 4408 >> 2], e = HEAP32[q + (HEAP32[q >> 2] + 84) >> 2], _jtjsigstr(a, 21, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), c = 14);
    14 == c && (p = HEAP8[m], c = 15);
    if (15 == c)
        if (-87 != p << 24 >> 24) c = 18;
        else {
            m = _jtfolk(a, HEAP32[30967], h, i);
            if (0 == (m | 0)) return 0;
            e = getFUNCTION_TABLE(HEAP32[m + HEAP32[m >> 2] >> 2])(a, f, m);
            if (0 == (e | 0)) return 0;
            r = e;
            c = 19
        }
    18 == c && (p = getFUNCTION_TABLE(l)(a, f, i), i = getFUNCTION_TABLE(g)(a, f, d), d = getFUNCTION_TABLE(j)(a, i, p, h), 0 == (d | 0) ? s =
        0 : (r = d, c = 19));
    19 == c && (_jttraverse(a, r, 654), c = r + 16, HEAP32[c >> 2] += 1, s = r);
    _jttpop(a, b);
    return a = _jttpush(a, s)
}
function _jtcurtail(a, f) {
    return _jtdrop(a, HEAP32[31068], f)
}
function _jtcut(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP +
        16 | 0;
    e = b + 8;
    if (0 == (f | 0) | 0 == (d | 0)) return g = 0, STACKTOP = b, g;
    h = HEAP32[d + 12 >> 2];
    if (0 == (h & 805567999 | 0)) return j = a + 4408, i = HEAP32[j >> 2], l = HEAP32[i >> 2], k = l + 12, m = i + k, n = HEAP32[m >> 2], p = n + 20, q = HEAP32[p >> 2], r = HEAP32[n >> 2], s = n + r, _jtjsigstr(a, 3, q, s), g = 0, STACKTOP = b, g;
    if (0 == (h & 4 | 0)) {
        t = a + 205336;
        u = HEAP32[t >> 2];
        HEAP32[t >> 2] = 0;
        w = _jtccvt(a, 4, d, e);
        HEAP32[t >> 2] = u;
        if (v = 0 == w << 24 >> 24) return x = a + 4408, y = HEAP32[x >> 2], z = HEAP32[y >> 2], A = z + 12, D = y + A, B = HEAP32[D >> 2], G = B + 20, C = HEAP32[G >> 2], F = HEAP32[B >> 2], E = B + F, _jtjsigstr(a, 3, C, E), g = 0, STACKTOP =
            b, g;
        J = HEAP32[e >> 2];
        if (L = 0 == (J | 0)) return g = 0, STACKTOP = b, g;
        I = J + 12;
        H = HEAP32[I >> 2];
        K = J;
        N = H
    } else K = d, N = h;
    0 == (N & 4 | 0) ? (S = a + 205336, T = HEAP32[S >> 2], HEAP32[S >> 2] = 0, V = _jtccvt(a, 4, K, b), HEAP32[S >> 2] = T, (Q = 0 == V << 24 >> 24) ? (P = a + 4408, M = HEAP32[P >> 2], R = HEAP32[M >> 2], O = R + 12, aa = M + O, Z = HEAP32[aa >> 2], $ = Z + 20, ba = HEAP32[$ >> 2], ka = HEAP32[Z >> 2], ea = Z + ka, _jtjsigstr(a, 3, ba, ea), ha = 0) : (da = HEAP32[b >> 2], (ga = 0 == (da | 0)) ? ha = 0 : (U = da, c = 13))) : (U = K, c = 13);
    13 == c && (ca = U + 24, X = HEAP32[ca >> 2], (Y = 0 == (X | 0)) ? (fa = ja = U, ia = HEAP32[fa >> 2], ra = ja + ia, ha = sa = HEAP32[ra >>
        2]) : (ta = a + 4408, wa = HEAP32[ta >> 2], za = HEAP32[wa >> 2], Ba = za + 56, ua = wa + Ba, ya = HEAP32[ua >> 2], xa = ya + 20, oa = HEAP32[xa >> 2], pa = HEAP32[ya >> 2], la = ya + pa, _jtjsigstr(a, 14, oa, la), ha = 0));
    qa = a + 204545;
    if (0 != HEAP8[qa] << 24 >> 24) return g = 0, STACKTOP = b, g;
    if (0 == (HEAP32[f + 12 >> 2] & 805567999 | 0)) Aa = Da = 0;
    else {
        Ea = _jtfxeachv(a, 1, f);
        if (Sa = 0 == (Ea | 0)) return g = 0, STACKTOP = b, g;
        if (-3 == (ha | 0) | 3 == (ha | 0)) return Oa = a + 4408, Ha = HEAP32[Oa >> 2], Ga = HEAP32[Ha >> 2], Ma = Ga + 44, Ia = Ha + Ma, db = HEAP32[Ia >> 2], W = db + 20, Xa = HEAP32[W >> 2], Ta = HEAP32[db >> 2], fb = db + Ta, _jtjsigstr(a,
            11, Xa, fb), g = 0, STACKTOP = b, g;
        Da = 256;
        Aa = Ea
    }
    switch (ha | 0) {
        case 0:
            mb = HEAP8[qa];
            ma = 0 == mb << 24 >> 24;
            if (!ma) return g = 0, STACKTOP = b, g;
            ab = _jtga(a, 262144, 1, 0, 0);
            if (Na = 0 == (ab | 0)) return g = 0, STACKTOP = b, g;
            $a = HEAP32[ab >> 2];
            Ua = ab + $a;
            HEAP32[Ua >> 2] = 2506;
            Pa = $a + 4;
            bb = ab + Pa;
            HEAP32[bb >> 2] = 876;
            La = $a + 8;
            Ja = ab + La;
            HEAP32[Ja >> 2] = f;
            Qa = $a + 12;
            Ya = ab + Qa;
            HEAP32[Ya >> 2] = K;
            lb = $a + 16;
            Ca = ab + lb;
            HEAP32[Ca >> 2] = Aa;
            gb = $a + 20;
            Fa = ab + gb;
            HEAP32[Fa >> 2] = Da;
            Za = $a + 24;
            qb = ab + Za;
            HEAP32[qb >> 2] = 2147483647;
            ib = $a + 28;
            ub = ab + ib;
            HEAP32[ub >> 2] = 2;
            eb = $a + 32;
            rb = ab + eb;
            HEAP32[rb >>
                2] = 2147483647;
            wb = $a + 36;
            Ka = ab + wb;
            HEAP32[Ka >> 2] = 0;
            Va = $a + 40;
            nb = ab + Va;
            HEAP8[nb] = -98;
            g = ab;
            STACKTOP = b;
            return g;
        case 1:
        case -1:
        case 2:
        case -2:
            ob = HEAP8[qa];
            cb = 0 == ob << 24 >> 24;
            if (!cb) return g = 0, STACKTOP = b, g;
            Wa = _jtga(a, 262144, 1, 0, 0);
            if (yb = 0 == (Wa | 0)) return g = 0, STACKTOP = b, g;
            Cb = HEAP32[Wa >> 2];
            Pb = Wa + Cb;
            HEAP32[Pb >> 2] = 1818;
            zb = Cb + 4;
            Zb = Wa + zb;
            HEAP32[Zb >> 2] = 1816;
            ac = Cb + 8;
            Hb = Wa + ac;
            HEAP32[Hb >> 2] = f;
            Ib = Cb + 12;
            Qb = Wa + Ib;
            HEAP32[Qb >> 2] = K;
            Rb = Cb + 16;
            Ob = Wa + Rb;
            HEAP32[Ob >> 2] = Aa;
            Bb = Cb + 20;
            xb = Wa + Bb;
            HEAP32[xb >> 2] = Da;
            dc = Cb + 24;
            tb = Wa + dc;
            HEAP32[tb >>
                2] = 2147483647;
            oc = Cb + 28;
            Mb = Wa + oc;
            HEAP32[Mb >> 2] = 1;
            Tb = Cb + 32;
            Ra = Wa + Tb;
            HEAP32[Ra >> 2] = 2147483647;
            Nb = Cb + 36;
            sb = Wa + Nb;
            HEAP32[sb >> 2] = 0;
            Ab = Cb + 40;
            Eb = Wa + Ab;
            HEAP8[Eb] = -98;
            g = Wa;
            STACKTOP = b;
            return g;
        case 3:
        case -3:
            Lb = HEAP8[qa];
            vb = 0 == Lb << 24 >> 24;
            if (!vb) return g = 0, STACKTOP = b, g;
            wc = _jtga(a, 262144, 1, 0, 0);
            if (Ec = 0 == (wc | 0)) return g = 0, STACKTOP = b, g;
            yc = HEAP32[wc >> 2];
            Db = wc + yc;
            HEAP32[Db >> 2] = 2502;
            bc = yc + 4;
            pb = wc + bc;
            HEAP32[pb >> 2] = 2174;
            Fb = yc + 8;
            jb = wc + Fb;
            HEAP32[jb >> 2] = f;
            gc = yc + 12;
            ic = wc + gc;
            HEAP32[ic >> 2] = K;
            vc = yc + 16;
            hc = wc + vc;
            HEAP32[hc >> 2] =
                Aa;
            uc = yc + 20;
            Ac = wc + uc;
            HEAP32[Ac >> 2] = Da;
            xc = yc + 24;
            cd = wc + xc;
            HEAP32[cd >> 2] = 2147483647;
            jc = yc + 28;
            Tc = wc + jc;
            HEAP32[Tc >> 2] = 2;
            Fc = yc + 32;
            Bc = wc + Fc;
            HEAP32[Bc >> 2] = 2147483647;
            ec = yc + 36;
            Xb = wc + ec;
            HEAP32[Xb >> 2] = 0;
            sc = yc + 40;
            nc = wc + sc;
            HEAP8[nc] = -98;
            g = wc;
            STACKTOP = b;
            return g;
        default:
            return tc = HEAP32[a + 4408 >> 2], Ub = HEAP32[tc + (HEAP32[tc >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[Ub + 20 >> 2], Ub + HEAP32[Ub >> 2]), g = 0, STACKTOP = b, g
    }
}
function _jtcut1(a, f, d) {
    return _jtcut2(a, HEAP32[31134], f, d)
}
function _jtcut2(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs, ss,
        cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu, Qr,
        iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz, HC,
        ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG, PC, HB, UD, jC, rD, ZA, ZF, kC, MG, IL, lC, NG, sD, $F, dI, jF, OG, eI, tD, uD, VD, CE, WD,
        mC, IB, kF, JB, xH, DE, vD, XD, zy, KB, BA, lF, mF, nC, $A, wJ, aG, JI, EE, nF, aB, yH, wD, bG, cG, YD, FE, oC, pC, dG, ZD, zH, PG, fI, QG, eG, gI, nz, xD, xJ, KI, LI, AH, fG, oF, BH, pF, yJ, RG, CA, GE, QC, zJ, qC, $D, oy, MI, rC, bB, sB, gG, NI, qF, sC, LB, rF, CH, yD, hG, sF, cB, py, tB, Ow, SG, hI, TG, OI, MB, aE, tF, UG, NB, PI, QI, zD, bE, Uy, uF, tC, cK, cE, dE, RC, iI, DA, EA, dB, AD, uC, AJ, dK, iG, SC, HE, jG, vF, BD, fx, DH, IE, kG, TC, VG, JE, lG, WG, JL, CD, Ay, XG, wF, eE, mG, xF, KE, eA, vC, yF, LE, UC, RI, eB, OK, nG, DD, wC, FA, OB, PB, QB, fB, zF, oG, fE, YG, RB, GA, ME, ED, jI, ZG, NE, gE, xC, SB, PK, EH, OE, PE, pG, AF, BF, yC, FH, $G, hE,
        aH, QE, RE, bH, SI, eK, SE, CF, GH, FD, zC, Fz, HA, oz, fK, TB, qG, iE, HH, fA, UB, IH, cH, jE, DF, VB, VC, TE, kE, EF, gA, hA, uB, UE, WC, gB, BJ, IA, FF, XC, rG, GD, sG, vB, WB, lE, XB, dH, GF, gK, eH, JH, mE, VE, WE, TI, kI, lI, KH, By, gx, ux, HF, fH, mI, tG, YC, ZC, hK, nE, JA, LH, YB, hx, uG, oE, $C, IF, UI, AC, MH, XE, QK, wB, gH, hB, YE, JF, ZB, aD, KF, VI, iA, bD, iB, jB, KA, LF, hH, cD, iK, MF, nI, BC, NH, dD, RK, iH, CJ, oI, DJ, RM, WI, OH, PO, QO, SK, EJ, RO, FJ, TK, pI, KL, XI, jK, PH, QH, NF, kK, vG, RH, $B, CC, UK, VK, LL, jH, SO, ML, wG, xG, IN, JN, GJ, SH, kH, NL, YI, lK, ZI, SM, ZE, OL, TH, PL, qI, aC, KN, eD, QL, $I, mK, WK, XK, OF, pE, PQ,
        LN, RL, qE, lH, HJ, aJ, TM, yG, rI, bJ, cJ, nK, YK, zG, sI, AG, dJ, MN, SL, TL, IJ, tI, JJ, UL, UM, VL, eJ, BG, Hx, mH, uI, ZK, VM, WL, CG, UH, NN, $K, aL, WM, KJ, oK, VH, DG, LA, vI, fD, $E, XL, bL, PF, cL, wI, xI, nH, bC, aF, LJ, fJ, QF, pK, TO, XM, ON, MJ, dL, yI, UO, qK, QQ, NJ, RQ, sS, eL, fL, rK, YM, gL, gJ, YL, hL, tS, uS, sK, OJ, xB, RF, oH, hJ, EG, FG, zI, iJ, iL, DC, jL, tK, kL, lL, mL, SQ, PN, jJ, ZL, TQ, ZM, rE, pH, HD, bF, sE, tE, EC, yB, uE, vS, kJ, $M, nL, vE, wE, $L, PJ, aN, oL, uK, bN, QJ, SF, aM, QN, CU, bM, pL, RN, cM, NP, cN, dM, SN, qL, eM, OP, RJ, PP, qH, GG, cF, lJ, rL, wS, pz, UQ, SJ, TN, UN, fM, Gz, TJ, ID, sL, gM, QP, VO, VQ, hM, WQ,
        gD, tL, iM, RP, mJ, VN, SP, dN, uL, WN;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 40 | 0;
    g = e + 8;
    h = e + 16;
    j = e + 24;
    i = e + 32;
    l = a + 205692;
    k = HEAP32[l >> 2];
    m = a + 205752;
    n = HEAP32[m >> 2] + k;
    p = HEAP32[c >> 2];
    q = c + (p + 8);
    r = HEAP32[q >> 2];
    0 == (r | 0) ? s = 0 : (t = HEAP32[r >> 2], u = r + t, s = w = HEAP32[u >> 2]);
    v = HEAP32[c + (p + 28) >> 2];
    x = HEAP32[c + (p + 32) >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return y = 0, STACKTOP = e, y;
    z = HEAP32[f + 24 >> 2];
    A = (v | 0) < (z | 0);
    do
        if (!A && (D = d + 24, B = HEAP32[D >> 2], G = (x | 0) < (B | 0), !G)) {
            C = f + 12;
            F = HEAP32[C >> 2];
            E = F & 1024;
            J = 0 == (E | 0);
            do
                if (J && (L = d + 12, I = HEAP32[L >> 2], H = I & 64512, K =
                        0 == (H | 0))) {
                    (N = 0 == (B | 0)) ? S = 1: (T = d + 28, S = V = HEAP32[T >> 2]);
                    Q = p + 12;
                    M = P = c + Q;
                    aa = O = R = HEAP32[M >> 2];
                    Z = HEAP32[aa >> 2];
                    ba = $ = O + Z;
                    ka = HEAP32[ba >> 2];
                    ea = ka >>> 31;
                    ha = ka >> 31;
                    (da = 1 == (ka | 0)) ? ga = 1: (U = -1 == (ka | 0), ga = ca = U & 1);
                    Y = (X = 0 == (ea | 0)) ? 0 : ga;
                    ja = HEAP32[31134];
                    fa = (ja | 0) == (f | 0);
                    a: do
                        if (fa) {
                            ia = 2 > (B | 0);
                            do
                                if (ia && (ra = I & 3, sa = 0 == (ra | 0), !sa)) {
                                    wa = ta = d;
                                    za = HEAP32[wa >> 2];
                                    Ba = ta + za;
                                    ua = 0 == ga << 24 >> 24;
                                    ya = S - 1;
                                    xa = ua ? ya : 0;
                                    oa = za + xa;
                                    pa = ta + oa;
                                    la = HEAP8[pa];
                                    qa = la << 24 >> 24;
                                    Da = d;
                                    Aa = qa;
                                    Ea = Ba;
                                    break a
                                }
                            while (0);
                            (Sa = 0 == (S | 0)) ?
                            Ha = Oa = HEAP32[31086]: (Ma = (Ga =
                                0 != ga << 24 >> 24) ? 1 : -1, Ia = HEAP32[31080], db = Ia + (Ma << 2), W = HEAP32[db >> 2], Xa = _jttake(a, W, d), Ha = Ta = _jteps(a, d, Xa));
                            if (fb = 0 == (Ha | 0)) return y = 0, STACKTOP = e, y;
                            ma = mb = Ha;
                            ab = HEAP32[ma >> 2];
                            Na = mb + ab;
                            Da = Ha;
                            Aa = 1;
                            Ea = Na
                        } else {
                            $a = f + 20;
                            Ua = HEAP32[$a >> 2];
                            Pa = 0 != (Ua | 0);
                            bb = 0 == (S | 0);
                            La = Pa | bb;
                            if (!La) {
                                Ja = p + 20;
                                Ya = Qa = c + Ja;
                                lb = HEAP32[Ya >> 2];
                                Ca = lb & 256;
                                if (gb = 0 == (Ca | 0)) return y = Fa = getFUNCTION_TABLE(s)(a, d, r), STACKTOP = e, y;
                                Za = p + 16;
                                ib = qb = c + Za;
                                ub = HEAP32[ib >> 2];
                                eb = ub + 20;
                                rb = HEAP32[eb >> 2];
                                (wb = 0 == (rb | 0)) ? (Ka = a + 4408, ob = nb = Va = HEAP32[Ka >> 2], cb = HEAP32[ob >>
                                                                                                                   2], Wa = cb + 36, Cb = yb = nb + Wa, Pb = HEAP32[Cb >> 2], zb = Pb + 20, Zb = HEAP32[zb >> 2], Hb = ac = Pb, Ib = HEAP32[Hb >> 2], Qb = ac + Ib, _jtjsigstr(a, 9, Zb, Qb), y = 0) : (Ob = Rb = ub, Bb = HEAP32[Ob >> 2], dc = xb = Rb + Bb, Mb = oc = tb = HEAP32[dc >> 2], Tb = HEAP32[Mb >> 2], Nb = Ra = oc + Tb, Ab = sb = HEAP32[Nb >> 2], y = Eb = getFUNCTION_TABLE(Ab)(a, d, tb));
                                STACKTOP = e;
                                return y
                            }
                            Lb = 0 == (Ua | 0);
                            do
                                if (!Lb && (vb = F & 32, wc = 0 == (vb | 0), !wc)) {
                                    if (Ec = 0 == (c | 0)) return y = 0, STACKTOP = e, y;
                                    Db = yc = f;
                                    bc = HEAP32[Db >> 2];
                                    Fb = pb = yc + bc;
                                    jb = f;
                                    gc = f + 4;
                                    ic = HEAP32[gc >> 2];
                                    vc = ic & 14;
                                    uc = (hc = 0 != (vc | 0)) ? jb : 0;
                                    if (Ac = (Ua | 0) > (B | 0)) return xc =
                                        a + 4408, Tc = jc = cd = HEAP32[xc >> 2], Fc = HEAP32[Tc >> 2], Bc = Fc + 36, Xb = ec = jc + Bc, sc = HEAP32[Xb >> 2], nc = sc + 20, tc = HEAP32[nc >> 2], $c = Ub = sc, ad = HEAP32[$c >> 2], qc = Ub + ad, _jtjsigstr(a, 9, tc, qc), y = 0, STACKTOP = e, y;
                                    Uc = _jtga(a, 32, Ua, 1, 0);
                                    if (rc = 0 == (Uc | 0)) return y = 0, STACKTOP = e, y;
                                    Jb = kb = Uc;
                                    $b = HEAP32[Jb >> 2];
                                    Vb = na = kb + $b;
                                    kc = _jtga(a, 32, Ua, 1, 0);
                                    if (va = 0 == (kc | 0)) return y = 0, STACKTOP = e, y;
                                    Yb = Wc = kc;
                                    fc = HEAP32[Yb >> 2];
                                    Gb = Kb = Wc + fc;
                                    gd = 0 < (Ua | 0);
                                    b: do
                                        if (gd) {
                                            mc = 0 == (uc | 0);
                                            Gc = 0 < (ka | 0);
                                            dd = a + 205336;
                                            kd = 0;
                                            c: for (;;) {
                                                Fd = Fb + (kd << 2);
                                                Vc = HEAP32[Fd >> 2];
                                                mc ? Hd = Vc :
                                                    (bd = Vc, Hd = Ic = cc = bd + uc);
                                                fd = Hd + 20;
                                                xd = HEAP32[fd >> 2];
                                                Xc = d + 28 + (kd << 2);
                                                Wd = HEAP32[Xc >> 2];
                                                Wb = Hd + 24;
                                                Sb = HEAP32[Wb >> 2];
                                                pc = 2 > (Sb | 0);
                                                if (!pc) {
                                                    b = 33;
                                                    break
                                                }
                                                zc = 0 != (xd | 0);
                                                hd = 0 == (Wd | 0);
                                                Yc = zc | hd;
                                                do
                                                    if (Yc) {
                                                        Ad = Hd + 12;
                                                        Gd = HEAP32[Ad >> 2];
                                                        hb = Gd & 1;
                                                        if (ld = 0 == (hb | 0)) {
                                                            ed = HEAP32[dd >> 2];
                                                            HEAP32[dd >> 2] = 0;
                                                            Jc = _jtccvt(a, 1, Hd, i);
                                                            HEAP32[dd >> 2] = ed;
                                                            if (Oc = 0 == Jc << 24 >> 24) {
                                                                b = 40;
                                                                break c
                                                            }
                                                            Pc = HEAP32[i >> 2];
                                                            if (ke = 0 == (Pc | 0)) {
                                                                y = 0;
                                                                b = 425;
                                                                break c
                                                            }
                                                            Ed = Pc + 24;
                                                            pd = HEAP32[Ed >> 2];
                                                            id = Pc;
                                                            Cc = pd
                                                        } else id = Hd, Cc = Sb;
                                                        if (Qc = 0 == (Cc | 0)) {
                                                            vd = Zc = id;
                                                            $d = HEAP32[vd >> 2];
                                                            je = Zc + $d;
                                                            Kc =
                                                                HEAP8[je];
                                                            if (Bd = 0 == Kc << 24 >> 24) {
                                                                od = HEAP32[31086];
                                                                Vd = Gb + (kd << 2);
                                                                HEAP32[Vd >> 2] = od;
                                                                Zd = Vb + (kd << 2);
                                                                HEAP32[Zd >> 2] = od;
                                                                break
                                                            }
                                                            Jd = Wd - 1;
                                                            Md = _jtga(a, 4, Wd, 1, 0);
                                                            if (Cd = 0 == (Md | 0)) {
                                                                b = 46;
                                                                break c
                                                            }
                                                            if (hd) fe = Vb + (kd << 2), HEAP32[fe >> 2] = Md;
                                                            else {
                                                                Xd = Md;
                                                                qd = HEAP32[Xd >> 2];
                                                                Od = Md;
                                                                Dd = Mc = Od + qd;
                                                                Td = -1;
                                                                for (le = Dd; !(me = Td + 1, wd = le + 4, HEAP32[le >> 2] = me, Ie = (me | 0) == (Jd | 0));) Td = me, le = wd;
                                                                xe = Vb + (kd << 2);
                                                                HEAP32[xe >> 2] = Md
                                                            }
                                                            ye = _jtga(a, 4, 1, 0, 0);
                                                            (Fe = 0 == (ye | 0)) ? nf = 0: (Id = Je = ye, Qe = HEAP32[Id >> 2], ge = sd = Je + Qe, HEAP32[ge >> 2] = Wd, nf = ye);
                                                            ud = HEAP32[31058];
                                                            md = HEAP32[30648];
                                                            de = Gc ? ud : md;
                                                            ae = _jtreshape(a, nf, de);
                                                            Dc = Gb + (kd << 2);
                                                            HEAP32[Dc >> 2] = ae;
                                                            if (Nc = 0 == (ae | 0)) {
                                                                y = 0;
                                                                b = 425;
                                                                break c
                                                            } else break
                                                        }
                                                        yd = (xd | 0) == (Wd | 0);
                                                        if (!yd) {
                                                            b = 57;
                                                            break c
                                                        }
                                                        Sc = jd = id;
                                                        lc = HEAP32[Sc >> 2];
                                                        if (nd = 0 < (xd | 0))
                                                            for (Hc = Rc = 0;;)
                                                                if (Kd = Hc + lc, Rd = jd + Kd, Nd = HEAP8[Rd], be = Nd << 24 >> 24, zd = be + Rc, we = Hc + 1, Lc = (we | 0) < (xd | 0)) Rc = zd, Hc = we;
                                                                else {
                                                                    rd = zd;
                                                                    break
                                                                } else rd = 0;
                                                        se = _jtga(a, 4, rd, 1, 0);
                                                        if (Ud = 0 == (se | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        td = Cf = se;
                                                        Te = HEAP32[td >> 2];
                                                        Pd = pe = Cf + Te;
                                                        Me = Vb + (kd << 2);
                                                        HEAP32[Me >> 2] = se;
                                                        Sd = _jtga(a, 4, rd, 1, 0);
                                                        if ($e = 0 == (Sd | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        Ce =
                                                            qe = Sd;
                                                        cf = HEAP32[Ce >> 2];
                                                        Ue = sf = qe + cf;
                                                        kf = Gb + (kd << 2);
                                                        HEAP32[kf >> 2] = Sd;
                                                        Re = 0 == (rd | 0);
                                                        if (!Re)
                                                            if (2 == (ka | 0)) {
                                                                if (nd) {
                                                                    ce = Pd;
                                                                    De = Ue;
                                                                    Ge = -1;
                                                                    for (He = 0;;)
                                                                        if (We = He + lc, Yd = jd + We, Ne = HEAP8[Yd], (Se = 0 == Ne << 24 >> 24) ? (Ee = Ge, Ld = De, he = ce) : (Qd = Ge + 1, re = ce + 4, HEAP32[ce >> 2] = Qd, Ke = He - Ge, Ae = De + 4, HEAP32[De >> 2] = Ke, Ee = He, Ld = Ae, he = re), te = He + 1, ie = (te | 0) < (xd | 0)) ce = he, De = Ld, Ge = Ee, He = te;
                                                                        else break
                                                                }
                                                            } else if (-2 == (ka | 0)) {
                                                            if (nd) {
                                                                ff = Pd;
                                                                ue = Ue;
                                                                Oe = -1;
                                                                for (ne = 0;;)
                                                                    if (ze = ne + lc, vf = jd + ze, lf = HEAP8[vf], (Xe = 0 == lf << 24 >> 24) ? (Be = Oe, hf = ue, af = ff) : (zf = Oe + 1, uf = ff +
                                                                            4, HEAP32[ff >> 2] = zf, ve = ~Oe, If = ne + ve, Df = ue + 4, HEAP32[ue >> 2] = If, Be = ne, hf = Df, af = uf), Ef = ne + 1, Gf = (Ef | 0) < (xd | 0)) ff = af, ue = hf, Oe = Be, ne = Ef;
                                                                    else break
                                                            }
                                                        } else if (1 == (ka | 0)) {
                                                            if (nd) {
                                                                of = Pd;
                                                                Lf = Ue;
                                                                pf = -1;
                                                                for (bf = 0;;)
                                                                    if (Bf = bf + lc, Pf = jd + Bf, Ye = HEAP8[Pf], (Hf = 0 == Ye << 24 >> 24) ? (jf = pf, mf = Lf, Le = of) : (Ve = of + 4, HEAP32[of >> 2] = bf, (df = -1 < (pf | 0)) ? (wf = bf - pf, Yf = Lf + 4, HEAP32[Lf >> 2] = wf, jf = bf, mf = Yf) : (jf = bf, mf = Lf), Le = Ve), Jf = bf + 1, Qf = (Jf | 0) < (xd | 0)) of = Le, Lf = mf, pf = jf, bf = Jf;
                                                                    else {
                                                                        Sf = mf;
                                                                        Mf = jf;
                                                                        break
                                                                    }
                                                            } else Sf = Ue, Mf = -1;
                                                            ee = xd - Mf;
                                                            HEAP32[Sf >> 2] = ee
                                                        } else if (-1 ==
                                                            (ka | 0)) {
                                                            if (nd) {
                                                                oe = Pd;
                                                                rf = Ue;
                                                                Ff = -1;
                                                                xf = 0;
                                                                for (Pe = 1;;)
                                                                    if (qf = xf + lc, yf = jd + qf, Nf = HEAP8[yf], Zf = 0 == Nf << 24 >> 24, tg = xf + 1, Zf ? (Ze = Ff, gf = rf, ef = oe) : (Kf = oe + 4, HEAP32[oe >> 2] = tg, (bg = -1 < (Ff | 0)) ? (lg = Pe - 1, Rf = lg + xf, Ug = rf + 4, HEAP32[rf >> 2] = Rf, Ze = xf, gf = Ug) : (Ze = xf, gf = rf), ef = Kf), Vf = -Ze, Jg = (tg | 0) < (xd | 0)) oe = ef, rf = gf, Ff = Ze, xf = tg, Pe = Vf;
                                                                    else {
                                                                        hg = gf;
                                                                        Lg = Vf;
                                                                        break
                                                                    }
                                                            } else hg = Ue, Lg = 1;
                                                            $f = xd - 1;
                                                            ah = $f + Lg;
                                                            HEAP32[hg >> 2] = ah
                                                        }
                                                    } else {
                                                        nh = HEAP32[30648];
                                                        dh = Vb + (kd << 2);
                                                        HEAP32[dh >> 2] = nh;
                                                        mg = _jtga(a, 4, 1, 0, 0);
                                                        if (yh = 0 == (mg | 0)) {
                                                            b = 36;
                                                            break c
                                                        }
                                                        ig = Bg = mg;
                                                        ng = HEAP32[ig >>
                                                            2];
                                                        Ch = Ng = Bg + ng;
                                                        HEAP32[Ch >> 2] = Wd;
                                                        Dg = Gb + (kd << 2);
                                                        HEAP32[Dg >> 2] = mg
                                                    }
                                                while (0);
                                                Vg = kd + 1;
                                                if (pg = (Vg | 0) < (Ua | 0)) kd = Vg;
                                                else break b
                                            }
                                            if (33 == b) return zg = a + 4408, dg = cg = Pg = HEAP32[zg >> 2], qg = HEAP32[dg >> 2], vg = qg + 56, Zg = bh = cg + vg, Eg = HEAP32[Zg >> 2], wg = Eg + 20, vh = HEAP32[wg >> 2], $g = Kh = Eg, Ag = HEAP32[$g >> 2], Lh = Kh + Ag, _jtjsigstr(a, 14, vh, Lh), y = 0, STACKTOP = e, y;
                                            if (36 == b) return xg = Gb + (kd << 2), y = HEAP32[xg >> 2] = 0, STACKTOP = e, y;
                                            if (40 == b) return Mg = a + 4408, jg = Sg = rg = HEAP32[Mg >> 2], Uh = HEAP32[jg >> 2], Of = Uh + 12, qi = Tg = Sg + Of, eg = HEAP32[qi >> 2], gi = eg + 20, kg =
                                                HEAP32[gi >> 2], Wg = Qg = eg, wi = HEAP32[Wg >> 2], zh = Qg + wi, _jtjsigstr(a, 3, kg, zh), y = 0, STACKTOP = e, y;
                                            if (46 == b) return Wf = Vb + (kd << 2), y = HEAP32[Wf >> 2] = 0, STACKTOP = e, y;
                                            if (57 == b) return di = a + 4408, Fg = Mh = ch = HEAP32[di >> 2], Rg = HEAP32[Fg >> 2], Vh = Rg + 36, eh = Gg = Mh + Vh, kh = HEAP32[eh >> 2], fh = kh + 20, Wh = HEAP32[fh >> 2], og = qh = kh, Og = HEAP32[og >> 2], Kg = qh + Og, _jtjsigstr(a, 9, Wh, Kg), y = 0, STACKTOP = e, y;
                                            if (425 == b) return STACKTOP = e, y
                                        }
                                    while (0);
                                    Ih = _jtcatalog(a, Uc);
                                    ai = _jtope(a, Ih);
                                    if (wh = 0 == (ai | 0)) return y = 0, STACKTOP = e, y;
                                    Xh = _jtcatalog(a, kc);
                                    Nh = _jtope(a, Xh);
                                    if (Jh = 0 == (Nh | 0)) return y = 0, STACKTOP = e, y;
                                    lj = ai + 20;
                                    gh = HEAP32[lj >> 2];
                                    (rh = 0 == (gh | 0)) ? (Ph = ai + 24, hi = HEAP32[Ph >> 2], sh = _jtga(a, 4, hi, 1, 0), (fg = 0 == (sh | 0)) ? Yi = 0 : (xi = mj = ai + 28, Ii = Hi = sh, lh = HEAP32[Ii >> 2], yg = Hi + lh, vj = hi << 2, _memcpy(yg, xi, vj) | 0, Yi = sh), Ji = _jtga(a, 4, 2, 1, 0), (Xj = 0 == (Ji | 0)) ? yi = 0 : (Aj = hh = Ji, ih = HEAP32[Aj >> 2], zi = Hj = hh + ih, ni = ih + 4, Cg = ti = hh + ni, HEAP32[zi >> 2] = 2, HEAP32[Cg >> 2] = 0, yi = Ji), Ah = _jtover(a, Yi, yi), oh = th = _jtiota(a, Ah)) : oh = Hg = _jtirs2(a, ai, Nh, 0, 1, 1, 1034);
                                    if (bi = 0 == (oh | 0)) return y = 0, STACKTOP = e, y;
                                    y = ui = _jtcut02(a,
                                        oh, d, c);
                                    STACKTOP = e;
                                    return y
                                }
                            while (0);
                            gj = F & 1;
                            if (rj = 0 == (gj | 0)) {
                                Ki = a + 205336;
                                Pj = HEAP32[Ki >> 2];
                                HEAP32[Ki >> 2] = 0;
                                Zi = _jtccvt(a, 1, f, j);
                                HEAP32[Ki >> 2] = Pj;
                                if (ii = 0 == Zi << 24 >> 24) return mh = a + 4408, Qh = vi = ji = HEAP32[mh >> 2], Ij = HEAP32[Qh >> 2], ik = Ij + 12, Xg = hj = vi + ik, Li = HEAP32[Xg >> 2], ph = Li + 20, al = HEAP32[ph >> 2], Yh = oi = Li, ek = HEAP32[Yh >> 2], ki = oi + ek, _jtjsigstr(a, 3, al, ki), y = 0, STACKTOP = e, y;
                                ci = HEAP32[j >> 2];
                                if (Rh = 0 == (ci | 0)) return y = 0, STACKTOP = e, y;
                                Bj = ci + 24;
                                wj = HEAP32[Bj >> 2];
                                Cj = ci;
                                Qi = wj
                            } else Cj = f, Qi = z;
                            if (Ri = 0 == (Qi | 0)) {
                                Qj = _jtga(a, 4, 1, 0,
                                    0);
                                (Dh = 0 == (Qj | 0)) ? Vk = 0: (Dj = Sh = Qj, xj = HEAP32[Dj >> 2], Rj = Eh = Sh + xj, HEAP32[Rj >> 2] = S, Vk = Qj);
                                Ai = _jtreshape(a, Vk, Cj);
                                if (Vi = 0 == (Ai | 0)) return y = 0, STACKTOP = e, y;
                                Yg = Ai
                            } else Yg = Cj;
                            Fh = ri = Yg;
                            fk = HEAP32[Fh >> 2];
                            Ei = ri + fk;
                            Da = Yg;
                            Aa = 1;
                            Ea = Ei
                        }
                    while (0);
                    Nk = Da + 24;
                    jk = HEAP32[Nk >> 2];
                    (qk = 0 == (jk | 0)) ? nj = 1: (pi = Da + 28, nj = yj = HEAP32[pi >> 2]);
                    Ig = (S | 0) == (nj | 0);
                    if (!Ig) return Th = a + 4408, Yj = Ej = ij = HEAP32[Th >> 2], $i = HEAP32[Yj >> 2], Ik = $i + 36, sj = zk = Ej + Ik, Fj = HEAP32[sj >> 2], Jj = Fj + 20, Wk = HEAP32[Jj >> 2], jj = Fi = Fj, Ak = HEAP32[jj >> 2], jl = Fi + Ak, _jtjsigstr(a, 9, Wk,
                        jl), y = 0, STACKTOP = e, y;
                    tk = Wi = r;
                    ei = HEAP32[tk >> 2];
                    Bk = p + 20;
                    kj = zj = c + Bk;
                    Bi = HEAP32[kj >> 2];
                    Ck = Bi & 256;
                    (ol = 0 == (Ck | 0)) ? (Ci = ei + 40, Sj = Wi + Ci, Kj = HEAP8[Sj], Zj = Kj << 24 >> 24, bl = Tj = 0, Jk = Zj, Ui = 0) : (fi = p + 16, oj = xh = c + fi, cl = gk = Dk = HEAP32[oj >> 2], uk = HEAP32[cl >> 2], Lj = sg = gk + uk, ul = Dk + 20, pj = HEAP32[ul >> 2], Tj = Dk, bl = Lj, Jk = 0, Ui = pj);
                    tf = HEAP32[D >> 2];
                    $j = (Xi = 1 > (tf | 0)) ? 1 : tf;
                    Si = d + 28;
                    Kk = gg = d;
                    Gh = HEAP32[Kk >> 2];
                    ag = gg + Gh;
                    (jh = 0 == (tf | 0)) ? (Hh = 1, b = 123) : (Af = HEAP32[Si >> 2], (Mi = 0 == (Af | 0)) ? b = 125 : (Hh = Af, b = 123));
                    123 == b && (kl = HEAP32[L >> 2], si = kl & 64512, (Ok = 0 ==
                        (si | 0)) ? (Zh = d + 20, dl = HEAP32[Zh >> 2], li = Lk = (dl | 0) / (Hh | 0) & -1) : b = 125);
                    a: do
                        if (125 == b) {
                            Uj = tf - 1;
                            fm = 0 < (Uj | 0);
                            do
                                if (fm) {
                                    Di = 1;
                                    for (Mk = 0;;)
                                        if (qj = Mk + 1, Pk = d + 28 + (qj << 2), vl = HEAP32[Pk >> 2], Mj = vl | 0, ak = Di * Mj, mi = (qj | 0) < (Uj | 0)) Di = ak, Mk = qj;
                                        else break;
                                    if (Jl = 2147483647 < ak) {
                                        Nj = a + 4408;
                                        ll = fl = Oh = HEAP32[Nj >> 2];
                                        vk = HEAP32[ll >> 2];
                                        bk = vk + 40;
                                        ck = Vj = fl + bk;
                                        ml = HEAP32[ck >> 2];
                                        rk = ml + 20;
                                        pl = HEAP32[rk >> 2];
                                        Qk = Kl = ml;
                                        wl = HEAP32[Qk >> 2];
                                        Ek = Kl + wl;
                                        _jtjsigstr(a, 10, pl, Ek);
                                        li = 0;
                                        break a
                                    } else Gi = ak
                                } else Gi = 1;
                            while (0);
                            li = sk = Gi & -1
                        }
                    while (0);
                    Bl = 8 == (I | 0) ? I : 1 ==
                        (I | 0) ? I : 2 == (I | 0) | 2097152 == (I | 0) | 33554432 == (I | 0) ? 1 : 131072 == (I | 0) ? 2 : 4 == (I | 0) | 67108864 == (I | 0) | 134217728 == (I | 0) | 4194304 == (I | 0) | 8388608 == (I | 0) ? 4 : 32 == (I | 0) ? 4 : 64 == (I | 0) ? 4 : 128 == (I | 0) ? 8 : 262144 == (I | 0) | 524288 == (I | 0) | 1048576 == (I | 0) ? 44 : 16777216 == (I | 0) ? 12 : 65536 == (I | 0) ? 4 : 268435456 == (I | 0) ? 12 : 536870912 == (I | 0) ? 24 : 16 == (I | 0) | 1024 == (I | 0) | 4096 == (I | 0) | 8192 == (I | 0) | 16384 == (I | 0) | 2048 == (I | 0) | 32768 == (I | 0) ? 16 : -1;
                    aj = Math_imul(Bl, li) | 0;
                    kk = d;
                    Ni = HEAP32[L >> 2];
                    Oi = Ni & 32;
                    (lk = 0 == (Oi | 0)) ? mk = 0: (nk = d + 4, Fl = HEAP32[nk >> 2], Xk = Fl & 14, bj = 0 != (Xk |
                        0), mk = Ll = bj & 1);
                    $h = -mk;
                    gl = kk & $h;
                    Bh = ga & 255;
                    cj = 91 == (Jk | 0) | 93 == (Jk | 0) ? 2 : Rk = (Fk = 44 == (Jk | 0)) ? 2 : 0;
                    dj = cj | Bh;
                    a: do
                        if (2 == (dj | 0)) {
                            ql = Ea - 1;
                            if (Sk = 0 < (S | 0)) {
                                dk = xl = ej = 0;
                                for (hk = Gl = ql;;)
                                    if (nl = Gl + 1, Yk = HEAP8[nl], ok = Yk << 24 >> 24, (Wj = (Aa | 0) == (ok | 0)) ? (Rl = ej + 1, pk = nl, Vl = hk, rl = pk - Vl, Gj = (Zk = (dk | 0) > (rl | 0)) ? dk : rl, Cl = nl, Gk = Gj, gm = Rl) : (Cl = hk, Gk = dk, gm = ej), hl = xl + 1, sl = (hl | 0) < (S | 0)) ej = gm, xl = hl, dk = Gk, Gl = nl, hk = Cl;
                                    else {
                                        Xf = gm;
                                        mm = Gk;
                                        $k = Cl;
                                        break
                                    }
                            } else mm = Xf = 0, $k = ql;
                            tl = Dl = Da;
                            bm = HEAP32[tl >> 2];
                            Ti = Dl + bm;
                            ug = $k;
                            Tf = Ti;
                            uh = mm;
                            Uf = Xf;
                            tj = S
                        } else
                    if (0 ==
                        (dj | 0))
                        if (uj = Da + 12, Sl = HEAP32[uj >> 2], il = Sl & 1, Wl = 0 != (il | 0), yn = 1 == (Aa | 0), im = Wl & yn) {
                            Xn = Ea;
                            io = (S | 0) / 1020 & -1;
                            if (ln = 1019 < (S | 0)) {
                                qm = 2039 < (S | 0);
                                el = 1020 * io & -1;
                                Il = qm ? el : 1020;
                                mn = Ea + Il;
                                $m = 0;
                                Jm = Xn;
                                for (om = 0;;) {
                                    jo = Eo = Am = zm = 0;
                                    hm = Jm;
                                    for (Fo = 0;;)
                                        if (ko = hm + 4, pm = HEAP32[hm >> 2], Bm = zm << 24, Km = Am << 16, Cm = Km | Bm, rm = Eo << 8, Lm = Cm | rm, Tm = Lm | jo, Qm = pm + Tm, an = Qm >>> 8, wk = Qm >>> 16, Go = Qm >>> 24, nn = Fo + 1, on = Qm & 255, cm = an & 255, In = wk & 255, bp = 255 > (nn | 0)) zm = Go, Am = In, Eo = cm, jo = on, hm = ko, Fo = nn;
                                        else break;
                                    Dp = Jm + 1020;
                                    lo = Go + om;
                                    bn = lo + In;
                                    cn = bn + cm;
                                    Um = cn + on;
                                    Ro = $m +
                                        1;
                                    if (Yn = (Ro | 0) < (io | 0)) $m = Ro, Jm = Dp, om = Um;
                                    else break
                                }
                                pn = Yl = mn;
                                Hk = Um
                            } else pn = Xn, Hk = 0;
                            vo = -1020 * io & -1;
                            Ho = vo + S;
                            if (Pp = 0 < (Ho | 0)) {
                                mo = vp = pn;
                                Io = 0;
                                for (hp = Hk;;)
                                    if (Vm = mo + 1, sm = HEAP8[mo], Zn = sm & 255, Oj = Zn + hp, Mm = Io + 1, Yp = (Mm | 0) < (Ho | 0)) mo = Vm, Io = Mm, hp = Oj;
                                    else {
                                        ug = 0;
                                        Tf = Ea;
                                        uh = 0;
                                        Uf = Oj;
                                        tj = S;
                                        break
                                    }
                            } else ug = 0, Tf = Ea, uh = 0, Uf = Hk, tj = S
                        } else {
                            if (Im = 0 < (S | 0)) {
                                zl = Ea - 1;
                                vm = Xl = 0;
                                for (Tl = zl;;)
                                    if (Ml = Tl + 1, kn = HEAP8[Ml], nm = kn << 24 >> 24, Fn = (Aa | 0) == (nm | 0), Nl = Fn & 1, Gn = Nl + vm, Pm = Xl + 1, Hl = (Pm | 0) < (S | 0)) Xl = Pm, vm = Gn, Tl = Ml;
                                    else {
                                        Op = Gn;
                                        break
                                    }
                            } else Op = 0;
                            uo = Hn =
                                Da;
                            Ol = HEAP32[uo >> 2];
                            Do = Hn + Ol;
                            ug = 0;
                            Tf = Do;
                            uh = 0;
                            Uf = Op;
                            tj = S
                        } else if (1 == (dj | 0)) {
                        Tq = Da + 12;
                        Dm = HEAP32[Tq >> 2];
                        Zl = Dm & 1;
                        dn = 0 == (Zl | 0);
                        do
                            if (!dn && (Nm = HEAP8[Ea], Rm = 1 == Nm << 24 >> 24)) {
                                jm = Ea;
                                Ep = (S | 0) / 1020 & -1;
                                if (cp = 1019 < (S | 0)) {
                                    So = 2039 < (S | 0);
                                    Jo = 1020 * Ep & -1;
                                    Jn = So ? Jo : 1020;
                                    Ko = Ea + Jn;
                                    $n = 0;
                                    Em = jm;
                                    for (dm = 0;;) {
                                        rq = El = Kn = To = 0;
                                        Zp = Em;
                                        for (Bq = 0;;)
                                            if (zn = Zp + 4, wp = HEAP32[Zp >> 2], no = To << 24, ip = Kn << 16, Er = ip | no, Lo = El << 8, sq = Er | Lo, An = sq | rq, jp = wp + An, Mo = jp >>> 8, Ln = jp >>> 16, kp = jp >>> 24, en = Bq + 1, Bn = jp & 255, Mn = Mo & 255, gq = Ln & 255, Nn = 255 > (en | 0)) To = kp, Kn = gq,
                                                El = Mn, rq = Bn, Zp = zn, Bq = en;
                                            else break;
                                        Hq = Em + 1020;
                                        dp = kp + dm;
                                        wo = dp + gq;
                                        Fp = wo + Mn;
                                        fn = Fp + Bn;
                                        On = $n + 1;
                                        if (ao = (On | 0) < (Ep | 0)) $n = On, Em = Hq, dm = fn;
                                        else break
                                    }
                                    gn = Qp = Ko;
                                    tm = fn
                                } else gn = jm, tm = 0;
                                um = -1020 * Ep & -1;
                                xo = um + S;
                                No = 0 < (xo | 0);
                                if (!No) {
                                    ug = 0;
                                    Tf = Ea;
                                    uh = 0;
                                    Uf = tm;
                                    tj = S;
                                    break a
                                }
                                $l = Gp = gn;
                                lp = 0;
                                for (km = tm;;)
                                    if (am = $l + 1, mp = HEAP8[$l], Fm = mp & 255, Ar = Fm + km, hq = lp + 1, iq = (hq | 0) < (xo | 0)) $l = am, lp = hq, km = Ar;
                                    else {
                                        ug = 0;
                                        Tf = Ea;
                                        uh = 0;
                                        Uf = Ar;
                                        tj = S;
                                        break a
                                    }
                            }
                        while (0);
                        Hp = Ea + S;
                        if (hn = 0 < (S | 0)) {
                            yo = Pn = 0;
                            for (qn = np = Hp;;)
                                if (tq = np - 1, rn = HEAP8[tq], $p = rn << 24 >> 24, Uq = (Aa |
                                        0) == ($p | 0), Rp = Uq & 1, Cq = Rp + yo, sn = Uq ? tq : qn, Qn = Pn + 1, uq = (Qn | 0) < (S | 0)) Pn = Qn, yo = Cq, np = tq, qn = sn;
                                else {
                                    Iq = Cq;
                                    Uo = Ea;
                                    Rn = sn;
                                    break
                                }
                        } else Iq = 0, Rn = Uo = Hp;
                        Vo = Rn;
                        Sn = Uo;
                        Ip = Sn + S;
                        ep = Ip - Vo;
                        Tf = ug = Rn;
                        uh = 0;
                        Uf = Iq;
                        tj = ep
                    } else if (3 == (dj | 0)) {
                        Cn = Ea + S;
                        if (Pi = 0 < (S | 0)) {
                            yl = Tk = xk = 0;
                            for (tn = yk = Cn;;)
                                if (lm = yk - 1, Tn = HEAP8[lm], vq = Tn << 24 >> 24, (Dn = (Aa | 0) == (vq | 0)) ? (oo = xk + 1, Wo = tn, wm = lm, Pl = Wo - wm, Vq = (Sp = (yl | 0) > (Pl | 0)) ? yl : Pl, Tp = lm, Oo = Vq, fp = oo) : (Tp = tn, Oo = yl, fp = xk), jq = Tk + 1, un = (jq | 0) < (S | 0)) xk = fp, Tk = jq, yl = Oo, yk = lm, tn = Tp;
                                else {
                                    Ul = fp;
                                    op = Oo;
                                    rr = Ea;
                                    Up = Tp;
                                    break
                                }
                        } else op =
                            Ul = 0, Up = rr = Cn;
                        bo = Up;
                        Po = rr;
                        Un = Po + S;
                        Jq = Un - bo;
                        Tf = ug = Up;
                        uh = op;
                        Uf = Ul;
                        tj = Jq
                    } else ug = 0, Tf = Ea, Uf = uh = 0, tj = S;
                    while (0);
                    xp = (aq = 0 != (gl | 0)) ? 0 : Jk;
                    a: do switch (xp | 0) {
                            case 44:
                            case 91:
                            case 93:
                                kq = (Gm = 0 == (uh | 0)) ? 0 : ea;
                                co = uh - kq;
                                pp = Math_imul(Uf, li) | 0;
                                En = pp | 0;
                                Kq = co | 0;
                                eo = En * Kq;
                                (dr = 2147483647 < eo) ? (Ql = a + 4408, Xo = kr = Wq = HEAP32[Ql >> 2], yp = HEAP32[Xo >> 2], Jp = yp + 40, Yo = qp = kr + Jp, Wm = HEAP32[Yo >> 2], Vn = Wm + 20, Vp = HEAP32[Vn >> 2], lq = Zo = Wm, Kp = HEAP32[lq >> 2], sr = Zo + Kp, _jtjsigstr(a, 10, Vp, sr), Lp = 0) : Lp = mq = eo & -1;
                                zo = a + 204545;
                                fo = HEAP8[zo];
                                Br = 0 == fo << 24 >>
                                    24;
                                if (!Br) return y = 0, STACKTOP = e, y;
                                rp = 44 == (Jk | 0);
                                nq = $j + 1;
                                Xq = rp ? 2 : nq;
                                Yr = d + 24;
                                Dq = _jtga(a, I, Lp, Xq, Yr);
                                if (Cr = 0 == (Dq | 0)) return y = 0, STACKTOP = e, y;
                                tr = lr = Dq;
                                wq = HEAP32[tr >> 2];
                                Lq = lr + wq;
                                _fillv(I, Lp, Lq);
                                oq = Dq + 28;
                                HEAP32[oq >> 2] = Uf;
                                bq = rp ? er = Math_imul(co, li) | 0 : co;
                                mr = Dq + 32;
                                HEAP32[mr >> 2] = bq;
                                Yq = Math_imul(co, aj) | 0;
                                if (po = 1 > (Uf | 0)) {
                                    qo = Dq;
                                    fr = ug;
                                    $o = Tf;
                                    Xm = tj;
                                    b = 328;
                                    break a
                                }
                                gp = 0 != ga << 24 >> 24;
                                go = Y & 255;
                                Ym = go + S;
                                ro = ga ^ 1;
                                ap = ro & 255;
                                ho = tj;
                                Zm = 1;
                                Ao = Lq;
                                Wn = Tf;
                                for (so = ug;;)
                                    if (fj = (Zm | 0) == (Uf | 0), (Mq = gp & fj) ? (sp = so, tp = ho) : (Zq = Wn + Bh, Uk = ho - Bh, zp =
                                            _memchr(Zq, Aa, Uk), to = em = zp + ap, vn = Wn, Hm = to - vn, sp = em, tp = Hm), xm = tp - ea, wn = Ym - ho, Ap = Math_imul(wn, aj) | 0, ym = Ap + Gh, jn = gg + ym, Om = Math_imul(xm, aj) | 0, _memcpy(Ao, jn, Om) | 0, Mp = Ao + Yq, xn = ho - tp, Bo = Zm + 1, Zr = (Zm | 0) < (Uf | 0)) ho = xn, Zm = Bo, Ao = Mp, so = Wn = sp;
                                    else {
                                        qo = Dq;
                                        $o = fr = sp;
                                        Xm = xn;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 60:
                                Qo = (Ur = 0 != (Uf | 0)) ? 32 : 1;
                                Wp = _jtga(a, Qo, Uf, 1, 0);
                                if (xq = 0 == (Wp | 0)) return y = 0, STACKTOP = e, y;
                                if (Fr = 1 > (Uf | 0)) {
                                    Eq = Wp;
                                    break a
                                }
                                yq = Wp;
                                qs = HEAP32[yq >> 2];
                                Lr = Wp;
                                cq = ur = Lr + qs;
                                is = 0 != ga << 24 >> 24;
                                Fq = Y & 255;
                                nr = Fq + S;
                                Bp = ga ^ 1;
                                Gr = Bp & 255;
                                Gq = tj;
                                pq = 1;
                                Mr =
                                    Tf;
                                $q = ug;
                                for (vr = cq;;) {
                                    Nq = (pq | 0) == (Uf | 0);
                                    (js = is & Nq) ? (Hr = $q, Np = Gq) : (qq = Mr + Bh, Oq = Gq - Bh, ar = _memchr(qq, Aa, Oq), wr = zq = ar + Gr, br = Mr, Al = wr - br, Hr = zq, Np = Al);
                                    Co = Np - ea;
                                    dq = Math_imul(Co, li) | 0;
                                    Aq = _jtga(a, I, dq, $j, Si);
                                    if (Vr = 0 == (Aq | 0)) {
                                        y = 0;
                                        break
                                    }
                                    eq = nr - Gq;
                                    Xp = Math_imul(eq, aj) | 0;
                                    fq = Xp + Gh;
                                    $r = gg + fq;
                                    Ir = Aq + 28;
                                    HEAP32[Ir >> 2] = Co;
                                    Rr = Nr = Aq;
                                    Pq = HEAP32[Rr >> 2];
                                    Or = Nr + Pq;
                                    Es = Math_imul(Co, aj) | 0;
                                    _memcpy(Or, $r, Es) | 0;
                                    ks = vr + 4;
                                    HEAP32[vr >> 2] = Aq;
                                    gr = Gq - Np;
                                    ls = pq + 1;
                                    if (dt = (pq | 0) < (Uf | 0)) Gq = gr, pq = ls, $q = Mr = Hr, vr = ks;
                                    else {
                                        qo = Wp;
                                        $o = fr = Hr;
                                        Xm = gr;
                                        b = 328;
                                        break a
                                    }
                                }
                                STACKTOP =
                                    e;
                                return y;
                            case -84:
                                ms = Math_imul(Uf, li) | 0;
                                Qq = _jtga(a, I, ms, $j, Si);
                                if (as = 0 == (Qq | 0)) return y = 0, STACKTOP = e, y;
                                Jr = Qq;
                                Wr = HEAP32[Jr >> 2];
                                bs = Qq + 28;
                                HEAP32[bs >> 2] = Uf;
                                if (nt = 1 > (Uf | 0)) {
                                    Eq = Qq;
                                    break a
                                }
                                Rq = Qq;
                                or = Rq + Wr;
                                hr = 0 != ga << 24 >> 24;
                                Dr = Y & 255;
                                Fs = Dr + S;
                                Kr = ga ^ 1;
                                As = Kr & 255;
                                Gs = tj;
                                ir = 1;
                                pr = or;
                                Xr = Tf;
                                for (Vs = ug;;)
                                    if (Bs = (ir | 0) == (Uf | 0), (Ws = hr & Bs) ? (rs = Vs, Js = Gs) : (Cp = Xr + Bh, Sr = Gs - Bh, cs = _memchr(Cp, Aa, Sr), cr = ss = cs + As, jr = Xr, et = cr - jr, rs = ss, Js = et), (Wt = (Js | 0) == (ea | 0)) ? _fillv(I, li, pr) : (ku = Fs - Gs, Xt = Math_imul(ku, aj) | 0, ft = Xt + Gh, Ps = gg + ft, _memcpy(pr,
                                            Ps, aj) | 0), Xs = pr + aj, Cs = Gs - Js, Dt = ir + 1, vt = (ir | 0) < (Uf | 0)) Gs = Cs, ir = Dt, pr = Xs, Vs = Xr = rs;
                                    else {
                                        qo = Qq;
                                        $o = fr = rs;
                                        Xm = Cs;
                                        b = 328;
                                        break
                                    }
                                break;
                            case -83:
                                ot = Math_imul(Uf, li) | 0;
                                ns = _jtga(a, I, ot, $j, Si);
                                if (Ks = 0 == (ns | 0)) return y = 0, STACKTOP = e, y;
                                Ds = ns;
                                Tr = HEAP32[Ds >> 2];
                                Ys = ns + 28;
                                HEAP32[Ys >> 2] = Uf;
                                if (lu = 1 > (Uf | 0)) {
                                    Eq = ns;
                                    break a
                                }
                                Yt = ns;
                                Nt = Yt + Tr;
                                xt = 0 != ga << 24 >> 24;
                                xr = Y & 255;
                                qr = S - 1;
                                Zs = qr + ha;
                                Et = Zs + xr;
                                Ku = ga ^ 1;
                                gt = Ku & 255;
                                Qs = tj;
                                xs = 1;
                                pt = Nt;
                                $s = Tf;
                                for (Zt = ug;;)
                                    if (qt = (xs | 0) == (Uf | 0), (ds = xt & qt) ? (yt = Zt, ys = Qs) : (Lu = $s + Bh, us = Qs - Bh, at = _memchr(Lu, Aa, us),
                                            Rs = zs = at + gt, Pr = $s, os = Rs - Pr, yt = zs, ys = os), ($t = (ys | 0) == (ea | 0)) ? _fillv(I, li, pt) : (Ls = Et - Qs, Ss = Ls + ys, ht = Math_imul(Ss, aj) | 0, wt = ht + Gh, yu = gg + wt, _memcpy(pt, yu, aj) | 0), kv = pt + aj, Ft = Qs - ys, uv = xs + 1, au = (xs | 0) < (Uf | 0)) Qs = Ft, xs = uv, pt = kv, Zt = $s = yt;
                                    else {
                                        qo = ns;
                                        $o = fr = yt;
                                        Xm = Ft;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 64:
                            case -75:
                            case 38:
                            case -73:
                                rt = ei + 8;
                                vv = mu = Wi + rt;
                                wv = HEAP32[vv >> 2];
                                if (Mu = 0 == (wv | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                bu = wv + 12;
                                it = HEAP32[bu >> 2];
                                Ot = it & 1835008;
                                if (qw = 0 == (Ot | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                zt = zu = wv;
                                Gt = HEAP32[zt >>
                                    2];
                                jt = Gt + 40;
                                cu = zu + jt;
                                nu = HEAP8[cu];
                                Zu = 60 == nu << 24 >> 24;
                                if (!Zu) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                st = ei + 12;
                                ws = kt = Wi + st;
                                lt = HEAP32[ws >> 2];
                                if (xv = 0 == (lt | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                qy = lt + 12;
                                Pv = HEAP32[qy >> 2];
                                Nu = Pv & 1835008;
                                if (Pt = 0 == (Nu | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                ou = cw = lt;
                                dw = HEAP32[ou >> 2];
                                Ou = dw + 40;
                                Qv = cw + Ou;
                                At = HEAP8[Qv];
                                yv = At << 24 >> 24;
                                zv = -82 == At << 24 >> 24;
                                lv = yv + 82;
                                Pu = 2 > lv >>> 0;
                                if (!Pu) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                Av = ($u = 0 != (Uf | 0)) ? 32 : 1;
                                Ms = _jtga(a, Av, Uf, 1, 0);
                                if (rw = 0 == (Ms | 0)) return y = 0, STACKTOP = e,
                                    y;
                                if (Hs = 1 > (Uf | 0)) {
                                    Eq = Ms;
                                    break a
                                }
                                du = Ms;
                                mt = HEAP32[du >> 2];
                                Au = Ms;
                                mv = Bu = Au + mt;
                                Bv = 0 != ga << 24 >> 24;
                                sw = Y & 255;
                                av = sw + S;
                                Rv = zv ? aj : 0;
                                Qt = Rv + Gh;
                                pu = ha - 1;
                                Ew = ga ^ 1;
                                bt = Ew & 255;
                                yr = tj;
                                Rt = 1;
                                Cv = Tf;
                                Ht = ug;
                                for (qu = mv;;) {
                                    ix = (Rt | 0) == (Uf | 0);
                                    (Fw = Bv & ix) ? (ct = Ht, Sv = yr) : (Dv = Cv + Bh, Qu = yr - Bh, Ru = _memchr(Dv, Aa, Qu), Is = Bt = Ru + bt, Tv = Cv, Ev = Is - Tv, ct = Bt, Sv = Ev);
                                    bv = (Sv | 0) == (ea | 0);
                                    It = pu + Sv;
                                    Jt = bv ? 0 : It;
                                    gs = Math_imul(Jt, li) | 0;
                                    Cu = _jtga(a, I, gs, $j, Si);
                                    if (Ts = 0 == (Cu | 0)) {
                                        y = 0;
                                        break
                                    }
                                    vx = av - yr;
                                    Fv = Math_imul(vx, aj) | 0;
                                    Su = Cu + 28;
                                    HEAP32[Su >> 2] = Jt;
                                    Du = Tu = Cu;
                                    Pw = HEAP32[Du >>
                                        2];
                                    ru = Tu + Pw;
                                    Qw = Qt + Fv;
                                    Kt = gg + Qw;
                                    wx = Math_imul(Jt, aj) | 0;
                                    _memcpy(ru, Kt, wx) | 0;
                                    hs = qu + 4;
                                    HEAP32[qu >> 2] = Cu;
                                    up = yr - Sv;
                                    tw = Rt + 1;
                                    if (Ix = (Rt | 0) < (Uf | 0)) yr = up, Rt = tw, Ht = Cv = ct, qu = hs;
                                    else {
                                        qo = Ms;
                                        $o = fr = ct;
                                        Xm = up;
                                        b = 328;
                                        break a
                                    }
                                }
                                STACKTOP = e;
                                return y;
                            case 47:
                                Us = ei + 8;
                                Sq = ts = Wi + Us;
                                vw = uw = xx = HEAP32[Sq >> 2];
                                eu = HEAP32[vw >> 2];
                                Uv = eu + 40;
                                ew = uw + Uv;
                                fw = HEAP8[ew];
                                (Jx = -67 == fw << 24 >> 24) ? (Uu = eu + 8, su = Vv = uw + Uu, nv = HEAP32[su >> 2], gw = nv + 12, hw = HEAP32[gw >> 2], fu = hw & 4, (Gv = 0 == (fu | 0)) ? gu = -67 : (Qr = nv + 24, iw = HEAP32[Qr >> 2], (cv = 0 == (iw | 0)) ? (tu = Hv = nv, Vu = HEAP32[tu >>
                                    2], Ns = ww = Hv + Vu, uu = HEAP32[Ns >> 2], Lt = uu - 16, St = 16 > Lt >>> 0, Kx = uu & 255, gu = hu = St ? Kx : -67) : gu = -67)) : gu = fw;
                                Rw = gu & 255;
                                Wv = Rw + 56;
                                Lx = HEAP8[Wv];
                                Xv = (Iz = 0 == Lx << 24 >> 24) ? 0 : gu;
                                iu = a + 204545;
                                ov = HEAP8[iu];
                                Iv = 50 == ov << 24 >> 24;
                                do
                                    if (Iv) HEAP8[iu] = 0, (pv = 43 == Xv << 24 >> 24) ? (Os = 8, tt = 1024, Tt = 206) : (jx = (Sw = 45 == Xv << 24 >> 24) ? 382 : 1208, Os = 8, tt = 1024, Tt = jx);
                                    else {
                                        yx = I & 805402077;
                                        if (Mx = 0 == (yx | 0)) {
                                            Sm = tj;
                                            es = Tf;
                                            vs = ug;
                                            b = 329;
                                            break a
                                        }
                                        Wu = Xv & 255;
                                        jw = Wu + 56;
                                        Tw = HEAP8[jw];
                                        ut = Tw & 255;
                                        Dy = I & 1;
                                        (xw = 0 == (Dy | 0)) ? (kx = I & 4, (Ey = 0 == (kx | 0)) ? (Jv = I & 8, (Gw = 0 == (Jv | 0)) ? (dy = I & 16, (kA = 0 == (dy | 0)) ? (Eu = I & 64, (Vy = 0 == (Eu | 0)) ? (Wy = I >>> 7, zx = Wy & 1, vu = Xy = 6 - zx) : vu = 4) : vu = 3) : vu = 2) : vu = 1) : vu = 0;
                                        Yy = 912 + (272 * ut & -1) + (vu << 3);
                                        Uw = HEAP32[Yy >> 2];
                                        Nx = 912 + (272 * ut & -1) + (vu << 3) + 4;
                                        kw = HEAP32[Nx >> 2];
                                        if (ey = 0 == (Uw | 0)) {
                                            Sm = tj;
                                            es = Tf;
                                            vs = ug;
                                            b = 329;
                                            break a
                                        } else Fy = Uw, fy = kw;
                                        yw = fy & 256;
                                        (Yv = 0 == (yw | 0)) ? (Kv = fy, Zy = Fy, Lv = Kv & 512, (Hw = 0 == (Lv | 0)) ? (Xu = Zy, Ox = Kv, Zv = Ox & 1024, (Ut = 0 == (Zv | 0)) ? (Fu = Ox & 2048, (Vw = 0 == (Fu | 0)) ? (Px = Ox & 8192, (Qx = 0 == (Px | 0)) ? (Rx = Ox & 4096, Os = Ax = (ry = 0 != (Rx | 0)) ? 64 : 65536) : Os = 128) : Os = 16) : Os = 8, tt = Ox, Tt = Xu) : (Os = 4, tt = Kv, Tt =
                                            Zy)) : (Os = 1, tt = fy, Tt = Fy)
                                    }
                                while (0);
                                zr = Math_imul(Uf, li) | 0;
                                qv = _jtga(a, Os, zr, $j, Si);
                                if (lx = 0 == (qv | 0)) return y = 0, STACKTOP = e, y;
                                Sx = qv + 28;
                                HEAP32[Sx >> 2] = Uf;
                                Tx = qv + 20;
                                Jz = HEAP32[Tx >> 2];
                                if (sy = 0 == (Jz | 0)) return y = qv, STACKTOP = e, y;
                                Iw = gy = qv;
                                Ww = HEAP32[Iw >> 2];
                                dv = gy + Ww;
                                zw = 4 == (Os | 0) ? 4 : 64 == (Os | 0) ? 4 : 128 == (Os | 0) ? 8 : 65536 == (Os | 0) ? 4 : 1 == (Os | 0) | 16 == (Os | 0) | 8 == (Os | 0) ? Os : -1;
                                Mt = Math_imul(zw, li) | 0;
                                Ux = tt & 1835071;
                                if (MA = 0 == (Ux | 0)) mx = d, Bx = ag;
                                else if (Gy = tt & 1, (Vx = 0 == (Gy | 0)) ? (rv = tt & 2, (Cx = 0 == (rv | 0)) ? (lw = tt & 4, (NA = 0 == (lw | 0)) ? (Gu = tt & 8, (nx = 0 == (Gu |
                                        0)) ? (ty = tt << 1, ox = ty & 64, Hy = Iy = ox + 64) : Hy = 16) : Hy = 8) : Hy = 4) : Hy = 1, Jw = (Hy | 0) == (I | 0)) mx = d, Bx = ag;
                                else {
                                    Aw = a + 205336;
                                    ev = HEAP32[Aw >> 2];
                                    HEAP32[Aw >> 2] = 0;
                                    Wx = _jtccvt(a, Hy, d, h);
                                    HEAP32[Aw >> 2] = ev;
                                    if (Xx = 0 == Wx << 24 >> 24) return Xw = a + 4408, qz = hy = uy = HEAP32[Xw >> 2], sv = HEAP32[qz >> 2], lA = sv + 12, px = vy = hy + lA, wy = HEAP32[px >> 2], fv = wy + 20, xy = HEAP32[fv >> 2], mw = Dx = wy, Ex = HEAP32[mw >> 2], qx = Dx + Ex, _jtjsigstr(a, 3, xy, qx), y = 0, STACKTOP = e, y;
                                    gv = HEAP32[h >> 2];
                                    if (Kz = 0 == (gv | 0)) return y = 0, STACKTOP = e, y;
                                    Hu = Ct = gv;
                                    mA = HEAP32[Hu >> 2];
                                    $y = Ct + mA;
                                    mx = gv;
                                    Bx = $y
                                }
                                nA = 1 > (Uf |
                                    0);
                                b: do
                                    if (nA) b = 316;
                                    else {
                                        Lz = 0 != ga << 24 >> 24;
                                        az = Y & 255;
                                        OA = az + S;
                                        bz = ga ^ 1;
                                        rz = bz & 255;
                                        Jy = a + 205336;
                                        Mz = a + 4408;
                                        Yw = (rx = (zw | 0) < (Mt | 0)) ? zw : Mt;
                                        nw = Tt;
                                        Iu = tj;
                                        oA = 1;
                                        Ky = 0;
                                        Yx = dv;
                                        Nz = Tf;
                                        Zx = ug;
                                        c: for (;;) {
                                            Ly = (oA | 0) == (Uf | 0);
                                            (pA = Lz & Ly) ? (PA = Zx, Yu = Iu) : (Zw = Nz + Bh, Mv = Iu - Bh, QA = _memchr(Zw, Aa, Mv), sz = $v = QA + rz, Kw = Nz, My = sz - Kw, PA = $v, Yu = My);
                                            $x = Yu - ea;
                                            qA = (Yu | 0) == (ea | 0);
                                            do
                                                if (qA) {
                                                    if (Fx = 0 == (Ky | 0)) {
                                                        tz = HEAP32[q >> 2];
                                                        iy = HEAP32[30648];
                                                        $w = ow = tz;
                                                        RA = HEAP32[$w >> 2];
                                                        kB = RA + 8;
                                                        cz = ND = ow + kB;
                                                        dz = HEAP32[cz >> 2];
                                                        Oz = _jtiden(a, dz);
                                                        (HC = 0 == (Oz | 0)) ? ez = 0: (pw = SA = Oz, rA = HEAP32[pw >>
                                                                                                                  2], Bw = hv = SA + rA, fz = iv = HEAP32[Bw >> 2], ez = Pz = getFUNCTION_TABLE(fz)(a, iy, Oz));
                                                        ax = HEAP8[iu];
                                                        iD = 0 == ax << 24 >> 24;
                                                        if (!iD) {
                                                            Qz = ax;
                                                            break b
                                                        }
                                                        bx = ez + 12;
                                                        uz = HEAP32[bx >> 2];
                                                        if (OD = (uz | 0) > (Os | 0)) break c;
                                                        if (vz = (uz | 0) < (Os | 0))
                                                            if (lB = HEAP32[Jy >> 2], HEAP32[Jy >> 2] = 0, cx = _jtccvt(a, Os, ez, g), HEAP32[Jy >> 2] = lB, (jy = 0 == cx << 24 >> 24) ? (BB = Ny = gz = HEAP32[Mz >> 2], IC = HEAP32[BB >> 2], jD = IC + 12, PD = JC = Ny + jD, eC = HEAP32[PD >> 2], ky = eC + 20, Rz = HEAP32[ky >> 2], ly = Sz = eC, ay = HEAP32[ly >> 2], kD = Sz + ay, _jtjsigstr(a, 3, Rz, kD), Oy = 0) : Oy = AE = HEAP32[g >> 2], Tz = HEAP8[iu], by = 0 == Tz << 24 >>
                                                                24) Vt = Oy;
                                                            else {
                                                                Qz = Tz;
                                                                break b
                                                            } else Vt = ez;
                                                        hz = wz = Vt;
                                                        Py = HEAP32[hz >> 2];
                                                        Cw = wz + Py;
                                                        if (Qy = 0 == (Cw | 0)) {
                                                            b = 316;
                                                            break b
                                                        } else Dw = Cw
                                                    } else Dw = Ky;
                                                    _memcpy(Yx, Dw, Yw) | 0;
                                                    if (rx)
                                                        for (iz = zw;;)
                                                            if (mB = Mt - iz, fC = Yx + iz, lD = (Uz = (iz | 0) < (mB | 0)) ? iz : mB, _memcpy(fC, Yx, lD) | 0, gC = iz << 1, xz = (gC | 0) < (Mt | 0)) iz = gC;
                                                            else {
                                                                cy = Dw;
                                                                break
                                                            } else cy = Dw
                                                } else hC = OA - Iu, iC = Math_imul(hC, aj) | 0, yz = Bx + iC, nB = Math_imul($x, li) | 0, FUNCTION_TABLE(nw)(a, 1, nB, $x, Yx, yz), cy = Ky;
                                            while (0);
                                            CB = Yx + Mt;
                                            QD = Iu - Yu;
                                            dx = oA + 1;
                                            if (aw = (oA | 0) < (Uf | 0)) Iu = QD, oA = dx, Ky = cy, Yx = CB, Zx = Nz = PA;
                                            else {
                                                b = 316;
                                                break b
                                            }
                                        }
                                        oB = HEAP32[30858];
                                        Ry = HEAP32[M >> 2];
                                        sA = _jtcut(a, oB, Ry);
                                        jz = _jtcut2(a, Da, mx, sA);
                                        DB = HEAP32[30860];
                                        my = _jtamp(a, tz, DB);
                                        if (iF = 0 == (my | 0)) b = 316;
                                        else if (tA = pB = my, TA = HEAP32[tA >> 2], Sy = Gx = pB + TA, Ju = UA = HEAP32[Sy >> 2], KC = getFUNCTION_TABLE(Ju)(a, jz, my), LC = 0 == (KC | 0)) b = 316;
                                        else return y = KC, STACKTOP = e, y
                                    }
                                while (0);
                                316 == b && (Qz = EB = HEAP8[iu]);
                                if (50 == Qz << 24 >> 24) return y = MC = _jtcut2(a, Da, mx, c), STACKTOP = e, y;
                                if (0 == Qz << 24 >> 24) {
                                    uA = tt & 196608;
                                    if (RD = 0 == (uA | 0)) return y = qv, STACKTOP = e, y;
                                    VA = qv + 12;
                                    NC = HEAP32[VA >> 2];
                                    mD = tt & 65536;
                                    zz = 0 ==
                                        (mD | 0);
                                    vA = 8 == (NC | 0);
                                    cI = zz | vA;
                                    if (!cI) return Vz = a + 205336, Wz = HEAP32[Vz >> 2], HEAP32[Vz >> 2] = 0, Ty = _jtccvt(a, 8, qv, e), HEAP32[Vz >> 2] = Wz, Xz = 0 != Ty << 24 >> 24, BE = HEAP32[e >> 2], y = nD = Xz ? BE : qv, STACKTOP = e, y;
                                    Az = tt & 131072;
                                    wA = 0 == (Az | 0);
                                    oD = 4 == (NC | 0);
                                    if (OC = wA | oD) return y = qv, STACKTOP = e, y;
                                    ex = HEAP32[Tx >> 2];
                                    bw = HEAP32[Iw >> 2];
                                    Lw = qv + 24;
                                    jv = HEAP32[Lw >> 2];
                                    wu = _jtga(a, 4, ex, jv, Sx);
                                    if (Yz = 0 == (wu | 0)) return y = 0, STACKTOP = e, y;
                                    sx = 0 < (ex | 0);
                                    if (!sx) return y = wu, STACKTOP = e, y;
                                    Zz = wu;
                                    Bz = HEAP32[Zz >> 2];
                                    $z = wu;
                                    Nv = $z + Bz;
                                    kz = gy + bw;
                                    xA = Nv;
                                    II = kz;
                                    yA = 0;
                                    Cz = II;
                                    for (lz =
                                        xA;;) {
                                        wH = HEAPF64[Cz >> 3];
                                        XF = -2147483648 > wH;
                                        YF = 2147483647 < wH;
                                        if (zA = XF | YF) {
                                            y = qv;
                                            b = 425;
                                            break
                                        }
                                        SD = Cz + 8;
                                        tv = wH & -1;
                                        FB = lz + 4;
                                        HEAP32[lz >> 2] = tv;
                                        AA = yA + 1;
                                        if (Dz = (AA | 0) < (ex | 0)) yA = AA, Cz = SD, lz = FB;
                                        else {
                                            y = wu;
                                            b = 425;
                                            break
                                        }
                                    }
                                    if (425 == b) return STACKTOP = e, y
                                } else return y = 0, STACKTOP = e, y;
                                break;
                            case 35:
                                ny = _jtga(a, 4, Uf, 1, 0);
                                if (yy = 0 == (ny | 0)) return y = 0, STACKTOP = e, y;
                                if (Mw = 1 > (Uf | 0)) {
                                    Eq = ny;
                                    break a
                                }
                                ju = ny;
                                Nw = HEAP32[ju >> 2];
                                WA = ny;
                                pD = GB = WA + Nw;
                                aA = 0 != ga << 24 >> 24;
                                qB = ga ^ 1;
                                mz = qB & 255;
                                tx = pD;
                                bA = tj;
                                Ez = 1;
                                XA = Tf;
                                for (YA = ug;;)
                                    if (cA = (Ez | 0) == (Uf | 0), (qD = aA &
                                            cA) ? (TD = YA, rB = bA) : (dA = XA + Bh, LG = bA - Bh, PC = _memchr(dA, Aa, LG), UD = HB = PC + mz, jC = XA, rD = UD - jC, TD = HB, rB = rD), ZA = rB - ea, ZF = tx + 4, HEAP32[tx >> 2] = ZA, kC = bA - rB, MG = Ez + 1, IL = (Ez | 0) < (Uf | 0)) tx = ZF, bA = kC, Ez = MG, YA = XA = TD;
                                    else {
                                        qo = ny;
                                        $o = fr = TD;
                                        Xm = kC;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 36:
                                lC = _jtga(a, 4, Uf, 1, 0);
                                if (NG = 0 == (lC | 0)) return y = 0, STACKTOP = e, y;
                                sD = 1 > (Uf | 0);
                                if (!sD) {
                                    $F = lC;
                                    dI = HEAP32[$F >> 2];
                                    jF = lC;
                                    eI = OG = jF + dI;
                                    tD = 0 != ga << 24 >> 24;
                                    uD = ga ^ 1;
                                    VD = uD & 255;
                                    CE = eI;
                                    WD = tj;
                                    mC = 1;
                                    IB = Tf;
                                    for (kF = ug;;)
                                        if (JB = (mC | 0) == (Uf | 0), (xH = tD & JB) ? (DE = kF, vD = WD) : (XD = IB + Bh, zy = WD - Bh,
                                                KB = _memchr(XD, Aa, zy), lF = BA = KB + VD, mF = IB, nC = lF - mF, DE = BA, vD = nC), $A = vD - ea, wJ = CE + 4, HEAP32[CE >> 2] = $A, aG = WD - vD, JI = mC + 1, EE = (mC | 0) < (Uf | 0)) CE = wJ, WD = aG, mC = JI, kF = IB = DE;
                                        else break
                                }
                                nF = $j - 1;
                                aB = _jtga(a, 4, nF, 1, 0);
                                (yH = 0 == (aB | 0)) ? wD = 0: (cG = bG = d + 32, FE = YD = aB, oC = HEAP32[FE >> 2], pC = YD + oC, dG = nF << 2, _memcpy(pC, cG, dG) | 0, wD = aB);
                                y = ZD = _jtirs2(a, lC, wD, 0, 0, 1, 774);
                                STACKTOP = e;
                                return y;
                            default:
                                Sm = tj, es = Tf, vs = ug, b = 329
                        }
                        while (0);
                        328 == b && ((zH = 0 == (qo | 0)) ? (Sm = Xm, es = $o, vs = fr, b = 329) : Eq = qo);
                    a: do
                        if (329 == b) {
                            if (PG = 0 == (Uf | 0)) return fI = HEAP32[30648],
                            QG = _jtreitem(a, fI, d), (eG = 0 == (Tj | 0)) ? nz = gI = getFUNCTION_TABLE(s)(a, QG, r) : (xD = HEAP32[bl >> 2], (xJ = 0 == (xD | 0)) ? nz = 0 : (LI = KI = xD, AH = HEAP32[LI >> 2], oF = fG = KI + AH, pF = BH = HEAP32[oF >> 2], nz = yJ = getFUNCTION_TABLE(pF)(a, QG, xD))), RG = a + 204545, HEAP8[RG] = 0, CA = a + 4400, HEAP32[CA >> 2] = 0, GE = HEAP32[30648], QC = 0 != (nz | 0), zJ = HEAP32[31086], qC = QC ? nz : zJ, ($D = 0 == (qC | 0)) ? oy = 0 : (MI = qC + 24, rC = HEAP32[MI >> 2], bB = _jtga(a, 4, rC, 1, 0), (sB = 0 == (bB | 0)) ? oy = 0 : (NI = gG = qC + 28, sC = qF = bB, LB = HEAP32[sC >> 2], rF = qF + LB, CH = rC << 2, _memcpy(rF, NI, CH) | 0, oy = bB)), yD = _jtover(a, GE, oy),
                                y = hG = _jtiota(a, yD), STACKTOP = e, y;
                            sF = _jtga(a, 32, Uf, 1, 0);
                            if (cB = 0 == (sF | 0)) return y = 0, STACKTOP = e, y;
                            tB = py = sF;
                            Ow = HEAP32[tB >> 2];
                            hI = SG = py + Ow;
                            TG = aq ? 2 : 0;
                            OI = 0 != (Tj | 0);
                            MB = OI & 1;
                            aE = TG | MB;
                            b: do
                                if (2 == (aE | 0)) {
                                    if (tF = 1 > (Uf | 0)) {
                                        Eq = sF;
                                        break a
                                    }
                                    UG = 0 != ga << 24 >> 24;
                                    NB = Y & 255;
                                    PI = NB + S;
                                    QI = ga ^ 1;
                                    zD = QI & 255;
                                    bE = Sm;
                                    uF = Uy = 1;
                                    tC = es;
                                    cK = vs;
                                    cE = hI;
                                    c: for (;;) {
                                        dE = (Uy | 0) == (Uf | 0);
                                        (RC = UG & dE) ? (iI = cK, DA = bE) : (EA = tC + Bh, dB = bE - Bh, AD = _memchr(EA, Aa, dB), AJ = uC = AD + zD, dK = tC, iG = AJ - dK, iI = uC, DA = iG);
                                        SC = DA - ea;
                                        HE = HEAP32[l >> 2];
                                        jG = HEAP32[m >> 2];
                                        vF = jG + HE;
                                        BD = Math_imul(SC,
                                            li) | 0;
                                        fx = _jtga(a, I, BD, $j, Si);
                                        if (DH = 0 == (fx | 0)) {
                                            y = 0;
                                            b = 425;
                                            break
                                        }
                                        IE = PI - bE;
                                        kG = Math_imul(IE, aj) | 0;
                                        TC = kG + Gh;
                                        VG = gg + TC;
                                        JE = fx + 28;
                                        HEAP32[JE >> 2] = SC;
                                        WG = lG = fx;
                                        JL = HEAP32[WG >> 2];
                                        Ay = CD = lG + JL;
                                        XG = VG;
                                        if (wF = 0 < (SC | 0))
                                            for (eE = 0;;)
                                                if (mG = XG + (eE << 2), xF = HEAP32[mG >> 2], aq ? (KE = xF, yF = vC = eA = KE + gl) : yF = xF, LE = Ay + (eE << 2), HEAP32[LE >> 2] = yF, UC = eE + 1, RI = (UC | 0) < (SC | 0)) eE = UC;
                                                else break;
                                        eB = getFUNCTION_TABLE(s)(a, fx, r);
                                        if (OK = 0 == (eB | 0)) {
                                            y = 0;
                                            b = 425;
                                            break
                                        }
                                        if (nG = 0 == uF << 24 >> 24) DD = cE + 4, wC = HEAP32[cE >> 2] = eB, FA = vF, OB = 0, PB = DD, b = 399;
                                        else {
                                            QB = eB + 24;
                                            fB = HEAP32[QB >>
                                                2];
                                            (zF = 0 == (fB | 0)) ? (oG = eB + 12, fE = HEAP32[oG >> 2], YG = fE & 32, (RB = 0 == (YG | 0)) ? b = 394 : (ME = GA = eB, ED = HEAP32[ME >> 2], ZG = jI = GA + ED, NE = HEAP32[ZG >> 2], HEAP32[cE >> 2] = NE, gE = cE, xC = uF, SB = vF, PK = NE)) : b = 394;
                                            if (394 == b) {
                                                b = 0;
                                                EH = Uy - 1;
                                                OE = HEAP32[tB >> 2];
                                                pG = PE = py + OE;
                                                if (AF = 0 < (EH | 0)) {
                                                    BF = pG;
                                                    for (yC = 0;;) {
                                                        FH = HEAP32[BF >> 2];
                                                        $G = _jtbox(a, FH);
                                                        HEAP32[BF >> 2] = $G;
                                                        if (hE = 0 == ($G | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        aH = BF + 4;
                                                        QE = yC + 1;
                                                        if (RE = (QE | 0) < (EH | 0)) BF = aH, yC = QE;
                                                        else {
                                                            bH = aH;
                                                            break
                                                        }
                                                    }
                                                } else bH = pG;
                                                HEAP32[bH >> 2] = eB;
                                                SI = HEAP32[l >> 2];
                                                eK = HEAP32[m >> 2];
                                                SE = eK + SI;
                                                gE = bH;
                                                xC = 0;
                                                SB =
                                                    SE;
                                                PK = eB
                                            }
                                            CF = gE + 4;
                                            (GH = 0 == (PK | 0)) ? (FD = 0, zC = SB, Fz = xC, HA = CF) : (wC = PK, FA = SB, OB = xC, PB = CF, b = 399)
                                        }
                                        399 == b && (b = 0, _jttraverse(a, wC, 654), oz = wC + 16, fK = HEAP32[oz >> 2], TB = fK + 1, HEAP32[oz >> 2] = TB, FD = wC, zC = FA, Fz = OB, HA = PB);
                                        _jttpop(a, zC);
                                        _jttpush(a, FD);
                                        qG = bE - DA;
                                        iE = Uy + 1;
                                        if (HH = (Uy | 0) < (Uf | 0)) bE = qG, Uy = iE, uF = Fz, cK = tC = iI, cE = HA;
                                        else {
                                            fA = Fz;
                                            break b
                                        }
                                    }
                                    if (425 == b) return STACKTOP = e, y
                                } else
                            if (1 == (aE | 0)) {
                                if (UB = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                IH = 0 != ga << 24 >> 24;
                                cH = Y & 255;
                                jE = cH + S;
                                DF = ga ^ 1;
                                VB = DF & 255;
                                VC = Sm;
                                kE = TE = 1;
                                EF = es;
                                gA = vs;
                                hA = hI;
                                c: for (;;) {
                                    uB = (TE | 0) ==
                                        (Uf | 0);
                                    (UE = IH & uB) ? (WC = gA, gB = VC) : (BJ = EF + Bh, IA = VC - Bh, FF = _memchr(BJ, Aa, IA), rG = XC = FF + VB, GD = EF, sG = rG - GD, WC = XC, gB = sG);
                                    vB = gB - ea;
                                    WB = HEAP32[l >> 2];
                                    lE = HEAP32[m >> 2];
                                    XB = lE + WB;
                                    dH = Math_imul(vB, li) | 0;
                                    GF = _jtga(a, I, dH, $j, Si);
                                    if (gK = 0 == (GF | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    eH = jE - VC;
                                    JH = Math_imul(eH, aj) | 0;
                                    mE = JH + Gh;
                                    VE = gg + mE;
                                    WE = GF + 28;
                                    HEAP32[WE >> 2] = vB;
                                    kI = TI = GF;
                                    lI = HEAP32[kI >> 2];
                                    KH = TI + lI;
                                    By = Math_imul(vB, aj) | 0;
                                    _memcpy(KH, VE, By) | 0;
                                    gx = TE - 1;
                                    ux = (gx | 0) % (Ui | 0) & -1;
                                    HF = bl + (ux << 2);
                                    fH = HEAP32[HF >> 2];
                                    if (mI = 0 == (fH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    YC = tG = fH;
                                    ZC = HEAP32[YC >>
                                        2];
                                    nE = hK = tG + ZC;
                                    LH = JA = HEAP32[nE >> 2];
                                    YB = getFUNCTION_TABLE(LH)(a, GF, fH);
                                    if (hx = 0 == (YB | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (uG = 0 == kE << 24 >> 24) oE = hA + 4, $C = HEAP32[hA >> 2] = YB, IF = XB, UI = 0, AC = oE, b = 379;
                                    else {
                                        MH = YB + 24;
                                        XE = HEAP32[MH >> 2];
                                        (QK = 0 == (XE | 0)) ? (wB = YB + 12, gH = HEAP32[wB >> 2], hB = gH & 32, (YE = 0 == (hB | 0)) ? b = 374 : (ZB = JF = YB, aD = HEAP32[ZB >> 2], VI = KF = JF + aD, iA = HEAP32[VI >> 2], HEAP32[hA >> 2] = iA, bD = hA, iB = kE, jB = XB, KA = iA)) : b = 374;
                                        if (374 == b) {
                                            b = 0;
                                            LF = HEAP32[tB >> 2];
                                            cD = hH = py + LF;
                                            if (iK = 0 < (gx | 0)) {
                                                MF = 0;
                                                for (nI = cD;;) {
                                                    BC = HEAP32[nI >> 2];
                                                    NH = _jtbox(a, BC);
                                                    HEAP32[nI >> 2] =
                                                        NH;
                                                    if (dD = 0 == (NH | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    RK = nI + 4;
                                                    iH = MF + 1;
                                                    if (CJ = (iH | 0) < (gx | 0)) MF = iH, nI = RK;
                                                    else {
                                                        oI = RK;
                                                        break
                                                    }
                                                }
                                            } else oI = cD;
                                            HEAP32[oI >> 2] = YB;
                                            DJ = HEAP32[l >> 2];
                                            RM = HEAP32[m >> 2];
                                            WI = RM + DJ;
                                            bD = oI;
                                            iB = 0;
                                            jB = WI;
                                            KA = YB
                                        }
                                        OH = bD + 4;
                                        (PO = 0 == (KA | 0)) ? (QO = 0, SK = jB, EJ = iB, RO = OH) : ($C = KA, IF = jB, UI = iB, AC = OH, b = 379)
                                    }
                                    379 == b && (b = 0, _jttraverse(a, $C, 654), FJ = $C + 16, TK = HEAP32[FJ >> 2], pI = TK + 1, HEAP32[FJ >> 2] = pI, QO = $C, SK = IF, EJ = UI, RO = AC);
                                    _jttpop(a, SK);
                                    _jttpush(a, QO);
                                    KL = VC - gB;
                                    XI = TE + 1;
                                    if (jK = (TE | 0) < (Uf | 0)) VC = KL, TE = XI, kE = EJ, gA = EF = WC, hA = RO;
                                    else {
                                        fA = EJ;
                                        break b
                                    }
                                }
                                if (425 ==
                                    b) return STACKTOP = e, y
                            } else if (0 == (aE | 0)) {
                                if (PH = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                QH = 0 != ga << 24 >> 24;
                                NF = Y & 255;
                                kK = NF + S;
                                vG = ga ^ 1;
                                RH = vG & 255;
                                $B = Sm;
                                UK = CC = 1;
                                VK = es;
                                LL = vs;
                                jH = hI;
                                c: for (;;) {
                                    SO = (CC | 0) == (Uf | 0);
                                    (ML = QH & SO) ? (wG = LL, xG = $B) : (IN = VK + Bh, JN = $B - Bh, GJ = _memchr(IN, Aa, JN), kH = SH = GJ + RH, NL = VK, YI = kH - NL, wG = SH, xG = YI);
                                    lK = xG - ea;
                                    ZI = HEAP32[l >> 2];
                                    SM = HEAP32[m >> 2];
                                    ZE = SM + ZI;
                                    OL = Math_imul(lK, li) | 0;
                                    TH = _jtga(a, I, OL, $j, Si);
                                    if (PL = 0 == (TH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    qI = kK - $B;
                                    aC = Math_imul(qI, aj) | 0;
                                    KN = aC + Gh;
                                    eD = gg + KN;
                                    QL = TH + 28;
                                    HEAP32[QL >> 2] = lK;
                                    mK = $I = TH;
                                    WK =
                                        HEAP32[mK >> 2];
                                    XK = $I + WK;
                                    OF = Math_imul(lK, aj) | 0;
                                    _memcpy(XK, eD, OF) | 0;
                                    pE = getFUNCTION_TABLE(s)(a, TH, r);
                                    if (PQ = 0 == (pE | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (LN = 0 == UK << 24 >> 24) RL = jH + 4, qE = HEAP32[jH >> 2] = pE, lH = ZE, HJ = 0, aJ = RL, b = 362;
                                    else {
                                        TM = pE + 24;
                                        yG = HEAP32[TM >> 2];
                                        (rI = 0 == (yG | 0)) ? (bJ = pE + 12, cJ = HEAP32[bJ >> 2], nK = cJ & 32, (YK = 0 == (nK | 0)) ? b = 357 : (sI = zG = pE, AG = HEAP32[sI >> 2], MN = dJ = zG + AG, SL = HEAP32[MN >> 2], HEAP32[jH >> 2] = SL, TL = jH, IJ = UK, tI = ZE, JJ = SL)) : b = 357;
                                        if (357 == b) {
                                            b = 0;
                                            UL = CC - 1;
                                            UM = HEAP32[tB >> 2];
                                            eJ = VL = py + UM;
                                            if (BG = 0 < (UL | 0)) {
                                                Hx = 0;
                                                for (mH = eJ;;) {
                                                    uI = HEAP32[mH >>
                                                        2];
                                                    ZK = _jtbox(a, uI);
                                                    HEAP32[mH >> 2] = ZK;
                                                    if (VM = 0 == (ZK | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    WL = mH + 4;
                                                    CG = Hx + 1;
                                                    if (UH = (CG | 0) < (UL | 0)) Hx = CG, mH = WL;
                                                    else {
                                                        NN = WL;
                                                        break
                                                    }
                                                }
                                            } else NN = eJ;
                                            HEAP32[NN >> 2] = pE;
                                            $K = HEAP32[l >> 2];
                                            aL = HEAP32[m >> 2];
                                            WM = aL + $K;
                                            TL = NN;
                                            IJ = 0;
                                            tI = WM;
                                            JJ = pE
                                        }
                                        KJ = TL + 4;
                                        (oK = 0 == (JJ | 0)) ? (VH = 0, DG = tI, LA = IJ, vI = KJ) : (qE = JJ, lH = tI, HJ = IJ, aJ = KJ, b = 362)
                                    }
                                    362 == b && (b = 0, _jttraverse(a, qE, 654), fD = qE + 16, $E = HEAP32[fD >> 2], XL = $E + 1, HEAP32[fD >> 2] = XL, VH = qE, DG = lH, LA = HJ, vI = aJ);
                                    _jttpop(a, DG);
                                    _jttpush(a, VH);
                                    bL = $B - xG;
                                    PF = CC + 1;
                                    if (cL = (CC | 0) < (Uf | 0)) $B = bL, CC = PF, UK =
                                        LA, LL = VK = wG, jH = vI;
                                    else {
                                        fA = LA;
                                        break b
                                    }
                                }
                                if (425 == b) return STACKTOP = e, y
                            } else if (3 == (aE | 0)) {
                                if (wI = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                xI = 0 != ga << 24 >> 24;
                                nH = Y & 255;
                                bC = nH + S;
                                aF = ga ^ 1;
                                LJ = aF & 255;
                                fJ = Sm;
                                pK = QF = 1;
                                TO = es;
                                XM = vs;
                                ON = hI;
                                c: for (;;) {
                                    MJ = (QF | 0) == (Uf | 0);
                                    (dL = xI & MJ) ? (yI = XM, UO = fJ) : (qK = TO + Bh, QQ = fJ - Bh, NJ = _memchr(qK, Aa, QQ), sS = RQ = NJ + LJ, eL = TO, fL = sS - eL, yI = RQ, UO = fL);
                                    rK = UO - ea;
                                    YM = HEAP32[l >> 2];
                                    gL = HEAP32[m >> 2];
                                    gJ = gL + YM;
                                    YL = Math_imul(rK, li) | 0;
                                    hL = _jtga(a, I, YL, $j, Si);
                                    if (tS = 0 == (hL | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    uS = bC - fJ;
                                    sK = Math_imul(uS, aj) | 0;
                                    OJ = sK + Gh;
                                    xB = gg + OJ;
                                    RF = hL + 28;
                                    HEAP32[RF >> 2] = rK;
                                    hJ = oH = hL;
                                    EG = HEAP32[hJ >> 2];
                                    zI = FG = oH + EG;
                                    iJ = xB;
                                    if (iL = 0 < (rK | 0))
                                        for (DC = 0;;)
                                            if (jL = iJ + (DC << 2), tK = HEAP32[jL >> 2], aq ? (kL = tK, SQ = mL = lL = kL + gl) : SQ = tK, PN = zI + (DC << 2), HEAP32[PN >> 2] = SQ, jJ = DC + 1, ZL = (jJ | 0) < (rK | 0)) DC = jJ;
                                            else break;
                                    TQ = QF - 1;
                                    ZM = (TQ | 0) % (Ui | 0) & -1;
                                    rE = bl + (ZM << 2);
                                    pH = HEAP32[rE >> 2];
                                    if (HD = 0 == (pH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    sE = bF = pH;
                                    tE = HEAP32[sE >> 2];
                                    yB = EC = bF + tE;
                                    vS = uE = HEAP32[yB >> 2];
                                    kJ = getFUNCTION_TABLE(vS)(a, hL, pH);
                                    if ($M = 0 == (kJ | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (nL = 0 == pK << 24 >> 24) vE = ON + 4, wE = HEAP32[ON >> 2] =
                                        kJ, $L = gJ, PJ = 0, aN = vE, b = 420;
                                    else {
                                        oL = kJ + 24;
                                        uK = HEAP32[oL >> 2];
                                        (bN = 0 == (uK | 0)) ? (QJ = kJ + 12, SF = HEAP32[QJ >> 2], aM = SF & 32, (QN = 0 == (aM | 0)) ? b = 415 : (bM = CU = kJ, pL = HEAP32[bM >> 2], cM = RN = CU + pL, NP = HEAP32[cM >> 2], HEAP32[ON >> 2] = NP, cN = ON, dM = pK, SN = gJ, qL = NP)) : b = 415;
                                        if (415 == b) {
                                            b = 0;
                                            eM = HEAP32[tB >> 2];
                                            RJ = OP = py + eM;
                                            if (PP = 0 < (TQ | 0)) {
                                                qH = RJ;
                                                for (GG = 0;;) {
                                                    cF = HEAP32[qH >> 2];
                                                    lJ = _jtbox(a, cF);
                                                    HEAP32[qH >> 2] = lJ;
                                                    if (rL = 0 == (lJ | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    wS = qH + 4;
                                                    pz = GG + 1;
                                                    if (UQ = (pz | 0) < (TQ | 0)) qH = wS, GG = pz;
                                                    else {
                                                        SJ = wS;
                                                        break
                                                    }
                                                }
                                            } else SJ = RJ;
                                            HEAP32[SJ >> 2] = kJ;
                                            TN = HEAP32[l >>
                                                2];
                                            UN = HEAP32[m >> 2];
                                            fM = UN + TN;
                                            cN = SJ;
                                            dM = 0;
                                            SN = fM;
                                            qL = kJ
                                        }
                                        Gz = cN + 4;
                                        (TJ = 0 == (qL | 0)) ? (ID = 0, sL = SN, gM = dM, QP = Gz) : (wE = qL, $L = SN, PJ = dM, aN = Gz, b = 420)
                                    }
                                    420 == b && (b = 0, _jttraverse(a, wE, 654), VO = wE + 16, VQ = HEAP32[VO >> 2], hM = VQ + 1, HEAP32[VO >> 2] = hM, ID = wE, sL = $L, gM = PJ, QP = aN);
                                    _jttpop(a, sL);
                                    _jttpush(a, ID);
                                    WQ = fJ - UO;
                                    gD = QF + 1;
                                    if (tL = (QF | 0) < (Uf | 0)) fJ = WQ, QF = gD, pK = gM, XM = TO = yI, ON = QP;
                                    else {
                                        fA = gM;
                                        break b
                                    }
                                }
                                if (425 == b) return STACKTOP = e, y
                            } else {
                                Eq = sF;
                                break a
                            }
                            while (0);
                            if (iM = 0 == fA << 24 >> 24) {
                                RP = _jtope(a, sF);
                                if (mJ = 0 == (RP | 0)) return y = 0, STACKTOP = e, y;
                                Eq = RP
                            } else Eq =
                                sF
                        }
                    while (0);
                    _jttraverse(a, Eq, 654);
                    VN = Eq + 16;
                    SP = HEAP32[VN >> 2];
                    dN = SP + 1;
                    HEAP32[VN >> 2] = dN;
                    _jttpop(a, n);
                    y = uL = _jttpush(a, Eq);
                    STACKTOP = e;
                    return y
                }
            while (0);
            y = WN = _jtcut2sx(a, f, d, c);
            STACKTOP = e;
            return y
        }
    while (0);
    y = _jtrank2ex(a, f, d, c, v, x, 1816);
    STACKTOP = e;
    return y
}
function _jtdebdisp(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    b = c;
    e = c + 8;
    g = c + 16;
    h = c + 24;
    j = HEAP32[f + 32 >> 2];
    i = HEAP8[f + 48];
    l = i << 24 >> 24;
    0 != (j | 0) && (k = a + 4400, 0 == (HEAP32[k >> 2] | 0) && 1 == (i & -3) << 24 >> 24 && (i = HEAP32[a + 4408 >> 2], j = i + HEAP32[i >> 2] + (j << 2), HEAP8[112968] = 124, i = HEAP32[k >> 2], m = 2E3 - i, m = 1 < (m | 0) ? 1 : m, 0 < (m | 0) ? (_memcpy(i + (a + 2396), 112968, m) | 0, m = HEAP32[k >> 2] + m, n = HEAP32[k >> 2] = m) : n = i, i = HEAP32[j >> 2], j = HEAP32[i + 20 >> 2], m = 2E3 - n, m = (m | 0) > (j | 0) ? j : m, 0 < (m | 0) ? (_memcpy(n + (a + 2396), i + HEAP32[i >> 2],
        m) | 0, i = HEAP32[k >> 2] + m, p = HEAP32[k >> 2] = i) : p = n, HEAP8[g] = 10, i = 2E3 - p, m = 1 < (i | 0) ? 1 : i, 0 >= (m | 0) || (_memcpy(p + (a + 2396), g, m) | 0, HEAP32[k >> 2] += m)));
    if (1 == (l | 0)) {
        e = 0 == (f | 0) ? 124 : 0 != (HEAP8[f + 49] | 0) ? 42 : 124;
        HEAP8[112968] = e;
        e = a + 4400;
        g = HEAP32[e >> 2];
        p = 2E3 - g;
        n = 4 < (p | 0) ? 4 : p;
        0 < (n | 0) ? (_memcpy(g + (a + 2396), 112968, n) | 0, p = HEAP32[e >> 2] + n, l = HEAP32[e >> 2] = p) : l = g;
        g = HEAP32[f + 16 >> 2];
        p = g + HEAP32[g >> 2];
        n = HEAP32[f + 28 >> 2] - 1;
        HEAP8[a + 204980] = 0;
        j = HEAP32[g + 20 >> 2];
        if (0 < (j | 0)) {
            for (g = 0;;)
                if ((g | 0) == (n | 0) && (i = HEAP32[e >> 2], m = 2E3 - i, k = 4 < (m | 0) ? 4 : m, 0 >= (k |
                        0) || (_memcpy(i + (a + 2396), 117968, k) | 0, HEAP32[e >> 2] += k)), _jtdisp(a, HEAP32[p + (g << 2) >> 2]), k = g + 1, (k | 0) < (j | 0)) g = k;
                else break;
            d = HEAP32[e >> 2]
        } else d = l;
        n = 2E3 == (d | 0) ? HEAP32[e >> 2] = 1999 : d;
        HEAP8[b] = 10;
        d = 2E3 - n;
        l = 1 < (d | 0) ? 1 : d;
        0 >= (l | 0) || (_memcpy(n + (a + 2396), b, l) | 0, HEAP32[e >> 2] += l)
    } else 2 == (l | 0) ? (g = 0 == (f | 0) ? 124 : 0 != (HEAP8[f + 49] | 0) ? 42 : 124, HEAP8[112968] = g, g = a + 4400, l = HEAP32[g >> 2], e = 2E3 - l, b = 1 < (e | 0) ? 1 : e, 0 < (b | 0) ? (_memcpy(l + (a + 2396), 112968, b) | 0, e = HEAP32[g >> 2] + b, n = HEAP32[g >> 2] = e) : n = l, 15 < (2E3 - n | 0) ? (l = n + (a + 2396), _sprintf(l, 120560, (d = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[d >> 2] = HEAP32[f + 36 >> 2] - 1, d)), STACKTOP = d, e = _strlen(l), l = HEAP32[g >> 2] + e, d = HEAP32[g >> 2] = l) : d = n, n = HEAP32[f + 40 >> 2], -1 < (n | 0) ? (l = HEAP32[a + 205604 >> 2], e = HEAP32[l + HEAP32[l >> 2] + (n << 2) >> 2], l = HEAP32[e + 20 >> 2], b = 2E3 - d, n = (b | 0) > (l | 0) ? l : b, 0 >= (n | 0) ? e = d : (_memcpy(d + (a + 2396), e + HEAP32[e >> 2], n) | 0, e = HEAP32[g >> 2] + n, HEAP32[g >> 2] = e)) : e = d, HEAP8[h] = 10, d = 2E3 - e, n = 1 < (d | 0) ? 1 : d, 0 >= (n | 0) || (_memcpy(e + (a + 2396), h, n) | 0, HEAP32[g >> 2] += n)) : 3 == (l | 0) && (b = 0 == (f | 0) ? 124 : 0 != (HEAP8[f + 49] | 0) ? 42 : 124, HEAP8[112968] =
        b, b = a + 4400, l = HEAP32[b >> 2], n = 2E3 - l, g = 1 < (n | 0) ? 1 : n, 0 < (g | 0) ? (_memcpy(l + (a + 2396), 112968, g) | 0, n = HEAP32[b >> 2] + g, k = HEAP32[b >> 2] = n) : k = l, l = HEAP32[f + 4 >> 2], 0 == (l | 0) ? h = k : (n = HEAP32[l + 20 >> 2], g = 2E3 - k, h = (g | 0) > (n | 0) ? n : g, 0 >= (h | 0) ? h = k : (_memcpy(k + (a + 2396), l + (HEAP32[l >> 2] + 14), h) | 0, g = HEAP32[b >> 2] + h, h = HEAP32[b >> 2] = g)), g = 0 == (HEAP32[f + 12 >> 2] | 0) ? 119104 : 0 != (HEAP32[f + 16 >> 2] | 0) ? 118120 : 119104, 15 < (2E3 - h | 0) ? (l = HEAP32[f + 24 >> 2], 0 == (l | 0) ? l = 0 : (k = HEAP32[HEAP32[f + 28 >> 2] >> 2], f = HEAP32[l + 20 >> 2] - 1, l = HEAPU16[l + HEAP32[l >> 2] + (12 * ((k | 0) < (f | 0) ?
            k : f) & -1) + 8 >> 1]), f = h + (a + 2396), _sprintf(f, g, (d = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[d >> 2] = l, d)), STACKTOP = d, d = _strlen(f), f = HEAP32[b >> 2] + d, d = HEAP32[b >> 2] = f) : d = h, HEAP8[e] = 10, h = 2E3 - d, f = 1 < (h | 0) ? 1 : h, 0 >= (f | 0) || (_memcpy(d + (a + 2396), e, f) | 0, HEAP32[b >> 2] += f));
    STACKTOP = c
}
function _jtdisp(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r;
    d = STACKTOP;
    STACKTOP = STACKTOP + 56 | 0;
    c = d;
    b = d + 8;
    e = d + 16;
    g = d + 24;
    h = d + 32;
    j = d + 40;
    i = d + 48;
    l = f + 12;
    k = HEAP32[l >> 2];
    m = 0 != (k & 838890973 | 0);
    n = m & 1;
    m ? 0 == (HEAP8[a + 204980] | 0) ? p = k : (HEAP8[i] = 32, m = a + 4400, p = HEAP32[m >> 2], q = 2E3 - p, q = 1 < (q | 0) ? 1 : q, 0 >= (q | 0) ? p = k : (_memcpy(p + (a + 2396), i, q) | 0, HEAP32[m >> 2] += q, p = HEAP32[l >> 2])) : p = k;
    if (33554432 == (p | 0)) k = HEAP32[f + 20 >> 2], l = a + 4400, i = HEAP32[l >> 2], m = 2E3 - i, q = (m | 0) > (k | 0) ? k : m, 0 >= (q | 0) || (_memcpy(i + (a + 2396), f + (HEAP32[f >> 2] + 14), q) | 0, HEAP32[l >>
        2] += q);
    else if (1 == (p | 0) | 4 == (p | 0) | 8 == (p | 0) | 16 == (p | 0) | 64 == (p | 0) | 128 == (p | 0)) q = a + 4400, l = HEAP32[q >> 2], i = 2E3 - l, m = _jtthv(a, f, 200 > (i | 0) ? i : 200, l + (a + 2396)), HEAP32[q >> 2] += m;
    else if (134217728 == (p | 0)) HEAP8[c] = 41, m = a + 4400, q = HEAP32[m >> 2], l = 2E3 - q, i = 1 < (l | 0) ? 1 : l, 0 >= (i | 0) || (_memcpy(q + (a + 2396), c, i) | 0, HEAP32[m >> 2] += i);
    else if (32 == (p | 0)) i = 117704 + (0 == (HEAP8[a + 204980] | 0) | 0), m = _strlen(i), c = a + 4400, q = HEAP32[c >> 2], l = 2E3 - q, k = (l | 0) > (m | 0) ? m : l, 0 >= (k | 0) || (_memcpy(q + (a + 2396), i, k) | 0, HEAP32[c >> 2] += k);
    else if (2097152 == (p | 0)) _jtdspell(a,
        HEAP8[f + HEAP32[f >> 2]], f);
    else if (67108864 == (p | 0)) HEAP8[b] = 40, k = a + 4400, c = HEAP32[k >> 2], i = 2E3 - c, q = 1 < (i | 0) ? 1 : i, 0 >= (q | 0) || (_memcpy(c + (a + 2396), b, q) | 0, HEAP32[k >> 2] += q);
    else if (4194304 != (p | 0))
        if (2 == (p | 0))
            if (0 != _jtequ(a, HEAP32[40246], f) << 24 >> 24) p = 117624 + (0 == (HEAP8[a + 204980] | 0) | 0), q = _strlen(p), k = a + 4400, b = HEAP32[k >> 2], c = 2E3 - b, i = (c | 0) > (q | 0) ? q : c, 0 >= (i | 0) || (_memcpy(b + (a + 2396), p, i) | 0, HEAP32[k >> 2] += i);
            else {
                HEAP8[j] = 39;
                i = a + 4400;
                k = HEAP32[i >> 2];
                p = 2E3 - k;
                b = 1 < (p | 0) ? 1 : p;
                0 < (b | 0) ? (_memcpy(k + (a + 2396), j, b) | 0, j = HEAP32[i >> 2] +
                    b, l = HEAP32[i >> 2] = j) : l = k;
                k = f;
                j = HEAP32[f >> 2];
                b = HEAP32[f + 20 >> 2];
                if (0 < (b | 0)) {
                    p = 0;
                    for (c = l;;)
                        if (q = k + (p + j), l = HEAP8[q], HEAP8[e] = l, m = 2E3 - c, m = 1 < (m | 0) ? 1 : m, 0 < (m | 0) && (_memcpy(c + (a + 2396), e, m) | 0, m = HEAP32[i >> 2] + m, c = HEAP32[i >> 2] = m, l = HEAP8[q]), 39 == l << 24 >> 24 && (HEAP8[g] = 39, l = 2E3 - c, q = 1 < (l | 0) ? 1 : l, 0 >= (q | 0) || (_memcpy(c + (a + 2396), g, q) | 0, l = HEAP32[i >> 2] + q, c = HEAP32[i >> 2] = l)), l = p + 1, (l | 0) < (b | 0)) p = l;
                        else {
                            r = c;
                            break
                        }
                } else r = l;
                HEAP8[h] = 39;
                l = 2E3 - r;
                c = 1 < (l | 0) ? 1 : l;
                0 >= (c | 0) || (_memcpy(r + (a + 2396), h, c) | 0, HEAP32[i >> 2] += c)
            } else _jtdspell(a,
        HEAP8[f + (HEAP32[f >> 2] + 40)], f);
    HEAP8[a + 204980] = n;
    STACKTOP = d
}
function _jtdrop(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p;
    c = _jtvib(a, f);
    if (0 == (c | 0) | 0 == (d | 0)) return 0;
    f = HEAP32[c + 24 >> 2];
    b = a + 205336;
    e = HEAP32[b >> 2];
    0 == (e | 0) ? (h = g = HEAP32[d + 24 >> 2], j = f, i = g) : (h = HEAP32[e + 4 >> 2], j = HEAP32[e >> 2], i = HEAP32[d + 24 >> 2]);
    e = i - h;
    HEAP32[b >> 2] = 0;
    b = (f | 0) != (j | 0);
    if (b | 1 < (j | 0)) return a = _jtrank2ex(a, c, d, 0, b ? j : 1, h, 656);
    j = HEAP32[c + 20 >> 2];
    b = c + HEAP32[c >> 2];
    c = 0 != (h | 0);
    if (c & (j | 0) > (h | 0)) return h = HEAP32[a + 4408 >> 2], f = HEAP32[h + (HEAP32[h >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), 0;
    do
        if (c) {
            f =
                _jtga(a, 4, i, 1, 0);
            if (0 == (f | 0)) return a = 0;
            g = h = f;
            _memcpy(h + HEAP32[g >> 2], d + 28, i << 2) | 0;
            l = h + HEAP32[g >> 2];
            if (0 < (j | 0))
                for (k = 0;;)
                    if (g = HEAP32[b + (k << 2) >> 2], h = l + (k + e << 2), p = HEAP32[h >> 2], g = (g | 0) < (-p | 0) ? 0 : 0 > (g | 0) ? p + g : (g | 0) < (p | 0) ? g - p : 0, HEAP32[h >> 2] = g, p = k + 1, (p | 0) < (j | 0)) k = p;
                    else {
                        m = d;
                        n = f;
                        break
                    } else m = d, n = f
        } else {
            f = _jtga(a, 4, j + i, 1, 0);
            if (0 == (f | 0)) return a = 0;
            p = l = f + HEAP32[f >> 2];
            _memcpy(l, d + 28, e << 2) | 0;
            if (0 < (j | 0))
                for (l = 0;;)
                    if (HEAP32[p + (l + e << 2) >> 2] = 0 == (HEAP32[b + (l << 2) >> 2] | 0), g = l + 1, (g | 0) < (j | 0)) l = g;
                    else break;
            l = _jtreshape(a,
                f, d);
            if (0 == (l | 0)) return a = 0;
            m = l;
            n = f
        }
    while (0);
    return a = _jttk(a, n, m)
}
function _jtdyad(a, f, d, c) {
    var b, e, g;
    b = HEAP32[c + (f + 1 << 2) >> 2];
    e = a + 205596;
    if (0 == (b | 0)) return 0;
    g = HEAP32[c + (d << 2) >> 2];
    d = HEAP32[c + (f << 2) >> 2];
    f = HEAP32[e >> 2];
    c = HEAP32[b + (HEAP32[b >> 2] + 4) >> 2];
    HEAP32[e >> 2] = b;
    a = getFUNCTION_TABLE(c)(a, d, g, b);
    HEAP32[e >> 2] = f;
    return a
}

function _jtreitem(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    b = HEAP32[f + 24 >> 2];
    e = a + 205336;
    g = HEAP32[e >> 2];
    0 == (g | 0) ? (h = 1 < (b | 0), i = j = HEAP32[d + 24 >> 2], l = b, g = (k = h) ? 1 : b, m = j) : (j = HEAP32[g >> 2], h = 1 < (j | 0), i = HEAP32[g + 4 >> 2], l = j, g = (k = h) ? 1 : j, m = HEAP32[d + 24 >> 2]);
    j = i - 1;
    HEAP32[e >> 2] = 0;
    if (k | (l | 0) < (b | 0)) return a = _jtrank2ex(a, f, d, 0, g, i, 1546), STACKTOP = c, a;
    if (2 > (i | 0)) j = f, k = g;
    else {
        if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
            HEAP32[e >> 2] = 0;
            k = _jtccvt(a, 4, f, c);
            HEAP32[e >> 2] = 0;
            if (0 ==
                k << 24 >> 24) return k = HEAP32[a + 4408 >> 2], h = HEAP32[k + (HEAP32[k >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
            h = HEAP32[c >> 2];
            if (0 == (h | 0)) return STACKTOP = c, 0;
            f = h
        }
        h = HEAP32[f + 20 >> 2];
        k = _jtga(a, 4, h + j, 1, 0);
        if (0 == (k | 0)) return STACKTOP = c, 0;
        g = k + HEAP32[k >> 2];
        _memcpy(g, f + HEAP32[f >> 2], h << 2) | 0;
        _memcpy(g + (h << 2), d + 28 + (m + 1 - i << 2), j << 2) | 0;
        j = k;
        k = 1
    }
    a = (b | 0) == (l | 0) & (m | 0) == (i | 0) ? _jtreshape(a, j, d) : _jtirs2(a, j, d, 0, k, i, 160);
    STACKTOP = c;
    return a
}

function _jtrepidx(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    g = e;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = e, 0;
    if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
        h = a + 205336;
        j = HEAP32[h >> 2];
        HEAP32[h >> 2] = 0;
        i = _jtccvt(a, 4, f, g);
        HEAP32[h >> 2] = j;
        if (0 == i << 24 >> 24) return i = HEAP32[a + 4408 >> 2], j = HEAP32[i + (HEAP32[i >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), STACKTOP = e, 0;
        j = HEAP32[g >> 2];
        if (0 == (j | 0)) return STACKTOP = e, 0;
        l = j
    } else l = f;
    f = l + HEAP32[l >> 2];
    g = HEAP32[l + 28 >> 2];
    l = 0 < (g | 0);
    a: do
        if (l) {
            for (i = j = 0;;) {
                h =
                    HEAP32[f + (j << 2) >> 2];
                if (-1 >= (h | 0)) {
                    b = 9;
                    break
                }
                k = h + i;
                h = j + 1;
                if (-1 >= (k | 0)) {
                    b = 11;
                    break
                }
                if ((h | 0) < (g | 0)) j = h, i = k;
                else {
                    m = k;
                    break a
                }
            }
            if (9 == b) return i = HEAP32[a + 4408 >> 2], j = HEAP32[i + (HEAP32[i >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), a = 0, STACKTOP = e, a;
            if (11 == b) return j = HEAP32[a + 4408 >> 2], i = HEAP32[j + (HEAP32[j >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), a = 0, STACKTOP = e, a
        } else m = 0;
    while (0);
    b = _jtga(a, 4, m, 1, 0);
    if (0 == (b | 0)) return STACKTOP = e, 0;
    if (l) {
        l = b + HEAP32[b >> 2];
        for (m = 0;;) {
            i = HEAP32[f +
                (m << 2) >> 2];
            if (0 < (i | 0)) {
                j = l;
                for (k = 0;;)
                    if (HEAP32[j >> 2] = m, h = k + 1, (h | 0) < (i | 0)) j += 4, k = h;
                    else break;
                h = l + (i << 2)
            } else h = l;
            k = m + 1;
            if ((k | 0) < (g | 0)) l = h, m = k;
            else break
        }
    }
    a = _jtirs2(a, b, d, 0, 1, c, 2062);
    STACKTOP = e;
    return a
}

function _jtlogar1(a, f) {
    return _jtva1(a, f, -112)
}

function _logD(a, f, d, c) {
    var b, e, g;
    b = 0;
    if (0 < (f | 0)) {
        e = 0;
        for (g = d;;) {
            d = HEAPF64[c >> 3];
            if (0 > d) break;
            HEAPF64[g >> 3] = Math_log(d);
            d = e + 1;
            if ((d | 0) < (f | 0)) c += 8, e = d, g += 8;
            else {
                b = 5;
                break
            }
        }
        5 != b && (HEAP8[a + 204545] = 51)
    }
}

function _minDI(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (a = HEAPF64[j >> 3], l = HEAP32[g >> 2] | 0, HEAPF64[i >> 3] = a < l ? a : l, l = h + 1, (l | 0) < (d | 0)) h = l, g += 4, j += 8, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (l = b;;) {
                a = j + 4;
                if (f) {
                    b = HEAP32[j >> 2] | 0;
                    i = h + (c << 3);
                    k = 0;
                    for (m = l;;)
                        if (e = HEAPF64[h >> 3], HEAPF64[m >> 3] = e < b ? e : b, e = k + 1, (e | 0) < (c | 0)) h += 8, k = e, m += 8;
                        else break;
                    n = i;
                    k = l + (c << 3)
                } else n = h, k = l;
                m = g + 1;
                if ((m | 0) < (d | 0)) j = a, g = m, h = n, l = k;
                else break
            }
        }
    } else if (i) {
        i = 0 <
            (c | 0);
        k = 0;
        l = g;
        g = e;
        for (e = b;;) {
            b = g + 8;
            n = HEAPF64[g >> 3];
            if (i) {
                h = l + (c << 2);
                g = 0;
                j = l;
                for (f = e;;)
                    if (m = HEAP32[j >> 2] | 0, HEAPF64[f >> 3] = n < m ? n : m, m = g + 1, (m | 0) < (c | 0)) g = m, j += 4, f += 8;
                    else break;
                l = h;
                a = e + (c << 3)
            } else a = e;
            f = k + 1;
            if ((f | 0) < (d | 0)) k = f, g = b, e = a;
            else break
        }
    }
}

function _jtmaximum(a, f, d) {
    return _jtva2(a, f, d, -124)
}

function _jtenqueue(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    e = d;
    g = HEAP32[d >> 2];
    h = e + g;
    j = f;
    i = HEAP32[f >> 2];
    f = HEAP32[j + i >> 2];
    l = f >> 31 ^ f;
    f = _jtga(a, 32, l, 1, 0);
    if (0 == (f | 0)) return 0;
    k = f;
    m = HEAP32[f >> 2];
    n = k + m;
    if (0 >= (l | 0)) return f;
    p = a + 204545;
    q = i + (j + 4);
    j = 0;
    i = n;
    a: for (;;) {
        r = HEAP32[q >> 2] + g;
        s = e + r;
        t = q + 8;
        u = HEAP32[q + 4 >> 2];
        w = HEAP8[s];
        q = HEAP8[113216 + (w & 255)];
        do
            if (1 < (u | 0)) {
                v = HEAP8[e + (u - 1 + r)];
                if (5 != q << 24 >> 24 & 46 == v << 24 >> 24) v = 1;
                else if (x = 58 ==
                    v << 24 >> 24) v = x & 1;
                else {
                    y = 0;
                    z = w;
                    break
                }
                y = v;
                z = _spellin(u, s)
            } else y = 0, z = w;
        while (0); -
        1 < w << 24 >> 24 ? (x = HEAP32[123192 + ((z & 255) << 2) >> 2], 0 == (x | 0) ? c = 12 : HEAP32[i >> 2] = x) : c = 12;
        b: do
            if (12 == c)
                if (c = 0, -24 == z << 24 >> 24) {
                    w = _jtconnum(a, u - 1, s);
                    if (0 != (HEAP8[p] | 0)) {
                        c = 15;
                        break a
                    }
                    x = _jtga(a, 262144, 1, 0, 0);
                    if (0 == (x | 0)) {
                        c = 15;
                        break a
                    }
                    v = x;
                    A = HEAP32[x >> 2];
                    HEAP32[v + A >> 2] = 1972;
                    HEAP32[A + (v + 4) >> 2] = 1970;
                    HEAP32[A + (v + 8) >> 2] = 0;
                    HEAP32[A + (v + 12) >> 2] = 0;
                    HEAP32[A + (v + 16) >> 2] = w;
                    HEAP32[A + (v + 20) >> 2] = 0;
                    HEAP32[A + (v + 24) >> 2] = 2147483647;
                    HEAP32[A + (v + 28) >> 2] =
                        2147483647;
                    HEAP32[A + (v + 32) >> 2] = 2147483647;
                    HEAP32[A + (v + 36) >> 2] = 0;
                    HEAP8[A + (v + 40)] = -24;
                    HEAP32[i >> 2] = x
                } else
        if (x = 0 == y << 24 >> 24 ? q << 24 >> 24 : 0, 8 == (x | 0)) {
            v = u - 2;
            c: do
                if (0 < (v | 0)) {
                    A = 0;
                    w = s;
                    for (x = D = 0;;)
                        if (w += 1, B = 39 == (HEAP8[w] | 0), G = 0 == A << 24 >> 24, C = (B & G & 1 ^ 1) + D, F = x + 1, (F | 0) < (v | 0)) A = B ? G & 1 : 0, D = C, x = F;
                        else break;
                    do
                        if (1 == (C | 0)) {
                            if (x = HEAP32[155592 + (HEAPU8[r + (e + 1)] << 2) >> 2], 0 != (x | 0)) {
                                HEAP32[i >> 2] = x;
                                break b
                            }
                        } else if (0 == (C | 0)) {
                        c = 23;
                        break c
                    } while (0);
                    x = _jtga(a, 2, C, 1 != (C | 0) | 0, 0);
                    if (0 == (x | 0)) {
                        c = 27;
                        break a
                    }
                    D = 0;
                    w = s;
                    A = x + HEAP32[x >> 2];
                    for (F = 0;;)
                        if (w += 1, G = HEAP8[w], B = 39 == G << 24 >> 24, D = 0 == D << 24 >> 24, B & D || (HEAP8[A] = G, A += 1), G = F + 1, (G | 0) < (v | 0)) D = B ? D & 1 : 0, F = G;
                        else {
                            E = x;
                            break
                        }
                } else c = 23;
            while (0);
            23 == c && (c = 0, E = HEAP32[40244]);
            HEAP32[i >> 2] = E;
            if (0 == (E | 0)) {
                b = 0;
                c = 132;
                break a
            }
        } else if (5 == (x | 0)) {
            if (v = _jtconnum(a, u, s), HEAP32[i >> 2] = v, 0 == (v | 0)) {
                b = 0;
                c = 132;
                break a
            }
        } else if (2 == (x | 0)) {
            v = 0 == _jtvnm(a, u, s) << 24 >> 24;
            J = _jtnfs(a, u, s);
            if (v) {
                c = 34;
                break a
            }
            HEAP32[i >> 2] = J;
            if (0 == (J | 0)) {
                b = 0;
                c = 132;
                break a
            }
        } else {
            c = 18;
            break a
        }
        while (0);
        u = j + 1;
        if ((u | 0) < (l | 0)) q = t, j = u, i += 4;
        else {
            c =
                37;
            break
        }
    }
    if (15 == c) return HEAP32[i >> 2] = 0;
    if (18 == c) return _jtjsignal3(a, 16, d, s - h), 0;
    if (27 == c) return HEAP32[i >> 2] = 0;
    if (34 == c) return HEAP32[a + 1168 >> 2] = J, J = HEAP32[a + 4408 >> 2], i = HEAP32[J + (HEAP32[J >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), 0;
    if (37 == c) {
        a: do
            if (5 < (l | 0) && 0 != (HEAP32[HEAP32[m + (k + 4) >> 2] + 12 >> 2] & 2097152 | 0) && (i = HEAP32[n >> 2], 0 != (HEAP32[i + 12 >> 2] & 33554432 | 0) && (J = HEAP32[n + (l - 1 << 2) >> 2], 0 != (HEAP32[J + 12 >> 2] & 33554432 | 0) && (h = HEAP32[i + 20 >> 2], (h | 0) == (HEAP32[J + 20 >> 2] | 0))))) {
                if (0 != (h | 0)) {
                    s = h;
                    h = i + (HEAP32[i >> 2] + 14);
                    for (i = J + (HEAP32[J >> 2] + 14);;) {
                        if ((HEAP8[h] | 0) != (HEAP8[i] | 0)) break a;
                        J = s - 1;
                        if (0 == (J | 0)) break;
                        else s = J, h += 1, i += 1
                    }
                }
                i = l - 2;
                h = HEAP32[n + (i << 2) >> 2];
                if (0 == (h | 0)) throw "fault on read from 12";
                s = HEAP32[h + 12 >> 2];
                0 == (s & 1835008 | 0) ? (L = s, c = 50) : (t = 125 == (HEAP8[h + (HEAP32[h >> 2] + 40)] | 0)) ? I = t & 1 : (L = s, c = 50);
                if (50 == c) {
                    if (0 == (L & 134217728 | 0)) break;
                    h = HEAP32[n + (l - 3 << 2) >> 2];
                    if (0 == (h | 0)) break;
                    if (0 == (HEAP32[h + 12 >> 2] & 1835008 | 0)) break;
                    if (125 == (HEAP8[h + (HEAP32[h >> 2] + 40)] | 0)) I = 0;
                    else break
                }
                b: do
                    if (0 < (i | 0)) {
                        s = h = 0;
                        for (t = 2;;) {
                            J = t + 1;
                            d = HEAP32[HEAP32[n + (t << 2) >> 2] + 12 >> 2];
                            c = 0 == (d & 67108864 | 0) ? (d << 4 >> 31) + s : s + 1;
                            d = h + 1;
                            if (0 == (c | 0)) {
                                H = J;
                                K = 0;
                                break b
                            }
                            if ((d | 0) < (i | 0)) h = d, s = c, t = J;
                            else {
                                H = J;
                                K = c;
                                break
                            }
                        }
                    } else H = 2, K = 0;
                while (0);
                t = l - H;
                b: do
                    if (0 < (t | 0)) {
                        h = s = 0;
                        for (x = H;;) {
                            J = x + 1;
                            d = HEAP32[HEAP32[n + (x << 2) >> 2] + 12 >> 2];
                            e = 0 == (d & 67108864 | 0) ? (d << 4 >> 31) + s : s + 1;
                            d = h + 1;
                            if (0 == (e | 0)) {
                                N = J;
                                S = 0;
                                break b
                            }
                            if ((d | 0) < (t | 0)) s = e, h = d, x = J;
                            else {
                                N = J;
                                S = e;
                                break
                            }
                        }
                    } else N = H, S = 0;
                while (0);
                if (0 != (S | K | 0) | (N | 0) < (i | 0)) return b = f;
                HEAP32[n + (l - 3 + I << 2) >> 2] = HEAP32[31031];
                return b =
                    f
            }while (0);
        if (4 >= (l | 0)) return f;I = m + (k + 4);N = 0 == (HEAP32[HEAP32[I >> 2] + 12 >> 2] & 2097152 | 0);a: do
            if (!N && (K = HEAP32[n >> 2], 0 != (HEAP32[K + 12 >> 2] & 33554432 | 0) && (S = HEAP32[m + (k + 8) >> 2], 0 != (HEAP32[S + 12 >> 2] & 33554432 | 0) && (H = HEAP32[K + 20 >> 2], (H | 0) == (HEAP32[S + 20 >> 2] | 0))))) {
                if (0 != (H | 0)) {
                    e = H;
                    H = K + (HEAP32[K >> 2] + 14);
                    for (K = S + (HEAP32[S >> 2] + 14);;) {
                        if ((HEAP8[H] | 0) != (HEAP8[K] | 0)) break a;
                        S = e - 1;
                        if (0 == (S | 0)) break;
                        else e = S, H += 1, K += 1
                    }
                }
                K = m + (k + 12);
                H = HEAP32[K >> 2];
                b: do
                    if (0 != (H | 0) && 0 != (HEAP32[H + 12 >> 2] & 1835008 | 0) && 44 == (HEAP8[H + (HEAP32[H >>
                            2] + 40)] | 0) && (e = HEAP32[m + (k + 16) >> 2], i = HEAP32[e + 12 >> 2], 0 == (i & 1572864 | 0))) {
                        c: do
                            if (0 != (i & 33554432 | 0)) {
                                do
                                    if (0 != (e | 0))
                                        if (S = _jtsyrd(a, e, 0), 0 == (S | 0)) HEAP32[a + 1168 >> 2] = e, c = HEAP32[a + 4408 >> 2], L = HEAP32[c + (HEAP32[c >> 2] + 84) >> 2], _jtjsigstr(a, 21, HEAP32[L + 20 >> 2], L + HEAP32[L >> 2]);
                                        else {
                                            L = HEAP32[S + 4 >> 2];
                                            HEAP8[p] = 0;
                                            HEAP32[a + 4400 >> 2] = 0;
                                            if (0 == (L | 0)) break c;
                                            if (0 == (HEAP32[L + 12 >> 2] & 1572864 | 0)) break c;
                                            else break b
                                        }
                                while (0);
                                HEAP8[p] = 0;
                                HEAP32[a + 4400 >> 2] = 0
                            }while (0);HEAP32[K >> 2] = HEAP32[31038];
                        return b = f
                    }
                while (0);
                if (6 >= (l | 0) ||
                    0 != (HEAP32[HEAP32[K >> 2] + 12 >> 2] & 1835008 | 0)) return b = f;
                H = l - 3;
                b: do {
                    if (0 < (H | 0)) {
                        e = 3;
                        for (L = i = 0;;) {
                            S = e + 1;
                            c = HEAP32[HEAP32[n + (e << 2) >> 2] + 12 >> 2];
                            g = 0 == (c & 67108864 | 0) ? (c << 4 >> 31) + i : i + 1;
                            c = L + 1;
                            if (0 == (g | 0)) {
                                r = S;
                                break b
                            }
                            if ((c | 0) < (H | 0)) e = S, i = g, L = c;
                            else {
                                b = f;
                                break
                            }
                        }
                        return b
                    }
                    r = 3
                } while (0);
                if ((r | 0) >= (l - 2 | 0)) return b = f;
                H = n + (r << 2);
                K = HEAP32[H >> 2];
                if (0 == (K | 0) || 0 == (HEAP32[K + 12 >> 2] & 1835008 | 0) || 125 != (HEAP8[K + (HEAP32[K >> 2] + 40)] | 0) || (HEAP32[n + (r + 1 << 2) >> 2] | 0) != (HEAP32[30924] | 0)) return b = f;
                HEAP32[H >> 2] = HEAP32[31031];
                return b = f
            }while (0);
        if (6 >= (l | 0) || 0 == (HEAP32[HEAP32[n >> 2] + 12 >> 2] & 33554432 | 0) | N) return f;N = m + (k + 8);
        if (0 == (HEAP32[HEAP32[N >> 2] + 12 >> 2] & 33554432 | 0)) return f;r = HEAP32[m + (k + 12) >> 2];
        if (0 == (r | 0) || 0 == (HEAP32[r + 12 >> 2] & 1835008 | 0) || 125 != (HEAP8[r + (HEAP32[r >> 2] + 40)] | 0)) return f;r = HEAP32[n + (l - 2 << 2) >> 2];
        if (0 == (r | 0) || 0 == (HEAP32[r + 12 >> 2] & 1835008 | 0) || -99 != (HEAP8[r + (HEAP32[r >> 2] + 40)] | 0)) return f;r = l - 3;l = (r | 0) / 2 & -1;k = 1 < (r | 0);a: do
            if (k) {
                r = 4;
                for (m = 0;;) {
                    if (0 == (HEAP32[HEAP32[n + (r << 2) >> 2] + 12 >> 2] & 33554432 | 0)) {
                        b = f;
                        break
                    }
                    g = m + 1;
                    if ((g | 0) < (l | 0)) r +=
                        2, m = g;
                    else break a
                }
                return b
            }while (0);m = l - 2;a: do
            if (0 < (m | 0)) {
                r = 5;
                for (g = 0;;) {
                    p = HEAP32[n + (r << 2) >> 2];
                    if (0 == (p | 0)) {
                        b = f;
                        c = 132;
                        break
                    }
                    if (0 == (HEAP32[p + 12 >> 2] & 1835008 | 0)) {
                        b = f;
                        c = 132;
                        break
                    }
                    if (44 != (HEAP8[p + (HEAP32[p >> 2] + 40)] | 0)) {
                        b = f;
                        c = 132;
                        break
                    }
                    p = g + 1;
                    if ((p | 0) < (m | 0)) r += 2, g = p;
                    else break a
                }
                if (132 == c) return b
            }while (0);m = _jtga(a, 32, 4, 1, 0);
        if (0 == (m | 0)) return 0;g = m;r = HEAP32[m >> 2];p = g + r;H = _jtga(a, 32, l + 3, 1, 0);
        if (0 == (H | 0)) return 0;K = H + HEAP32[H >> 2];L = HEAP32[n >> 2];i = HEAP32[L + 20 >> 2];e = L + (HEAP32[L >> 2] + 14);
        if (k) {
            k = 0 == (i | 0);
            L = -1;
            c = 4;
            for (S = 0;;) {
                t = HEAP32[n + (c << 2) >> 2];
                HEAP32[K + (S << 2) >> 2] = t;
                x = c + 2;
                h = 0 == (HEAP32[t + 20 >> 2] | 0);
                a: do
                    if (h | k) T = h ? L : S;
                    else {
                        s = i;
                        J = e;
                        for (d = t + (HEAP32[t >> 2] + 14);;) {
                            if ((HEAP8[J] | 0) != (HEAP8[d] | 0)) {
                                T = L;
                                break a
                            }
                            j = s - 1;
                            if (0 == (j | 0)) {
                                T = S;
                                break
                            } else s = j, J += 1, d += 1
                        }
                    }
                while (0);
                t = S + 1;
                if ((t | 0) < (l | 0)) L = T, c = x, S = t;
                else {
                    V = T;
                    break
                }
            }
        } else V = -1;HEAP32[K + (l << 2) >> 2] = HEAP32[N >> 2];N = _jtga(a, 4, 1, 0, 0);0 == (N | 0) ? b = HEAP32[K + (l + 1 << 2) >> 2] = 0 : (HEAP32[N + HEAP32[N >> 2] >> 2] = V, HEAP32[K + (l + 1 << 2) >> 2] = N, HEAP32[K + (l + 2 << 2) >> 2] = f, HEAP32[p >> 2] = HEAP32[n >>
            2], HEAP32[r + (g + 4) >> 2] = HEAP32[I >> 2], HEAP32[r + (g + 8) >> 2] = HEAP32[31032], HEAP32[r + (g + 12) >> 2] = H, b = m);
        return b
    }
    if (132 == c) return b
}
function _jteps(a, f, d) {
    var c, b, e, g, h, j, i;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    b = a + 205336;
    e = HEAP32[b >> 2];
    g = 0 == (e | 0);
    h = d + 24;
    j = HEAP32[(g ? h : e + 4) >> 2];
    i = c;
    HEAP32[i >> 2] = j;
    e = HEAP32[(g ? f + 24 : e) >> 2];
    HEAP32[c + 4 >> 2] = e;
    HEAP32[b >> 2] = 0;
    if (0 == (HEAP32[d + 12 >> 2] + HEAP32[f + 12 >> 2] & 64512 | 0)) return HEAP32[b >> 2] = i, a = _jtindexofsub(a, 6, d, f), STACKTOP = c, a;
    i = _jtirs2(a, d, f, 0, j, e, 1316);
    f = 0 == (j | 0) ? 1 : HEAP32[d + 28 + (HEAP32[h >> 2] - j << 2) >> 2];
    j = _jtga(a, 4, 1, 0, 0);
    0 == (j | 0) ? j = 0 : HEAP32[j + HEAP32[j >> 2] >> 2] = f;
    a = _jtva2(a, i, j, 60);
    STACKTOP = c;
    return a
}
function _jteq(a, f, d) {
    return _jtva2(a, f, d, 61)
}
function _jtequ(a, f, d) {
    var c, b;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    if ((f | 0) == (d | 0)) return STACKTOP = c, 1;
    if (0 != ((HEAP32[d + 12 >> 2] | HEAP32[f + 12 >> 2]) & 64512 | 0) && 0 != (HEAP32[f + 24 >> 2] | 0) && 0 != (HEAP32[d + 24 >> 2] | 0)) {
        b = _jtmatchs(a, f, d);
        if (0 == (b | 0)) return STACKTOP = c, 0;
        a = HEAP8[b + HEAP32[b >> 2]];
        STACKTOP = c;
        return a
    }
    b = _level(f);
    if ((b | 0) != (_level(d) | 0)) return STACKTOP = c, 0;
    a = 0 != _jtmatchsub(a, 0, 0, 1, 1, f, d, c, 0, 1) << 24 >> 24 | 0;
    STACKTOP = c;
    return a
}

function _jtmatth1(a, f) {
    return _jtmat(a, _jtthorn1(a, f))
}

function _scanexp(a) {
    var f, d, c, b, e, g, h, j, i, l, k, m, n;
    f = a + 4;
    d = HEAP32[f >> 2];
    c = a + 100;
    d >>> 0 < HEAP32[c >> 2] >>> 0 ? (HEAP32[f >> 2] = d + 1, b = HEAPU8[d]) : b = ___shgetc(a);
    45 == (b | 0) | 43 == (b | 0) ? (d = 45 == (b | 0) | 0, e = HEAP32[f >> 2], e >>> 0 < HEAP32[c >> 2] >>> 0 ? (HEAP32[f >> 2] = e + 1, g = HEAPU8[e]) : g = ___shgetc(a), 10 > g - 48 >>> 0 || 0 != (HEAP32[c >> 2] | 0) && (HEAP32[f >> 2] -= 1), h = d, b = g) : h = 0;
    if (9 < b - 48 >>> 0) {
        if (0 == (HEAP32[c >> 2] | 0)) return tempRet0 = -2147483648, 0;
        HEAP32[f >> 2] -= 1;
        return tempRet0 = -2147483648, 0
    }
    for (e = 0;;) {
        j = b - 48 + e;
        b = HEAP32[f >> 2];
        b >>> 0 < HEAP32[c >> 2] >>>
            0 ? (HEAP32[f >> 2] = b + 1, i = HEAPU8[b]) : i = ___shgetc(a);
        l = 10 > i - 48 >>> 0;
        if (!(l & 214748364 > (j | 0))) break;
        b = i;
        e = 10 * j & -1
    }
    e = j;
    b = 0 > (j | 0) | 0 ? -1 : 0;
    if (l) {
        l = i;
        j = b;
        for (b = e;;)
            if (b = ___muldi3(b, j, 10, 0), g = tempRet0, d = _i64Add(l, 0 > (l | 0) | 0 ? -1 : 0, -48, -1), e = _i64Add(d, tempRet0, b, g), g = tempRet0, b = HEAP32[f >> 2], b >>> 0 < HEAP32[c >> 2] >>> 0 ? (HEAP32[f >> 2] = b + 1, j = HEAPU8[b]) : j = ___shgetc(a), b = 21474836, 10 > j - 48 >>> 0 & ((g | 0) < (b | 0) | (g | 0) == (b | 0) & 2061584302 > e >>> 0)) l = j, j = g, b = e;
            else {
                k = j;
                m = g;
                n = e;
                break
            }
    } else k = i, m = b, n = e;
    if (10 > k - 48 >>> 0)
        for (; !(k = HEAP32[f >> 2], k >>>
                0 < HEAP32[c >> 2] >>> 0 ? (HEAP32[f >> 2] = k + 1, k = HEAPU8[k]) : k = ___shgetc(a), 10 <= k - 48 >>> 0););
    0 != (HEAP32[c >> 2] | 0) && (HEAP32[f >> 2] -= 1);
    f = 0 != (h | 0);
    h = _i64Subtract(0, 0, n, m);
    a = f ? tempRet0 : m;
    return tempRet0 = a, f ? h : n
}

function _jtreduce(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs, ss,
        cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu, Qr,
        iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz, HC,
        ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 288 | 0;
    e = b + 8;
    g = b + 16;
    h = b + 280;
    if (0 == (f |
            0)) return j = 0, STACKTOP = b, j;
    i = HEAP32[f + 24 >> 2];
    l = a + 205336;
    k = HEAP32[l >> 2];
    0 == (k | 0) ? m = i : (n = k + 4, m = p = HEAP32[n >> 2]);
    q = i - m;
    r = HEAP32[f + 20 >> 2];
    s = f + 28;
    0 == (m | 0) ? t = 1 : (u = f + 28 + (q << 2), t = w = HEAP32[u >> 2]);
    v = f + 12;
    x = HEAP32[v >> 2];
    if (0 != (x & 64512 | 0)) return j = y = _jtreducesp(a, f, d), STACKTOP = b, j;
    z = 0 != (r | 0) ? x : 1;
    A = HEAP32[d + (HEAP32[d >> 2] + 8) >> 2];
    D = HEAP32[A >> 2];
    B = HEAP8[A + (D + 40)]; - 67 == B << 24 >> 24 ? (G = D + 8, C = A + G, F = HEAP32[C >> 2], E = F + 12, J = HEAP32[E >> 2], L = J & 4, (I = 0 == (L | 0)) ? H = -67 : (K = F + 24, N = HEAP32[K >> 2], (S = 0 == (N | 0)) ? (T = HEAP32[F >> 2], V = F + T, Q = HEAP32[V >>
        2], P = Q - 16, M = 16 > P >>> 0, R = Q & 255, H = O = M ? R : -67) : H = -67)) : H = B;
    aa = 0 == HEAP8[(H & 255) + 56] << 24 >> 24 ? 0 : H;
    a: do
        if (2 == (t | 0)) {
            Z = g;
            ba = $ = f;
            ka = HEAP32[ba >> 2];
            ha = ea = $ + ka;
            da = 0 < (q | 0);
            do
                if (da) {
                    ga = 1;
                    for (U = 0;;)
                        if (ca = f + 28 + (U << 2), X = HEAP32[ca >> 2], Y = X | 0, ja = ga * Y, fa = U + 1, ia = (fa | 0) < (q | 0)) ga = ja, U = fa;
                        else break;
                        (ra = 2147483647 < ja) ? (ta = a + 4408, Ba = za = wa = HEAP32[ta >> 2], ua = HEAP32[Ba >> 2], ya = ua + 40, oa = xa = za + ya, pa = HEAP32[oa >> 2], la = pa + 20, qa = HEAP32[la >> 2], Aa = Da = pa, Ea = HEAP32[Aa >> 2], Sa = Da + Ea, _jtjsigstr(a, 10, qa, Sa), c = 21) : (sa = ja, c = 19)
                } else sa = 1, c = 19;
            while (0);
            19 == c && (Oa = sa & -1, (Ha = 0 == (Oa | 0)) ? c = 21 : (Ma = Ga = (r | 0) / (Oa | 0) & -1, Ia = Oa));
            b: do
                if (21 == c) {
                    db = 0 < (m | 0);
                    do
                        if (db) {
                            W = 1;
                            for (Xa = 0;;)
                                if (Ta = q + Xa, fb = f + 28 + (Ta << 2), mb = HEAP32[fb >> 2], ma = mb | 0, ab = W * ma, Na = Xa + 1, $a = (Na | 0) < (m | 0)) W = ab, Xa = Na;
                                else break;
                            if (Ua = 2147483647 < ab) {
                                bb = a + 4408;
                                Qa = Ja = La = HEAP32[bb >> 2];
                                Ya = HEAP32[Qa >> 2];
                                lb = Ya + 40;
                                gb = Ca = Ja + lb;
                                Fa = HEAP32[gb >> 2];
                                Za = Fa + 20;
                                qb = HEAP32[Za >> 2];
                                ub = ib = Fa;
                                eb = HEAP32[ub >> 2];
                                rb = ib + eb;
                                _jtjsigstr(a, 10, qb, rb);
                                Ia = Ma = 0;
                                break b
                            } else Pa = ab
                        } else Pa = 1;
                    while (0);
                    Ma = wb = Pa & -1;
                    Ia = 0
                }
            while (0);
            Ka =
                (Ma | 0) / 2 & -1;
            Va = aa << 24 >> 24;
            nb = HEAP32[v >> 2];
            ob = nb << 8;
            cb = ob + Va;
            b: do switch (cb | 0) {
                    case 917:
                        Wa = (r | 0) / 2 & -1;
                        yb = i - 1;
                        Cb = _jtga(a, 1, Wa, yb, s);
                        if (Pb = 0 == (Cb | 0)) return j = 0, STACKTOP = b, j;
                        Zb = zb = Cb;
                        ac = HEAP32[Zb >> 2];
                        Hb = zb + ac;
                        Ib = 3 < (Ma | 0);
                        Qb = 0 < (Ia | 0);
                        if (!Ib) {
                            if (Qb) Rb = ha, Ob = 0, Bb = Hb;
                            else {
                                xb = Cb;
                                break b
                            }
                            for (;;)
                                if (dc = Rb + 4, tb = HEAP32[Rb >> 2], oc = Rb + 8, Mb = HEAP32[dc >> 2], Tb = (tb | 0) != (Mb | 0), Ra = Tb & 1, Nb = Bb + 1, HEAP8[Bb] = Ra, sb = Ob + 1, Ab = (sb | 0) < (Ia | 0)) Rb = oc, Ob = sb, Bb = Nb;
                                else {
                                    xb = Cb;
                                    break b
                                }
                        }
                        if (!Qb) {
                            xb = Cb;
                            break b
                        }
                        Eb = 1 < (Ma | 0);
                        vb = (Lb = 1 < (Ka | 0)) ? Ka :
                            1;
                        wc = vb + Ka;
                        yc = Ec = ha;
                        Db = 0;
                        for (bc = Hb;;) {
                            pb = yc + (Ka << 2);
                            if (Eb) {
                                Fb = Ec;
                                jb = pb;
                                gc = 0;
                                for (ic = bc;;)
                                    if (vc = Fb + 4, hc = HEAP32[Fb >> 2], uc = jb + 4, Ac = HEAP32[jb >> 2], xc = (hc | 0) != (Ac | 0), cd = xc & 1, jc = ic + 1, HEAP8[ic] = cd, Tc = gc + 1, Fc = (Tc | 0) < (Ka | 0)) Fb = vc, jb = uc, gc = Tc, ic = jc;
                                    else break;
                                Bc = yc + (wc << 2);
                                ec = bc + vb;
                                sc = Xb = Ec + (vb << 2);
                                nc = Bc;
                                tc = ec
                            } else sc = Ec, nc = pb, tc = bc;
                            Ub = sc + (Ka << 2);
                            $c = Db + 1;
                            if (ad = ($c | 0) < (Ia | 0)) Ec = Ub, yc = nc, Db = $c, bc = tc;
                            else {
                                xb = Cb;
                                break
                            }
                        }
                        break;
                    case 1084:
                        qc = (r | 0) / 2 & -1;
                        Uc = i - 1;
                        rc = _jtga(a, 1, qc, Uc, s);
                        if (kb = 0 == (rc | 0)) return j = 0, STACKTOP =
                            b, j;
                        $b = Jb = rc;
                        na = HEAP32[$b >> 2];
                        Vb = Jb + na;
                        kc = 3 < (Ma | 0);
                        va = 0 < (Ia | 0);
                        if (!kc) {
                            if (va) Wc = 0, Yb = ha, fc = Vb;
                            else {
                                xb = rc;
                                break b
                            }
                            for (;;)
                                if (Kb = Yb + 4, Gb = HEAP32[Yb >> 2], gd = Yb + 8, mc = HEAP32[Kb >> 2], Gc = (Gb | 0) < (mc | 0), dd = Gc & 1, kd = fc + 1, HEAP8[fc] = dd, Fd = Wc + 1, Vc = (Fd | 0) < (Ia | 0)) Wc = Fd, Yb = gd, fc = kd;
                                else {
                                    xb = rc;
                                    break b
                                }
                        }
                        if (!va) {
                            xb = rc;
                            break b
                        }
                        Hd = 1 < (Ma | 0);
                        cc = (bd = 1 < (Ka | 0)) ? Ka : 1;
                        Ic = cc + Ka;
                        fd = 0;
                        Xc = xd = ha;
                        for (Wd = Vb;;) {
                            Wb = xd + (Ka << 2);
                            if (Hd) {
                                Sb = 0;
                                pc = Wb;
                                zc = Xc;
                                for (hd = Wd;;)
                                    if (Yc = zc + 4, Ad = HEAP32[zc >> 2], Gd = pc + 4, hb = HEAP32[pc >> 2], ld = (Ad | 0) < (hb | 0), ed = ld & 1,
                                        Jc = hd + 1, HEAP8[hd] = ed, Oc = Sb + 1, Pc = (Oc | 0) < (Ka | 0)) Sb = Oc, pc = Gd, zc = Yc, hd = Jc;
                                    else break;
                                ke = xd + (Ic << 2);
                                Ed = Wd + cc;
                                pd = Xc + (cc << 2);
                                id = ke;
                                Cc = pd;
                                Qc = Ed
                            } else id = Wb, Cc = Xc, Qc = Wd;
                            Zc = Cc + (Ka << 2);
                            vd = fd + 1;
                            if ($d = (vd | 0) < (Ia | 0)) fd = vd, xd = id, Xc = Zc, Wd = Qc;
                            else {
                                xb = rc;
                                break
                            }
                        }
                        break;
                    case 573:
                        je = (r | 0) / 2 & -1;
                        Kc = i - 1;
                        Bd = _jtga(a, 1, je, Kc, s);
                        if (od = 0 == (Bd | 0)) return j = 0, STACKTOP = b, j;
                        Vd = Ka + ka;
                        Zd = $ + Vd;
                        Md = Jd = Bd;
                        Cd = HEAP32[Md >> 2];
                        fe = Jd + Cd;
                        Xd = 3 < (Ma | 0);
                        qd = 0 < (Ia | 0);
                        if (!Xd) {
                            if (qd) Od = 0, Mc = ea, Dd = fe;
                            else {
                                xb = Bd;
                                break b
                            }
                            for (;;)
                                if (Td = Mc + 1, le = HEAP8[Mc], me =
                                    Mc + 2, wd = HEAP8[Td], Ie = le << 24 >> 24 == wd << 24 >> 24, xe = Ie & 1, ye = Dd + 1, HEAP8[Dd] = xe, Fe = Od + 1, nf = (Fe | 0) < (Ia | 0)) Od = Fe, Mc = me, Dd = ye;
                                else {
                                    xb = Bd;
                                    break b
                                }
                        }
                        if (!qd) {
                            xb = Bd;
                            break b
                        }
                        Je = 1 < (Ma | 0);
                        Qe = (Id = 1 < (Ka | 0)) ? Ka : 1;
                        sd = 0;
                        ge = Zd;
                        ud = ea;
                        for (md = fe;;) {
                            if (Je) {
                                de = 0;
                                ae = ge;
                                Dc = ud;
                                for (Nc = md;;)
                                    if (yd = Dc + 1, jd = HEAP8[Dc], Sc = ae + 1, lc = HEAP8[ae], nd = jd << 24 >> 24 == lc << 24 >> 24, Rc = nd & 1, Hc = Nc + 1, HEAP8[Nc] = Rc, Kd = de + 1, Rd = (Kd | 0) < (Ka | 0)) de = Kd, ae = Sc, Dc = yd, Nc = Hc;
                                    else break;
                                Nd = ge + Qe;
                                be = md + Qe;
                                zd = ud + Qe;
                                we = Nd;
                                Lc = zd;
                                rd = be
                            } else we = ge, Lc = ud, rd = md;
                            se = Lc + Ka;
                            Ud = we +
                                Ka;
                            Cf = sd + 1;
                            if (td = (Cf | 0) < (Ia | 0)) sd = Cf, ge = Ud, ud = se, md = rd;
                            else {
                                xb = Bd;
                                break
                            }
                        }
                        break;
                    case 132:
                    case 136:
                        Te = 1 == (m | 0);
                        pe = Te & 1;
                        if (!Te) {
                            Pd = pe;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 0;
                        Me = g + 256;
                        HEAP8[Me] = 1;
                        Sd = g + 1;
                        HEAP8[Sd] = 1;
                        $e = g + 257;
                        HEAP8[$e] = 1;
                        Pd = pe;
                        c = 365;
                        break;
                    case 316:
                        qe = 1 == (m | 0);
                        Ce = qe & 1;
                        if (!qe) {
                            Pd = Ce;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 0;
                        cf = g + 256;
                        HEAP8[cf] = 1;
                        sf = g + 1;
                        HEAP8[sf] = 0;
                        Ue = g + 257;
                        HEAP8[Ue] = 0;
                        Pd = Ce;
                        c = 365;
                        break;
                    case 2108:
                        kf = ea;
                        Re = (r | 0) / 2 & -1;
                        ce = i - 1;
                        De = _jtga(a, 1, Re, ce, s);
                        if (Ge = 0 == (De | 0)) return j = 0, STACKTOP = b, j;
                        We = He = De;
                        Yd = HEAP32[We >>
                            2];
                        Ne = He + Yd;
                        Se = 3 < (Ma | 0);
                        Ee = 0 < (Ia | 0);
                        if (!Se) {
                            if (!Ee) {
                                xb = De;
                                break b
                            }
                            Ld = a + 1152;
                            he = kf;
                            Qd = 0;
                            for (re = Ne;;)
                                if (Ke = he + 8, Ae = HEAPF64[he >> 3], te = he + 16, ie = HEAPF64[Ke >> 3], ff = Ae < ie, ue = ff ^ 1, Oe = Ae == ie, (ne = Oe | ue) ? ze = 0 : (vf = 0 < Ae, lf = 0 < ie, (Xe = vf ^ lf) ? ze = 1 : (vf ? (Be = Ae > ie) ? (hf = Ae - ie, af = Ae, zf = hf) : (uf = ie - Ae, af = ie, zf = uf) : ff ? (ve = -0 - Ae, If = ie - Ae, af = ve, zf = If) : (Df = -0 - ie, Ef = Ae - ie, af = Df, zf = Ef), Gf = HEAPF64[Ld >> 3], of = af * Gf, (Lf = zf > of) ? ze = 1 : (pf = HEAPF64[14142], bf = af == pf, ze = Bf = bf & 1))), Pf = re + 1, HEAP8[re] = ze, Ye = Qd + 1, Hf = (Ye | 0) < (Ia | 0)) he = te, Qd = Ye,
                                    re = Pf;
                                else {
                                    xb = De;
                                    break b
                                }
                        }
                        if (!Ee) {
                            xb = De;
                            break b
                        }
                        jf = 1 < (Ma | 0);
                        Le = (mf = 1 < (Ka | 0)) ? Ka : 1;
                        Ve = Le + Ka;
                        df = a + 1152;
                        Yf = wf = kf;
                        Jf = 0;
                        for (Qf = Ne;;) {
                            Sf = Yf + (Ka << 3);
                            if (jf) {
                                Mf = wf;
                                ee = Sf;
                                oe = 0;
                                for (rf = Qf;;)
                                    if (Ff = Mf + 8, xf = HEAPF64[Mf >> 3], Pe = ee + 8, qf = HEAPF64[ee >> 3], yf = xf < qf, Nf = yf ^ 1, Zf = xf == qf, (tg = Zf | Nf) ? Ze = 0 : (gf = 0 < xf, ef = 0 < qf, (Kf = gf ^ ef) ? Ze = 1 : (gf ? (bg = xf > qf) ? (lg = xf - qf, Rf = xf, Ug = lg) : (Vf = qf - xf, Rf = qf, Ug = Vf) : yf ? (Jg = -0 - xf, hg = qf - xf, Rf = Jg, Ug = hg) : (Lg = -0 - qf, $f = xf - qf, Rf = Lg, Ug = $f), ah = HEAPF64[df >> 3], nh = Rf * ah, (dh = Ug > nh) ? Ze = 1 : (mg = HEAPF64[14142], yh =
                                            Rf == mg, Ze = Bg = yh & 1))), ig = rf + 1, HEAP8[rf] = Ze, ng = oe + 1, Ng = (ng | 0) < (Ka | 0)) Mf = Ff, ee = Pe, oe = ng, rf = ig;
                                    else break;
                                Ch = Yf + (Ve << 3);
                                Dg = Qf + Le;
                                pg = Vg = wf + (Le << 3);
                                zg = Ch;
                                Pg = Dg
                            } else pg = wf, zg = Sf, Pg = Qf;
                            cg = pg + (Ka << 3);
                            dg = Jf + 1;
                            if (qg = (dg | 0) < (Ia | 0)) wf = cg, Yf = zg, Jf = dg, Qf = Pg;
                            else {
                                xb = De;
                                break
                            }
                        }
                        break;
                    case 139:
                        vg = 1 == (m | 0);
                        bh = vg & 1;
                        if (!vg) {
                            Pd = bh;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 1;
                        Zg = g + 256;
                        HEAP8[Zg] = 1;
                        Eg = g + 1;
                        HEAP8[Eg] = 1;
                        wg = g + 257;
                        HEAP8[wg] = 0;
                        Pd = bh;
                        c = 365;
                        break;
                    case 1086:
                        vh = (r | 0) / 2 & -1;
                        Kh = i - 1;
                        $g = _jtga(a, 1, vh, Kh, s);
                        if (Ag = 0 == ($g | 0)) return j = 0, STACKTOP =
                            b, j;
                        xg = Lh = $g;
                        Mg = HEAP32[xg >> 2];
                        rg = Lh + Mg;
                        Sg = 3 < (Ma | 0);
                        jg = 0 < (Ia | 0);
                        if (!Sg) {
                            if (jg) Uh = ha, Of = 0, Tg = rg;
                            else {
                                xb = $g;
                                break b
                            }
                            for (;;)
                                if (qi = Uh + 4, eg = HEAP32[Uh >> 2], gi = Uh + 8, kg = HEAP32[qi >> 2], Qg = (eg | 0) > (kg | 0), Wg = Qg & 1, wi = Tg + 1, HEAP8[Tg] = Wg, zh = Of + 1, Wf = (zh | 0) < (Ia | 0)) Uh = gi, Of = zh, Tg = wi;
                                else {
                                    xb = $g;
                                    break b
                                }
                        }
                        if (!jg) {
                            xb = $g;
                            break b
                        }
                        di = 1 < (Ma | 0);
                        Mh = (ch = 1 < (Ka | 0)) ? Ka : 1;
                        Fg = Mh + Ka;
                        Vh = Rg = ha;
                        Gg = 0;
                        for (eh = rg;;) {
                            kh = Vh + (Ka << 2);
                            if (di) {
                                fh = Rg;
                                Wh = kh;
                                qh = 0;
                                for (og = eh;;)
                                    if (Og = fh + 4, Kg = HEAP32[fh >> 2], Ih = Wh + 4, ai = HEAP32[Wh >> 2], wh = (Kg | 0) > (ai | 0), Xh = wh & 1,
                                        Nh = og + 1, HEAP8[og] = Xh, Jh = qh + 1, lj = (Jh | 0) < (Ka | 0)) fh = Og, Wh = Ih, qh = Jh, og = Nh;
                                    else break;
                                gh = Vh + (Fg << 2);
                                rh = eh + Mh;
                                hi = Ph = Rg + (Mh << 2);
                                sh = gh;
                                fg = rh
                            } else hi = Rg, sh = kh, fg = eh;
                            Yi = hi + (Ka << 2);
                            mj = Gg + 1;
                            if (xi = (mj | 0) < (Ia | 0)) Rg = Yi, Vh = sh, Gg = mj, eh = fg;
                            else {
                                xb = $g;
                                break
                            }
                        }
                        break;
                    case 2110:
                        Hi = ea;
                        Ii = (r | 0) / 2 & -1;
                        lh = i - 1;
                        yg = _jtga(a, 1, Ii, lh, s);
                        if (vj = 0 == (yg | 0)) return j = 0, STACKTOP = b, j;
                        Xj = Ji = yg;
                        yi = HEAP32[Xj >> 2];
                        hh = Ji + yi;
                        Aj = 3 < (Ma | 0);
                        ih = 0 < (Ia | 0);
                        if (!Aj) {
                            if (!ih) {
                                xb = yg;
                                break b
                            }
                            Hj = a + 1152;
                            zi = Hi;
                            ni = 0;
                            for (ti = hh;;)
                                if (Cg = zi + 8, Ah = HEAPF64[zi >> 3], th = zi +
                                    16, oh = HEAPF64[Cg >> 3], Hg = oh < Ah, bi = Hg ^ 1, ui = oh == Ah, (gj = ui | bi) ? rj = 0 : (Ki = 0 < oh, Pj = 0 < Ah, (Zi = Ki ^ Pj) ? rj = 1 : (Ki ? (ii = oh > Ah) ? (mh = oh - Ah, ji = oh, vi = mh) : (Qh = Ah - oh, ji = Ah, vi = Qh) : Hg ? (Ij = -0 - oh, ik = Ah - oh, ji = Ij, vi = ik) : (hj = -0 - Ah, Xg = oh - Ah, ji = hj, vi = Xg), Li = HEAPF64[Hj >> 3], ph = ji * Li, (al = vi > ph) ? rj = 1 : (oi = HEAPF64[14142], Yh = ji == oi, rj = ek = Yh & 1))), ki = ti + 1, HEAP8[ti] = rj, ci = ni + 1, Rh = (ci | 0) < (Ia | 0)) zi = th, ni = ci, ti = ki;
                                else {
                                    xb = yg;
                                    break b
                                }
                        }
                        if (!ih) {
                            xb = yg;
                            break b
                        }
                        Bj = 1 < (Ma | 0);
                        Cj = (wj = 1 < (Ka | 0)) ? Ka : 1;
                        Qi = Cj + Ka;
                        Ri = a + 1152;
                        Dh = Qj = Hi;
                        Vk = 0;
                        for (Sh = hh;;) {
                            Dj = Dh +
                                (Ka << 3);
                            if (Bj) {
                                xj = Qj;
                                Eh = Dj;
                                Rj = 0;
                                for (Ai = Sh;;)
                                    if (Vi = xj + 8, Yg = HEAPF64[xj >> 3], ri = Eh + 8, Fh = HEAPF64[Eh >> 3], fk = Fh < Yg, Ei = fk ^ 1, Nk = Fh == Yg, (jk = Nk | Ei) ? qk = 0 : (nj = 0 < Fh, pi = 0 < Yg, (yj = nj ^ pi) ? qk = 1 : (nj ? (Ig = Fh > Yg) ? (Th = Fh - Yg, ij = Fh, Ej = Th) : (Yj = Yg - Fh, ij = Yg, Ej = Yj) : fk ? ($i = -0 - Fh, Ik = Yg - Fh, ij = $i, Ej = Ik) : (zk = -0 - Yg, sj = Fh - Yg, ij = zk, Ej = sj), Fj = HEAPF64[Ri >> 3], Jj = ij * Fj, (Wk = Ej > Jj) ? qk = 1 : (Fi = HEAPF64[14142], jj = ij == Fi, qk = Ak = jj & 1))), jl = Ai + 1, HEAP8[Ai] = qk, Wi = Rj + 1, tk = (Wi | 0) < (Ka | 0)) xj = Vi, Eh = ri, Rj = Wi, Ai = jl;
                                    else break;
                                ei = Dh + (Qi << 3);
                                Bk = Sh + Cj;
                                kj = zj = Qj +
                                    (Cj << 3);
                                Bi = ei;
                                Ck = Bk
                            } else kj = Qj, Bi = Dj, Ck = Sh;
                            ol = kj + (Ka << 3);
                            Ci = Vk + 1;
                            if (Sj = (Ci | 0) < (Ia | 0)) Qj = ol, Dh = Bi, Vk = Ci, Sh = Ck;
                            else {
                                xb = yg;
                                break
                            }
                        }
                        break;
                    case 317:
                        Kj = 1 == (m | 0);
                        Zj = Kj & 1;
                        if (!Kj) {
                            Pd = Zj;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 1;
                        Tj = g + 256;
                        HEAP8[Tj] = 0;
                        bl = g + 1;
                        HEAP8[bl] = 0;
                        Jk = g + 257;
                        HEAP8[Jk] = 1;
                        Pd = Zj;
                        c = 365;
                        break;
                    case 1923:
                        Ui = ea;
                        fi = (r | 0) / 2 & -1;
                        xh = i - 1;
                        oj = _jtga(a, 1, fi, xh, s);
                        if (Dk = 0 == (oj | 0)) return j = 0, STACKTOP = b, j;
                        cl = gk = oj;
                        uk = HEAP32[cl >> 2];
                        sg = gk + uk;
                        Lj = 3 < (Ma | 0);
                        ul = 0 < (Ia | 0);
                        if (!Lj) {
                            if (!ul) {
                                xb = oj;
                                break b
                            }
                            pj = a + 1152;
                            tf = Ui;
                            Xi = 0;
                            for ($j = sg;;)
                                if (Si =
                                    tf + 8, gg = HEAPF64[tf >> 3], Kk = tf + 16, Gh = HEAPF64[Si >> 3], ag = gg < Gh, jh = ag ^ 1, Hh = gg == Gh, (Af = Hh | jh) ? Hh ? Mi = 1 : c = 235 : (kl = 0 < gg, si = 0 < Gh, (Ok = kl ^ si) ? Mi = 1 : (kl ? (Zh = gg > Gh) ? (dl = gg - Gh, Lk = gg, li = dl) : (Uj = Gh - gg, Lk = Gh, li = Uj) : ag ? (fm = -0 - gg, Di = Gh - gg, Lk = fm, li = Di) : (Mk = -0 - Gh, qj = gg - Gh, Lk = Mk, li = qj), Pk = HEAPF64[pj >> 3], vl = Lk * Pk, Mj = li <= vl, ak = HEAPF64[14142], mi = Lk != ak, Jl = Mj & mi, Gi = Jl ^ 1, (Nj = Gi | Hh) ? Mi = 1 : c = 235)), 235 == c && (c = 0, Oh = 0 < gg, fl = 0 < Gh, (ll = Oh ^ fl) ? Mi = 0 : (Oh ? (vk = gg > Gh) ? (bk = gg - Gh, Vj = gg, ck = bk) : (ml = Gh - gg, Vj = Gh, ck = ml) : ag ? (rk = -0 - gg, pl = Gh - gg, Vj = rk,
                                        ck = pl) : (Kl = -0 - Gh, Qk = gg - Gh, Vj = Kl, ck = Qk), wl = HEAPF64[pj >> 3], Ek = Vj * wl, (sk = ck > Ek) ? Mi = 0 : (Bl = HEAPF64[14142], aj = Vj != Bl, Mi = kk = aj & 1))), Ni = $j + 1, HEAP8[$j] = Mi, Oi = Xi + 1, lk = (Oi | 0) < (Ia | 0)) tf = Kk, Xi = Oi, $j = Ni;
                                else {
                                    xb = oj;
                                    break b
                                }
                        }
                        if (!ul) {
                            xb = oj;
                            break b
                        }
                        mk = 1 < (Ma | 0);
                        Fl = (nk = 1 < (Ka | 0)) ? Ka : 1;
                        Xk = Fl + Ka;
                        bj = a + 1152;
                        $h = Ll = Ui;
                        gl = 0;
                        for (Bh = sg;;) {
                            cj = $h + (Ka << 3);
                            if (mk) {
                                Fk = Ll;
                                Rk = cj;
                                dj = 0;
                                for (ql = Bh;;)
                                    if (Sk = Fk + 8, ej = HEAPF64[Fk >> 3], xl = Rk + 8, dk = HEAPF64[Rk >> 3], Gl = ej < dk, hk = Gl ^ 1, nl = ej == dk, (Yk = nl | hk) ? nl ? ok = 1 : c = 211 : (Wj = 0 < ej, Rl = 0 < dk, (pk = Wj ^ Rl) ? ok = 1 :
                                            (Wj ? (Vl = ej > dk) ? (rl = ej - dk, Zk = ej, Gj = rl) : (Cl = dk - ej, Zk = dk, Gj = Cl) : Gl ? (Gk = -0 - ej, gm = dk - ej, Zk = Gk, Gj = gm) : (hl = -0 - dk, sl = ej - dk, Zk = hl, Gj = sl), Xf = HEAPF64[bj >> 3], mm = Zk * Xf, $k = Gj <= mm, Dl = HEAPF64[14142], tl = Zk != Dl, bm = $k & tl, Ti = bm ^ 1, (ug = Ti | nl) ? ok = 1 : c = 211)), 211 == c && (c = 0, Tf = 0 < ej, uh = 0 < dk, (Uf = Tf ^ uh) ? ok = 0 : (Tf ? (tj = ej > dk) ? (uj = ej - dk, Sl = ej, il = uj) : (Wl = dk - ej, Sl = dk, il = Wl) : Gl ? (yn = -0 - ej, im = dk - ej, Sl = yn, il = im) : (Im = -0 - dk, zl = ej - dk, Sl = Im, il = zl), Xl = HEAPF64[bj >> 3], vm = Sl * Xl, (Tl = il > vm) ? ok = 0 : (Ml = HEAPF64[14142], kn = Sl != Ml, ok = nm = kn & 1))), Fn = ql + 1,
                                        HEAP8[ql] = ok, Nl = dj + 1, Gn = (Nl | 0) < (Ka | 0)) Fk = Sk, Rk = xl, dj = Nl, ql = Fn;
                                    else break;
                                Pm = $h + (Xk << 3);
                                Hl = Bh + Fl;
                                Hn = Op = Ll + (Fl << 3);
                                uo = Pm;
                                Ol = Hl
                            } else Hn = Ll, uo = cj, Ol = Bh;
                            Do = Hn + (Ka << 3);
                            Xn = gl + 1;
                            if (io = (Xn | 0) < (Ia | 0)) Ll = Do, $h = uo, gl = Xn, Bh = Ol;
                            else {
                                xb = oj;
                                break
                            }
                        }
                        break;
                    case 2109:
                        ln = ea;
                        qm = (r | 0) / 2 & -1;
                        el = i - 1;
                        Il = _jtga(a, 1, qm, el, s);
                        if (mn = 0 == (Il | 0)) return j = 0, STACKTOP = b, j;
                        Jm = $m = Il;
                        om = HEAP32[Jm >> 2];
                        zm = $m + om;
                        Am = 3 < (Ma | 0);
                        Eo = 0 < (Ia | 0);
                        if (!Am) {
                            if (!Eo) {
                                xb = Il;
                                break b
                            }
                            jo = a + 1152;
                            hm = ln;
                            Fo = 0;
                            for (ko = zm;;)
                                if (pm = hm + 8, Bm = HEAPF64[hm >> 3], Km = hm + 16, Cm = HEAPF64[pm >>
                                        3], (rm = Bm == Cm) ? Lm = 1 : (Tm = 0 < Bm, Qm = 0 < Cm, (an = Tm ^ Qm) ? Lm = 0 : (Tm ? (wk = Bm > Cm) ? (Go = Bm - Cm, nn = Bm, on = Go) : (cm = Cm - Bm, nn = Cm, on = cm) : (In = Bm < Cm) ? (bp = -0 - Bm, Dp = Cm - Bm, nn = bp, on = Dp) : (lo = -0 - Cm, bn = Bm - Cm, nn = lo, on = bn), cn = HEAPF64[jo >> 3], Um = nn * cn, (Ro = on > Um) ? Lm = 0 : (Yn = HEAPF64[14142], Yl = nn != Yn, Lm = pn = Yl & 1))), Hk = ko + 1, HEAP8[ko] = Lm, vo = Fo + 1, Ho = (vo | 0) < (Ia | 0)) hm = Km, Fo = vo, ko = Hk;
                                else {
                                    xb = Il;
                                    break b
                                }
                        }
                        if (!Eo) {
                            xb = Il;
                            break b
                        }
                        Pp = 1 < (Ma | 0);
                        mo = (vp = 1 < (Ka | 0)) ? Ka : 1;
                        Io = mo + Ka;
                        hp = a + 1152;
                        sm = Vm = ln;
                        Zn = 0;
                        for (Oj = zm;;) {
                            Mm = sm + (Ka << 3);
                            if (Pp) {
                                Yp = Vm;
                                Tq = Mm;
                                Dm = 0;
                                for (Zl =
                                    Oj;;)
                                    if (dn = Yp + 8, Nm = HEAPF64[Yp >> 3], Rm = Tq + 8, jm = HEAPF64[Tq >> 3], (Ep = Nm == jm) ? cp = 1 : (So = 0 < Nm, Jo = 0 < jm, (Jn = So ^ Jo) ? cp = 0 : (So ? (Ko = Nm > jm) ? ($n = Nm - jm, Em = Nm, dm = $n) : (To = jm - Nm, Em = jm, dm = To) : (Kn = Nm < jm) ? (El = -0 - Nm, rq = jm - Nm, Em = El, dm = rq) : (Zp = -0 - jm, Bq = Nm - jm, Em = Zp, dm = Bq), zn = HEAPF64[hp >> 3], wp = Em * zn, (no = dm > wp) ? cp = 0 : (ip = HEAPF64[14142], Er = Em != ip, cp = Lo = Er & 1))), sq = Zl + 1, HEAP8[Zl] = cp, An = Dm + 1, jp = (An | 0) < (Ka | 0)) Yp = dn, Tq = Rm, Dm = An, Zl = sq;
                                    else break;
                                Mo = sm + (Io << 3);
                                Ln = Oj + mo;
                                en = kp = Vm + (mo << 3);
                                Bn = Mo;
                                Mn = Ln
                            } else en = Vm, Bn = Mm, Mn = Oj;
                            gq = en + (Ka << 3);
                            Nn = Zn + 1;
                            if (Hq = (Nn | 0) < (Ia | 0)) Vm = gq, sm = Bn, Zn = Nn, Oj = Mn;
                            else {
                                xb = Il;
                                break
                            }
                        }
                        break;
                    case 1925:
                        dp = ea;
                        wo = (r | 0) / 2 & -1;
                        Fp = i - 1;
                        fn = _jtga(a, 1, wo, Fp, s);
                        if (On = 0 == (fn | 0)) return j = 0, STACKTOP = b, j;
                        Qp = ao = fn;
                        gn = HEAP32[Qp >> 2];
                        tm = ao + gn;
                        um = 3 < (Ma | 0);
                        xo = 0 < (Ia | 0);
                        if (!um) {
                            if (!xo) {
                                xb = fn;
                                break b
                            }
                            No = a + 1152;
                            Gp = dp;
                            $l = 0;
                            for (lp = tm;;)
                                if (km = Gp + 8, am = HEAPF64[Gp >> 3], mp = Gp + 16, Fm = HEAPF64[km >> 3], Ar = Fm < am, hq = Ar ^ 1, iq = Fm == am, (Hp = iq | hq) ? iq ? hn = 1 : c = 321 : (Pn = 0 < Fm, yo = 0 < am, (np = Pn ^ yo) ? hn = 1 : (Pn ? (qn = Fm > am) ? (tq = Fm - am, rn = Fm, $p = tq) : (Uq = am - Fm, rn = am, $p = Uq) : Ar ?
                                        (Rp = -0 - Fm, Cq = am - Fm, rn = Rp, $p = Cq) : (sn = -0 - am, Qn = Fm - am, rn = sn, $p = Qn), uq = HEAPF64[No >> 3], Iq = rn * uq, Uo = $p <= Iq, Rn = HEAPF64[14142], Vo = rn != Rn, Sn = Uo & Vo, Ip = Sn ^ 1, (ep = Ip | iq) ? hn = 1 : c = 321)), 321 == c && (c = 0, Cn = 0 < Fm, Pi = 0 < am, (xk = Cn ^ Pi) ? hn = 0 : (Cn ? (Tk = Fm > am) ? (yl = Fm - am, yk = Fm, tn = yl) : (lm = am - Fm, yk = am, tn = lm) : Ar ? (Tn = -0 - Fm, vq = am - Fm, yk = Tn, tn = vq) : (Dn = -0 - am, oo = Fm - am, yk = Dn, tn = oo), Wo = HEAPF64[No >> 3], wm = yk * Wo, (Pl = tn > wm) ? hn = 0 : (Sp = HEAPF64[14142], Vq = yk != Sp, hn = Tp = Vq & 1))), Oo = lp + 1, HEAP8[lp] = hn, fp = $l + 1, jq = (fp | 0) < (Ia | 0)) Gp = mp, $l = fp, lp = Oo;
                                else {
                                    xb =
                                        fn;
                                    break b
                                }
                        }
                        if (!xo) {
                            xb = fn;
                            break b
                        }
                        un = 1 < (Ma | 0);
                        op = (Ul = 1 < (Ka | 0)) ? Ka : 1;
                        rr = op + Ka;
                        Up = a + 1152;
                        Po = bo = dp;
                        Un = 0;
                        for (Jq = tm;;) {
                            aq = Po + (Ka << 3);
                            if (un) {
                                xp = bo;
                                Gm = aq;
                                kq = 0;
                                for (co = Jq;;)
                                    if (pp = xp + 8, En = HEAPF64[xp >> 3], Kq = Gm + 8, eo = HEAPF64[Gm >> 3], dr = eo < En, Ql = dr ^ 1, Wq = eo == En, (kr = Wq | Ql) ? Wq ? Xo = 1 : c = 297 : (yp = 0 < eo, Jp = 0 < En, (qp = yp ^ Jp) ? Xo = 1 : (yp ? (Yo = eo > En) ? (Wm = eo - En, Vn = eo, Vp = Wm) : (Zo = En - eo, Vn = En, Vp = Zo) : dr ? (lq = -0 - eo, Kp = En - eo, Vn = lq, Vp = Kp) : (sr = -0 - En, Lp = eo - En, Vn = sr, Vp = Lp), mq = HEAPF64[Up >> 3], zo = Vn * mq, fo = Vp <= zo, Br = HEAPF64[14142], rp = Vn != Br, nq = fo &
                                            rp, Xq = nq ^ 1, (Yr = Xq | Wq) ? Xo = 1 : c = 297)), 297 == c && (c = 0, Dq = 0 < eo, Cr = 0 < En, (lr = Dq ^ Cr) ? Xo = 0 : (Dq ? (tr = eo > En) ? (wq = eo - En, Lq = eo, oq = wq) : (er = En - eo, Lq = En, oq = er) : dr ? (bq = -0 - eo, mr = En - eo, Lq = bq, oq = mr) : (Yq = -0 - En, po = eo - En, Lq = Yq, oq = po), qo = HEAPF64[Up >> 3], fr = Lq * qo, ($o = oq > fr) ? Xo = 0 : (Xm = HEAPF64[14142], gp = Lq != Xm, Xo = go = gp & 1))), Ym = co + 1, HEAP8[co] = Xo, ro = kq + 1, ap = (ro | 0) < (Ka | 0)) xp = pp, Gm = Kq, kq = ro, co = Ym;
                                    else break;
                                ho = Po + (rr << 3);
                                Zm = Jq + op;
                                Wn = Ao = bo + (op << 3);
                                so = ho;
                                fj = Zm
                            } else Wn = bo, so = aq, fj = Jq;
                            Mq = Wn + (Ka << 3);
                            sp = Un + 1;
                            if (tp = (sp | 0) < (Ia | 0)) bo = Mq, Po =
                                so, Un = sp, Jq = fj;
                            else {
                                xb = fn;
                                break
                            }
                        }
                        break;
                    case 901:
                        Zq = (r | 0) / 2 & -1;
                        Uk = i - 1;
                        zp = _jtga(a, 1, Zq, Uk, s);
                        if (em = 0 == (zp | 0)) return j = 0, STACKTOP = b, j;
                        vn = to = zp;
                        Hm = HEAP32[vn >> 2];
                        xm = to + Hm;
                        wn = 3 < (Ma | 0);
                        Ap = 0 < (Ia | 0);
                        if (!wn) {
                            if (Ap) ym = ha, jn = 0, Om = xm;
                            else {
                                xb = zp;
                                break b
                            }
                            for (;;)
                                if (Mp = ym + 4, xn = HEAP32[ym >> 2], Bo = ym + 8, Zr = HEAP32[Mp >> 2], Ur = (xn | 0) >= (Zr | 0), Qo = Ur & 1, Wp = Om + 1, HEAP8[Om] = Qo, xq = jn + 1, Fr = (xq | 0) < (Ia | 0)) ym = Bo, jn = xq, Om = Wp;
                                else {
                                    xb = zp;
                                    break b
                                }
                        }
                        if (!Ap) {
                            xb = zp;
                            break b
                        }
                        Eq = 1 < (Ma | 0);
                        qs = (yq = 1 < (Ka | 0)) ? Ka : 1;
                        Lr = qs + Ka;
                        cq = ur = ha;
                        is = 0;
                        for (Fq = xm;;) {
                            nr =
                                cq + (Ka << 2);
                            if (Eq) {
                                Bp = ur;
                                Gr = nr;
                                Gq = 0;
                                for (pq = Fq;;)
                                    if (Mr = Bp + 4, $q = HEAP32[Bp >> 2], vr = Gr + 4, Nq = HEAP32[Gr >> 2], js = ($q | 0) >= (Nq | 0), Hr = js & 1, Np = pq + 1, HEAP8[pq] = Hr, qq = Gq + 1, Oq = (qq | 0) < (Ka | 0)) Bp = Mr, Gr = vr, Gq = qq, pq = Np;
                                    else break;
                                ar = cq + (Lr << 2);
                                zq = Fq + qs;
                                br = wr = ur + (qs << 2);
                                Al = ar;
                                Co = zq
                            } else br = ur, Al = nr, Co = Fq;
                            dq = br + (Ka << 2);
                            Aq = is + 1;
                            if (Vr = (Aq | 0) < (Ia | 0)) ur = dq, cq = Al, is = Aq, Fq = Co;
                            else {
                                xb = zp;
                                break
                            }
                        }
                        break;
                    case 137:
                        eq = 1 == (m | 0);
                        Xp = eq & 1;
                        if (!eq) {
                            Pd = Xp;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 1;
                        fq = g + 256;
                        HEAP8[fq] = 0;
                        $r = g + 1;
                        HEAP8[$r] = 0;
                        Ir = g + 257;
                        HEAP8[Ir] = 0;
                        Pd = Xp;
                        c = 365;
                        break;
                    case 899:
                        Nr = (r | 0) / 2 & -1;
                        Rr = i - 1;
                        Pq = _jtga(a, 1, Nr, Rr, s);
                        if (Or = 0 == (Pq | 0)) return j = 0, STACKTOP = b, j;
                        ks = Es = Pq;
                        gr = HEAP32[ks >> 2];
                        ls = Es + gr;
                        dt = 3 < (Ma | 0);
                        ms = 0 < (Ia | 0);
                        if (!dt) {
                            if (ms) Qq = ha, as = 0, Jr = ls;
                            else {
                                xb = Pq;
                                break b
                            }
                            for (;;)
                                if (Wr = Qq + 4, bs = HEAP32[Qq >> 2], nt = Qq + 8, Rq = HEAP32[Wr >> 2], or = (bs | 0) <= (Rq | 0), hr = or & 1, Dr = Jr + 1, HEAP8[Jr] = hr, Fs = as + 1, Kr = (Fs | 0) < (Ia | 0)) Qq = nt, as = Fs, Jr = Dr;
                                else {
                                    xb = Pq;
                                    break b
                                }
                        }
                        if (!ms) {
                            xb = Pq;
                            break b
                        }
                        As = 1 < (Ma | 0);
                        ir = (Gs = 1 < (Ka | 0)) ? Ka : 1;
                        pr = ir + Ka;
                        Vs = Xr = ha;
                        Bs = 0;
                        for (Ws = ls;;) {
                            rs = Vs + (Ka << 2);
                            if (As) {
                                Js =
                                    Xr;
                                Cp = rs;
                                Sr = 0;
                                for (cs = Ws;;)
                                    if (ss = Js + 4, cr = HEAP32[Js >> 2], jr = Cp + 4, et = HEAP32[Cp >> 2], Wt = (cr | 0) <= (et | 0), ku = Wt & 1, Xt = cs + 1, HEAP8[cs] = ku, ft = Sr + 1, Ps = (ft | 0) < (Ka | 0)) Js = ss, Cp = jr, Sr = ft, cs = Xt;
                                    else break;
                                Xs = Vs + (pr << 2);
                                Cs = Ws + ir;
                                vt = Dt = Xr + (ir << 2);
                                ot = Xs;
                                ns = Cs
                            } else vt = Xr, ot = rs, ns = Ws;
                            Ks = vt + (Ka << 2);
                            Ds = Bs + 1;
                            if (Tr = (Ds | 0) < (Ia | 0)) Xr = Ks, Vs = ot, Bs = Ds, Ws = ns;
                            else {
                                xb = Pq;
                                break
                            }
                        }
                        break;
                    case 133:
                        Ys = 1 == (m | 0);
                        lu = Ys & 1;
                        if (!Ys) {
                            Pd = lu;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 1;
                        Yt = g + 256;
                        HEAP8[Yt] = 0;
                        Nt = g + 1;
                        HEAP8[Nt] = 1;
                        xt = g + 257;
                        HEAP8[xt] = 1;
                        Pd = lu;
                        c = 365;
                        break;
                    case 131:
                        xr =
                            1 == (m | 0);
                        qr = xr & 1;
                        if (!xr) {
                            Pd = qr;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 1;
                        Zs = g + 256;
                        HEAP8[Zs] = 1;
                        Et = g + 1;
                        HEAP8[Et] = 0;
                        Ku = g + 257;
                        HEAP8[Ku] = 1;
                        Pd = qr;
                        c = 365;
                        break;
                    case 1085:
                        gt = (r | 0) / 2 & -1;
                        Qs = i - 1;
                        xs = _jtga(a, 1, gt, Qs, s);
                        if (pt = 0 == (xs | 0)) return j = 0, STACKTOP = b, j;
                        Zt = $s = xs;
                        qt = HEAP32[Zt >> 2];
                        ds = $s + qt;
                        yt = 3 < (Ma | 0);
                        ys = 0 < (Ia | 0);
                        if (!yt) {
                            if (ys) Lu = 0, us = ha, at = ds;
                            else {
                                xb = xs;
                                break b
                            }
                            for (;;)
                                if (zs = us + 4, Rs = HEAP32[us >> 2], Pr = us + 8, os = HEAP32[zs >> 2], $t = (Rs | 0) == (os | 0), Ls = $t & 1, Ss = at + 1, HEAP8[at] = Ls, ht = Lu + 1, wt = (ht | 0) < (Ia | 0)) Lu = ht, us = Pr, at = Ss;
                                else {
                                    xb = xs;
                                    break b
                                }
                        }
                        if (!ys) {
                            xb =
                                xs;
                            break b
                        }
                        yu = 1 < (Ma | 0);
                        Ft = (kv = 1 < (Ka | 0)) ? Ka : 1;
                        uv = Ft + Ka;
                        au = 0;
                        mu = rt = ha;
                        for (vv = ds;;) {
                            wv = rt + (Ka << 2);
                            if (yu) {
                                Mu = 0;
                                Sm = wv;
                                es = mu;
                                for (vs = vv;;)
                                    if (bu = es + 4, it = HEAP32[es >> 2], Ot = Sm + 4, qw = HEAP32[Sm >> 2], zu = (it | 0) == (qw | 0), zt = zu & 1, Gt = vs + 1, HEAP8[vs] = zt, jt = Mu + 1, cu = (jt | 0) < (Ka | 0)) Mu = jt, Sm = Ot, es = bu, vs = Gt;
                                    else break;
                                nu = rt + (uv << 2);
                                Zu = vv + Ft;
                                st = mu + (Ft << 2);
                                kt = nu;
                                ws = st;
                                lt = Zu
                            } else kt = wv, ws = mu, lt = vv;
                            xv = ws + (Ka << 2);
                            qy = au + 1;
                            if (Pv = (qy | 0) < (Ia | 0)) au = qy, rt = kt, mu = xv, vv = lt;
                            else {
                                xb = xs;
                                break
                            }
                        }
                        break;
                    case 1941:
                        Nu = ea;
                        Pt = (r | 0) / 2 & -1;
                        cw = i - 1;
                        ou = _jtga(a,
                            1, Pt, cw, s);
                        if (dw = 0 == (ou | 0)) return j = 0, STACKTOP = b, j;
                        Qv = Ou = ou;
                        At = HEAP32[Qv >> 2];
                        yv = Ou + At;
                        zv = 3 < (Ma | 0);
                        lv = 0 < (Ia | 0);
                        if (!zv) {
                            if (!lv) {
                                xb = ou;
                                break b
                            }
                            Pu = a + 1152;
                            $u = Nu;
                            Av = yv;
                            for (Ms = 0;;)
                                if (rw = $u + 8, Hs = HEAPF64[$u >> 3], du = $u + 16, mt = HEAPF64[rw >> 3], (Au = Hs == mt) ? Bu = 0 : (mv = 0 < Hs, Bv = 0 < mt, (sw = mv ^ Bv) ? Bu = 1 : (mv ? (av = Hs > mt) ? (Rv = Hs - mt, Qt = Hs, pu = Rv) : (Ew = mt - Hs, Qt = mt, pu = Ew) : (bt = Hs < mt) ? (yr = -0 - Hs, Rt = mt - Hs, Qt = yr, pu = Rt) : (Cv = -0 - mt, Ht = Hs - mt, Qt = Cv, pu = Ht), qu = HEAPF64[Pu >> 3], ix = Qt * qu, (Fw = pu > ix) ? Bu = 1 : (ct = HEAPF64[14142], Sv = Qt == ct, Bu = Dv = Sv & 1))),
                                    Qu = Av + 1, HEAP8[Av] = Bu, Ru = Ms + 1, Bt = (Ru | 0) < (Ia | 0)) $u = du, Av = Qu, Ms = Ru;
                                else {
                                    xb = ou;
                                    break b
                                }
                        }
                        if (!lv) {
                            xb = ou;
                            break b
                        }
                        Is = 1 < (Ma | 0);
                        Ev = (Tv = 1 < (Ka | 0)) ? Ka : 1;
                        bv = Ev + Ka;
                        It = a + 1152;
                        gs = Jt = Nu;
                        Cu = 0;
                        for (Ts = yv;;) {
                            vx = gs + (Ka << 3);
                            if (Is) {
                                Fv = Jt;
                                Su = vx;
                                Tu = 0;
                                for (Du = Ts;;)
                                    if (Pw = Fv + 8, ru = HEAPF64[Fv >> 3], Qw = Su + 8, Kt = HEAPF64[Su >> 3], (wx = ru == Kt) ? hs = 0 : (up = 0 < ru, tw = 0 < Kt, (Ix = up ^ tw) ? hs = 1 : (up ? (Us = ru > Kt) ? (ts = ru - Kt, Sq = ru, xx = ts) : (uw = Kt - ru, Sq = Kt, xx = uw) : (vw = ru < Kt) ? (eu = -0 - ru, Uv = Kt - ru, Sq = eu, xx = Uv) : (ew = -0 - Kt, fw = ru - Kt, Sq = ew, xx = fw), Jx = HEAPF64[It >> 3], Uu = Sq *
                                            Jx, (Vv = xx > Uu) ? hs = 1 : (su = HEAPF64[14142], nv = Sq == su, hs = gw = nv & 1))), hw = Du + 1, HEAP8[Du] = hs, fu = Tu + 1, Gv = (fu | 0) < (Ka | 0)) Fv = Pw, Su = Qw, Tu = fu, Du = hw;
                                    else break;
                                gu = gs + (bv << 3);
                                Qr = Ts + Ev;
                                cv = iw = Jt + (Ev << 3);
                                Hv = gu;
                                tu = Qr
                            } else cv = Jt, Hv = vx, tu = Ts;
                            Vu = cv + (Ka << 3);
                            ww = Cu + 1;
                            if (Ns = (ww | 0) < (Ia | 0)) Jt = Vu, gs = Hv, Cu = ww, Ts = tu;
                            else {
                                xb = ou;
                                break
                            }
                        }
                        break;
                    case 405:
                        uu = (r | 0) / 2 & -1;
                        Lt = i - 1;
                        St = _jtga(a, 1, uu, Lt, s);
                        if (Kx = 0 == (St | 0)) return j = 0, STACKTOP = b, j;
                        hu = Ka + ka;
                        Rw = $ + hu;
                        Lx = Wv = St;
                        Iz = HEAP32[Lx >> 2];
                        Xv = Wv + Iz;
                        iu = 3 < (Ma | 0);
                        ov = 0 < (Ia | 0);
                        if (!iu) {
                            if (ov) Iv = 0, pv = ea,
                                Os = Xv;
                            else {
                                xb = St;
                                break b
                            }
                            for (;;)
                                if (tt = pv + 1, Tt = HEAP8[pv], Sw = pv + 2, jx = HEAP8[tt], yx = Tt << 24 >> 24 != jx << 24 >> 24, Mx = yx & 1, Wu = Os + 1, HEAP8[Os] = Mx, jw = Iv + 1, Tw = (jw | 0) < (Ia | 0)) Iv = jw, pv = Sw, Os = Wu;
                                else {
                                    xb = St;
                                    break b
                                }
                        }
                        if (!ov) {
                            xb = St;
                            break b
                        }
                        ut = 1 < (Ma | 0);
                        xw = (Dy = 1 < (Ka | 0)) ? Ka : 1;
                        kx = 0;
                        Ey = Rw;
                        vu = ea;
                        for (Jv = Xv;;) {
                            if (ut) {
                                Gw = 0;
                                dy = Ey;
                                kA = vu;
                                for (Eu = Jv;;)
                                    if (Vy = kA + 1, Wy = HEAP8[kA], zx = dy + 1, Xy = HEAP8[dy], Yy = Wy << 24 >> 24 != Xy << 24 >> 24, Uw = Yy & 1, Nx = Eu + 1, HEAP8[Eu] = Uw, kw = Gw + 1, ey = (kw | 0) < (Ka | 0)) Gw = kw, dy = zx, kA = Vy, Eu = Nx;
                                    else break;
                                Fy = Ey + xw;
                                fy = Jv + xw;
                                yw = vu +
                                    xw;
                                Yv = Fy;
                                Kv = yw;
                                Zy = fy
                            } else Yv = Ey, Kv = vu, Zy = Jv;
                            Lv = Kv + Ka;
                            Hw = Yv + Ka;
                            Xu = kx + 1;
                            if (Ox = (Xu | 0) < (Ia | 0)) kx = Xu, Ey = Hw, vu = Lv, Jv = Zy;
                            else {
                                xb = St;
                                break
                            }
                        }
                        break;
                    case 318:
                        Zv = 1 == (m | 0);
                        Ut = Zv & 1;
                        if (!Zv) {
                            Pd = Ut;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 0;
                        Fu = g + 256;
                        HEAP8[Fu] = 0;
                        Vw = g + 1;
                        HEAP8[Vw] = 1;
                        Px = g + 257;
                        HEAP8[Px] = 0;
                        Pd = Ut;
                        c = 365;
                        break;
                    case 149:
                        Qx = 1 == (m | 0);
                        Rx = Qx & 1;
                        if (!Qx) {
                            Pd = Rx;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] = 0;
                        ry = g + 256;
                        HEAP8[ry] = 1;
                        Ax = g + 1;
                        HEAP8[Ax] = 1;
                        zr = g + 257;
                        HEAP8[zr] = 0;
                        Pd = Rx;
                        c = 365;
                        break;
                    case 130:
                    case 298:
                    case 138:
                        qv = 1 == (m | 0);
                        lx = qv & 1;
                        if (!qv) {
                            Pd = lx;
                            c = 365;
                            break b
                        }
                        HEAP8[Z] =
                            0;
                        Sx = g + 256;
                        HEAP8[Sx] = 0;
                        Tx = g + 1;
                        HEAP8[Tx] = 0;
                        Jz = g + 257;
                        HEAP8[Jz] = 1;
                        Pd = lx;
                        c = 365;
                        break;
                    default:
                        break a
                }
                while (0);
                do
                    if (365 == c) {
                        if (sy = 0 == Pd << 24 >> 24) break a;
                        gy = (r | 0) / 2 & -1;
                        Iw = i - 1;
                        Ww = _jtga(a, 1, gy, Iw, s);
                        if (dv = 0 == (Ww | 0)) return j = 0, STACKTOP = b, j;
                        if (zw = 0 < (Ia | 0)) {
                            Mt = Ww;
                            Ux = HEAP32[Mt >> 2];
                            MA = Ww;
                            mx = MA + Ux;
                            Bx = ea;
                            Gy = mx;
                            Vx = Bx;
                            for (rv = 0;;)
                                if (Cx = Vx + 2, Hy = HEAP16[Vx >> 1], lw = Hy << 16 >> 16, NA = g + lw, Gu = HEAP8[NA], nx = Gy + 1, HEAP8[Gy] = Gu, ty = rv + 1, ox = (ty | 0) < (Ia | 0)) Gy = nx, Vx = Cx, rv = ty;
                                else {
                                    xb = Ww;
                                    break
                                }
                        } else xb = Ww
                    }
            while (0);
            Iy = 0 != (xb | 0);
            Jw = 1 < (m | 0);
            Aw = Iy & Jw;
            do
                if (Aw && (ev = m - 1, Wx = 0 < (ev | 0))) {
                    Xx = q + 1;
                    Xw = f + 28 + (Xx << 2);
                    hy = uy = xb + 28 + (q << 2);
                    qz = Xw;
                    for (sv = 0;;)
                        if (lA = qz + 4, vy = HEAP32[qz >> 2], px = hy + 4, HEAP32[hy >> 2] = vy, wy = sv + 1, fv = (wy | 0) < (ev | 0)) hy = px, qz = lA, sv = wy;
                        else break
                }
            while (0);
            xy = 0 == (xb | 0);
            if (!xy) return j = xb, STACKTOP = b, j
        } else {
            if (1 == (t | 0)) return j = Dx = _jttail(a, f), STACKTOP = b, j;
            if (0 == (t | 0)) return j = mw = _jtred0(a, f, d), STACKTOP = b, j
        }
    while (0);
    Ex = a + 204545;
    qx = 50 == HEAP8[Ex] << 24 >> 24;
    a: do
        if (qx) HEAP8[Ex] = 0, (gv = 43 == aa << 24 >> 24) ? (Kz = 8, Ct = 1024, Hu = 206) : ($y = (mA = 45 == aa << 24 >> 24) ?
            382 : 1208, Kz = 8, Ct = 1024, Hu = $y);
        else {
            nA = z & 805402077;
            Lz = 0 == (nA | 0);
            do
                if (!Lz && (az = aa & 255, OA = az + 56, bz = HEAP8[OA], rz = bz & 255, Jy = z & 1, (Mz = 0 == (Jy | 0)) ? (rx = z & 4, (Yw = 0 == (rx | 0)) ? (Iu = z & 8, (oA = 0 == (Iu | 0)) ? (Ky = z & 16, (Yx = 0 == (Ky | 0)) ? (Nz = z & 64, (Zx = 0 == (Nz | 0)) ? (Ly = z >>> 7, pA = Ly & 1, nw = PA = 6 - pA) : nw = 4) : nw = 3) : nw = 2) : nw = 1) : nw = 0, Yu = 912 + (272 * rz & -1) + (nw << 3), Zw = HEAP32[Yu >> 2], Mv = 912 + (272 * rz & -1) + (nw << 3) + 4, QA = HEAP32[Mv >> 2], $v = 0 == (Zw | 0), !$v)) {
                    sz = Zw;
                    Kw = QA;
                    My = Kw & 256;
                    if ($x = 0 == (My | 0)) qA = Kw, Fx = sz;
                    else {
                        Kz = 1;
                        Ct = Kw;
                        Hu = sz;
                        break a
                    }
                    tz = qA & 512;
                    if (iy = 0 == (tz |
                            0)) ow = Fx, $w = qA;
                    else {
                        Kz = 4;
                        Ct = qA;
                        Hu = Fx;
                        break a
                    }
                    RA = $w & 1024;
                    kB = 0 == (RA | 0);
                    if (!kB) {
                        Kz = 8;
                        Ct = $w;
                        Hu = ow;
                        break a
                    }
                    ND = $w & 2048;
                    cz = 0 == (ND | 0);
                    if (!cz) {
                        Kz = 16;
                        Ct = $w;
                        Hu = ow;
                        break a
                    }
                    dz = $w & 8192;
                    Oz = 0 == (dz | 0);
                    if (!Oz) {
                        Kz = 128;
                        Ct = $w;
                        Hu = ow;
                        break a
                    }
                    HC = $w & 4096;
                    Kz = SA = (ez = 0 != (HC | 0)) ? 64 : 65536;
                    Ct = $w;
                    Hu = ow;
                    break a
                }
            while (0);
            j = pw = _jtredg(a, f, d);
            STACKTOP = b;
            return j
        }
    while (0);
    HEAP32[l >> 2] = 0;
    rA = (r | 0) / (t | 0) & -1;
    hv = 1 > (i | 0);
    Bw = i - 1;
    iv = _jtga(a, Kz, rA, hv ? 0 : Bw, s);
    if (0 == (iv | 0)) return j = 0, STACKTOP = b, j;
    1 < (m | 0) && (fz = iv + 28 + (q << 2), Pz = q + 1, ax = f + 28 + (Pz << 2),
        iD = m << 2, Qz = iD - 4, _memcpy(fz, ax, Qz) | 0);
    if (0 == (Ct & 1835071 | 0)) bx = f;
    else if (uz = Ct & 1, (OD = 0 == (uz | 0)) ? (vz = Ct & 2, (lB = 0 == (vz | 0)) ? (jy = Ct & 4, (gz = 0 == (jy | 0)) ? (Ny = Ct & 8, (BB = 0 == (Ny | 0)) ? (IC = Ct << 1, jD = IC & 64, cx = JC = jD + 64) : cx = 16) : cx = 8) : cx = 4) : cx = 1, PD = (cx | 0) == (z | 0)) bx = f;
    else {
        eC = HEAP32[l >> 2];
        HEAP32[l >> 2] = 0;
        ky = _jtccvt(a, cx, f, b);
        HEAP32[l >> 2] = eC;
        if (Rz = 0 == ky << 24 >> 24) return Sz = a + 4408, ly = HEAP32[Sz >> 2], ay = HEAP32[ly >> 2], kD = ay + 12, Oy = ly + kD, AE = HEAP32[Oy >> 2], Tz = AE + 20, by = HEAP32[Tz >> 2], Vt = HEAP32[AE >> 2], wz = AE + Vt, _jtjsigstr(a, 3, by, wz), j = 0,
            STACKTOP = b, j;
        hz = HEAP32[b >> 2];
        if (Py = 0 == (hz | 0)) return j = 0, STACKTOP = b, j;
        bx = hz
    }
    Cw = 0 < (q | 0);
    do
        if (Cw) {
            Qy = 1;
            for (Dw = 0;;)
                if (iz = f + 28 + (Dw << 2), cy = HEAP32[iz >> 2], mB = cy | 0, fC = Qy * mB, Uz = Dw + 1, lD = (Uz | 0) < (q | 0)) Qy = fC, Dw = Uz;
                else break;
                (gC = 2147483647 < fC) ? (hC = a + 4408, nB = yz = iC = HEAP32[hC >> 2], CB = HEAP32[nB >> 2], QD = CB + 40, aw = dx = yz + QD, oB = HEAP32[aw >> 2], Ry = oB + 20, sA = HEAP32[Ry >> 2], DB = jz = oB, my = HEAP32[DB >> 2], iF = jz + my, _jtjsigstr(a, 10, sA, iF), c = 412) : (xz = fC, c = 410)
        } else xz = 1, c = 410;
    while (0);
    410 == c && (pB = xz & -1, (tA = 0 == (pB | 0)) ? c = 412 : (Gx = TA = (r | 0) /
        (pB | 0) & -1, Sy = pB));
    a: do
        if (412 == c) {
            UA = 0 < (m | 0);
            do
                if (UA) {
                    Ju = 1;
                    for (KC = 0;;)
                        if (LC = q + KC, EB = f + 28 + (LC << 2), MC = HEAP32[EB >> 2], uA = MC | 0, RD = Ju * uA, VA = KC + 1, NC = (VA | 0) < (m | 0)) Ju = RD, KC = VA;
                        else break;
                    if (mD = 2147483647 < RD) {
                        vA = a + 4408;
                        Wz = Vz = cI = HEAP32[vA >> 2];
                        Ty = HEAP32[Wz >> 2];
                        Xz = Ty + 40;
                        nD = BE = Vz + Xz;
                        Az = HEAP32[nD >> 2];
                        wA = Az + 20;
                        oD = HEAP32[wA >> 2];
                        ex = OC = Az;
                        bw = HEAP32[ex >> 2];
                        Lw = OC + bw;
                        _jtjsigstr(a, 10, oD, Lw);
                        Sy = Gx = 0;
                        break a
                    } else zz = RD
                } else zz = 1;
            while (0);
            Gx = jv = zz & -1;
            Sy = 0
        }
    while (0);
    getFUNCTION_TABLE(Hu)(a, Sy, Gx, t, iv + HEAP32[iv >> 2], bx + HEAP32[bx >>
        2]);
    wu = HEAP8[Ex];
    if (50 == wu << 24 >> 24) return Yz = h + 4, HEAP32[Yz >> 2] = m, HEAP32[l >> 2] = h, j = sx = _jtreduce(a, bx, d), STACKTOP = b, j;
    if (0 == wu << 24 >> 24) {
        Zz = Ct & 196608;
        if (Bz = 0 == (Zz | 0)) return j = iv, STACKTOP = b, j;
        $z = iv + 12;
        Nv = HEAP32[$z >> 2];
        kz = Ct & 65536;
        xA = 0 == (kz | 0);
        II = 8 == (Nv | 0);
        yA = xA | II;
        if (!yA) return Cz = HEAP32[l >> 2], HEAP32[l >> 2] = 0, lz = _jtccvt(a, 8, iv, e), HEAP32[l >> 2] = Cz, wH = 0 != lz << 24 >> 24, XF = HEAP32[e >> 2], j = YF = wH ? XF : iv, STACKTOP = b, j;
        zA = Ct & 131072;
        SD = 0 == (zA | 0);
        tv = 4 == (Nv | 0);
        if (FB = SD | tv) return j = iv, STACKTOP = b, j;
        AA = iv + 20;
        Dz = HEAP32[AA >>
            2];
        ny = HEAP32[iv >> 2];
        yy = iv + 24;
        Mw = HEAP32[yy >> 2];
        ju = iv + 28;
        Nw = _jtga(a, 4, Dz, Mw, ju);
        if (WA = 0 == (Nw | 0)) return j = 0, STACKTOP = b, j;
        GB = 0 < (Dz | 0);
        if (!GB) return j = Nw, STACKTOP = b, j;
        pD = HEAP32[Nw >> 2];
        aA = Nw + pD;
        qB = iv + ny;
        mz = 0;
        tx = qB;
        for (bA = aA;;) {
            Ez = HEAPF64[tx >> 3];
            XA = -2147483648 > Ez;
            YA = 2147483647 < Ez;
            if (cA = XA | YA) {
                j = iv;
                c = 428;
                break
            }
            qD = tx + 8;
            TD = Ez & -1;
            rB = bA + 4;
            HEAP32[bA >> 2] = TD;
            dA = mz + 1;
            if (LG = (dA | 0) < (Dz | 0)) mz = dA, tx = qD, bA = rB;
            else {
                j = Nw;
                c = 428;
                break
            }
        }
        if (428 == c) return STACKTOP = b, j
    } else return j = 0, STACKTOP = b, j
}

function _plusinsI(a, f, d, c, b, e) {
    var g, h, j, i, l, k, m, n, p, q, r, s, t, u;
    g = 0;
    h = (d | 0) / (c | 0) & -1;
    j = Math_imul(d, f) | 0;
    i = e + (j << 2);
    l = Math_imul(h, f) | 0;
    k = b + (l << 2);
    if (1 == (h | 0)) {
        if (!(0 >= (f | 0))) {
            b = -d;
            d = 0 < (c | 0);
            l = 0;
            m = k;
            n = i;
            a: for (;;) {
                p = m - 4;
                e = n + (b << 2);
                if (d) {
                    k = i = 0;
                    for (h = e;;) {
                        j = i >>> 31;
                        m = HEAP32[h >> 2];
                        q = m + i;
                        if (!((j | 0) != (m >>> 31 | 0) | (j | 0) == (q >>> 31 | 0))) break a;
                        j = k + 1;
                        if ((j | 0) < (c | 0)) i = q, k = j, h += 4;
                        else {
                            r = q;
                            break
                        }
                    }
                } else r = 0;
                HEAP32[p >> 2] = r;
                h = l + 1;
                if ((h | 0) < (f | 0)) l = h, m = p, n = e;
                else {
                    g = 27;
                    break
                }
            }
            27 != g && (HEAP32[p >> 2] = q, HEAP8[a + 204545] = 50)
        }
    } else if (1 ==
        (c | 0)) {
        if (0 < (h | 0)) {
            d = 0;
            s = i;
            for (t = k;;)
                if (k = s - 4, i = t - 4, HEAP32[i >> 2] = HEAP32[k >> 2], q = d + 1, (q | 0) < (h | 0)) d = q, s = k, t = i;
                else break
        }
    } else if (t = -h, !(0 >= (f | 0))) {
        s = 0 < (h | 0);
        d = c - 2;
        c = 0 < (d | 0);
        i = b + (l - h << 2);
        l = e + (j - h << 2);
        j = 0;
        a: for (;;) {
            e = l + (t << 2);
            if (s) {
                b = l;
                k = 0;
                q = e;
                for (p = i;;) {
                    n = HEAP32[q >> 2];
                    m = n >>> 31;
                    l = HEAP32[b >> 2] + n;
                    HEAP32[p >> 2] = l;
                    if ((m | 0) == (HEAP32[b >> 2] >>> 31 | 0) && (m | 0) != (l >>> 31 | 0)) {
                        g = 18;
                        break a
                    }
                    l = k + 1;
                    if ((l | 0) < (h | 0)) b += 4, k = l, q += 4, p += 4;
                    else break
                }
            }
            if (c) {
                p = e;
                for (q = 0;;) {
                    k = p + (t << 2);
                    if (s) {
                        b = k;
                        e = 0;
                        for (l = i;;) {
                            m = HEAP32[l >> 2];
                            n = m >>>
                                31;
                            r = HEAP32[b >> 2] + m;
                            HEAP32[l >> 2] = r;
                            if ((n | 0) == (HEAP32[b >> 2] >>> 31 | 0) && (n | 0) != (r >>> 31 | 0)) {
                                g = 24;
                                break a
                            }
                            r = e + 1;
                            if ((r | 0) < (h | 0)) b += 4, e = r, l += 4;
                            else break
                        }
                    }
                    l = q + 1;
                    if ((l | 0) < (d | 0)) p = k, q = l;
                    else {
                        u = k;
                        break
                    }
                }
            } else u = e;
            q = j + 1;
            if ((q | 0) < (f | 0)) i += t << 2, l = u + (t << 2), j = q;
            else {
                g = 27;
                break
            }
        }
        18 == g ? HEAP8[a + 204545] = 50 : 24 == g && (HEAP8[a + 204545] = 50)
    }
}

function _plusinsO(a, f, d, c, b, e) {
    var g, h, j, i, l, k, m, n, p, q, r, s, t, a = (d | 0) / (c | 0) & -1;
    g = e + (Math_imul(d, f) << 2);
    d = b + (Math_imul(a, f) << 3);
    if (1 == (a | 0)) {
        if (!(0 >= (f | 0))) {
            b = c - 1;
            e = 0 < (b | 0);
            h = -c;
            j = 0;
            i = g;
            for (l = d;;) {
                g = i - 4;
                k = HEAP32[g >> 2] | 0;
                if (e) {
                    a = 0;
                    for (m = k;;)
                        if (d = g - 4, n = m + (HEAP32[d >> 2] | 0), a += 1, (a | 0) < (b | 0)) m = n, g = d;
                        else break;
                    m = n;
                    p = i + (h << 2)
                } else m = k, p = g;
                g = l - 8;
                HEAPF64[g >> 3] = m;
                m = j + 1;
                if ((m | 0) < (f | 0)) j = m, i = p, l = g;
                else break
            }
        }
    } else if (1 == (c | 0)) {
        if (0 < (a | 0)) {
            q = 0;
            r = g;
            for (s = d;;)
                if (l = r - 4, p = s - 8, HEAPF64[p >> 3] = HEAP32[l >> 2] | 0, i = q + 1, (i |
                        0) < (a | 0)) q = i, r = l, s = p;
                else break
        }
    } else if (!(0 >= (f | 0))) {
        s = -a;
        r = 0 < (a | 0);
        q = c - 2;
        c = 0 < (q | 0);
        p = -2 * a & -1;
        l = d;
        d = 0;
        for (i = g;;) {
            g = i + (s << 2);
            if (r) {
                j = i;
                m = 0;
                h = g;
                for (n = l;;)
                    if (b = n - 8, e = h - 4, g = j - 4, HEAPF64[b >> 3] = (HEAP32[e >> 2] | 0) + (HEAP32[g >> 2] | 0), m += 1, (m | 0) < (a | 0)) j = g, h = e, n = b;
                    else break;
                b = i + (p << 2)
            } else b = g;
            if (c) {
                n = 0;
                for (h = b;;) {
                    if (r) {
                        m = h;
                        j = 0;
                        for (g = l;;)
                            if (k = g - 8, b = m - 4, HEAPF64[k >> 3] = (HEAP32[b >> 2] | 0) + HEAPF64[k >> 3], e = j + 1, (e | 0) < (a | 0)) m = b, j = e, g = k;
                            else break;
                        b = h + (s << 2)
                    } else b = h;
                    g = n + 1;
                    if ((g | 0) < (q | 0)) n = g, h = b;
                    else {
                        t = b;
                        break
                    }
                }
            } else t =
                b;
            h = d + 1;
            if ((h | 0) < (f | 0)) l += s << 3, d = h, i = t;
            else break
        }
    }
}

function _jtevery(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    g = e;
    if (0 == (f | 0)) return STACKTOP = e, 0;
    j = HEAP32[f + 12 >> 2];
    if (0 != (j & 64512 | 0)) {
        if (0 == (j & 32768 | 0)) return i = HEAP32[a + 4408 >> 2], l = HEAP32[i + (HEAP32[i >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]), STACKTOP = e, 0;
        l = _jtca(a, f);
        if (0 == (l | 0)) return STACKTOP = e, 0;
        i = f;
        k = HEAP32[f >> 2];
        m = HEAP32[k + (i + 12) >> 2] + k;
        k = l;
        n = HEAP32[l >> 2];
        p = HEAP32[n + (k + 12) >> 2] + n;
        n = HEAP32[p + (k + 20) >> 2];
        if (0 >= (n | 0)) return STACKTOP = e, l;
        q = c;
        k += HEAP32[k +
            p >> 2] + p;
        p = i + (HEAP32[i + m >> 2] + m);
        for (m = 0;;) {
            i = getFUNCTION_TABLE(q)(a, HEAP32[p >> 2], d);
            HEAP32[k >> 2] = i;
            if (0 == (i | 0)) {
                h = 0;
                b = 27;
                break
            }
            i = m + 1;
            if ((i | 0) < (n | 0)) k += 4, p += 4, m = i;
            else {
                h = l;
                b = 27;
                break
            }
        }
        if (27 == b) return STACKTOP = e, h
    }
    if (0 == (j & 32 | 0)) {
        l = a + 205336;
        m = HEAP32[l >> 2];
        p = HEAP32[f + 24 >> 2];
        k = 0 < (p | 0);
        HEAP32[g + 4 >> 2] = k ? 0 : p;
        k ? (k = g, HEAP32[k >> 2] = 0, HEAP32[l >> 2] = k, k = _jtbox(a, f), HEAP32[l >> 2] = m, i = k) : i = _jtbox(a, f);
        if (0 == (i | 0)) return STACKTOP = e, 0;
        n = i
    } else n = f;
    f = n + 20;
    i = _jtga(a, 32, HEAP32[f >> 2], HEAP32[n + 24 >> 2], n + 28);
    if (0 == (i | 0)) return STACKTOP =
        e, 0;
    g = i + HEAP32[i >> 2];
    j = n + HEAP32[n >> 2];
    p = 0 == (HEAP32[n + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[n + 4 >> 2] & 14 | 0) | 0;
    k = n & -p;
    p = HEAP32[f >> 2];
    if (0 >= (p | 0)) return STACKTOP = e, i;
    f = c;
    a: do {
        if (0 == (k | 0)) {
            c = g;
            for (n = 0;;) {
                m = getFUNCTION_TABLE(f)(a, HEAP32[j + (n << 2) >> 2], d);
                HEAP32[c >> 2] = m;
                if (0 == (m | 0)) {
                    h = 0;
                    b = 27;
                    break
                }
                l = n + 1;
                if (0 != (HEAP32[m + 12 >> 2] & 64512 | 0)) break a;
                if ((l | 0) < (p | 0)) c += 4, n = l;
                else {
                    h = i;
                    b = 27;
                    break
                }
            }
        } else {
            n = g;
            for (c = 0;;) {
                l = getFUNCTION_TABLE(f)(a, HEAP32[j + (c << 2) >> 2] + k, d);
                HEAP32[n >> 2] = l;
                if (0 == (l | 0)) {
                    h = 0;
                    b = 27;
                    break
                }
                m = c + 1;
                if (0 != (HEAP32[l + 12 >>
                        2] & 64512 | 0)) break a;
                if ((m | 0) < (p | 0)) n += 4, c = m;
                else {
                    h = i;
                    b = 27;
                    break
                }
            }
        }
        if (27 == b) return STACKTOP = e, h
    } while (0);
    b = HEAP32[a + 4408 >> 2];
    i = HEAP32[b + (HEAP32[b >> 2] + 44) >> 2];
    _jtjsigstr(a, 11, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
    STACKTOP = e;
    return 0
}
function _jtext(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n;
    if (0 == (d | 0)) return 0;
    c = d + 28;
    b = HEAP32[c >> 2];
    e = HEAP32[d + 20 >> 2];
    g = (e | 0) / (b | 0) & -1;
    h = HEAP32[d + 12 >> 2];
    i = Math_imul(1024 == (h | 0) | 4096 == (h | 0) | 8192 == (h | 0) | 16384 == (h | 0) | 2048 == (h | 0) | 32768 == (h | 0) ? 16 : 16777216 == (h | 0) ? 12 : 268435456 == (h | 0) ? 12 : 32 == (h | 0) ? 4 : 131072 == (h | 0) ? 2 : 4 == (h | 0) | 67108864 == (h | 0) | 134217728 == (h | 0) | 4194304 == (h | 0) | 8388608 == (h | 0) ? 4 : 2 == (h | 0) | 2097152 == (h | 0) | 33554432 == (h | 0) ? 1 : 536870912 == (h | 0) ? 24 : 262144 == (h | 0) | 524288 == (h | 0) | 1048576 == (h | 0) ? 44 : 128 == (h | 0) ? 8 : 65536 ==
        (h | 0) ? 4 : 64 == (h | 0) ? 4 : 1 == (h | 0) | 8 == (h | 0) | 16 == (h | 0) ? h : -1, g) | 0;
    j = _jtga(a, h, e << 1, HEAP32[d + 24 >> 2], c);
    if (0 == (j | 0)) return 0;
    e = c = j;
    l = Math_imul(i, b) | 0;
    _memcpy(c + HEAP32[e >> 2], d + HEAP32[d >> 2], l) | 0;
    0 != f << 24 >> 24 && (_jttraverse(a, j, 654), f = j + 16, HEAP32[f >> 2] += 1, _jttraverse(a, d, 1910), f = d + 16, k = HEAP32[f >> 2] - 1, HEAP32[f >> 2] = k, 0 == (k | 0) && (k = d - 32 + 24, f = HEAP16[k + 4 >> 1], d = f << 16 >> 16, m = HEAP32[124360 + (d << 2) >> 2], n = a + 1056, HEAP32[n >> 2] -= m, 10 < f << 16 >> 16 ? _free(k) : (f = a + 204588 + (d << 2), HEAP32[k >> 2] = HEAP32[f >> 2], HEAP32[f >> 2] = k, k = a + 204712 + (d <<
        2), HEAP32[k >> 2] += m)));
    a = (HEAP32[j + 8 >> 2] | 0) / (i | 0) & -1;
    HEAP32[j + 28 >> 2] = a;
    HEAP32[j + 20 >> 2] = Math_imul(a, g) | 0;
    if (0 != (h & 196895 | 0)) return a = j;
    _memset(c + (HEAP32[e >> 2] + l), 0, Math_imul(a - b, i) | 0) | 0;
    return a = j
}
function _jtfa(a, f) {
    var d, c, b, e, g;
    if (0 == (f | 0)) return 0;
    _jttraverse(a, f, 1910);
    d = f + 16;
    c = HEAP32[d >> 2] - 1;
    HEAP32[d >> 2] = c;
    0 == (c | 0) && (d = f - 32 + 24, c = HEAP16[d + 4 >> 1], b = c << 16 >> 16, e = HEAP32[124360 + (b << 2) >> 2], g = a + 1056, HEAP32[g >> 2] -= e, 10 < c << 16 >> 16 ? _free(d) : (c = a + 204588 + (b << 2), HEAP32[d >> 2] = HEAP32[c >> 2], HEAP32[c >> 2] = d, d = a + 204712 + (b << 2), HEAP32[d >> 2] += e));
    return d = HEAP32[31134]
}
function _jtfix(a, f) {
    var d, c, b, e, g, h, j;
    d = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    c = a + 205336;
    b = HEAP32[c >> 2];
    if (0 == (f | 0)) return 0;
    HEAP32[c >> 2] = 0;
    HEAP32[a + 204504 >> 2] = 255;
    e = _jtga(a, 4, 1, 0, 0);
    0 == (e | 0) ? g = 0 : (HEAP32[e + HEAP32[e >> 2] >> 2] = 255, g = e);
    e = _jtreshape(a, g, HEAP32[40250]);
    g = a + 204508;
    HEAP32[g >> 2] = e;
    if (0 == (e | 0)) return 0;
    HEAP32[a + 204512 >> 2] = e + HEAP32[e >> 2];
    e = HEAP32[f + 12 >> 2];
    if (0 == (e & 2 | 0)) h = f, j = e;
    else {
        if (2 <= (HEAP32[f + 24 >> 2] | 0)) return d = HEAP32[a + 4408 >> 2], e = HEAP32[d + (HEAP32[d >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[e +
            20 >> 2], e + HEAP32[e >> 2]), 0;
        e = _jtnfs(a, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]);
        if (0 == (e | 0)) return 0;
        h = e;
        j = HEAP32[e + 12 >> 2]
    }
    if (0 == (j & 33816576 | 0)) return f = HEAP32[a + 4408 >> 2], e = HEAP32[f + (HEAP32[f >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    e = HEAP32[30648];
    j = 0 == (j & 262144 | 0) ? _jtsymbrdlock(a, h) : h;
    h = _jtfixa(a, e, j);
    if (0 == (h | 0)) return 0;
    0 != (HEAP32[h + 12 >> 2] & 1835008 | 0) && (j = h, e = HEAP32[h >> 2], 0 != (HEAP32[e + (j + 8) >> 2] | 0) && (j = e + (j + 20), HEAP32[j >> 2] = HEAP32[j >> 2] & -393217 | 262144));
    HEAP32[c >> 2] = b;
    HEAP32[g >> 2] = 0;
    _jttraverse(a,
        h, 654);
    g = h + 16;
    HEAP32[g >> 2] += 1;
    _jttpop(a, d);
    return d = _jttpush(a, h)
}
function _jtfixa(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return b = 0;
    e = d + 12;
    if (0 != (HEAP32[e >> 2] & 805567999 | 0)) return b = d;
    g = HEAP32[d >> 2];
    h = d + (g + 20);
    if (0 != (HEAP32[h >> 2] & 262144 | 0)) return b = d;
    j = HEAP32[d + (g + 8) >> 2];
    i = HEAP32[d + (g + 12) >> 2];
    l = HEAP32[d + (g + 16) >> 2];
    k = HEAP8[d + (g + 40)];
    m = HEAP32[123192 + ((k & 255) << 2) >> 2];
    n = (HEAP32[30648] | 0) == (f | 0);
    p = HEAP32[31072];
    q = n ? p : f;
    r = 0 != (j | 0);
    s = r ^ 1;
    t = 0 == (i | 0);
    if (t & s) return b = d;
    switch (k << 24 >> 24 | 0) {
        case -93:
            if (r) {
                u = _jtfixa(a, q, j);
                if (w = 0 == (u | 0)) return b = 0;
                v = u
            } else v = 0;
            if (t) x = HEAP32[h >> 2], y = x & 16777216, (z = 0 == (y | 0)) && (c = 42);
            else {
                A = _jtfixa(a, q, i);
                if (D = 0 == (A | 0)) return b = 0;
                B = 0 == (v | 0);
                G = HEAP32[h >> 2];
                C = G & 16777216;
                F = 0 == (C |
                    0);
                if (B) F && (c = 42);
                else {
                    if (F) {
                        if (E = 0 == (m | 0)) return b = 0;
                        J = HEAP32[m >> 2];
                        L = J + 4;
                        I = m + L;
                        H = HEAP32[I >> 2];
                        return b = K = getFUNCTION_TABLE(H)(a, v, A, m)
                    }
                    N = _jthead(a, l);
                    S = _jttail(a, l);
                    if (T = 0 == (m | 0)) return b = 0;
                    V = HEAP32[m >> 2];
                    Q = V + 4;
                    P = m + Q;
                    M = HEAP32[P >> 2];
                    R = getFUNCTION_TABLE(M)(a, N, S, m);
                    if (O = 0 == (R | 0)) return b = 0;
                    aa = HEAP32[R >> 2];
                    Z = aa + 4;
                    $ = R + Z;
                    ba = HEAP32[$ >> 2];
                    return b = ka = FUNCTION_TABLE(ba)(a, v, A, R)
                }
            }
            if (42 == c) {
                if (ea = 0 == (m | 0)) return b = 0;
                ha = HEAP32[m >> 2];
                da = m + ha;
                ga = HEAP32[da >> 2];
                return b = U = getFUNCTION_TABLE(ga)(a, v, m)
            }
            ca = _jthead(a, l);
            X = _jttail(a, l);
            if (Y = 0 == (m | 0)) return b = 0;
            ja = HEAP32[m >> 2];
            fa = ja + 4;
            ia = m + fa;
            ra = HEAP32[ia >> 2];
            sa = getFUNCTION_TABLE(ra)(a, ca, X, m);
            if (ta = 0 == (sa | 0)) return b = 0;
            wa = HEAP32[sa >> 2];
            za = sa + wa;
            Ba = HEAP32[za >> 2];
        return b = ua = getFUNCTION_TABLE(Ba)(a, v, sa);
        case 52:
            return ya = HEAP32[31072], xa = _jtfixa(a, ya, j), oa = HEAP32[31072], pa = _jtfixa(a, oa, i), la = _jthook(a, xa, pa);
        case -76:
        case -77:
            qa = _jtevery2(a, q, l, 0, 316);
            Da = _jtevery(a, qa, 0, 454);
            if (Aa = 0 == (Da | 0)) return b = 0;
            Ea = _jtfixa(a, q, i);
            Sa = 0 == (Ea | 0);
            Oa = 0 == (m | 0);
            if (Ha = Sa | Oa) return b = 0;
            Ga =
                HEAP32[m >> 2];
            Ma = Ga + 4;
            Ia = m + Ma;
            db = HEAP32[Ia >> 2];
        return b = W = getFUNCTION_TABLE(db)(a, Da, Ea, m);
        case 58:
            Xa = HEAP32[31058];
            Ta = _jtfixa(a, Xa, j);
            fb = HEAP32[31071];
            mb = _jtfixa(a, fb, i);
            if (ma = 0 == (m | 0)) return b = 0;
            ab = HEAP32[m >> 2];
            Na = ab + 4;
            $a = m + Na;
            Ua = HEAP32[$a >> 2];
        return b = Pa = getFUNCTION_TABLE(Ua)(a, Ta, mb, m);
        case 38:
        case -73:
        case -74:
        case -18:
            bb = _jtfixa(a, q, j);
            La = HEAP32[31058];
            Ja = _jtfixa(a, La, i);
            if (Qa = 0 == (m | 0)) return b = 0;
            Ya = HEAP32[m >> 2];
            lb = Ya + 4;
            Ca = m + lb;
            gb = HEAP32[Ca >> 2];
        return b = Fa = getFUNCTION_TABLE(gb)(a, bb, Ja, m);
        case 51:
            Za =
                _jtfixa(a, q, j);
            if (qb = 0 == (Za | 0)) return ib = 2, ub = HEAP32[31080], eb = ub + (ib << 2), rb = HEAP32[eb >> 2], wb = _jtfixa(a, rb, i), Ka = _jtfixa(a, q, l), Va = _jtfolk(a, Za, wb, Ka);
            nb = Za + 12;
            ob = HEAP32[nb >> 2];
            cb = ob & 1835008;
            if (Wa = 0 == (cb | 0)) return ib = 2, ub = HEAP32[31080], eb = ub + (ib << 2), rb = HEAP32[eb >> 2], wb = _jtfixa(a, rb, i), Ka = _jtfixa(a, q, l), Va = _jtfolk(a, Za, wb, Ka);
            yb = HEAP32[Za >> 2];
            Cb = yb + 40;
            Pb = Za + Cb;
            zb = HEAP8[Pb];
            ib = ac = (Zb = -87 == zb << 24 >> 24) ? 1 : 2;
            ub = HEAP32[31080];
            eb = ub + (ib << 2);
            rb = HEAP32[eb >> 2];
            wb = _jtfixa(a, rb, i);
            Ka = _jtfixa(a, q, l);
            return Va =
                _jtfolk(a, Za, wb, Ka);
        case 126:
            if (r && (Hb = j + 12, Ib = HEAP32[Hb >> 2], Qb = Ib & 33554432, Rb = 0 == (Qb | 0), !Rb)) {
                Ob = HEAP32[j >> 2];
                Bb = j + 20;
                xb = HEAP32[Bb >> 2];
                dc = _jtga(a, 2, xb, 1, 0);
                if (tb = 0 == (dc | 0)) return b = 0;
                oc = Ob + 14;
                Mb = j + oc;
                Tb = HEAP32[dc >> 2];
                Ra = dc + Tb;
                _memcpy(Ra, Mb, xb) | 0;
                Nb = _jtbox(a, dc);
                sb = a + 204508;
                Ab = HEAP32[sb >> 2];
                Eb = _jteps(a, Nb, Ab);
                Lb = 0 == (Eb | 0);
                if (!Lb && (vb = HEAP32[Eb >> 2], wc = Eb + vb, Ec = Eb + 20, yc = HEAP32[Ec >> 2], Db = _memchr(wc, 0, yc), bc = 0 == (Db | 0))) return b = d;
                pb = a + 204504;
                Fb = HEAP32[pb >> 2];
                if (jb = 0 == (Fb | 0)) return gc = a + 4408, ic = HEAP32[gc >>
                    2], vc = HEAP32[ic >> 2], hc = vc + 40, uc = ic + hc, Ac = HEAP32[uc >> 2], xc = Ac + 20, cd = HEAP32[xc >> 2], jc = HEAP32[Ac >> 2], Tc = Ac + jc, _jtjsigstr(a, 10, cd, Tc), b = 0;
                Fc = Fb - 1;
                HEAP32[pb >> 2] = Fc;
                Bc = a + 204512;
                ec = HEAP32[Bc >> 2];
                Xb = ec + (Fc << 2);
                HEAP32[Xb >> 2] = dc;
                sc = _jtsymbrdlock(a, j);
                if (nc = 0 == (sc | 0)) tc = d;
                else {
                    Ub = _jtfixa(a, q, sc);
                    if ($c = 0 == (Ub | 0)) return b = 0;
                    ad = HEAP32[30648];
                    if (qc = (ad | 0) == (f | 0)) tc = Ub;
                    else if (Uc = _jtselfq(sc), rc = 0 == Uc << 24 >> 24) tc = Ub;
                    else {
                        kb = a + 205692;
                        Jb = HEAP32[kb >> 2];
                        $b = a + 205752;
                        na = HEAP32[$b >> 2];
                        Vb = na + Jb;
                        kc = a + 204580;
                        HEAP32[kc >> 2] =
                            0;
                        va = a + 204552;
                        HEAP32[va >> 2] = 716;
                        Wc = a + 204584;
                        HEAP32[Wc >> 2] = 2468;
                        Yb = _jtlrr(a, Ub);
                        fc = a + 204545;
                        Kb = HEAP8[fc];
                        Gb = 0 == Kb << 24 >> 24;
                        if (!Gb) return b = 0;
                        gd = HEAP32[kc >> 2];
                        Gc = (mc = 0 == (gd | 0)) ? Yb : dd = _jtover(a, Yb, gd);
                        HEAP32[kc >> 2] = 0;
                        kd = 0 == (Gc | 0);
                        kd || (_jttraverse(a, Gc, 654), Fd = Gc + 16, Vc = HEAP32[Fd >> 2], Hd = Vc + 1, HEAP32[Fd >> 2] = Hd);
                        _jttpop(a, Vb);
                        bd = _jttpush(a, Gc);
                        if (cc = 0 == (bd | 0)) return b = 0;
                        Ic = HEAP32[31058];
                        fd = (Ic | 0) == (f | 0);
                        xd = HEAP32[31072];
                        fd ? (Xc = xd, c = 63) : (Wd = (xd | 0) == (f | 0)) ? (Xc = f, c = 63) : Wb = 0;
                        if (63 == c) {
                            Sb = _jtga(a, 2, 2, 1, 0);
                            (pc =
                                0 == (Sb | 0)) ? zc = 0: (hd = HEAP32[Sb >> 2], Yc = Sb + hd, tempBigInt = 31008, HEAP8[Yc] = tempBigInt, tempBigInt >>= 8, HEAP8[Yc + 1 | 0] = tempBigInt, zc = Sb);
                            Ad = _jtover(a, bd, zc);
                            Gd = _jtcolon(a, Xc, Ad);
                            if (hb = 0 == (Gd | 0)) return b = 0;
                            Wb = Gd
                        }
                        ld = HEAP32[31071];
                        (ed = (ld | 0) == (f | 0)) ? c = 68: (Jc = HEAP32[31072], (Oc = (Jc | 0) == (f | 0)) ? c = 68 : (Pc = 0, ke = Jc));
                        if (68 == c) {
                            Ed = HEAP32[31073];
                            pd = _jtga(a, 2, 2, 1, 0);
                            (id = 0 == (pd | 0)) ? Cc = 0: (Qc = HEAP32[pd >> 2], Zc = pd + Qc, tempBigInt = 8312, HEAP8[Zc] = tempBigInt, tempBigInt >>= 8, HEAP8[Zc + 1 | 0] = tempBigInt, Cc = pd);
                            vd = _jtga(a, 2, 2, 1, 0);
                            ($d =
                                0 == (vd | 0)) ? je = 0: (Kc = HEAP32[vd >> 2], Bd = vd + Kc, tempBigInt = 31008, HEAP8[Bd] = tempBigInt, tempBigInt >>= 8, HEAP8[Bd + 1 | 0] = tempBigInt, je = vd);
                            od = _jtover(a, bd, je);
                            Vd = _jtover(a, Cc, od);
                            Zd = _jtcolon(a, Ed, Vd);
                            if (Jd = 0 == (Zd | 0)) return b = 0;
                            Md = HEAP32[31072];
                            Pc = Zd;
                            ke = Md
                        }(Cd = (ke | 0) == (f | 0)) ? Xd = fe = _jtcolon(a, Wb, Pc): (qd = HEAP32[31058], Xd = Mc = (Od = (qd | 0) == (f | 0)) ? Wb : Pc);
                        if (Dd = 0 == (Xd | 0)) return b = 0;
                        tc = Xd
                    }
                }
                Td = HEAP32[31086];
                le = HEAP32[pb >> 2];
                me = le + 1;
                HEAP32[pb >> 2] = me;
                wd = HEAP32[Bc >> 2];
                Ie = wd + (le << 2);
                HEAP32[Ie >> 2] = Td;
                xe = a + 204545;
                ye = HEAP8[xe];
                Fe = 0 == ye << 24 >> 24;
                if (!Fe) return b = 0;
                nf = HEAP32[e >> 2];
                Je = tc + 12;
                Id = HEAP32[Je >> 2];
                if (Qe = (nf | 0) == (Id | 0)) return b = tc;
                sd = nf & 805567999;
                ge = 0 == (sd | 0);
                if (!ge && (ud = Id & 805567999, md = 0 == (ud | 0), !md)) return b = tc;
                de = a + 4408;
                ae = HEAP32[de >> 2];
                Dc = HEAP32[ae >> 2];
                Nc = Dc + 12;
                yd = ae + Nc;
                jd = HEAP32[yd >> 2];
                Sc = jd + 20;
                lc = HEAP32[Sc >> 2];
                nd = HEAP32[jd >> 2];
                Rc = jd + nd;
                _jtjsigstr(a, 3, lc, Rc);
                return b = 0
            }
            Hc = HEAP32[31071];
            Kd = _jtfixa(a, Hc, j);
            if (Rd = 0 == (m | 0)) return b = 0;
            Nd = HEAP32[m >> 2];
            be = m + Nd;
            zd = HEAP32[be >> 2];
        return b = we = getFUNCTION_TABLE(zd)(a, Kd, m);
        case -92:
        case 92:
        case -90:
            Lc =
                HEAP32[31058];
            rd = _jtfixa(a, Lc, j);
            if (se = 0 == (m | 0)) return b = 0;
            Ud = HEAP32[m >> 2];
            Cf = m + Ud;
            td = HEAP32[Cf >> 2];
        return b = Te = getFUNCTION_TABLE(td)(a, rd, m);
        case 47:
            pe = HEAP32[31071];
            Pd = _jtfixa(a, pe, j);
            if (Me = 0 == (m | 0)) return b = 0;
            Sd = HEAP32[m >> 2];
            $e = m + Sd;
            qe = HEAP32[$e >> 2];
        return b = Ce = getFUNCTION_TABLE(qe)(a, Pd, m);
        case 50:
            return cf = HEAP32[31071], sf = _jtfixa(a, cf, j), Ue = HEAP32[31058], kf = _jtfixa(a, Ue, i), Re = _jthook(a, sf, kf);
        case 64:
        case -75:
        case -98:
            ce = HEAP32[31058];
            De = _jtfixa(a, ce, j);
            Ge = _jtfixa(a, q, i);
            if (He = 0 == (m | 0)) return b = 0;
            We = HEAP32[m >> 2];
            Yd = We + 4;
            Ne = m + Yd;
            Se = HEAP32[Ne >> 2];
        return b = Ee = getFUNCTION_TABLE(Se)(a, De, Ge, m);
        default:
            if (r) {
                Ld = _jtfixa(a, q, j);
                if (he = 0 == (Ld | 0)) return b = 0;
                Qd = Ld
            } else Qd = 0;
            if (t) {
                if (re = 0 == (Qd | 0)) return b = d;
                if (Ke = 0 == (m | 0)) return b = 0;
                Ae = HEAP32[m >> 2];
                te = m + Ae;
                ie = HEAP32[te >> 2];
                return b = ff = getFUNCTION_TABLE(ie)(a, Qd, m)
            }
            ue = _jtfixa(a, q, i);
        return 0 == (ue | 0) ? b = 0 : 0 == (Qd | 0) ? b = d : 0 == (m | 0) ? b = 0 : b = getFUNCTION_TABLE(HEAP32[m + (HEAP32[m >> 2] + 4) >> 2])(a, Qd, ue, m)
    }
}
function _jtfolk(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0) | 0 == (c | 0)) return g = 0, STACKTOP = e, g;
    h = HEAP32[d >> 2];
    j = HEAP8[d + (h + 40)];
    i = HEAP32[c >> 2];
    l = c + i;
    k = c + (i + 40);
    m = HEAP8[k];
    n = HEAP32[f + 12 >> 2];
    if (0 != (n & 805567999 | 0)) {
        p = n & 2;
        (q = 0 == (p | 0)) ? r = 1792: (s = f + 24, t = HEAP32[s >> 2], u = 1 == (t | 0), w = 126 == j << 24 >> 24, (v = u & w) ? (x = h + 8, y = d + x, z = HEAP32[y >> 2], (A = 0 == (z | 0)) ? r = 1792 : (D = z + 12, B = HEAP32[D >>
            2], G = B & 1835008, (C = 0 == (G | 0)) ? r = 1792 : (F = HEAP32[z >> 2], E = F + 40, J = z + E, L = HEAP8[J], I = 123 == L << 24 >> 24, H = 51 == m << 24 >> 24, (K = I & H) ? (N = i + 8, S = c + N, T = HEAP32[S >> 2], V = T + 12, Q = HEAP32[V >> 2], P = Q & 2, (M = 0 == (P | 0)) ? r = 1792 : (R = T + 24, O = HEAP32[R >> 2], (aa = 1 == (O | 0)) ? (Z = i + 12, $ = c + Z, ba = HEAP32[$ >> 2], (ka = 0 == (ba | 0)) ? r = 1792 : (ea = ba + 12, ha = HEAP32[ea >> 2], da = ha & 1835008, (ga = 0 == (da | 0)) ? r = 1792 : (U = HEAP32[ba >> 2], ca = U + 40, X = ba + ca, Y = HEAP8[X], (ja = -55 == Y << 24 >> 24) ? (fa = i + 16, ia = c + fa, ra = HEAP32[ia >> 2], (sa = 0 == (ra | 0)) ? r = 1792 : (ta = ra + 12, wa = HEAP32[ta >> 2], za = wa & 1835008, (Ba = 0 == (za | 0)) ? r = 1792 : (ua = HEAP32[ra >> 2], ya = ua + 40, xa = ra + ya, oa = HEAP8[xa], r = (pa = 93 == oa << 24 >> 24) ? 2948 : 1792))) : r = 1792))) : r = 1792)) : r = 1792))) : r = 1792);
        la = a + 204545;
        qa = HEAP8[la];
        Da = 0 == qa << 24 >> 24;
        if (!Da) return g = 0, STACKTOP = e, g;
        Aa = _jtga(a, 262144, 1, 0, 0);
        if (Ea = 0 == (Aa | 0)) return g = 0, STACKTOP = e, g;
        Sa = HEAP32[Aa >> 2];
        Oa = Aa + Sa;
        HEAP32[Oa >> 2] = r;
        Ha = Sa + 4;
        Ga = Aa + Ha;
        HEAP32[Ga >> 2] = 1794;
        Ma = Sa + 8;
        Ia = Aa + Ma;
        HEAP32[Ia >> 2] = f;
        db = Sa + 12;
        W = Aa + db;
        HEAP32[W >> 2] = d;
        Xa = Sa + 16;
        Ta = Aa + Xa;
        HEAP32[Ta >> 2] = c;
        fb = Sa + 20;
        mb = Aa + fb;
        HEAP32[mb >> 2] = 0;
        ma = Sa + 24;
        ab = Aa + ma;
        HEAP32[ab >> 2] = 2147483647;
        Na = Sa + 28;
        $a = Aa + Na;
        HEAP32[$a >> 2] = 2147483647;
        Ua = Sa + 32;
        Pa = Aa + Ua;
        HEAP32[Pa >> 2] = 2147483647;
        bb = Sa + 36;
        La = Aa + bb;
        HEAP32[La >> 2] = 0;
        Ja = Sa + 40;
        Qa = Aa + Ja;
        HEAP8[Qa] = 51;
        g = Aa;
        STACKTOP = e;
        return g
    }
    Ya = HEAP32[f >> 2];
    lb = f + Ya;
    Ca = HEAP8[f + (Ya + 40)];
    gb = Ca << 24 >> 24;
    a: do switch (gb | 0) {
            case 126:
                Fa = Ya + 8;
                qb = Za = f + Fa;
                ib = HEAP32[qb >> 2];
                ub = ib + 12;
                eb = HEAP32[ub >> 2];
                rb = eb & 33554432;
                if (wb = 0 == (rb | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Ka = 2486;
                Va = 1838;
                break;
            case -87:
                Ka = 2266;
                Va = 2264;
                break;
            case 38:
            case 51:
                nb = 34 == m << 24 >> 24;
                if (!nb) {
                    Ka =
                        2018;
                    Va = 2022;
                    break a
                }
                ob = i + 8;
                Wa = cb = c + ob;
                yb = HEAP32[Wa >> 2];
                Cb = yb + 12;
                Pb = HEAP32[Cb >> 2];
                zb = Pb & 2;
                if (Zb = 0 == (zb | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                ac = yb + 24;
                Hb = HEAP32[ac >> 2];
                Ib = 1 == (Hb | 0);
                if (!Ib) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Qb = HEAP32[40248];
                Rb = i + 12;
                Bb = Ob = c + Rb;
                xb = HEAP32[Bb >> 2];
                dc = _jtequ(a, Qb, xb);
                if (tb = 0 == dc << 24 >> 24) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                oc = Ya + 8;
                Tb = Mb = f + oc;
                Ra = HEAP32[Tb >> 2];
                Nb = Ra + 12;
                sb = HEAP32[Nb >> 2];
                Ab = sb & 2;
                if (Eb = 0 == (Ab | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Lb = Ra + 24;
                vb = HEAP32[Lb >> 2];
                wc = 1 == (vb | 0);
                if (!wc) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Ec =
                    Ya + 12;
                Db = yc = f + Ec;
                bc = HEAP32[Db >> 2];
                if (pb = 0 == (bc | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Fb = bc + 12;
                jb = HEAP32[Fb >> 2];
                gc = jb & 1835008;
                if (ic = 0 == (gc | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                hc = vc = bc;
                uc = HEAP32[hc >> 2];
                Ac = uc + 40;
                xc = vc + Ac;
                cd = HEAP8[xc];
                jc = -55 == cd << 24 >> 24;
                if (!jc) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Tc = 38 == Ca << 24 >> 24;
                if (!Tc) {
                    Fc = Ya + 16;
                    ec = Bc = f + Fc;
                    Xb = HEAP32[ec >> 2];
                    if (sc = 0 == (Xb | 0)) {
                        Ka = 2018;
                        Va = 2022;
                        break a
                    }
                    nc = Xb + 12;
                    tc = HEAP32[nc >> 2];
                    Ub = tc & 1835008;
                    if ($c = 0 == (Ub | 0)) {
                        Ka = 2018;
                        Va = 2022;
                        break a
                    }
                    qc = ad = Xb;
                    Uc = HEAP32[qc >> 2];
                    rc = Uc + 40;
                    kb = ad + rc;
                    Jb = HEAP8[kb];
                    $b = 93 == Jb << 24 >> 24;
                    if (!$b) {
                        Ka = 2018;
                        Va = 2022;
                        break a
                    }
                }
                Ka = 902;
                Va = 2022;
                break;
            case 64:
                na = 123 == j << 24 >> 24;
                Vb = 93 == m << 24 >> 24;
                kc = na & Vb;
                if (!kc) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                va = Ya + 8;
                Yb = Wc = f + va;
                fc = HEAP32[Yb >> 2];
                Kb = Ya + 12;
                gd = Gb = f + Kb;
                mc = HEAP32[gd >> 2];
                if (Gc = 0 == (mc | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                dd = mc + 12;
                kd = HEAP32[dd >> 2];
                Fd = kd & 1835008;
                if (Vc = 0 == (Fd | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                bd = Hd = mc;
                cc = HEAP32[bd >> 2];
                Ic = cc + 40;
                fd = Hd + Ic;
                xd = HEAP8[fd];
                Xc = 91 != xd << 24 >> 24;
                Wd = 0 == (fc | 0);
                if (Wb = Xc | Wd) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Sb = fc + 12;
                pc = HEAP32[Sb >> 2];
                zc = pc & 1835008;
                if (hd = 0 == (zc | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Ad = Yc = fc;
                Gd = HEAP32[Ad >> 2];
                hb = Gd + 40;
                ld = Yc + hb;
                ed = HEAP8[ld];
                Jc = 34 == ed << 24 >> 24;
                if (!Jc) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Oc = Gd + 8;
                ke = Pc = Yc + Oc;
                Ed = HEAP32[ke >> 2];
                if (pd = 0 == (Ed | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                id = Ed + 12;
                Cc = HEAP32[id >> 2];
                Qc = Cc & 1835008;
                if (Zc = 0 == (Qc | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                $d = vd = Ed;
                je = HEAP32[$d >> 2];
                Kc = je + 40;
                Bd = vd + Kc;
                od = HEAP8[Bd];
                Vd = 60 == od << 24 >> 24;
                if (!Vd) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Zd = HEAP32[31058];
                Jd = Gd + 12;
                Cd = Md = Yc + Jd;
                fe = HEAP32[Cd >> 2];
                Xd = _jtequ(a, Zd, fe);
                if (qd = 0 == Xd << 24 >> 24) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Ka = 2018;
                Va = 266;
                break;
            case 47:
                Od = 37 == j << 24 >> 24;
                Mc = 35 == m << 24 >> 24;
                Dd = Od & Mc;
                if (!Dd) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Td = Ya + 8;
                me = le = f + Td;
                wd = HEAP32[me >> 2];
                if (Ie = 0 == (wd | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                xe = wd + 12;
                ye = HEAP32[xe >> 2];
                Fe = ye & 1835008;
                if (nf = 0 == (Fe | 0)) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Id = Je = wd;
                Qe = HEAP32[Id >> 2];
                sd = Qe + 40;
                ge = Je + sd;
                ud = HEAP8[ge];
                md = 43 == ud << 24 >> 24;
                if (!md) {
                    Ka = 2018;
                    Va = 2022;
                    break a
                }
                Ka = 1334;
                Va = 2022;
                break;
            default:
                Ka = 2018, Va = 2022
        }
        while (0);
        de = -87 == Ca << 24 >> 24;
    ae = (de ? j : m) <<
        24 >> 24;
    a: do switch (ae | 0) {
            case 47:
                Dc = h + 8;
                yd = Nc = d + Dc;
                jd = HEAP32[yd >> 2];
                (Sc = 0 == (jd | 0)) ? (lc = 0, b = 71) : (nd = jd + 12, Rc = HEAP32[nd >> 2], Hc = Rc & 1835008, (Kd = 0 == (Hc | 0)) ? (lc = 0, b = 71) : (Nd = Rd = jd, be = HEAP32[Nd >> 2], zd = be + 40, we = Rd + zd, Lc = HEAP8[we], (rd = 43 == Lc << 24 >> 24) ? se = 4 : (Ud = Lc << 24 >> 24, (Cf = -120 == Lc << 24 >> 24) ? se = 5 : (lc = Ud, b = 71))));
                71 == b && (se = Te = (td = -118 == (lc | 0)) ? 6 : -1);
                if (!de) {
                    pe = se;
                    Pd = Va;
                    b = 107;
                    break a
                }
                Sd = Me = jd;
                $e = HEAP32[Sd >> 2];
                qe = $e + 40;
                Ce = Me + qe;
                cf = HEAP8[Ce];
                (sf = -67 == cf << 24 >> 24) ? (Ue = $e + 8, Re = kf = Me + Ue, ce = HEAP32[Re >> 2], De = ce + 12,
                    Ge = HEAP32[De >> 2], He = Ge & 4, (We = 0 == (He | 0)) ? Yd = -67 : (Ne = ce + 24, Se = HEAP32[Ne >> 2], (Ee = 0 == (Se | 0)) ? (he = Ld = ce, Qd = HEAP32[he >> 2], Ke = re = Ld + Qd, Ae = HEAP32[Ke >> 2], te = Ae - 16, ie = 16 > te >>> 0, ff = Ae & 255, Yd = ue = ie ? ff : -67) : Yd = -67)) : Yd = cf;
                Oe = Yd & 255;
                ne = Oe + 56;
                ze = HEAP8[ne];
                vf = 0 == ze << 24 >> 24;
                lf = 0 == Yd << 24 >> 24;
                if (Xe = vf | lf) {
                    pe = se;
                    Pd = Va;
                    b = 107;
                    break a
                }
                Be = HEAP32[c >> 2];
                hf = Be + 40;
                af = c + hf;
                zf = HEAP8[af];
                (uf = -67 == zf << 24 >> 24) ? (ve = Be + 8, Df = If = c + ve, Ef = HEAP32[Df >> 2], Gf = Ef + 12, of = HEAP32[Gf >> 2], Lf = of & 4, (pf = 0 == (Lf | 0)) ? bf = -67 : (Bf = Ef + 24, Pf = HEAP32[Bf >> 2], (Ye = 0 == (Pf | 0)) ? (jf = Hf = Ef, mf = HEAP32[jf >> 2], Ve = Le = Hf + mf, df = HEAP32[Ve >> 2], wf = df - 16, Yf = 16 > wf >>> 0, Jf = df & 255, bf = Qf = Yf ? Jf : -67) : bf = -67)) : bf = zf;
                Sf = bf & 255;
                Mf = Sf + 56;
                ee = HEAP8[Mf];
                oe = 0 == ee << 24 >> 24;
                rf = 0 == bf << 24 >> 24;
                if (Ff = oe | rf) {
                    pe = se;
                    Pd = Va;
                    b = 107;
                    break a
                }
                pe = se;
                Pd = 2444;
                b = 107;
                break;
            case 59:
                if (xf = 123 == m << 24 >> 24) {
                    Pe = 0;
                    qf = 884;
                    yf = Ka;
                    break a
                }
                Nf = -98 == m << 24 >> 24;
                if (!Nf) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                Zf = i + 12;
                Ze = tg = c + Zf;
                gf = HEAP32[Ze >> 2];
                ef = 0 == (gf | 0);
                b: do
                    if (ef) Kf = 0;
                    else {
                        bg = gf + 12;
                        lg = HEAP32[bg >> 2];
                        Rf = lg & 4;
                        Ug = 0 == (Rf | 0);
                        do
                            if (Ug)
                                if (Vf =
                                    a + 205336, Jg = HEAP32[Vf >> 2], HEAP32[Vf >> 2] = 0, hg = _jtccvt(a, 4, gf, e), HEAP32[Vf >> 2] = Jg, Lg = 0 == hg << 24 >> 24) {
                                    $f = a + 4408;
                                    dh = nh = ah = HEAP32[$f >> 2];
                                    mg = HEAP32[dh >> 2];
                                    yh = mg + 12;
                                    ig = Bg = nh + yh;
                                    ng = HEAP32[ig >> 2];
                                    Ng = ng + 20;
                                    Ch = HEAP32[Ng >> 2];
                                    Vg = Dg = ng;
                                    pg = HEAP32[Vg >> 2];
                                    zg = Dg + pg;
                                    _jtjsigstr(a, 3, Ch, zg);
                                    Kf = 0;
                                    break b
                                } else if (Pg = HEAP32[e >> 2], cg = 0 == (Pg | 0)) {
                            Kf = 0;
                            break b
                        } else dg = Pg;
                        else dg = gf;
                        while (0);
                        qg = dg + 24;
                        vg = HEAP32[qg >> 2];
                        (bh = 0 == (vg | 0)) ? (Eg = Zg = dg, wg = HEAP32[Eg >> 2], Kh = vh = Zg + wg, Kf = $g = HEAP32[Kh >> 2]) : (Ag = a + 4408, Mg = xg = Lh = HEAP32[Ag >> 2], rg =
                            HEAP32[Mg >> 2], Sg = rg + 56, Uh = jg = xg + Sg, Of = HEAP32[Uh >> 2], Tg = Of + 20, qi = HEAP32[Tg >> 2], gi = eg = Of, kg = HEAP32[gi >> 2], Qg = eg + kg, _jtjsigstr(a, 14, qi, Qg), Kf = 0)
                    }
                while (0);
                Wg = i + 8;
                zh = wi = c + Wg;
                Wf = HEAP32[zh >> 2];
                di = 0 == (Wf | 0);
                do
                    if (!di && (ch = Wf + 12, Mh = HEAP32[ch >> 2], Fg = Mh & 1835008, Rg = 0 == (Fg | 0), !Rg && (Gg = Vh = Wf, eh = HEAP32[Gg >> 2], kh = eh + 40, fh = Vh + kh, Wh = HEAP8[fh], qh = 60 == Wh << 24 >> 24, og = 0 == (Kf | 0), Og = qh & og))) {
                        Pe = 0;
                        qf = 402;
                        yf = Ka;
                        break a
                    }
                while (0);
                Kg = HEAP32[c >> 2];
                Ih = Kg + 8;
                wh = ai = c + Ih;
                Jh = Nh = Xh = HEAP32[wh >> 2];
                lj = HEAP32[Jh >> 2];
                gh = lj + 40;
                rh = Nh + gh;
                Ph =
                    HEAP8[rh];
                if (!(64 == Ph << 24 >> 24 | -75 == Ph << 24 >> 24 | 38 == Ph << 24 >> 24 | -73 == Ph << 24 >> 24)) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                hi = lj + 8;
                fg = sh = Nh + hi;
                Yi = HEAP32[fg >> 2];
                if (mj = 0 == (Yi | 0)) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                xi = Yi + 12;
                Hi = HEAP32[xi >> 2];
                Ii = Hi & 1835008;
                if (lh = 0 == (Ii | 0)) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                vj = yg = Yi;
                Ji = HEAP32[vj >> 2];
                Xj = Ji + 40;
                yi = yg + Xj;
                hh = HEAP8[yi];
                Aj = 60 == hh << 24 >> 24;
                if (!Aj) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                ih = 0 != (Kf | 0);
                Hj = -3 < (Kf | 0);
                zi = ih & Hj;
                ni = 3 > (Kf | 0);
                ti = zi & ni;
                if (!ti) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                Pe = 0;
                qf = 400;
                yf = 404;
                break;
            case -53:
                if (!de) {
                    Cg =
                        Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                if (oh = -107 == m << 24 >> 24) {
                    Cg = Va;
                    Ah = 7;
                    th = 1402;
                    b = 108;
                    break a
                }
                Hg = HEAP8[k];
                bi = -94 == Hg << 24 >> 24;
                if (!bi) {
                    Cg = Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                ui = i + 8;
                rj = gj = c + ui;
                Ki = HEAP32[rj >> 2];
                if (Pj = 0 == (Ki | 0)) {
                    Cg = Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                Zi = Ki + 12;
                ii = HEAP32[Zi >> 2];
                mh = ii & 1835008;
                if (ji = 0 == (mh | 0)) {
                    Cg = Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                Qh = vi = Ki;
                Ij = HEAP32[Qh >> 2];
                ik = Ij + 40;
                hj = vi + ik;
                Xg = HEAP8[hj];
                Li = -107 == Xg << 24 >> 24;
                if (!Li) {
                    Cg = Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                ph = HEAP32[30648];
                al = i + 12;
                Yh = oi = c + al;
                ek = HEAP32[Yh >> 2];
                ki = _jtequ(a,
                    ph, ek);
                if (ci = 0 == ki << 24 >> 24) {
                    Cg = Va;
                    Ah = 7;
                    th = Ka;
                    b = 108;
                    break a
                }
                Cg = Va;
                Ah = 7;
                th = 3154;
                b = 108;
                break;
            case -72:
                Rh = m - 35;
                Bj = 2 > (Rh & 255);
                if (!Bj) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                Pe = 0;
                qf = 2064;
                yf = Ka;
                break;
            case 63:
                wj = m - 35;
                Cj = 2 > (wj & 255);
                if (!Cj) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                Pe = 0;
                qf = 22;
                yf = Ka;
                break;
            case -24:
                Qi = -24 == m << 24 >> 24;
                if (!Qi) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                Ri = i + 16;
                Dh = Qj = c + Ri;
                Dj = Sh = Vk = HEAP32[Dh >> 2];
                xj = HEAP32[Dj >> 2];
                Eh = Sh + xj;
                Rj = HEAP8[Eh];
                Ai = Rj << 24 >> 24;
                Vi = Vk + 12;
                Yg = HEAP32[Vi >> 2];
                ri = Yg & 1;
                if (Fh = 0 == (ri | 0)) {
                    Pe = 0;
                    qf = Va;
                    yf = Ka;
                    break a
                }
                if (fk = -55 == j << 24 >> 24) {
                    pe = Ai;
                    Pd = Va;
                    b = 107;
                    break a
                }
                Ei = -54 == j << 24 >> 24;
                Nk = Ai + 2;
                pe = jk = Ei ? Nk : -1;
                Pd = Va;
                b = 107;
                break;
            default:
                Pe = 0, qf = Va, yf = Ka
        }
        while (0);
        107 == b && ((qk = -1 < (pe | 0)) ? (Cg = Pd, Ah = pe, th = Ka, b = 108) : (Pe = 0, qf = Pd, yf = Ka));
    a: do
        if (108 == b) {
            pi = (nj = 3 < (Ah | 0)) ? l : lb;
            yj = pi + 40;
            Ig = HEAP8[yj];
            Th = -94 == Ig << 24 >> 24;
            do
                if (Th)
                    if (ij = HEAP32[30648], Yj = Ej = pi + 12, $i = HEAP32[Yj >> 2], Ik = _jtequ(a, ij, $i), zk = 0 == Ik << 24 >> 24) sj = 1618, Fj = yj;
                    else {
                        Wk = Jj = pi + 8;
                        Fi = HEAP32[Wk >> 2];
                        if (jj = 0 == (Fi | 0)) {
                            Pe = 0;
                            qf = Cg;
                            yf = th;
                            break a
                        }
                        Ak = Fi + 12;
                        jl = HEAP32[Ak >> 2];
                        Wi = jl & 1835008;
                        if (tk = 0 == (Wi | 0)) {
                            Pe = 0;
                            qf = Cg;
                            yf = th;
                            break a
                        }
                        Bk = ei = Fi;
                        zj = HEAP32[Bk >> 2];
                        kj = zj + 40;
                        Bi = ei + kj;
                        sj = 450;
                        Fj = Bi
                    } else sj = 1618, Fj = yj; while (0);
            Ck = HEAP8[Fj];
            ol = Ck << 24 >> 24;
            switch (ol | 0) {
                case 61:
                    Pe = Ci = Ah << 3;
                    qf = sj;
                    yf = th;
                    break a;
                case 60:
                    Sj = Ah << 3;
                    Pe = Kj = Sj | 2;
                    qf = sj;
                    yf = th;
                    break a;
                case -107:
                    Zj = Ah << 3;
                    Pe = Tj = Zj | 1;
                    qf = sj;
                    yf = th;
                    break a;
                case -59:
                    bl = Ah << 3;
                    Pe = Jk = bl | 6;
                    qf = sj;
                    yf = th;
                    break a;
                case -60:
                    Ui = Ah << 3;
                    Pe = fi = Ui | 7;
                    qf = sj;
                    yf = th;
                    break a;
                case -125:
                    xh = Ah << 3;
                    Pe = oj = xh | 3;
                    qf = sj;
                    yf = th;
                    break a;
                case -123:
                    Dk = Ah << 3;
                    Pe = gk = Dk | 4;
                    qf = sj;
                    yf = th;
                    break a;
                case 62:
                    cl = Ah << 3;
                    Pe = uk = cl | 5;
                    qf = sj;
                    yf = th;
                    break a;
                default:
                    Pe = 0;
                    qf = Cg;
                    yf = th;
                    break a
            }
        }
    while (0);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return g = 0, STACKTOP = e, g;
    sg = _jtga(a, 262144, 1, 0, 0);
    if (0 == (sg | 0)) return g = 0, STACKTOP = e, g;
    Lj = HEAP32[sg >> 2];
    HEAP32[sg + Lj >> 2] = yf;
    HEAP32[sg + (Lj + 4) >> 2] = 0 == (qf | 0) ? 1980 : qf;
    HEAP32[sg + (Lj + 8) >> 2] = f;
    HEAP32[sg + (Lj + 12) >> 2] = d;
    HEAP32[sg + (Lj + 16) >> 2] = c;
    HEAP32[sg + (Lj + 20) >> 2] = Pe;
    HEAP32[sg + (Lj + 24) >> 2] = 2147483647;
    HEAP32[sg + (Lj + 28) >> 2] = 2147483647;
    HEAP32[sg + (Lj + 32) >> 2] = 2147483647;
    HEAP32[sg + (Lj + 36) >> 2] = 0;
    HEAP8[sg + (Lj + 40)] = 51;
    g = sg;
    STACKTOP = e;
    return g
}
function _jtfolk1(a, f, d) {
    var c, b, e, g, h, j;
    c = d;
    b = HEAP32[d >> 2];
    d = HEAP32[b + (c + 8) >> 2];
    e = 0 == (d | 0) ? 0 : HEAP32[d + HEAP32[d >> 2] >> 2];
    g = HEAP32[b + (c + 12) >> 2];
    h = 0 == (g | 0) ? 0 : HEAP32[g + (HEAP32[g >> 2] + 4) >> 2];
    j = HEAP32[b + (c + 16) >> 2];
    b = 0 == (j | 0) ? 0 : HEAP32[j + HEAP32[j >> 2] >> 2];
    c = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = getFUNCTION_TABLE(b)(a, f, j);
    j = getFUNCTION_TABLE(e)(a, f, d);
    d = getFUNCTION_TABLE(h)(a, j, b, g);
    if (0 == (d | 0)) return _jttpop(a, c), a = _jttpush(a, d);
    _jttraverse(a, d, 654);
    g = d + 16;
    HEAP32[g >> 2] += 1;
    _jttpop(a, c);
    return a = _jttpush(a, d)
}

function _jtstitch(a, f, d) {
    var c, b, e, g, h;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = HEAP32[f + 24 >> 2];
    e = HEAP32[d + 24 >> 2];
    0 == (HEAP32[f + 12 >> 2] & 64512 | 0) ? 0 != (HEAP32[d + 12 >> 2] & 64512 | 0) & 3 > (b | 0) ? c = 5 : g = 0 : 3 > (b | 0) ? c = 5 : g = 0;
    5 == c && (g = 3 > (e | 0) | 0);
    c = 0 != (b | 0);
    h = 0 == (e | 0);
    return !(h | c ^ 1) && (HEAP32[f + 28 >> 2] | 0) != (HEAP32[d + 28 >> 2] | 0) ? (f = HEAP32[a + 4408 >> 2], f = HEAP32[f + (HEAP32[f >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), 0) : a = 0 == (g | 0) ? _jtirs2(a, f, d, 0, c ? b - 1 : 0, h ? 0 : e - 1, 774) : _jtirs2(a, f, d, 0, 0 == (b | 0) ? 0 : b - 1, h ? 0 : e - 1, 774)
}


function _jtcatalog(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 == (f | 0)) return STACKTOP = c, 0;
    if (1 < (HEAP32[f + 24 >> 2] | 0)) return e = _jtrank1ex(a, f, 0, 1, 788), STACKTOP = c, e;
    g = HEAP32[f + 20 >> 2];
    do
        if (0 != (g | 0) && (h = HEAP32[f + 12 >> 2], 0 != (h & 32800 | 0))) {
            j = f + HEAP32[f >> 2];
            h = 0 == (h & 32 | 0) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) | 0;
            h = f & -h;
            i = 0 < (g | 0);
            a: do {
                if (i) {
                    l = 0 == (h | 0);
                    k = a + 204545;
                    n = m = 0;
                    b: for (;;) {
                        p = HEAP32[j + (n << 2) >> 2];
                        q = l ? p :
                            p + h;
                        if (0 == (HEAP32[q + 20 >> 2] | 0)) r = m;
                        else {
                            p = HEAP32[q + 12 >> 2];
                            q = 0 != (m | 0) ? m : p;
                            do
                                if ((q | 0) != (p | 0) && 0 == (q & 805336541 | 0) | 0 == (p & 805336541 | 0) && 0 == (q & 133122 | 0) | 0 == (p & 133122 | 0)) break b;
                            while (0);
                            q = _jtmaxtype(a, q, p);
                            if (0 == (HEAP8[k] | 0)) r = q;
                            else {
                                e = 0;
                                d = 76;
                                break
                            }
                        }
                        q = n + 1;
                        if ((q | 0) < (g | 0)) m = r, n = q;
                        else {
                            n = r;
                            s = k;
                            break a
                        }
                    }
                    if (76 == d) return STACKTOP = c, e;
                    k = HEAP32[a + 4408 >> 2];
                    n = HEAP32[k + (HEAP32[k >> 2] + 12) >> 2];
                    _jtjsigstr(a, 3, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]);
                    e = 0;
                    STACKTOP = c;
                    return e
                }
                n = 0;
                s = a + 204545
            } while (0);
            n = _jtmaxtype(a, 1, n);
            if (0 != (HEAP8[s] |
                    0)) return e = 0, STACKTOP = c, e;
            r = 131072 == (n | 0) ? 2 : 2 == (n | 0) | 2097152 == (n | 0) | 33554432 == (n | 0) ? 1 : 4 == (n | 0) | 67108864 == (n | 0) | 134217728 == (n | 0) | 4194304 == (n | 0) | 8388608 == (n | 0) ? 4 : 32 == (n | 0) ? 4 : 128 == (n | 0) ? 8 : 268435456 == (n | 0) ? 12 : 65536 == (n | 0) ? 4 : 262144 == (n | 0) | 524288 == (n | 0) | 1048576 == (n | 0) ? 44 : 16777216 == (n | 0) ? 12 : 536870912 == (n | 0) ? 24 : 1 == (n | 0) | 8 == (n | 0) | 16 == (n | 0) ? n : 64 == (n | 0) ? 4 : 1024 == (n | 0) | 4096 == (n | 0) | 8192 == (n | 0) | 16384 == (n | 0) | 2048 == (n | 0) | 32768 == (n | 0) ? 16 : -1;
            k = _jtga(a, n, g, 1, 0);
            if (0 == (k | 0)) return e = 0, STACKTOP = c, e;
            m = k;
            l = HEAP32[k >> 2];
            q = _jtga(a, 4, g, 1, 0);
            if (0 == (q | 0)) return e = 0, STACKTOP = c, e;
            t = q + HEAP32[q >> 2];
            q = _jtga(a, 32, g, 1, 0);
            if (0 == (q | 0)) return e = 0, STACKTOP = c, e;
            u = q + HEAP32[q >> 2];
            q = _jtga(a, 4, g, 1, 0);
            if (0 == (q | 0)) return e = 0, STACKTOP = c, e;
            v = w = q;
            q = w + HEAP32[v >> 2];
            a: do
                if (i) {
                    x = q;
                    for (p = 0;;)
                        if (HEAP32[x >> 2] = 0, y = p + 1, (y | 0) < (g | 0)) x += 4, p = y;
                        else break;
                    p = w + HEAP32[v >> 2];
                    if (i) {
                        x = 0 == (h | 0);
                        y = a + 4408;
                        B = a + 205336;
                        G = 0;
                        C = 1;
                        for (F = 0;;) {
                            E = HEAP32[j + (F << 2) >> 2];
                            J = x ? E : E + h;
                            if ((n | 0) != (HEAP32[J + 12 >> 2] | 0)) {
                                E = HEAP32[B >> 2];
                                HEAP32[B >> 2] = 0;
                                L = _jtccvt(a, n, J, c);
                                HEAP32[B >> 2] =
                                    E;
                                if (0 == L << 24 >> 24) {
                                    d = 48;
                                    break
                                }
                                L = HEAP32[c >> 2];
                                if (0 == (L | 0)) {
                                    e = 0;
                                    d = 76;
                                    break
                                } else J = L
                            }
                            L = HEAP32[J + 24 >> 2];
                            E = HEAP32[J + 20 >> 2];
                            HEAP32[t + (F << 2) >> 2] = E;
                            C = (C | 0) * (E | 0);
                            2147483647 < C ? (E = HEAP32[y >> 2], C = HEAP32[E + (HEAP32[E >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[C + 20 >> 2], C + HEAP32[C >> 2]), E = 0) : E = C & -1;
                            if (0 != (HEAP8[s] | 0)) {
                                e = 0;
                                d = 76;
                                break
                            }
                            C = L + G;
                            HEAP32[u + (F << 2) >> 2] = J + HEAP32[J >> 2];
                            L = F + 1;
                            if ((L | 0) < (g | 0)) G = C, C = E, F = L;
                            else {
                                z = C;
                                A = E;
                                D = p;
                                break a
                            }
                        }
                        if (48 == d) return p = HEAP32[y >> 2], F = HEAP32[p + (HEAP32[p >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[F + 20 >>
                            2], F + HEAP32[F >> 2]), e = 0, STACKTOP = c, e;
                        if (76 == d) return STACKTOP = c, e
                    } else z = 0, A = 1, D = p
                } else z = 0, A = 1, D = q;
            while (0);
            q = _jtga(a, 32, A, z, 0);
            if (0 == (q | 0)) return e = 0, STACKTOP = c, e;
            n = q + HEAP32[q >> 2];
            if (i) {
                v = 0 == (h | 0);
                w = q + 28;
                for (F = 0;;) {
                    p = HEAP32[j + (F << 2) >> 2];
                    d = v ? p : p + h;
                    p = HEAP32[d + 24 >> 2];
                    if (0 < (p | 0)) {
                        C = w;
                        G = d + 28;
                        for (B = 0;;)
                            if (HEAP32[C >> 2] = HEAP32[G >> 2], x = B + 1, (x | 0) < (p | 0)) C += 4, G += 4, B = x;
                            else break;
                        d = w + (p << 2)
                    } else d = w;
                    B = F + 1;
                    if ((B | 0) < (g | 0)) w = d, F = B;
                    else break
                }
            }
            a: do
                if (0 < (A | 0)) {
                    F = m + (l - r);
                    w = g - 1;
                    if (i) i = 0;
                    else {
                        h = 0;
                        for (v = n;;) {
                            j = _jtca(a,
                                k);
                            HEAP32[v >> 2] = j;
                            if (0 == (j | 0)) {
                                e = 0;
                                break
                            }
                            j = h + 1;
                            if ((j | 0) < (A | 0)) h = j, v += 4;
                            else break a
                        }
                        STACKTOP = c;
                        return e
                    }
                    for (;;) {
                        v = F;
                        for (h = 0;;)
                            if (p = v + r, _memcpy(p, HEAP32[u + (h << 2) >> 2] + (Math_imul(HEAP32[D + (h << 2) >> 2], r) | 0), r) | 0, j = h + 1, (j | 0) < (g | 0)) v = p, h = j;
                            else {
                                I = 0;
                                break
                            }
                        for (;;) {
                            h = w - I;
                            v = HEAP32[t + (h << 2) >> 2];
                            p = D + (h << 2);
                            h = HEAP32[p >> 2] + 1;
                            HEAP32[p >> 2] = h;
                            if ((v | 0) > (h | 0)) break;
                            HEAP32[p >> 2] = 0;
                            p = I + 1;
                            if ((p | 0) < (g | 0)) I = p;
                            else break
                        }
                        p = _jtca(a, k);
                        HEAP32[n >> 2] = p;
                        if (0 == (p | 0)) {
                            e = 0;
                            break
                        }
                        p = i + 1;
                        if ((p | 0) < (A | 0)) i = p, n += 4;
                        else break a
                    }
                    STACKTOP =
                        c;
                    return e
                }
            while (0);
            _jttraverse(a, q, 654);
            k = q + 16;
            HEAP32[k >> 2] += 1;
            _jttpop(a, b);
            e = _jttpush(a, q);
            STACKTOP = c;
            return e
        }
    while (0);
    e = _jtbox(a, f);
    STACKTOP = c;
    return e
}
function _jtnc(a, f) {
    var d, c, b, e, g, h, j, i, l, k;
    d = 0;
    if (0 == (f | 0)) return 0;
    b = HEAP32[f + 20 >> 2];
    e = f + HEAP32[f >> 2];
    if (0 == (HEAP32[f + 12 >> 2] & 32 | 0))
        if (0 == (b | 0)) g = 0;
        else return h = HEAP32[a + 4408 >> 2], j = HEAP32[h + (HEAP32[h >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), 0;
    else g = 0 != (HEAP32[f + 4 >> 2] & 14 | 0) ? f : 0;
    j = _jtga(a, 4, b, HEAP32[f + 24 >> 2], f + 28);
    if (0 == (j | 0)) return 0;
    f = j + HEAP32[j >> 2];
    if (0 >= (b | 0)) return j;
    h = a + 204545;
    if (0 == (g | 0))
        for (i = 0;;) {
            l = _jtstdnm(a, HEAP32[e + (i << 2) >> 2]);
            if (0 != (HEAP8[h] | 0)) {
                c = 0;
                d = 25;
                break
            }
            0 == (l |
                0) ? k = -2 : (k = _jtsyrd(a, l, 0), 0 == (k | 0) ? k = -1 : (g = HEAP32[k + 4 >> 2], k = HEAP32[g + 12 >> 2], k = 0 == (g | 0) ? -1 : 0 != (k & 805567999 | 0) ? 0 : 0 != (k & 262144 | 0) ? 3 : 2 - (k >>> 19 & 1)));
            HEAP32[f + (i << 2) >> 2] = k;
            l = i + 1;
            if ((l | 0) < (b | 0)) i = l;
            else {
                c = j;
                d = 25;
                break
            }
        } else
            for (i = 0;;) {
                k = _jtstdnm(a, HEAP32[e + (i << 2) >> 2] + g);
                if (0 != (HEAP8[h] | 0)) {
                    c = 0;
                    d = 25;
                    break
                }
                0 == (k | 0) ? k = -2 : (l = _jtsyrd(a, k, 0), 0 == (l | 0) ? k = -1 : (k = HEAP32[l + 4 >> 2], l = HEAP32[k + 12 >> 2], k = 0 == (k | 0) ? -1 : 0 != (l & 805567999 | 0) ? 0 : 0 != (l & 262144 | 0) ? 3 : 2 - (l >>> 19 & 1)));
                HEAP32[f + (i << 2) >> 2] = k;
                k = i + 1;
                if ((k | 0) < (b | 0)) i = k;
                else {
                    c =
                        j;
                    d = 25;
                    break
                }
            }
    if (25 == d) return c
}

function _jtrepeat(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    e = b;
    g = b + 8;
    h = b + 16;
    if (0 == (f | 0) | 0 == (d | 0)) return j = 0, STACKTOP = b, j;
    i = f + 24;
    l = HEAP32[i >> 2];
    k = a + 205336;
    m = HEAP32[k >> 2];
    0 == (m | 0) ? (n =
        d + 24, q = p = HEAP32[n >> 2], r = l, s = n, t = p) : (p = d + 24, q = HEAP32[m + 4 >> 2], r = HEAP32[m >> 2], s = p, t = HEAP32[p >> 2]);
    p = t - q;
    HEAP32[k >> 2] = 0;
    m = f + 12;
    n = HEAP32[m >> 2];
    u = 0 != (n & 805503487 | 0);
    w = d + 12;
    v = HEAP32[w >> 2];
    x = 0 == (v & 805503487 | 0);
    y = 1 < (r | 0);
    if (y | (r | 0) < (l | 0)) return j = _jtrank2ex(a, f, d, 0, y ? 1 : r, q, 1350), STACKTOP = b, j;
    if (0 == (r | 0) | 0 == (q | 0)) {
        if (!(x | u ^ 1)) return j = _jtrep1d(a, f, d, p, q), STACKTOP = b, j;
        if (0 != (n & 16384 | 0)) return j = _jtrep1d(a, _jtdenseit(a, f), d, p, q), STACKTOP = b, j;
        (r = 0 == (n & 16 | 0)) ? (z = f, A = l, c = 17) : (y = _jtrect(a, f), 0 == (y | 0) ? B = D = 0 : (z = y,
            A = HEAP32[i >> 2], c = 17));
        a: do
            if (17 == c) {
                if (0 == (A | 0)) G = z;
                else {
                    l = HEAP32[31058];
                    y = HEAP32[30648];
                    C = _jtva2(a, y, _jtravel(a, z), -125);
                    0 == (C | 0) ? F = 0 : (y = _jtslash(a, HEAP32[30936]), F = 0 == (y | 0) ? 0 : getFUNCTION_TABLE(HEAP32[y + HEAP32[y >> 2] >> 2])(a, C, y));
                    if (0 == _jtequ(a, l, F) << 24 >> 24) {
                        C = HEAP32[a + 4408 >> 2];
                        y = HEAP32[C + (HEAP32[C >> 2] + 12) >> 2];
                        _jtjsigstr(a, 3, HEAP32[y + 20 >> 2], y + HEAP32[y >> 2]);
                        B = D = 0;
                        break
                    }
                    if (0 == (z | 0)) {
                        B = D = 0;
                        break
                    }
                    y = _jtslash(a, HEAP32[30841]);
                    if (0 == (y | 0)) {
                        B = D = 0;
                        break
                    }
                    C = getFUNCTION_TABLE(HEAP32[y + HEAP32[y >> 2] >> 2])(a, z, y);
                    if (0 ==
                        (C | 0)) {
                        B = D = 0;
                        break
                    } else G = C
                }
                do
                    if (0 == (HEAP32[G + 12 >> 2] & 4 | 0))
                        if (C = HEAP32[k >> 2], HEAP32[k >> 2] = 0, y = _jtccvt(a, 4, G, h), HEAP32[k >> 2] = C, 0 == y << 24 >> 24) {
                            y = HEAP32[a + 4408 >> 2];
                            C = HEAP32[y + (HEAP32[y >> 2] + 12) >> 2];
                            _jtjsigstr(a, 3, HEAP32[C + 20 >> 2], C + HEAP32[C >> 2]);
                            B = D = 0;
                            break a
                        } else if (C = HEAP32[h >> 2], 0 == (C | 0)) {
                    B = D = 0;
                    break a
                } else E = C;
                else E = G;
                while (0);
                l = E;
                C = HEAP32[E >> 2];
                y = HEAP32[l + C >> 2];
                J = r ? 0 : HEAP32[C + (l + 4) >> 2]; - 1 < (J | y | 0) || (l = HEAP32[a + 4408 >> 2], C = HEAP32[l + (HEAP32[l >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[C + 20 >> 2], C + HEAP32[C >> 2]));
                D = J;
                B = y
            }
        while (0);
        J = a + 204545;
        if (0 != (HEAP8[J] | 0)) return j = 0, STACKTOP = b, j;
        r = D + B;
        if (0 != (HEAP32[w >> 2] & 805503487 | 0)) return E = _jtga(a, 4, 1, 0, 0), 0 == (E | 0) ? L = 0 : (HEAP32[E + HEAP32[E >> 2] >> 2] = B, L = E), 0 == (D | 0) ? I = L : (E = _jtga(a, 4, 1, 0, 0), 0 == (E | 0) ? H = 0 : (HEAP32[E + HEAP32[E >> 2] >> 2] = D, H = E), I = _jtva2(a, L, _jtva2(a, HEAP32[40252], H, 42), 43)), j = _jtrep1d(a, I, d, p, q), STACKTOP = b, j;
        I = HEAP32[s >> 2];
        H = d + 28;
        K = (L = 0 != (q | 0)) ? HEAP32[d + 28 + (p << 2) >> 2] | 0 : 1;
        E = K * (r | 0);
        if (2147483647 < E)
            if (K = HEAP32[a + 4408 >> 2], G = HEAP32[K + (HEAP32[K >> 2] + 40) >> 2], _jtjsigstr(a,
                    10, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), 0 == (HEAP8[J] | 0)) N = 0;
            else return j = 0, STACKTOP = b, j;
        else N = E & -1;
        E = d;
        G = HEAP32[d >> 2];
        h = K = E + (HEAP32[G + (E + 4) >> 2] + G);
        z = HEAP32[E + G >> 2] + G;
        F = E + z;
        A = HEAP32[G + (E + 8) >> 2] + G;
        C = y = E + A;
        l = E + (HEAP32[G + (E + 12) >> 2] + G);
        G = _jtga(a, HEAP32[w >> 2], 1, I + (L & 1 ^ 1), H);
        if (0 == (G | 0)) return j = 0, STACKTOP = b, j;
        HEAP32[G + 28 + (p << 2) >> 2] = N;
        N = G;
        H = HEAP32[G >> 2];
        S = N + H;
        T = _jtga(a, 1, I, 1, 0);
        do
            if (0 == (T | 0)) V = 0;
            else if (Q = T, P = HEAP32[T >> 2], M = Q + P, _memset(M, 0, I) | 0, R = E + (z + HEAP32[F >> 2]), O = HEAP32[z + (E + 20) >> 2], 0 < (O | 0))
            for (aa = 0;;)
                if (HEAP8[Q +
                        (HEAP32[R + (aa << 2) >> 2] + P)] = 1, Z = aa + 1, (Z | 0) < (O | 0)) aa = Z;
                else {
                    V = M;
                    break
                } else V = M; while (0);
        if (0 != (HEAP8[J] | 0)) return j = 0, STACKTOP = b, j;
        a: do
            if (L) {
                if (0 == (HEAP8[V + p] | 0)) {
                    if (0 < (q | 0)) ba = $ = 0;
                    else {
                        ka = 0;
                        c = 96;
                        break
                    }
                    for (;;)
                        if (J = (0 == (HEAP8[V + (ba + p)] | 0) | 0) + $, aa = ba + 1, (aa | 0) < (q | 0)) $ = J, ba = aa;
                        else {
                            ka = J;
                            c = 96;
                            break a
                        }
                }
                J = HEAP32[A + (E + 28) >> 2];
                aa = HEAP32[A + (E + 32) >> 2];
                I = E + (HEAP32[y >> 2] + A);
                T = _jtga(a, 4, 1, 0, 0);
                0 == (T | 0) ? ea = 0 : (HEAP32[T + HEAP32[T >> 2] >> 2] = B, ea = T);
                T = _jtrepeat(a, ea, l);
                if (0 == (T | 0)) return j = 0, STACKTOP = b, j;
                M = _jtga(a, 4, 1, 0,
                    0);
                0 == (M | 0) ? ha = 0 : (HEAP32[M + HEAP32[M >> 2] >> 2] = B, ha = M);
                M = _jtrepeat(a, ha, C);
                if (0 == (M | 0)) return j = 0, STACKTOP = b, j;
                if (0 != (J | 0) & 1 < (B | 0)) {
                    if (0 < (p | 0))
                        for (P = O = 0;;)
                            if (R = (HEAP8[V + O] | 0) + P, Q = O + 1, (Q | 0) < (p | 0)) O = Q, P = R;
                            else {
                                U = R;
                                break
                            } else U = 0;
                    P = M + HEAP32[M >> 2] + (U << 2);
                    O = U + 1;
                    if ((HEAP32[z + (E + 20) >> 2] | 0) == (O | 0)) {
                        if (!(0 < (J | 0) & 0 < (B | 0))) {
                            da = T;
                            ga = M;
                            break
                        }
                        R = Math_imul(B, aa) | 0;
                        Q = 0;
                        Z = P;
                        for (ca = I + (U << 2);;) {
                            X = Math_imul(HEAP32[ca >> 2], r) | 0;
                            Y = ca + (aa << 2);
                            ja = 0;
                            for (fa = Z;;)
                                if (HEAP32[fa >> 2] = ja + X, ia = ja + 1, (ia | 0) < (B | 0)) ja = ia, fa += aa << 2;
                                else break;
                            fa = Q + 1;
                            if ((fa | 0) < (J | 0)) Q = fa, Z += R << 2, ca = Y;
                            else {
                                da = T;
                                ga = M;
                                break a
                            }
                        }
                    }
                    ca = _jtga(a, 4, O, 1, 0);
                    if (0 == (ca | 0)) return j = 0, STACKTOP = b, j;
                    ca = R = ca + HEAP32[ca >> 2];
                    if (Z = -1 < (U | 0))
                        for (Q = 0;;)
                            if (HEAP32[ca + (Q << 2) >> 2] = HEAP32[I + (Q << 2) >> 2], fa = Q + 1, (fa | 0) < (O | 0)) Q = fa;
                            else break;
                    if (0 < (J | 0)) {
                        Q = O << 2;
                        fa = J - 1;
                        ja = ca + (U << 2);
                        X = Math_imul(B, aa) | 0;
                        ia = 0 == (O | 0);
                        ra = 1 > (B | 0);
                        sa = P;
                        ta = 0;
                        wa = I;
                        for (za = 0;;) {
                            b: do
                                if (ia) Ba = 0, c = 81;
                                else {
                                    ua = Q;
                                    ya = R;
                                    for (xa = wa;
                                        (HEAP8[ya] | 0) == (HEAP8[xa] | 0);)
                                        if (oa = ua - 1, 0 == (oa | 0)) {
                                            Ba = 0;
                                            c = 81;
                                            break b
                                        } else ua = oa, ya += 1, xa += 1;
                                    pa = (ta |
                                        0) == (fa | 0);
                                    c = 82
                                }while (0);81 == c && (c = 0, Y = (ta | 0) == (fa | 0), Ba | Y ? (pa = Y, c = 82) : (la = za, qa = sa));do
                                if (82 == c) {
                                    c = 0;
                                    Y = (pa & 1) + ta - za;
                                    xa = Math_imul(HEAP32[ja >> 2], r) | 0;
                                    if (Z)
                                        for (ya = 0;;)
                                            if (HEAP32[ca + (ya << 2) >> 2] = HEAP32[wa + (ya << 2) >> 2], ua = ya + 1, (ua | 0) < (O | 0)) ya = ua;
                                            else break;
                                    if (1 > (Y | 0) | ra) la = ta, qa = sa;
                                    else {
                                        Da = sa;
                                        for (Aa = 0;;) {
                                            ya = Da;
                                            for (ua = 0;;)
                                                if (HEAP32[ya >> 2] = ua + xa, oa = ua + 1, (oa | 0) < (B | 0)) ya += aa << 2, ua = oa;
                                                else break;
                                            ua = Da + (X << 2);
                                            ya = Aa + 1;
                                            if ((ya | 0) < (Y | 0)) Da = ua, Aa = ya;
                                            else {
                                                la = ta;
                                                qa = ua;
                                                break
                                            }
                                        }
                                    }
                                }
                            while (0);
                            Y = ta + 1;
                            if ((Y | 0) < (J | 0)) sa = qa,
                            ta =
                            Y,
                            wa += aa << 2,
                            za = la;
                            else break
                        }
                    }
                    za = a + 1096;
                    aa = HEAP32[za >> 2];
                    wa = a + 1104;
                    ta = HEAP32[wa >> 2];
                    HEAP32[za >> 2] = 1;
                    HEAP32[wa >> 2] = -1;
                    Ea = 0 == (HEAP32[M + 12 >> 2] & 64512 | 0) ? _jtgr1(a, M) : _jtgrd1sp(a, M);
                    HEAP32[za >> 2] = aa;
                    HEAP32[wa >> 2] = ta;
                    if (0 == (Ea | 0)) return j = 0, STACKTOP = b, j;
                    ta = _jtfrom(a, Ea, T);
                    if (0 == (ta | 0)) return j = 0, STACKTOP = b, j;
                    wa = _jtfrom(a, Ea, M);
                    if (0 == (wa | 0)) return j = 0, STACKTOP = b, j;
                    da = ta;
                    ga = wa
                } else da = T, ga = M
            } else ka = 0, c = 96;
        while (0);
        if (96 == c) {
            Ea = _jtca(a, C);
            if (0 == (Ea | 0)) return j = 0, STACKTOP = b, j;
            (la = 0 == (D | 0)) ? Sa = 0: (qa = a + 204448,
                Aa = HEAP32[qa >> 2], HEAP32[qa >> 2] = h, Sa = Aa);
            0 == (HEAP32[i >> 2] | 0) ? c = 101 : 0 == (HEAP32[m >> 2] & 16 | 0) ? c = 101 : (Aa = _jtirs2(a, f, l, 0, 1, ka, 1350), la ? Oa = Aa : (Ha = Aa, c = 109));
            101 == c && (M = _jtga(a, 4, 1, 0, 0), 0 == (M | 0) ? Ga = 0 : (HEAP32[M + HEAP32[M >> 2] >> 2] = B, Ga = M), la ? Oa = _jtirs2(a, Ga, l, 0, 1, ka, 1350) : (M = _jtga(a, 4, 1, 0, 0), 0 == (M | 0) ? Ma = 0 : (HEAP32[M + HEAP32[M >> 2] >> 2] = D, Ma = M), Ha = _jtirs2(a, _jtva2(a, Ga, _jtva2(a, HEAP32[40252], Ma, 42), 43), l, 0, 1, ka, 1350), c = 109));
            109 == c && (HEAP32[a + 204448 >> 2] = Sa, Oa = Ha);
            if (0 == (Oa | 0)) return j = 0, STACKTOP = b, j;
            da = Oa;
            ga = Ea
        }
        Oa =
            S;
        Ha = K - Oa;
        HEAP32[H + (N + 4) >> 2] = Ha;
        if (0 == (N + (Ha + H) | 0)) return j = 0, STACKTOP = b, j;
        Ha = F - Oa;
        HEAP32[S >> 2] = Ha;
        if (0 == (N + (Ha + H) | 0)) return j = 0, STACKTOP = b, j;
        Ha = ga - Oa;
        HEAP32[H + (N + 8) >> 2] = Ha;
        if (0 == (N + (Ha + H) | 0)) return j = 0, STACKTOP = b, j;
        Ha = da - Oa;
        HEAP32[H + (N + 12) >> 2] = Ha;
        j = 0 == (N + (Ha + H) | 0) ? 0 : G;
        STACKTOP = b;
        return j
    }
    G = f + 28;
    H = d + 28 + (p << 2);
    if ((HEAP32[G >> 2] | 0) != (HEAP32[H >> 2] | 0)) return Ha = HEAP32[a + 4408 >> 2], N = HEAP32[Ha + (HEAP32[Ha >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[N + 20 >> 2], N + HEAP32[N >> 2]), j = 0, STACKTOP = b, j;
    if (0 != (n & 16400 | 0)) {
        if (u) return j =
            _jtrepzdx(a, f, d, p, q), STACKTOP = b, j;
        N = f;
        Ha = HEAP32[f >> 2];
        Oa = HEAP32[Ha + (N + 12) >> 2] + Ha;
        da = N + Oa;
        ga = HEAP32[Oa + (N + 20) >> 2];
        if (0 == (HEAP32[N + (Ha + 20 + HEAP32[N + Ha >> 2]) >> 2] | 0)) return j = _jtrepzdx(a, _jtravel(a, da), d, p, q), STACKTOP = b, j;
        S = HEAP32[Ha + (N + 8) >> 2] + Ha;
        F = N + (S + HEAP32[N + S >> 2]);
        S = ga << 1;
        K = HEAP32[da >> 2];
        da = _jtga(a, 8, S, 1, 0);
        0 == (da | 0) ? Ia = 0 : (_memcpy(da + HEAP32[da >> 2], N + (K + Oa), ga << 4) | 0, Ia = da);
        da = HEAP32[k >> 2];
        HEAP32[k >> 2] = 0;
        Oa = _jtccvt(a, 4, Ia, g);
        HEAP32[k >> 2] = da;
        if (0 == Oa << 24 >> 24) return Oa = HEAP32[a + 4408 >> 2], da = HEAP32[Oa + (HEAP32[Oa >>
            2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[da + 20 >> 2], da + HEAP32[da >> 2]), j = 0, STACKTOP = b, j;
        da = HEAP32[g >> 2];
        if (0 == (da | 0)) return j = 0, STACKTOP = b, j;
        g = da + HEAP32[da >> 2];
        if (0 == _jtequ(a, HEAP32[30648], N + (HEAP32[Ha + (N + 4) >> 2] + Ha)) << 24 >> 24) return Ha = HEAP32[a + 4408 >> 2], N = HEAP32[Ha + (HEAP32[Ha >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[N + 20 >> 2], N + HEAP32[N >> 2]), j = 0, STACKTOP = b, j;
        N = HEAP32[H >> 2];
        a: do
            if ((t | 0) == (q | 0))
                if (0 == (HEAP32[w >> 2] & 64512 | 0)) db = N, c = 136;
                else
        if (H = d, Ha = HEAP32[d >> 2], da = HEAP32[H + Ha >> 2] + Ha, 0 == (HEAP32[da + (H + 20) >> 2] | 0)) db = N,
            c = 136;
        else if (0 != (HEAP32[H + (HEAP32[H + da >> 2] + da) >> 2] | 0)) db = N, c = 136;
        else if (da = HEAP32[Ha + (H + 8) >> 2] + Ha, Ha = HEAP32[da + (H + 28) >> 2], Oa = HEAP32[da + (H + 32) >> 2], Ia = H + (HEAP32[H + da >> 2] + da), 0 == (Ha | 0)) W = 0;
        else if (da = HEAP32[Ia + (Math_imul(Ha - 1, Oa) << 2) >> 2] + 1, 0 < (Ha | 0)) {
            Xa = 0;
            Ta = Ia;
            for (fb = 0;;) {
                Ia = HEAP32[Ta >> 2];
                if ((Xa | 0) == (Ia | 0)) mb = Xa + 1;
                else if ((Xa | 0) < (Ia | 0)) {
                    db = Xa;
                    c = 136;
                    break a
                } else mb = Xa;
                Ia = fb + 1;
                if ((Ia | 0) < (Ha | 0)) Xa = mb, Ta += Oa << 2, fb = Ia;
                else {
                    db = da;
                    c = 136;
                    break
                }
            }
        } else db = da, c = 136;
        else db = N, c = 136;
        while (0);
        if (136 == c)
            if (2147483647 !=
                (db | 0)) W = db;
            else return fb = HEAP32[a + 4408 >> 2], Ta = HEAP32[fb + (HEAP32[fb >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Ta + 20 >> 2], Ta + HEAP32[Ta >> 2]), j = 0, STACKTOP = b, j;
        if ((N | 0) == (W | 0)) {
            db = _jtga(a, 4, 1, 0, 0);
            0 == (db | 0) ? ma = 0 : (HEAP32[db + HEAP32[db >> 2] >> 2] = N + 1, ma = db);
            db = _jtirs2(a, ma, d, 0, 0, q, 2984);
            if (0 == (db | 0)) return j = 0, STACKTOP = b, j;
            ab = db
        } else ab = d;
        ma = 0 < (ga | 0);
        a: do
            if (ma) {
                for (db = N = 0;;) {
                    Ta = HEAP32[g + (db << 2) >> 2];
                    if (-1 >= (Ta | 0)) {
                        c = 145;
                        break
                    }
                    fb = Ta + N;
                    Ta = db + 1;
                    if (-1 >= (fb | 0)) {
                        c = 147;
                        break
                    }
                    if ((Ta | 0) < (S | 0)) N = fb, db = Ta;
                    else {
                        Na = fb;
                        break a
                    }
                }
                if (145 ==
                    c) return db = HEAP32[a + 4408 >> 2], N = HEAP32[db + (HEAP32[db >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[N + 20 >> 2], N + HEAP32[N >> 2]), j = 0, STACKTOP = b, j;
                if (147 == c) return N = HEAP32[a + 4408 >> 2], db = HEAP32[N + (HEAP32[N >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[db + 20 >> 2], db + HEAP32[db >> 2]), j = 0, STACKTOP = b, j
            } else Na = 0;
        while (0);
        S = _jtga(a, 4, Na, 1, 0);
        if (0 == (S | 0)) return j = 0, STACKTOP = b, j;
        if (ma) {
            ma = g;
            g = S + HEAP32[S >> 2];
            for (Na = 0;;) {
                db = HEAP32[ma >> 2];
                N = ma + 8;
                fb = HEAP32[ma + 4 >> 2];
                Ta = HEAP32[F + (Na << 2) >> 2];
                if (0 < (db | 0)) {
                    mb = g;
                    for (Xa = 0;;)
                        if (HEAP32[mb >> 2] = Ta, da =
                            Xa + 1, (da | 0) < (db | 0)) mb += 4, Xa = da;
                        else break;
                    $a = g + (db << 2)
                } else $a = g;
                if (0 < (fb | 0)) {
                    Xa = $a;
                    for (mb = 0;;)
                        if (HEAP32[Xa >> 2] = W, Ta = mb + 1, (Ta | 0) < (fb | 0)) Xa += 4, mb = Ta;
                        else break;
                    Ua = $a + (fb << 2)
                } else Ua = $a;
                mb = Na + 1;
                if ((mb | 0) < (ga | 0)) ma = N, g = Ua, Na = mb;
                else break
            }
        }
        j = _jtirs2(a, S, ab, 0, 1, q, 2062);
        STACKTOP = b;
        return j
    }
    if (0 == (n & 1025 | 0)) {
        if (u) return j = _jtrepidx(a, f, d, q), STACKTOP = b, j;
        n = f;
        ab = HEAP32[f >> 2];
        S = n + ab;
        Na = HEAP32[ab + (n + 4) >> 2] + ab;
        Ua = n + Na;
        g = HEAP32[ab + (n + 8) >> 2] + ab;
        ma = n + (g + HEAP32[n + g >> 2]);
        g = HEAP32[ab + (n + 12) >> 2] + ab;
        ga = n + g;
        if (0 == (HEAP32[g +
                (n + 12) >> 2] & 4 | 0)) {
            HEAP32[k >> 2] = 0;
            $a = _jtccvt(a, 4, ga, e);
            HEAP32[k >> 2] = 0;
            if (0 == $a << 24 >> 24) return $a = HEAP32[a + 4408 >> 2], W = HEAP32[$a + (HEAP32[$a >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[W + 20 >> 2], W + HEAP32[W >> 2]), j = 0, STACKTOP = b, j;
            W = HEAP32[e >> 2];
            if (0 == (W | 0)) return j = 0, STACKTOP = b, j;
            Pa = W
        } else Pa = ga;
        ga = Pa + HEAP32[Pa >> 2];
        if (0 == (HEAP32[n + (ab + 20 + HEAP32[S >> 2]) >> 2] | 0)) return j = _jtrepidx(a, _jtravel(a, Pa), d, q), STACKTOP = b, j;
        if (0 != (HEAP32[n + (HEAP32[Ua >> 2] + Na) >> 2] | 0)) return Na = HEAP32[a + 4408 >> 2], Ua = HEAP32[Na + (HEAP32[Na >> 2] + 44) >> 2],
            _jtjsigstr(a, 11, HEAP32[Ua + 20 >> 2], Ua + HEAP32[Ua >> 2]), j = 0, STACKTOP = b, j;
        Ua = HEAP32[Pa + 20 >> 2];
        Pa = 0 < (Ua | 0);
        a: do
            if (Pa) {
                for (n = Na = 0;;) {
                    S = HEAP32[ga + (Na << 2) >> 2];
                    if (-1 >= (S | 0)) {
                        c = 279;
                        break
                    }
                    ab = S + n;
                    S = Na + 1;
                    if (-1 >= (ab | 0)) {
                        c = 281;
                        break
                    }
                    if ((S | 0) < (Ua | 0)) Na = S, n = ab;
                    else {
                        bb = ab;
                        break a
                    }
                }
                if (279 == c) return n = HEAP32[a + 4408 >> 2], Na = HEAP32[n + (HEAP32[n >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[Na + 20 >> 2], Na + HEAP32[Na >> 2]), j = 0, STACKTOP = b, j;
                if (281 == c) return Na = HEAP32[a + 4408 >> 2], n = HEAP32[Na + (HEAP32[Na >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[n + 20 >>
                    2], n + HEAP32[n >> 2]), j = 0, STACKTOP = b, j
            } else bb = 0;
        while (0);
        n = _jtga(a, 4, bb, 1, 0);
        if (0 == (n | 0)) return j = 0, STACKTOP = b, j;
        if (Pa) {
            Pa = n + HEAP32[n >> 2];
            for (bb = 0;;) {
                Na = HEAP32[ga + (bb << 2) >> 2];
                N = HEAP32[ma + (bb << 2) >> 2];
                if (0 < (Na | 0)) {
                    fb = Pa;
                    for (ab = 0;;)
                        if (HEAP32[fb >> 2] = N, S = ab + 1, (S | 0) < (Na | 0)) fb += 4, ab = S;
                        else break;
                    La = Pa + (Na << 2)
                } else La = Pa;
                ab = bb + 1;
                if ((ab | 0) < (Ua | 0)) Pa = La, bb = ab;
                else break
            }
        }
        j = _jtirs2(a, n, d, 0, 1, q, 2062);
        STACKTOP = b;
        return j
    }
    if (u) {
        u = HEAP32[f + 20 >> 2];
        n = f;
        bb = HEAP32[f >> 2];
        La = n + bb;
        if (0 != (v & 64512 | 0)) return j = _jtirs2(a, _jtifb(a,
            u, La), d, 0, 1, q, 2062), STACKTOP = b, j;
        Pa = La;
        La = (u | 0) / 1020 & -1;
        if (1019 < (u | 0)) {
            Ua = n + (bb + (2039 < (u | 0) ? 1020 * La & -1 : 1020));
            ma = 0;
            ga = Pa;
            for (ab = 0;;) {
                e = S = N = fb = 0;
                k = ga;
                for (g = 0;;)
                    if (W = HEAP32[k >> 2] + (N << 16 | fb << 24 | S << 8 | e), Ja = W >>> 24, $a = g + 1, Qa = W & 255, Ya = W >>> 8 & 255, lb = W >>> 16 & 255, 255 > ($a | 0)) fb = Ja, N = lb, S = Ya, e = Qa, k += 4, g = $a;
                    else break;
                Ca = Ja + ab + lb + Ya + Qa;
                g = ma + 1;
                if ((g | 0) < (La | 0)) ma = g, ga += 1020, ab = Ca;
                else break
            }
            gb = Ua;
            Fa = Ca
        } else gb = Pa, Fa = 0;
        Pa = (-1020 * La & -1) + u;
        if (0 < (Pa | 0)) {
            La = gb;
            gb = 0;
            for (Ca = Fa;;)
                if (Ua = HEAPU8[La] + Ca, ab = gb + 1, (ab | 0) < (Pa | 0)) La +=
                    1, gb = ab, Ca = Ua;
                else {
                    Za = Ua;
                    break
                }
        } else Za = Fa;
        if (0 == (u | 0)) qb = 0;
        else if (Fa = Math_imul((HEAP32[d + 20 >> 2] | 0) / (u | 0) & -1, Za) | 0, -1 < (Fa | 0)) qb = Fa;
        else return Fa = HEAP32[a + 4408 >> 2], Ca = HEAP32[Fa + (HEAP32[Fa >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Ca + 20 >> 2], Ca + HEAP32[Ca >> 2]), j = 0, STACKTOP = b, j;
        Ca = _jtga(a, v, qb, t, d + 28);
        if (0 == (Ca | 0)) return j = 0, STACKTOP = b, j;
        HEAP32[Ca + 28 + (p << 2) >> 2] = Za;
        Za = d + HEAP32[d >> 2];
        v = t = Ca;
        Fa = t + HEAP32[v >> 2];
        if (0 == (qb | 0)) return j = Ca, STACKTOP = b, j;
        do
            if (0 < (p | 0)) {
                qb = 1;
                for (gb = 0;;)
                    if (ib = qb * (HEAP32[d + 28 + (gb << 2) >> 2] |
                            0), La = gb + 1, (La | 0) < (p | 0)) qb = ib, gb = La;
                    else break;
                2147483647 >= ib ? (ub = ib, c = 182) : (gb = HEAP32[a + 4408 >> 2], qb = HEAP32[gb + (HEAP32[gb >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[qb + 20 >> 2], qb + HEAP32[qb >> 2]), eb = 0)
            } else ub = 1, c = 182;
        while (0);
        182 == c && (eb = ub & -1);
        if (0 != (HEAP8[a + 204545] | 0)) return j = 0, STACKTOP = b, j;
        ub = (HEAP32[d + 20 >> 2] | 0) / (Math_imul(eb, u) | 0) & -1;
        ib = HEAP32[w >> 2];
        rb = 2 == (ib | 0) | 2097152 == (ib | 0) | 33554432 == (ib | 0) ? 1 : 131072 == (ib | 0) ? 2 : 4 == (ib | 0) | 67108864 == (ib | 0) | 134217728 == (ib | 0) | 4194304 == (ib | 0) | 8388608 == (ib | 0) ? 4 : 32 == (ib | 0) ?
            4 : 64 == (ib | 0) ? 4 : 128 == (ib | 0) ? 8 : 1024 == (ib | 0) | 4096 == (ib | 0) | 8192 == (ib | 0) | 16384 == (ib | 0) | 2048 == (ib | 0) | 32768 == (ib | 0) ? 16 : 262144 == (ib | 0) | 524288 == (ib | 0) | 1048576 == (ib | 0) ? 44 : 16777216 == (ib | 0) ? 12 : 65536 == (ib | 0) ? 4 : 268435456 == (ib | 0) ? 12 : 536870912 == (ib | 0) ? 24 : 1 == (ib | 0) | 8 == (ib | 0) | 16 == (ib | 0) ? ib : -1;
        qb = Math_imul(rb, ub) | 0;
        if (0 < (eb | 0) & 0 < (u | 0)) {
            gb = Math_imul(Math_imul(ub, u) | 0, rb) | 0;
            rb = Fa;
            Fa = 0;
            for (ub = Za;;) {
                Za = rb;
                La = ub;
                for (Pa = 0;;)
                    if (0 == (HEAP8[n + (Pa + bb)] | 0) ? wb = Za : (_memcpy(Za, La, qb) | 0, wb = Za + qb), Ua = Pa + 1, (Ua | 0) < (u | 0)) Za = wb, La += qb,
                        Pa = Ua;
                    else break;
                Pa = Fa + 1;
                if ((Pa | 0) < (eb | 0)) rb = wb, Fa = Pa, ub += gb;
                else break
            }
            Ka = HEAP32[w >> 2]
        } else Ka = ib;
        if (0 == (Ka & 32 | 0) || 0 == (HEAP32[d + 4 >> 2] & 14 | 0)) return j = Ca, STACKTOP = b, j;
        Ka = d - Ca;
        ib = Ca + 4;
        HEAP32[ib >> 2] |= 8;
        ib = t + HEAP32[v >> 2];
        v = HEAP32[Ca + 20 >> 2];
        if (0 < (v | 0)) Va = 0;
        else return j = Ca, STACKTOP = b, j;
        for (;;)
            if (t = ib + (Va << 2), HEAP32[t >> 2] += Ka, t = Va + 1, (t | 0) < (v | 0)) Va = t;
            else {
                j = Ca;
                break
            }
        STACKTOP = b;
        return j
    }
    Ca = f;
    Va = HEAP32[f >> 2];
    v = HEAP32[Va + (Ca + 4) >> 2] + Va;
    Ka = HEAP32[Va + (Ca + 8) >> 2] + Va;
    t = ib = Ca + Ka;
    gb = Ca + (Ka + HEAP32[ib >> 2]);
    ib = HEAP32[Va +
        (Ca + 12) >> 2] + Va;
    ub = Ka = Ca + ib;
    Fa = HEAP32[ib + (Ca + 20) >> 2];
    wb = Ca + (HEAP32[Ka >> 2] + ib);
    if (0 == (HEAP32[Ca + (Va + 20 + HEAP32[Ca + Va >> 2]) >> 2] | 0)) return j = _jtirs2(a, _jtifb(a, Fa, wb), d, 0, 1, q, 2062), STACKTOP = b, j;
    if (0 == (HEAP8[Ca + (HEAP32[Ca + v >> 2] + v)] | 0)) {
        v = _jtga(a, 4, Fa, 1, 0);
        if (0 == (v | 0)) return j = 0, STACKTOP = b, j;
        rb = Va = v + HEAP32[v >> 2];
        if (0 < (Fa | 0)) {
            eb = rb;
            qb = 0;
            for (u = wb;;)
                if (0 == (HEAP8[u] | 0) ? nb = eb : (HEAP32[eb >> 2] = HEAP32[gb + (qb << 2) >> 2], nb = eb + 4), bb = qb + 1, (bb | 0) < (Fa | 0)) eb = nb, qb = bb, u += 1;
                else {
                    ob = nb;
                    break
                }
        } else ob = rb;
        rb = ob - Va >> 2;
        HEAP32[v +
            28 >> 2] = rb;
        HEAP32[v + 20 >> 2] = rb;
        j = _jtirs2(a, v, d, 0, 1, q, 2062);
        STACKTOP = b;
        return j
    }
    v = d;
    rb = HEAP32[d >> 2];
    do
        if (x && (Va = _jtga(a, 4, 1, 0, 0), 0 == (Va | 0) ? cb = 0 : (HEAP32[Va + HEAP32[Va >> 2] >> 2] = p, cb = Va), Va = v + rb, ob = _jtva2(a, cb, v + (HEAP32[Va >> 2] + rb), 61), !(0 != (ob | 0) && 0 == (_memchr(ob + HEAP32[ob >> 2], 1, HEAP32[ob + 20 >> 2]) | 0)))) {
            ob = v + (HEAP32[Va >> 2] + rb);
            Va = v + (HEAP32[rb + (v + 8) >> 2] + rb);
            nb = v + (HEAP32[rb + (v + 12) >> 2] + rb);
            u = _jtslash(a, HEAP32[30841]);
            if (0 == (u | 0)) return j = 0, STACKTOP = b, j;
            qb = getFUNCTION_TABLE(HEAP32[u + HEAP32[u >> 2] >> 2])(a, f, u);
            if (0 ==
                (qb | 0)) return j = 0, STACKTOP = b, j;
            u = _jtga(a, HEAP32[w >> 2], 1, HEAP32[s >> 2], d + 28);
            if (0 == (u | 0)) return j = 0, STACKTOP = b, j;
            eb = HEAP32[qb + HEAP32[qb >> 2] >> 2];
            HEAP32[u + 28 + (p << 2) >> 2] = eb;
            qb = _jtga(a, 4, 1, 0, 0);
            0 == (qb | 0) ? Wa = 0 : (HEAP32[qb + HEAP32[qb >> 2] >> 2] = p, Wa = qb);
            qb = _jtindexofsub(a, 0, ob, Wa);
            if (0 == (qb | 0)) return j = 0, STACKTOP = b, j;
            bb = _jtirs2(a, qb, Va, 0, 2147483647, 1, 2062);
            if (0 == (bb | 0)) return j = 0, STACKTOP = b, j;
            0 == (Ka | 0) ? c = 236 : 0 == (HEAP32[ib + (Ca + 12) >> 2] & 1025 | 0) ? c = 236 : yb = _jtva2(a, HEAP32[30648], ub, 61);
            236 == c && (yb = _jtva2(a, HEAP32[31058],
                ub, 45));
            n = _jteps(a, bb, _jtravel(a, _jtrepeat(a, yb, t)));
            0 == (n | 0) ? c = 240 : 0 == (HEAP32[n + 12 >> 2] & 1025 | 0) ? c = 240 : Cb = _jtva2(a, HEAP32[30648], n, 61);
            240 == c && (Cb = _jtva2(a, HEAP32[31058], n, 45));
            if (0 == (Cb | 0)) return j = 0, STACKTOP = b, j;
            Pa = HEAP32[G >> 2] - eb;
            La = _jtga(a, 4, Pa, 1, 0);
            if (0 == (La | 0)) return j = 0, STACKTOP = b, j;
            if (0 < (Fa | 0)) {
                Za = La + HEAP32[La >> 2];
                Ua = 0;
                for (ab = wb;;)
                    if (0 == (HEAP8[ab] | 0) ? (HEAP32[Za >> 2] = HEAP32[gb + (Ua << 2) >> 2], Pb = Za + 4) : Pb = Za, ga = Ua + 1, (ga | 0) < (Fa | 0)) Za = Pb, Ua = ga, ab += 1;
                    else break
            }
            ab = _jtover(a, La, _jtrepeat(a, Cb, bb));
            Ua =
                a + 1096;
            Za = HEAP32[Ua >> 2];
            eb = a + 1104;
            n = HEAP32[eb >> 2];
            HEAP32[Ua >> 2] = 1;
            HEAP32[eb >> 2] = -1;
            if (0 == (ab | 0)) return j = 0, STACKTOP = b, j;
            zb = 0 == (HEAP32[ab + 12 >> 2] & 64512 | 0) ? _jtgr1(a, ab) : _jtgrd1sp(a, ab);
            HEAP32[Ua >> 2] = Za;
            HEAP32[eb >> 2] = n;
            if (0 == (zb | 0)) return j = 0, STACKTOP = b, j;
            n = zb + HEAP32[zb >> 2];
            eb = _jtga(a, 4, HEAP32[bb + 20 >> 2], 1, 0);
            if (0 == (eb | 0)) return j = 0, STACKTOP = b, j;
            Za = eb + HEAP32[eb >> 2];
            eb = HEAP32[zb + 20 >> 2];
            if (0 < (eb | 0))
                for (ab = Ua = 0;;)
                    if (ga = HEAP32[n + (ab << 2) >> 2], Zb = (Pa | 0) > (ga | 0) ? Ua + 1 : HEAP32[Za + (ga - Pa << 2) >> 2] = Ua, ga = ab + 1, (ga | 0) <
                        (eb | 0)) Ua = Zb, ab = ga;
                    else break;
            ab = _jtrepeat(a, Cb, Va);
            if (0 == (ab | 0)) return j = 0, STACKTOP = b, j;
            Ua = HEAP32[ab + 32 >> 2];
            eb = HEAP32[ab + 28 >> 2];
            if (0 < (eb | 0)) {
                Pa = ab + HEAP32[ab >> 2] + (HEAP32[qb + HEAP32[qb >> 2] >> 2] << 2);
                for (n = 0;;)
                    if (HEAP32[Pa >> 2] -= HEAP32[Za + (n << 2) >> 2], bb = n + 1, (bb | 0) < (eb | 0)) Pa += Ua << 2, n = bb;
                    else break
            }
            n = u;
            Ua = HEAP32[u >> 2];
            eb = Pa = n + Ua;
            Za = _jtca(a, ob) - eb;
            HEAP32[Pa >> 2] = Za;
            if (0 == (n + (Za + Ua) | 0)) return j = 0, STACKTOP = b, j;
            Za = v + (HEAP32[rb + (v + 4) >> 2] + rb) - eb;
            HEAP32[Ua + (n + 4) >> 2] = Za;
            if (0 == (n + (Za + Ua) | 0)) return j = 0, STACKTOP = b, j;
            Za = ab - eb;
            HEAP32[Ua + (n + 8) >> 2] = Za;
            if (0 == (n + (Za + Ua) | 0)) return j = 0, STACKTOP = b, j;
            Za = _jtrepeat(a, Cb, nb) - eb;
            HEAP32[Ua + (n + 12) >> 2] = Za;
            STACKTOP = b;
            return 0 == (n + (Za + Ua) | 0) ? 0 : u
        }
    while (0);
    Cb = _jtdenseit(a, f);
    if (0 == (Cb | 0)) return j = 0, STACKTOP = b, j;
    j = _jtirs2(a, _jtifb(a, HEAP32[Cb + 20 >> 2], Cb + HEAP32[Cb >> 2]), d, 0, 1, q, 2062);
    STACKTOP = b;
    return j
}

function _jtrep1d(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    e = 0;
    g = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = g, 0;
    j = HEAP32[f + 12 >> 2];
    i = HEAP32[f + 20 >> 2];
    l = d + 28;
    m = (k = 0 != (b | 0)) ? HEAP32[d + 28 + (c << 2) >> 2] : 1;
    if (0 != (j & 16 | 0)) {
        if (k) {
            n = _jtga(a, 4, m, 1, 0);
            do
                if (0 == (n | 0)) p = 0;
                else if (0 >= (m | 0)) p = n;
            else {
                i = n + HEAP32[n >> 2];
                for (h = 0;;)
                    if (HEAP32[i >> 2] = 0, h += 1, (h | 0) < (m | 0)) i += 4;
                    else {
                        p = n;
                        break
                    }
            }
            while (0);
            h = _jtrepzdx(a, _jtfrom(a, p, f), d, c, b)
        } else {
            b = _jtga(a, 4, i, 1, 0);
            do
                if (0 == (b | 0)) q = 0;
                else if (0 >= (i | 0)) q =
                b;
            else {
                p = b + HEAP32[b >> 2];
                for (n = 0;;)
                    if (HEAP32[p >> 2] = 0, h = n + 1, (h | 0) < (i | 0)) p += 4, n = h;
                    else {
                        q = b;
                        break
                    }
            }
            while (0);
            h = _jtrepzdx(a, f, _jtirs2(a, q, d, 0, 1, 0, 2062), c, 1)
        }
        STACKTOP = g;
        return h
    }
    a: do
        if (0 == (j & 1 | 0)) {
            if (0 == (j & 4 | 0)) {
                q = a + 205336;
                b = HEAP32[q >> 2];
                HEAP32[q >> 2] = 0;
                n = _jtccvt(a, 4, f, g);
                HEAP32[q >> 2] = b;
                if (0 == n << 24 >> 24) return n = HEAP32[a + 4408 >> 2], b = HEAP32[n + (HEAP32[n >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), h = 0, STACKTOP = g, h;
                b = HEAP32[g >> 2];
                if (0 == (b | 0)) return h = 0, STACKTOP = g, h
            } else b = f;
            b += HEAP32[b >> 2];
            if (0 <
                (i | 0)) {
                for (p = r = 0;;) {
                    n = HEAP32[b + (p << 2) >> 2];
                    if (-1 >= (n | 0)) {
                        e = 26;
                        break
                    }
                    q = n + r;
                    n = p + 1;
                    if (-1 >= (q | 0)) {
                        e = 28;
                        break
                    }
                    if ((n | 0) < (i | 0)) r = q, p = n;
                    else {
                        s = q;
                        break a
                    }
                }
                if (26 == e) return b = HEAP32[a + 4408 >> 2], q = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), h = 0, STACKTOP = g, h;
                if (28 == e) return q = HEAP32[a + 4408 >> 2], b = HEAP32[q + (HEAP32[q >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), h = 0, STACKTOP = g, h
            } else s = 0
        } else
    if (b = f, q = HEAP32[f >> 2], 0 < (i | 0))
        for (r = n = 0;;)
            if (n = (HEAP8[b + (r + q)] | 0) + n, p = r + 1, (p |
                    0) < (i | 0)) r = p;
            else {
                s = n;
                break
            } else s = 0;
    while (0);
    r = (s | 0) * (m | 0);
    2147483647 < r ? (n = HEAP32[a + 4408 >> 2], i = HEAP32[n + (HEAP32[n >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), b = 0) : b = r & -1;
    r = a + 204545;
    if (0 != (HEAP8[r] | 0)) return STACKTOP = g, 0;
    if (0 == (m | 0)) j = 0;
    else if (i = (b | 0) * ((HEAP32[d + 20 >> 2] | 0) / (m | 0) & -1 | 0), 2147483647 >= i) j = i & -1;
    else if (i = HEAP32[a + 4408 >> 2], n = HEAP32[i + (HEAP32[i >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), 0 == (HEAP8[r] | 0)) j = 0;
    else return STACKTOP = g, 0;
    n = d + 12;
    i = _jtga(a, HEAP32[n >>
        2], j, HEAP32[d + 24 >> 2] + (k & 1 ^ 1), l);
    if (0 == (i | 0)) return STACKTOP = g, 0;
    HEAP32[i + 28 + (c << 2) >> 2] = b;
    if (0 == (j | 0)) return STACKTOP = g, i;
    j = HEAP32[d >> 2];
    b = i;
    l = HEAP32[b >> 2];
    do
        if (0 < (c | 0)) {
            k = 1;
            for (f = 0;;)
                if (t = k * (HEAP32[d + 28 + (f << 2) >> 2] | 0), p = f + 1, (p | 0) < (c | 0)) k = t, f = p;
                else break;
            2147483647 >= t ? (u = t, e = 43) : (f = HEAP32[a + 4408 >> 2], k = HEAP32[f + (HEAP32[f >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), w = 0)
        } else u = 1, e = 43;
    while (0);
    43 == e && (w = u & -1);
    if (0 != (HEAP8[r] | 0)) return STACKTOP = g, 0;
    r = Math_imul(w, m) | 0;
    m = (HEAP32[d + 20 >> 2] |
        0) / (r | 0) & -1;
    w = HEAP32[n >> 2];
    u = Math_imul(2 == (w | 0) | 2097152 == (w | 0) | 33554432 == (w | 0) ? 1 : 131072 == (w | 0) ? 2 : 4 == (w | 0) | 67108864 == (w | 0) | 134217728 == (w | 0) | 4194304 == (w | 0) | 8388608 == (w | 0) ? 4 : 32 == (w | 0) ? 4 : 1 == (w | 0) | 8 == (w | 0) | 16 == (w | 0) ? w : 64 == (w | 0) ? 4 : 128 == (w | 0) ? 8 : 1024 == (w | 0) | 4096 == (w | 0) | 8192 == (w | 0) | 16384 == (w | 0) | 2048 == (w | 0) | 32768 == (w | 0) ? 16 : 262144 == (w | 0) | 524288 == (w | 0) | 1048576 == (w | 0) ? 44 : 16777216 == (w | 0) ? 12 : 65536 == (w | 0) ? 4 : 268435456 == (w | 0) ? 12 : 536870912 == (w | 0) ? 24 : -1, m) | 0;
    m = Math_imul(u, s) | 0;
    if (0 < (r | 0)) {
        f = (s = (u | 0) < (m | 0)) ? u : m;
        e = i + l;
        l = d + j;
        for (j = 0;;) {
            _memcpy(e, l, f) | 0;
            if (s)
                for (a = u;;)
                    if (t = m - a, _memcpy(e + a, e, (a | 0) < (t | 0) ? a : t) | 0, t = a << 1, (t | 0) < (m | 0)) a = t;
                    else break;
            a = j + 1;
            if ((a | 0) < (r | 0)) e += m, l += u, j = a;
            else break
        }
        a = HEAP32[n >> 2]
    } else a = w;
    if (0 == (a & 32 | 0) || 0 == (HEAP32[d + 4 >> 2] & 14 | 0)) return STACKTOP = g, i;
    a = d - i;
    d = i + 4;
    HEAP32[d >> 2] |= 8;
    d = i + HEAP32[b >> 2];
    b = HEAP32[i + 20 >> 2];
    if (0 < (b | 0)) m = 0;
    else return STACKTOP = g, i;
    for (;;)
        if (w = d + (m << 2), HEAP32[w >> 2] += a, w = m + 1, (w | 0) < (b | 0)) m = w;
        else {
            h = i;
            break
        }
    STACKTOP = g;
    return h
}

function _jthook1(a, f, d) {
    var c, b, e, g, h, j;
    c = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = HEAP32[d >> 2];
    e = HEAP32[b + (d + 8) >> 2];
    g = 0 == (e | 0) ? 0 : HEAP32[e + (HEAP32[e >> 2] + 4) >> 2];
    h = HEAP32[b + (d + 12) >> 2];
    j = 0 == (h | 0) ? 0 : HEAP32[h + HEAP32[h >> 2] >> 2];
    b = HEAP32[b + (d + 24) >> 2];
    if (0 == (f | 0)) return 0;
    if ((b | 0) < (HEAP32[f + 24 >> 2] | 0)) return a = _jtrank1ex(a, f, d, b, 2186);
    b = getFUNCTION_TABLE(j)(a, f, h);
    h = getFUNCTION_TABLE(g)(a, f, b, e);
    0 != (h | 0) && (_jttraverse(a, h, 654), e = h + 16, HEAP32[e >> 2] += 1);
    _jttpop(a, c);
    return a = _jttpush(a, h)
}


function _jtscm01(a, f) {
    var d, c;
    if (0 == (f | 0)) return 0;
    d = 0 != (HEAP32[f + 12 >> 2] & 131074 | 0);
    c = d & 1;
    return (c | 0) < (HEAP32[f + 24 >> 2] | 0) ? d = _jtrank1ex(a, f, 0, c, 1044) : d = d ? _jtline(a, f, -1, 0, 1) : _jtlinf(a, HEAP32[31134], f, 0, 1)
}

function _jtlcpa(a, f, d) {
    var c, b;
    if (0 == (d | 0)) return 0;
    if (0 == f << 24 >> 24) return d;
    f = HEAP32[d + 20 >> 2];
    c = _jtga(a, 2, f + 2, 1, 0);
    if (0 == (c | 0)) return 0;
    a = c;
    b = HEAP32[c >> 2];
    HEAP8[a + b] = 40;
    _memcpy(b + (a + 1), d + HEAP32[d >> 2], f) | 0;
    HEAP8[b + (a + (f + 1))] = 41;
    return c
}


function _jtlnoun(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C;
    d = 0;
    if (0 == (f | 0)) return 0;
    b = f + 12;
    e = HEAP32[b >> 2];
    if (0 == (e & 64512 | 0)) {
        if (0 != (HEAP32[f + 20 >> 2] | 0)) return 32 == (e | 0) ? c = _jtlbox(a, f) : 65536 == (e | 0) ? (g = _jtga(a, 2, 3, 1, 0), 0 == (g | 0) ? c = 0 : (c = g + HEAP32[g >> 2], HEAP8[c] = HEAP8[117688], HEAP8[c + 1 | 0] = HEAP8[117689], HEAP8[c + 2 | 0] = HEAP8[117690], c = g), c = _jtover(a, c, _jtlbox(a, _jtsb2(a, HEAP32[31074], f)))) : 2 == (e | 0) ? c = _jtlchar(a, f) : 131072 == (e | 0) ? (c = _jtga(a, 2, 3, 1, 0), 0 == (c | 0) ? h = 0 : (g = c + HEAP32[c >> 2], HEAP8[g] =
            HEAP8[117896], HEAP8[g + 1 | 0] = HEAP8[117897], HEAP8[g + 2 | 0] = HEAP8[117898], h = c), c = _jtover(a, h, _jtlnum(a, _jtuco2(a, HEAP32[31072], f)))) : c = _jtlnum(a, f), c;
        h = HEAP32[f + 24 >> 2];
        c = 1 == (h | 0);
        g = _jtga(a, 4, h, 1, 0);
        0 == (g | 0) ? j = 0 : (_memcpy(g + HEAP32[g >> 2], f + 28, h << 2) | 0, j = g);
        g = _jtthorn1(a, j);
        if (0 == (g | 0)) return 0;
        j = HEAP32[b >> 2];
        if (128 == (j | 0)) h = _jtga(a, 2, 4, 1, 0), 0 == (h | 0) ? i = 0 : (c = h + HEAP32[h >> 2], tempBigInt = 846344484, HEAP8[c] = tempBigInt, tempBigInt >>= 8, HEAP8[c + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[c + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[c +
            3 | 0] = tempBigInt, i = h), c = _jtover(a, g, i);
        else if (2 == (j | 0)) {
            i = _jtga(a, 2, 2, 1, 0);
            0 == (i | 0) ? l = 0 : (h = i + HEAP32[i >> 2], tempBigInt = 10023, HEAP8[h] = tempBigInt, tempBigInt >>= 8, HEAP8[h + 1 | 0] = tempBigInt, l = i);
            if (c) return l;
            i = _jtga(a, 2, 1, 0, 0);
            0 == (i | 0) ? k = 0 : (HEAP8[i + HEAP32[i >> 2]] = 36, k = i);
            c = _jtover(a, _jtover(a, g, k), l)
        } else if (65536 == (j | 0)) l = _jtga(a, 2, 7, 1, 0), 0 == (l | 0) ? m = 0 : (k = l + HEAP32[l >> 2], HEAP8[k] = HEAP8[118928], HEAP8[k + 1 | 0] = HEAP8[118929], HEAP8[k + 2 | 0] = HEAP8[118930], HEAP8[k + 3 | 0] = HEAP8[118931], HEAP8[k + 4 | 0] = HEAP8[118932], HEAP8[k +
            5 | 0] = HEAP8[118933], HEAP8[k + 6 | 0] = HEAP8[118934], m = l), c = _jtover(a, g, m);
        else if (131072 == (j | 0)) {
            m = _jtga(a, 2, 5, 1, 0);
            0 == (m | 0) ? n = 0 : (l = m + HEAP32[m >> 2], HEAP8[l] = HEAP8[119480], HEAP8[l + 1 | 0] = HEAP8[119481], HEAP8[l + 2 | 0] = HEAP8[119482], HEAP8[l + 3 | 0] = HEAP8[119483], HEAP8[l + 4 | 0] = HEAP8[119484], n = m);
            if (c) return n;
            c = _jtga(a, 2, 1, 0, 0);
            0 == (c | 0) ? p = 0 : (HEAP8[c + HEAP32[c >> 2]] = 36, p = c);
            c = _jtover(a, _jtover(a, g, p), n)
        } else 64 == (j | 0) ? (n = _jtga(a, 2, 3, 1, 0), 0 == (n | 0) ? q = 0 : (p = n + HEAP32[n >> 2], HEAP8[p] = HEAP8[119048], HEAP8[p + 1 | 0] = HEAP8[119049], HEAP8[p +
            2 | 0] = HEAP8[119050], q = n), c = _jtover(a, g, q)) : 16 == (j | 0) ? (q = _jtga(a, 2, 4, 1, 0), 0 == (q | 0) ? r = 0 : (n = q + HEAP32[q >> 2], tempBigInt = 896151588, HEAP8[n] = tempBigInt, tempBigInt >>= 8, HEAP8[n + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[n + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[n + 3 | 0] = tempBigInt, r = q), c = _jtover(a, g, r)) : 8 == (j | 0) ? (r = _jtga(a, 2, 4, 1, 0), 0 == (r | 0) ? s = 0 : (q = r + HEAP32[r >> 2], tempBigInt = 892219428, HEAP8[q] = tempBigInt, tempBigInt >>= 8, HEAP8[q + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[q + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[q + 3 | 0] = tempBigInt,
            s = r), c = _jtover(a, g, s)) : 1 == (j | 0) ? (s = _jtga(a, 2, 2, 1, 0), 0 == (s | 0) ? t = 0 : (r = s + HEAP32[s >> 2], tempBigInt = 12324, HEAP8[r] = tempBigInt, tempBigInt >>= 8, HEAP8[r + 1 | 0] = tempBigInt, t = s), c = _jtover(a, g, t)) : 32 == (j | 0) ? (j = _jtga(a, 2, 3, 1, 0), 0 == (j | 0) ? u = 0 : (t = j + HEAP32[j >> 2], HEAP8[t] = HEAP8[119368], HEAP8[t + 1 | 0] = HEAP8[119369], HEAP8[t + 2 | 0] = HEAP8[119370], u = j), c = _jtover(a, g, u)) : (u = _jtga(a, 2, 2, 1, 0), 0 == (u | 0) ? w = 0 : (j = u + HEAP32[u >> 2], tempBigInt = 11881, HEAP8[j] = tempBigInt, tempBigInt >>= 8, HEAP8[j + 1 | 0] = tempBigInt, w = u), c = _jtover(a, w, g));
        return c
    }
    g =
        f + 24;
    w = HEAP32[g >> 2];
    u = f;
    j = HEAP32[f >> 2];
    t = HEAP32[u + j >> 2] + j;
    r = s = u + t;
    q = HEAP32[j + (u + 4) >> 2] + j;
    p = n = u + q;
    c = HEAP32[j + (u + 8) >> 2] + j;
    m = u + c;
    l = u + (HEAP32[j + (u + 12) >> 2] + j);
    j = 0 < (w | 0);
    a: do
        if (j) {
            k = f + 28;
            for (i = 0;;) {
                if (0 == (HEAP32[k >> 2] | 0)) {
                    v = 1;
                    break
                }
                h = i + 1;
                if ((h | 0) < (w | 0)) k += 4, i = h;
                else {
                    v = 0;
                    break
                }
            }
            if ((w | 0) != (HEAP32[t + (u + 24) >> 2] | 0)) x = 0, y = v;
            else {
                i = u + (HEAP32[s >> 2] + t);
                for (k = 0;;) {
                    if ((k | 0) != (HEAP32[i >> 2] | 0)) {
                        x = 1;
                        y = v;
                        break a
                    }
                    h = k + 1;
                    if ((h | 0) < (w | 0)) i += 4, k = h;
                    else {
                        x = 0;
                        y = v;
                        break
                    }
                }
            }
        } else y = x = 0;
    while (0);
    0 == (e & 8192 | 0) ? (z = 1, d = 13) : (e = 0 != HEAPF64[u +
        (HEAP32[n >> 2] + q) >> 3]) ? (z = e & 1, d = 13) : D = A = 0;
    if (13 == d) {
        e = _jtlnoun(a, p);
        q = HEAP32[b >> 2];
        h = 0 == (q & 1024 | 0) ? 0 != (q & 4096 | 0) ? 118864 : 0 != (q & 8192 | 0) ? 118808 : 118728 : 161016;
        q = _strlen(h);
        n = _jtga(a, 2, q, 1, 0);
        0 == (n | 0) ? n = 0 : _memcpy(n + HEAP32[n >> 2], h, q) | 0;
        n = _jtover(a, e, n);
        if (0 == (n | 0)) return 0;
        A = n;
        D = z
    }
    z = 0 != D << 24 >> 24;
    if (0 == (x | 0) & (z ^ 1)) {
        D = HEAP32[g >> 2];
        n = _jtga(a, 4, D, 1, 0);
        0 == (n | 0) ? e = 0 : (_memcpy(n + HEAP32[n >> 2], f + 28, D << 2) | 0, e = n);
        n = _jtlnoun(a, e);
        if (0 == (n | 0)) return 0;
        x = n
    } else {
        n = _jtlnoun(a, r);
        z ? (0 == (n | 0) ? e = 0 : (D = HEAP32[a + 204552 >> 2], h =
            _jtlp(a, n) << 24 >> 24, e = FUNCTION_TABLE[D](a, h, n, 0)), h = _jtga(a, 2, 1, 0, 0), 0 == (h | 0) ? D = 0 : (HEAP8[h + HEAP32[h >> 2]] = 59, D = h), A = _jtover(a, e, _jtover(a, D, A))) : A = n;
        if (0 == (A | 0)) return 0;
        n = HEAP32[g >> 2];
        h = _jtga(a, 4, n, 1, 0);
        0 == (h | 0) ? e = 0 : (_memcpy(h + HEAP32[h >> 2], f + 28, n << 2) | 0, e = h);
        h = _jtlnoun(a, e);
        0 == (h | 0) ? g = 0 : (n = HEAP32[a + 204552 >> 2], D = _jtlp(a, h) << 24 >> 24, g = FUNCTION_TABLE[n](a, D, h, 0));
        h = _jtga(a, 2, 1, 0, 0);
        0 == (h | 0) ? e = 0 : (HEAP8[h + HEAP32[h >> 2]] = 59, e = h);
        h = _jtover(a, g, _jtover(a, e, A));
        if (0 == (h | 0)) return 0;
        x = h
    }
    A = _jtga(a, 2, 3, 1, 0);
    0 == (A |
        0) ? e = 0 : (e = A + HEAP32[A >> 2], HEAP8[e] = HEAP8[118672], HEAP8[e + 1 | 0] = HEAP8[118673], HEAP8[e + 2 | 0] = HEAP8[118674], e = A);
    A = _jtover(a, e, x);
    if (0 == (A | 0)) return 0;
    if (0 != (y | 0) || 0 == (HEAP32[c + (u + 28) >> 2] | 0)) return A;
    c = t + (u + 20);
    if (0 == (HEAP32[c >> 2] | 0)) y = _jtlnoun(a, _jthead(a, l)), 0 == (y | 0) ? m = 0 : (x = HEAP32[a + 204552 >> 2], e = _jtlp(a, y) << 24 >> 24, m = FUNCTION_TABLE[x](a, e, y, 0)), y = _jtga(a, 2, 4, 1, 0), 0 == (y | 0) ? l = 0 : (e = y + HEAP32[y >> 2], tempBigInt = 2100977952, HEAP8[e] = tempBigInt, tempBigInt >>= 8, HEAP8[e + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[e + 2 | 0] =
        tempBigInt, tempBigInt >>= 8, HEAP8[e + 3 | 0] = tempBigInt, l = y), y = _jtover(a, m, l);
    else {
        y = _jtlnoun(a, l);
        if (0 == (y | 0)) return 0;
        e = HEAP32[a + 204552 >> 2];
        x = _jtlp(a, y) << 24 >> 24;
        e = FUNCTION_TABLE[e](a, x, y, 0);
        if (0 == (e | 0)) return 0;
        1 == (w | 0) ? g = _jtlnoun(a, _jtravel(a, m)) : (y = _jtga(a, 2, 5, 1, 0), 0 == (y | 0) ? y = 0 : (x = y + HEAP32[y >> 2], HEAP8[x] = HEAP8[118616], HEAP8[x + 1 | 0] = HEAP8[118617], HEAP8[x + 2 | 0] = HEAP8[118618], HEAP8[x + 3 | 0] = HEAP8[118619], HEAP8[x + 4 | 0] = HEAP8[118620]), g = _jtover(a, y, _jtlnoun(a, m)));
        if (0 == (g | 0)) return 0;
        y = _jtga(a, 2, 2, 1, 0);
        0 == (y |
            0) ? D = 0 : (x = y + HEAP32[y >> 2], tempBigInt = 10272, HEAP8[x] = tempBigInt, tempBigInt >>= 8, HEAP8[x + 1 | 0] = tempBigInt, D = y);
        y = _jtga(a, 2, 2, 1, 0);
        0 == (y | 0) ? m = 0 : (x = y + HEAP32[y >> 2], tempBigInt = 32041, HEAP8[x] = tempBigInt, tempBigInt >>= 8, HEAP8[x + 1 | 0] = tempBigInt, m = y);
        y = _jtover(a, e, _jtover(a, D, _jtover(a, g, m)))
    }
    if (0 == (y | 0)) return 0;
    l = y;
    m = HEAP32[c >> 2];
    a: do
        if (0 < (m | 0)) {
            c = u + (HEAP32[s >> 2] + t);
            for (g = 0;
                (g | 0) == (HEAP32[c >> 2] | 0);)
                if (D = g + 1, (D | 0) < (m | 0)) c += 4, g = D;
                else break a;
            g = w - 1;
            c = _jtga(a, 4, w, 1, 0);
            do
                if (0 == (c | 0)) B = 0;
                else if (0 == (w | 0)) B = c;
            else {
                e = -1;
                for (D = c + HEAP32[c >> 2];;)
                    if (m = e + 1, HEAP32[D >> 2] = m, (m | 0) == (g | 0)) {
                        B = c;
                        break
                    } else e = m, D += 4
            }
            while (0);
            c = _jtless(a, B, r);
            if (0 == (c | 0)) return c = 0;
            D = _jtlnoun(a, c);
            0 == (D | 0) ? r = 0 : (e = HEAP32[a + 204552 >> 2], m = _jtlp(a, D) << 24 >> 24, r = FUNCTION_TABLE[e](a, m, D, 0));
            D = _jtga(a, 2, 2, 1, 0);
            0 == (D | 0) ? m = 0 : (m = D + HEAP32[D >> 2], tempBigInt = 14972, HEAP8[m] = tempBigInt, tempBigInt >>= 8, HEAP8[m + 1 | 0] = tempBigInt, m = D);
            D = _jtover(a, _jtover(a, r, m), A);
            if (0 == (D | 0)) return c = 0;
            m = _jtover(a, l, D);
            if (0 == (m | 0)) return c = 0;
            D = _jtga(a, 4, w, 1, 0);
            do
                if (0 == (D | 0)) G = 0;
                else if (0 == (w | 0)) G = D;
            else {
                e = -1;
                for (y = D + HEAP32[D >> 2];;)
                    if (l = e + 1, HEAP32[y >> 2] = l, (l | 0) == (g | 0)) {
                        G = D;
                        break
                    } else e = l, y += 4
            }
            while (0);
            D = _jtover(a, _jtless(a, G, c), c);
            g = a + 1096;
            y = HEAP32[g >> 2];
            e = a + 1104;
            l = HEAP32[e >> 2];
            HEAP32[g >> 2] = 1;
            HEAP32[e >> 2] = -1;
            if (0 == (D | 0)) return c = 0;
            G = 0 == (HEAP32[D + 12 >> 2] & 64512 | 0) ? _jtgr1(a, D) : _jtgrd1sp(a, D);
            HEAP32[g >> 2] = y;
            HEAP32[e >> 2] = l;
            if (0 == (G | 0)) return c = 0;
            b: do
                if (j) {
                    l = G + HEAP32[G >> 2];
                    for (e = 0;;) {
                        if ((e | 0) != (HEAP32[l >> 2] | 0)) {
                            C = e;
                            break b
                        }
                        y = e + 1;
                        if ((y | 0) < (w | 0)) l += 4, e = y;
                        else {
                            C = w;
                            break
                        }
                    }
                } else C =
                    w;
            while (0);
            c = _jtga(a, 4, 1, 0, 0);
            0 == (c | 0) ? c = 0 : HEAP32[c + HEAP32[c >> 2] >> 2] = C;
            c = _jtlnoun(a, _jtdrop(a, c, G));
            0 == (c | 0) ? j = 0 : (e = HEAP32[a + 204552 >> 2], l = _jtlp(a, c) << 24 >> 24, j = FUNCTION_TABLE[e](a, l, c, 0));
            c = _jtga(a, 2, 2, 1, 0);
            0 == (c | 0) ? c = 0 : (l = c + HEAP32[c >> 2], tempBigInt = 14972, HEAP8[l] = tempBigInt, tempBigInt >>= 8, HEAP8[l + 1 | 0] = tempBigInt);
            return c = _jtover(a, j, _jtover(a, c, m))
        }
    while (0);
    return c = _jtover(a, l, A)
}

function _jtlnum(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = _jtravel(a, f);
    if (0 == (b | 0)) return STACKTOP = c, 0;
    g = f + 20;
    h = HEAP32[g >> 2];
    7 < (h | 0) ? d = 5 : 1 >= (h | 0) || 1 < (HEAP32[f + 24 >> 2] | 0) && (d = 5);
    do
        if (5 == d) {
            e = _jtfrom(a, HEAP32[31058], b);
            j = _jtfrom(a, HEAP32[30648], b);
            i = _jtva2(a, e, j, 45);
            e = a + 204545;
            0 != (HEAP8[e] | 0) && (HEAP8[e] = 0, HEAP32[a + 4400 >> 2] = 0);
            l = h - 1;
            k = _jtga(a, 4, h, 1, 0);
            do
                if (0 == (k | 0)) m = 0;
                else if (0 == (h | 0)) m = k;
            else {
                n = -1;
                for (p = k + HEAP32[k >> 2];;)
                    if (q = n + 1, HEAP32[p >> 2] = q, (q | 0) == (l | 0)) {
                        m =
                            k;
                        break
                    } else n = q, p += 4
            }
            while (0);
            k = _jtequ(a, b, _jtva2(a, j, _jtva2(a, i, m, 42), 43));
            0 != (HEAP8[e] | 0) && (HEAP8[e] = 0, HEAP32[a + 4400 >> 2] = 0);
            if (0 != k << 24 >> 24) {
                if (0 != _jtequ(a, i, HEAP32[30648]) << 24 >> 24) return 0 == (f | 0) ? e = 0 : (k = HEAP32[f + 24 >> 2], p = _jtga(a, 4, k, 1, 0), 0 == (p | 0) ? e = 0 : (_memcpy(p + HEAP32[p >> 2], f + 28, k << 2) | 0, e = p)), p = _jtthorn1(a, e), k = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[k] = 36, n = _jtga(a, 2, 1, 1, 0), 0 == (n | 0) ? e = 0 : (HEAP8[n + HEAP32[n >> 2]] = HEAP8[k], e = n), n = _jtover(a, p, e), e = _jtover(a, n, _jtlnum1(a, j)), STACKTOP = c, e;
                n = _jtga(a, 32, 6, 1,
                    0);
                if (0 == (n | 0)) return e = 0, STACKTOP = c, e;
                p = n;
                k = HEAP32[n >> 2];
                q = p + k;
                m = HEAP32[31086];
                b = k + (p + 12);
                HEAP32[b >> 2] = m;
                h = k + (p + 8);
                HEAP32[h >> 2] = m;
                g = k + (p + 4);
                HEAP32[g >> 2] = m;
                HEAP32[q >> 2] = m;
                m = _jtga(a, 4, 1, 0, 0);
                0 == (m | 0) ? l = 0 : (HEAP32[m + HEAP32[m >> 2] >> 2] = l, l = m);
                0 == _jtequ(a, j, l) << 24 >> 24 ? d = 26 : 0 == _jtequ(a, i, HEAP32[31068]) << 24 >> 24 ? d = 26 : r = 1;
                26 == d && (0 == _jtequ(a, j, HEAP32[30648]) << 24 >> 24 && (HEAP32[q >> 2] = _jtlnum1(a, j), m = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[m] = 43, d = _jtga(a, 2, 1, 1, 0), 0 == (d | 0) ? d = 0 : HEAP8[d + HEAP32[d >> 2]] = HEAP8[m], HEAP32[g >>
                    2] = d), 0 != _jtequ(a, i, HEAP32[31068]) << 24 >> 24 ? (d = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[d] = 45, m = _jtga(a, 2, 1, 1, 0), 0 == (m | 0) ? d = 0 : (HEAP8[m + HEAP32[m >> 2]] = HEAP8[d], d = m), HEAP32[g >> 2] = d) : 0 == _jtequ(a, i, HEAP32[31058]) << 24 >> 24 && (HEAP32[h >> 2] = _jtlnum1(a, i), m = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[m] = 42, d = _jtga(a, 2, 1, 1, 0), 0 == (d | 0) ? d = 0 : HEAP8[d + HEAP32[d >> 2]] = HEAP8[m], HEAP32[b >> 2] = d), r = 0);
                b = c;
                _spellit(-55, b);
                d = 0 == (HEAP8[c + 2] | 0) ? 0 != (HEAP8[c + 1] | 0) ? 2 : 1 : 3;
                i = _jtga(a, 2, d, 1, 0);
                0 == (i | 0) ? d = 0 : (_memcpy(i + HEAP32[i >> 2], b, d) | 0, d = i);
                HEAP32[k +
                    (p + 16) >> 2] = d;
                0 == (f | 0) ? i = 0 : (i = HEAP32[f + 24 >> 2], b = _jtga(a, 4, i, 1, 0), 0 == (b | 0) ? i = 0 : (_memcpy(b + HEAP32[b >> 2], f + 28, i << 2) | 0, i = b));
                r = r ? _jtva2(a, HEAP32[30648], i, 45) : i;
                HEAP32[k + (p + 20) >> 2] = _jtthorn1(a, r);
                if (0 != (HEAP8[e] | 0)) return e = 0, STACKTOP = c, e;
                e = _jtraze(a, n);
                STACKTOP = c;
                return e
            }
        }
    while (0);
    a: do
        if (0 == (f | 0)) e = 0;
        else
    if (r = HEAP32[f + 24 >> 2], 0 == (r | 0)) e = HEAP32[31086];
    else {
        2 == (r | 0) && (d = 51);
        do
            if (51 == d) {
                i = 1 == (HEAP32[f + 32 >> 2] | 0);
                if (1 == (HEAP32[f + 28 >> 2] | 0)) e = i ? -100 : -99;
                else if (i) e = -100;
                else break;
                i = c;
                _spellit(e, i);
                e = 0 == (HEAP8[c +
                    2] | 0) ? 0 != (HEAP8[c + 1] | 0) ? 2 : 1 : 3;
                r = _jtga(a, 2, e, 1, 0);
                if (0 == (r | 0)) {
                    e = 0;
                    break a
                }
                _memcpy(r + HEAP32[r >> 2], i, e) | 0;
                e = r;
                break a
            }
        while (0);
        1 >= (r | 0) ? 1 < (HEAP32[g >> 2] | 0) ? e = HEAP32[31086] : (n = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[n] = 44, e = _jtga(a, 2, 1, 1, 0), 0 == (e | 0) ? e = 0 : HEAP8[e + HEAP32[e >> 2]] = HEAP8[n]) : (e = _jtga(a, 4, r, 1, 0), 0 == (e | 0) ? e = 0 : _memcpy(e + HEAP32[e >> 2], f + 28, r << 2) | 0, e = _jtthorn1(a, e), n = c, HEAP8[c + 2] = 0, HEAP8[c + 1] = 0, HEAP8[n] = 36, p = _jtga(a, 2, 1, 1, 0), 0 == (p | 0) ? p = 0 : HEAP8[p + HEAP32[p >> 2]] = HEAP8[n], e = _jtover(a, e, p))
    }
    while (0);
    e = _jtover(a,
        e, _jtlnum1(a, b));
    STACKTOP = c;
    return e
}

function _jtlnum1(a, f) {
    var d, c, b;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 12 >> 2];
    if (0 == (d & 24 | 0)) c = _jtthorn1(a, f);
    else {
        c = HEAP32[30975];
        b = _jtga(a, 4, 1, 0, 0);
        0 == (b | 0) ? b = 0 : HEAP32[b + HEAP32[b >> 2] >> 2] = 18;
        b = _jtfit(a, c, b);
        if (0 == (b | 0)) return 0;
        c = FUNCTION_TABLE[HEAP32[b + HEAP32[b >> 2] >> 2]](a, f, b)
    }
    if (0 == (c | 0)) return 0;
    if (0 == (d & 192 | 0) || 0 != (_memchr(c + HEAP32[c >> 2], 0 != (d & 64 | 0) ? 120 : 114, HEAP32[c + 20 >> 2]) | 0)) return c;
    d = _jtga(a, 2, 1, 0, 0);
    0 == (d | 0) ? d = 0 : HEAP8[d + HEAP32[d >> 2]] = 120;
    return d = _jtover(a, c, d)
}

function _jtlp(a, f) {
    var d, c, b, e, g, h, j, i, l;
    d = 0;
    if (0 == (f | 0)) return 0;
    b = HEAP32[f + 20 >> 2];
    e = f;
    g = HEAP32[f >> 2];
    f = e + g;
    h = HEAP8[f];
    j = b - 1;
    i = HEAP8[e + (j + g)];
    if (2 == (b | 0)) d = 4;
    else {
        if (1 == (b | 0)) return 0;
        4 > (b | 0) & 32 == h << 24 >> 24 && (d = 4)
    }
    if (4 == d && 46 == i << 24 >> 24 | 58 == i << 24 >> 24 || 0 != _jtvnm(a, b, f) << 24 >> 24) return 0;
    if (5 == (HEAP8[113216 + (h << 24 >> 24)] | 0)) {
        if (0 < (j | 0)) b = f, g = h, e = 0;
        else return 1;
        for (;;) {
            b += 1;
            a = HEAP8[113216 + (HEAP8[b] | 0)];
            if (!(5 == a << 24 >> 24 | 6 == a << 24 >> 24 | 2 == a << 24 >> 24 | 1 == a << 24 >> 24)) {
                c = 1;
                d = 25;
                break
            }
            if (1 == g << 24 >> 24 && (i = 5 != a <<
                    24 >> 24)) {
                c = i & 1;
                d = 25;
                break
            }
            i = e + 1;
            if ((i | 0) < (j | 0)) g = a, e = i;
            else {
                c = 0;
                d = 25;
                break
            }
        }
        if (25 == d) return c
    }
    if (40 == h << 24 >> 24) {
        if (0 < (j | 0)) c = f, h = 0, d = 1, g = 40;
        else return 1;
        for (;;) {
            e = c + 1;
            c = 40 == g << 24 >> 24 ? 1 : (41 == g << 24 >> 24) << 31 >> 31;
            g = c + h;
            l = 0 == (g | 0);
            if (!((d | 0) < (j | 0) & (l ^ 1))) break;
            c = e;
            h = g;
            d += 1;
            g = HEAP8[e]
        }
        return l & 1
    }
    if (39 == h << 24 >> 24) {
        if (0 < (j | 0)) h = f, e = 0, g = l = 1;
        else return 1;
        for (;;) {
            f = h + 1;
            h = 0 == e << 24 >> 24;
            if (g) e = h & 1;
            else if (h) {
                c = 1;
                d = 25;
                break
            }
            if ((l | 0) >= (j | 0)) {
                c = 0;
                d = 25;
                break
            }
            h = f;
            l += 1;
            g = 39 == (HEAP8[f] | 0)
        }
        if (25 == d) return c
    } else return 1
}


function _jtforeign(a, f, d) {
    var c, b, e, g, h;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    c = _jti0(a, f);
    b = _jti0(a, d);

    if (c.toString()=='15' && b.toString() == '0') {
        e = a + 204545;
        if (0 != (HEAP8[e] | 0)) return 0;

        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1160;
        HEAP32[g + (b + 4) >> 2] = 3295;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 1;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 1;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c

        
        return f;
    }
    else {
        return _jtforeignx(a,f,d);
    }
    
    

}

function _jtforeignx(a, f, d) {
    var c, b, e, g, h;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    c = _jti0(a, f);
    b = _jti0(a, d);
    e = a + 204545;
    if (0 != (HEAP8[e] | 0)) return 0;
    //console.log('foreign: ' + c + ' ' +  b + ' '  + (b|0));

    //return;
    if (11 == (c | 0)) {
        b = _jtga(a, 262144, 1, 0, 0);
        if (0 == (b | 0)) return 0;
        g = b;
        a = HEAP32[b >> 2];
        HEAP32[g + a >> 2] = 1400;
        HEAP32[a + (g + 4) >> 2] = 1980;
        HEAP32[a + (g + 8) >> 2] = f;
        HEAP32[a + (g + 12) >> 2] = d;
        HEAP32[a + (g + 16) >> 2] = 0;
        HEAP32[a + (g + 20) >> 2] = 0;
        HEAP32[a + (g + 24) >> 2] = 1;
        HEAP32[a + (g + 28) >> 2] = 2147483647;
        HEAP32[a + (g + 32) >> 2] = 2147483647;
        HEAP32[a + (g + 36) >> 2] = 0;
        HEAP8[a + (g + 40)] = -93;
        return b
    }
    if (126 < b >>> 0) {
        b = _jtga(a,
            262144, 1, 0, 0);
        if (0 == (b | 0)) return 0;
        g = b;
        a = HEAP32[b >> 2];
        HEAP32[g + a >> 2] = 1982;
        HEAP32[a + (g + 4) >> 2] = 1980;
        HEAP32[a + (g + 8) >> 2] = f;
        HEAP32[a + (g + 12) >> 2] = d;
        HEAP32[a + (g + 16) >> 2] = 0;
        HEAP32[a + (g + 20) >> 2] = 0;
        HEAP32[a + (g + 24) >> 2] = 2147483647;
        HEAP32[a + (g + 28) >> 2] = 2147483647;
        HEAP32[a + (g + 32) >> 2] = 2147483647;
        HEAP32[a + (g + 36) >> 2] = 0;
        HEAP8[a + (g + 40)] = -93;
        return b
    }
    b += 127 * c & -1;
    if (1183 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3140;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >>
            2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1184 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2532;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (3 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1388, HEAP32[g + (b + 4) >> 2] = 1384, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1388;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1017 == (b |
            0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2652;
        HEAP32[g + (b + 4) >> 2] = 2644;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1155 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3294;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >>
            2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (383 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 520;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (895 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2060;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1157 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2978;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] =
            d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1 == (b | 0) | 101 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1044, HEAP32[g + (b + 4) >> 2] = 982, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1044;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g +
            (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (640 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2614;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (641 == (b | 0)) {
        c =
            _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 470;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (770 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2548;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g +
            (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (508 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 622;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1657 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0,
            0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1628;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1658 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2094;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b +
            20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 436, HEAP32[g + (b + 4) >> 2] = 438, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 436;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1660 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2784;
        HEAP32[g + (b + 4) >> 2] = 2786;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1662 == (b | 0)) {
        c = _jtga(a, 262144,
            1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1534;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (10 == (b | 0) | 110 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1028, HEAP32[g + (b + 4) >> 2] = 496, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1028;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (11 == (b | 0) | 111 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1286, HEAP32[g + (b + 4) >> 2] = 294, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >>
            2];
        HEAP32[b + g >> 2] = 1286;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1016 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2378;
        HEAP32[g + (b + 4) >> 2] = 2374;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b +
            24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (16258 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1982;
        HEAP32[g + (b + 4) >> 2] = 274;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 1;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (16259 == (b | 0)) {
        c = _jtga(a, 262144,
            1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 220;
        HEAP32[g + (b + 4) >> 2] = 2742;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (386 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1982;
        HEAP32[g + (b + 4) >> 2] = 2482;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >>
            2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (309 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 2410, HEAP32[g + (b + 4) >> 2] = 1980, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2974;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1186 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1802;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2317 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 460;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (0 == (b | 0) | 100 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1042, HEAP32[g + (b + 4) >> 2] = 1694, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >>
            2];
        HEAP32[b + g >> 2] = 1042;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (384 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1112;
        HEAP32[g + (b + 4) >> 2] = 1118;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >>
            2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1150 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2772;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1154 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0,
            0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 20;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (763 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1632;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >>
            2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (388 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1310;
        HEAP32[g + (b + 4) >> 2] = 1314;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1018 == (b | 0)) {
        c =
            _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1886;
        HEAP32[g + (b + 4) >> 2] = 1888;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (382 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2926;
        HEAP32[g + (b + 4) >> 2] = 2928;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] =
            d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (636 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3202;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (892 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1872;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (765 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2490;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1151 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 232;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (513 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2320;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (773 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 908;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >>
            2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1149 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2774;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1152 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 236;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (894 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1394;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b +
            12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (766 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 806;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (775 ==
        (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1488;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (387 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2398;
        HEAP32[g + (b + 4) >> 2] = 2400;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g +
            (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (635 == (b | 0)) {
        c = _jtga(a, 524288, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 928;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1659 ==
        (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2834;
        HEAP32[g + (b + 4) >> 2] = 2832;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1159 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 154;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b +
            12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1160 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 156;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1663 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 954;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1143 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1692;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1144 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1690;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (1168 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3084;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (511 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 486;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1653 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1424;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (1654 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1422;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1145 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3186;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1668 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 330;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (1669 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1216;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1189 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2314;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1664 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 466;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (1665 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1100;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1656 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 584;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1153 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 18;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1179 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2080;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1180 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2082;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1673 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1918;
        HEAP32[g + (b + 4) >> 2] = 1920;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >>
            2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (762 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1648;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1191 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 310;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g +
            (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1192 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 308;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b +
            36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1671 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 284;
        HEAP32[g + (b + 4) >> 2] = 282;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1672 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2122;
        HEAP32[g +
            (b + 4) >> 2] = 2120;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1652 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3036;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >>
            2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (891 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2818;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 1;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1175 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1900;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1176 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1902;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (642 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1982;
        HEAP32[g + (b + 4) >> 2] = 6;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (764 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1160;
        HEAP32[g +
            (b + 4) >> 2] = 434;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 1;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 1;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (665 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1982;
        HEAP32[g + (b + 4) >> 2] = 878;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1666 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1102;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1177 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2658;
        HEAP32[g + (b + 4) >>
            2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1670 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 738;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >>
            2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1171 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1554;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (512 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 32;
        HEAP32[g + (b +
            4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (385 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1982;
        HEAP32[g + (b + 4) >> 2] = 930;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (774 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1814;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (16260 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 94;
        HEAP32[g + (b + 4) >>
            2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1163 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1428;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >>
            2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1164 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 846;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2290 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1828;
        HEAP32[g +
            (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1167 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3082;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g +
            (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (128 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? h = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1304, HEAP32[g + (b + 4) >> 2] = 1980, h = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2974;
        HEAP32[g + (b + 4) >> 2] = 2692;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = h;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (381 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1922;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1162 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1782;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1161 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1784;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (1187 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2322;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1188 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2324;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1146 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3182;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b +
            40)] = -93;
        f = c
    } else if (889 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 468;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (16261 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 920;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g +
            (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (509 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 724;
        HEAP32[g + (b + 4) >> 2] = 722;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >>
            2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2287 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3260;
        HEAP32[g + (b + 4) >> 2] = 3262;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1185 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1136;
        HEAP32[g + (b +
            4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (16257 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2216;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] =
            0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (772 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 918;
        HEAP32[g + (b + 4) >> 2] = 916;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 2147483647;
        HEAP32[g + (b + 32) >> 2] = 2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1190 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2316;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1169 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 440;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g +
            (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1170 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 442;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2288 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 2570;
        HEAP32[g +
            (b + 4) >> 2] = 2568;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 0;
        HEAP32[g + (b + 28) >> 2] = 1;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2289 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 1234;
        HEAP32[g + (b + 4) >> 2] = 1232;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] =
            2147483647;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1172 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 44;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2291 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 3034;
        HEAP32[g +
            (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (2316 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 698;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b +
            32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (1181 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 826;
        HEAP32[g + (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (771 == (b | 0)) {
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        g = HEAP32[c >> 2];
        HEAP32[b + g >> 2] = 648;
        HEAP32[g +
            (b + 4) >> 2] = 1980;
        HEAP32[g + (b + 8) >> 2] = f;
        HEAP32[g + (b + 12) >> 2] = d;
        HEAP32[g + (b + 16) >> 2] = 0;
        HEAP32[g + (b + 20) >> 2] = 0;
        HEAP32[g + (b + 24) >> 2] = 2147483647;
        HEAP32[g + (b + 28) >> 2] = 0;
        HEAP32[g + (b + 32) >> 2] = 0;
        HEAP32[g + (b + 36) >> 2] = 0;
        HEAP8[g + (b + 40)] = -93;
        f = c
    } else if (129 == (b | 0)) {
        c = _jtga(a, 4, 2, 1, 0);
        0 == (c | 0) ? g = 0 : (b = c, g = HEAP32[c >> 2], HEAP32[b + g >> 2] = 1982, HEAP32[g + (b + 4) >> 2] = 934, g = c);
        if (0 != (HEAP8[e] | 0)) return 0;
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 2974;
        HEAP32[b + (c + 4) >> 2] = 2692;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b +
            (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = g;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 2147483647;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (1655 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 1142;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 2147483647;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c +
            40)] = -93;
        f = e
    } else if (563 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 2212;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (637 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 2172;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c +
            12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (1731 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 340;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 2147483647;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (2286 ==
        (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 1702;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (1651 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 2178;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >>
            2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 2147483647;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (2341 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 218;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (16256 == (b | 0)) {
        e = _jtga(a,
            262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 936;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 2;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (1178 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 1354;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c +
            20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 2147483647;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else if (639 == (b | 0)) {
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        c = e;
        b = HEAP32[e >> 2];
        HEAP32[c + b >> 2] = 1880;
        HEAP32[b + (c + 4) >> 2] = 1980;
        HEAP32[b + (c + 8) >> 2] = f;
        HEAP32[b + (c + 12) >> 2] = d;
        HEAP32[b + (c + 16) >> 2] = 0;
        HEAP32[b + (c + 20) >> 2] = 0;
        HEAP32[b + (c + 24) >> 2] = 0;
        HEAP32[b + (c + 28) >> 2] = 0;
        HEAP32[b + (c + 32) >> 2] = 0;
        HEAP32[b + (c + 36) >> 2] = 0;
        HEAP8[b + (c + 40)] = -93;
        f = e
    } else {
        if (1182 == (b | 0)) {
            b = _jtga(a, 262144, 1, 0, 0);
            if (0 == (b | 0)) return 0;
            e = b;
            c = HEAP32[b >> 2];
            HEAP32[e + c >> 2] = 830;
            HEAP32[c + (e + 4) >> 2] = 1980;
            HEAP32[c + (e + 8) >> 2] = f;
            HEAP32[c + (e + 12) >> 2] = d;
            HEAP32[c + (e + 16) >> 2] = 0;
            HEAP32[c + (e + 20) >> 2] = 0;
            HEAP32[c + (e + 24) >> 2] = 2147483647;
            HEAP32[c + (e + 28) >> 2] = 0;
            HEAP32[c + (e + 32) >> 2] = 0;
            HEAP32[c + (e + 36) >> 2] = 0;
            HEAP8[c + (e + 40)] = -93
        } else {
            b = _jtga(a, 262144, 1, 0, 0);
            if (0 == (b | 0)) return 0;
            a = b;
            e = HEAP32[b >> 2];
            HEAP32[a + e >> 2] = 1982;
            HEAP32[e + (a + 4) >> 2] = 1980;
            HEAP32[e + (a + 8) >> 2] = f;
            HEAP32[e + (a + 12) >> 2] = d;
            HEAP32[e + (a + 16) >> 2] = 0;
            HEAP32[e + (a + 20) >> 2] = 0;
            HEAP32[e + (a + 24) >>
                2] = 2147483647;
            HEAP32[e + (a + 28) >> 2] = 2147483647;
            HEAP32[e + (a + 32) >> 2] = 2147483647;
            HEAP32[e + (a + 36) >> 2] = 0;
            HEAP8[e + (a + 40)] = -93
        }
        f = b
    }
    return f
}
function _jtfrom(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    e = b;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = b, 0;
    h = HEAP32[f + 12 >> 2];
    j = HEAP32[d + 12 >> 2];
    i = 0 != (j & 64512 | 0) | (0 != (h & 64512 | 0) ? 2 : 0);
    if (0 == (i | 0)) {
        if (0 != (h & 32 | 0)) return g = _jtafrom(a, f, d), STACKTOP = b, g;
        g = 0 == (h & 1 | 0) ? _jtifrom(a, f, d) : _jtbfrom(a, f, d);
        STACKTOP = b;
        return g
    }
    if (2 == (i | 0)) {
        h = HEAP32[f + 24 >> 2];
        g = a + 205336;
        l = HEAP32[g >> 2];
        0 == (l | 0) ? (m = k = HEAP32[d + 24 >> 2], c = h, i = k) : (m = HEAP32[l + 4 >> 2], c = HEAP32[l >> 2], i = HEAP32[d +
            24 >> 2]);
        l = i - m;
        HEAP32[g >> 2] = 0;
        if ((h | 0) != (c | 0)) return g = _jtsprank2(a, f, d, 0, c, m, 2062), STACKTOP = b, g;
        if (0 == (j & 29 | 0)) return c = HEAP32[a + 4408 >> 2], g = HEAP32[c + (HEAP32[c >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), STACKTOP = b, 0;
        g = f;
        c = HEAP32[f >> 2];
        k = g + c;
        q = _jtga(a, 0 == (j & 1 | 0) ? 0 != (j & 4 | 0) ? 4096 : 0 != (j & 8 | 0) ? 8192 : 0 != (j & 16 | 0) ? 16384 : 0 != (j & 2 | 0) ? 2048 : j << 10 & 32768 : 1024, 1, i + h + ((0 < (m | 0)) << 31 >> 31), d + 28);
        if (0 == (q | 0)) return STACKTOP = b, 0;
        n = q;
        p = HEAP32[q >> 2];
        e = n + p;
        _memcpy(q + 28 + (l << 2), f + 28, h << 2) | 0;
        0 != (m | 0) && _memcpy(q +
            28 + (l + h << 2), d + 28 + (l + 1 << 2), (m << 2) - 4) | 0;
        h = _jtirs2(a, g + (HEAP32[c + (g + 4) >> 2] + c), d, 0, 0, m, 526);
        if (0 == (h | 0)) return STACKTOP = b, 0;
        j = _jtreshape(a, HEAP32[31086], h);
        if (0 == (j | 0)) return STACKTOP = b, 0;
        h = _jtva2(a, j, h, 61);
        do
            if (0 != (h | 0) && 0 == (_memchr(h + HEAP32[h >> 2], 0, HEAP32[h + 20 >> 2]) | 0)) {
                h = e;
                j -= h;
                HEAP32[p + (n + 4) >> 2] = j;
                if (0 == (n + (j + p) | 0)) return g = 0, STACKTOP = b, g;
                (j = (i | 0) != (m | 0)) ? (i = _jtga(a, 4, 1, 0, 0), 0 == (i | 0) ? i = 0 : HEAP32[i + HEAP32[i >> 2] >> 2] = l, r = _jtva2(a, i, g + (HEAP32[k >> 2] + c), 43)) : r = g + (HEAP32[k >> 2] + c);
                i = r - h;
                HEAP32[e >> 2] = i;
                if (0 ==
                    (n + (i + p) | 0)) return g = 0, STACKTOP = b, g;
                i = g + (HEAP32[c + (g + 8) >> 2] + c) - h;
                HEAP32[p + (n + 8) >> 2] = i;
                if (0 == (n + (i + p) | 0)) return g = 0, STACKTOP = b, g;
                i = g + (HEAP32[c + (g + 12) >> 2] + c);
                do {
                    if (j) {
                        g = _jtirs2(a, i, d, 0, 2147483647, m, 526);
                        if (0 == (g | 0)) return g = 0, STACKTOP = b, g;
                        k = HEAP32[g + 24 >> 2];
                        s = k - 1;
                        t = _jtga(a, 4, k, 1, 0);
                        do
                            if (0 == (t | 0)) u = 0;
                            else if (0 == (k | 0)) u = t;
                        else {
                            w = -1;
                            for (v = t + HEAP32[t >> 2];;)
                                if (w += 1, HEAP32[v >> 2] = w, (w | 0) == (s | 0)) {
                                    u = t;
                                    break
                                } else v += 4
                        }
                        while (0);
                        t = _jtga(a, 4, 1, 0, 0);
                        0 == (t | 0) ? x = 0 : (HEAP32[t + HEAP32[t >> 2] >> 2] = l, x = t);
                        t = _jtcant2(a, _jtless(a,
                            u, x), g);
                        if (0 == (t | 0)) return g = 0, STACKTOP = b, g;
                        s = t - h
                    } else s = _jtifrom(a, i, d) - h;
                    HEAP32[p + (n + 12) >> 2] = s;
                    if (0 == (n + (s + p) | 0)) return g = 0, STACKTOP = b, g
                } while (0);
                g = q;
                STACKTOP = b;
                return g
            }
        while (0);
        q = HEAP32[a + 4408 >> 2];
        p = HEAP32[q + (HEAP32[q >> 2] + 116) >> 2];
        _jtjsigstr(a, 29, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]);
        STACKTOP = b;
        return 0
    }
    if (1 == (i | 0)) {
        if (0 == (h & 32 | 0)) return g = _jtfromis(a, f, d), STACKTOP = b, g;
        h = HEAP32[f + 24 >> 2];
        i = a + 205336;
        p = HEAP32[i >> 2];
        0 == (p | 0) ? (q = d + 24, y = n = HEAP32[q >> 2], z = h, A = q) : (n = d + 24, y = HEAP32[p + 4 >> 2], z = HEAP32[p >> 2], A = n,
            n = HEAP32[n >> 2]);
        n -= y;
        HEAP32[i >> 2] = 0;
        if ((h | 0) != (z | 0)) return z = HEAP32[a + 4408 >> 2], i = HEAP32[z + (HEAP32[z >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), STACKTOP = b, 0;
        if (0 != (h | 0)) {
            _jtaindex(a, f, d, n, e);
            if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = b, 0;
            h = HEAP32[e >> 2];
            0 == (h | 0) ? (e = HEAP32[a + 4408 >> 2], i = HEAP32[e + (HEAP32[e >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), g = 0) : g = _jtfrombsn(a, h, d, n);
            STACKTOP = b;
            return g
        }
        h = f + HEAP32[f >> 2];
        w = 0 == (HEAP32[f + 4 >> 2] & 14 | 0) ? HEAP32[h >> 2] : HEAP32[h >> 2] + f;
        if (0 ==
            (w | 0)) return STACKTOP = b, 0;
        h = HEAP32[w + 12 >> 2];
        if (0 == (h & 32 | 0)) {
            if (0 != (HEAP32[w + 20 >> 2] | 0) && 0 == (h & 805336541 | 0)) return i = HEAP32[a + 4408 >> 2], e = HEAP32[i + (HEAP32[i >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = b, 0;
            e = _jtevery(a, w, 0, 2690);
            if (0 == (e | 0)) return STACKTOP = b, 0;
            u = e;
            D = HEAP32[e + 12 >> 2]
        } else u = w, D = h;
        h = HEAP32[u + 20 >> 2];
        w = u + HEAP32[u >> 2];
        y = 0 == (D & 32 | 0) ? 0 : 0 != (HEAP32[u + 4 >> 2] & 14 | 0) | 0;
        D = u & -y;
        y = HEAP32[A >> 2] - n;
        if (2 <= (HEAP32[u + 24 >> 2] | 0)) return u = HEAP32[a + 4408 >> 2], A = HEAP32[u + (HEAP32[u >> 2] + 56) >>
            2], _jtjsigstr(a, 14, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), STACKTOP = b, 0;
        if ((h | 0) > (y | 0)) return A = HEAP32[a + 4408 >> 2], u = HEAP32[A + (HEAP32[A >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), STACKTOP = b, 0;
        if (0 >= (h | 0)) return STACKTOP = b, d;
        u = 0 == (D | 0);
        A = h;
        for (e = 0;;) {
            i = A - 1;
            z = HEAP32[w + (i << 2) >> 2];
            f = u ? z : z + D;
            if (0 == (HEAP32[f + 12 >> 2] & 32 | 0)) {
                x = A;
                break
            }
            if (0 != (HEAP32[f + 24 >> 2] | 0)) {
                x = A;
                break
            }
            z = f + HEAP32[f >> 2];
            B = 0 == (HEAP32[f + 4 >> 2] & 14 | 0) ? HEAP32[z >> 2] : HEAP32[z >> 2] + f;
            if (0 != (HEAP32[B + 20 >> 2] | 0)) {
                x = A;
                break
            }
            if (1 != (HEAP32[B + 24 >>
                    2] | 0)) {
                x = A;
                break
            }
            z = e + 1;
            if ((z | 0) < (h | 0)) A = i, e = z;
            else {
                x = i;
                break
            }
        }
        e = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
        if (0 < (x | 0)) r = 0, G = d;
        else return STACKTOP = b, d;
        a: for (;;) {
            A = HEAP32[w + (r << 2) >> 2];
            k = u ? A : A + D;
            do
                if (0 == (HEAP32[k + 12 >> 2] & 32 | 0)) s = k, c = 62;
                else {
                    if (0 != (HEAP32[k + 24 >> 2] | 0)) {
                        c = 52;
                        break a
                    }
                    A = k + HEAP32[k >> 2];
                    t = 0 == (HEAP32[k + 4 >> 2] & 14 | 0) ? HEAP32[A >> 2] : HEAP32[A >> 2] + k;
                    A = HEAP32[d + 28 + (r + n << 2) >> 2];
                    if (0 == (HEAP32[t + 20 >> 2] | 0)) l = G;
                    else {
                        h = A - 1;
                        B = _jtga(a, 4, A, 1, 0);
                        do
                            if (0 == (B | 0)) m = 0;
                            else if (0 == (A | 0)) m = B;
                        else {
                            f = -1;
                            for (i = B + HEAP32[B >>
                                    2];;)
                                if (z = f + 1, HEAP32[i >> 2] = z, (z | 0) == (h | 0)) {
                                    m = B;
                                    break
                                } else f = z, i += 4
                        }
                        while (0);
                        B = _jtless(a, m, _jtpind(a, A, t));
                        if (0 == (B | 0)) {
                            g = 0;
                            c = 165;
                            break a
                        } else s = B, c = 62
                    }
                }
            while (0);
            if (62 == c) {
                c = 0;
                B = _jtirs2(a, s, G, 0, 2147483647, y - r, 2446);
                if (0 == (B | 0)) {
                    g = 0;
                    c = 165;
                    break
                }
                _jttraverse(a, B, 654);
                h = B + 16;
                HEAP32[h >> 2] += 1;
                _jttpop(a, e);
                _jttpush(a, B);
                l = B
            }
            B = r + 1;
            if ((B | 0) < (x | 0)) r = B, G = l;
            else {
                g = l;
                c = 165;
                break
            }
        }
        if (52 == c) return l = HEAP32[a + 4408 >> 2], G = HEAP32[l + (HEAP32[l >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), STACKTOP = b, 0;
        if (165 ==
            c) return STACKTOP = b, g
    } else {
        c = HEAP32[f + 24 >> 2];
        G = a + 205336;
        l = HEAP32[G >> 2];
        0 == (l | 0) ? (p = r = HEAP32[d + 24 >> 2], z = c, C = r) : (p = HEAP32[l + 4 >> 2], z = HEAP32[l >> 2], C = HEAP32[d + 24 >> 2]);
        l = C - p;
        HEAP32[G >> 2] = 0;
        if ((c | 0) != (z | 0)) return g = _jtsprank2(a, f, d, 0, z, p, 2062), STACKTOP = b, g;
        if (0 == (j & 29696 | 0)) return z = HEAP32[a + 4408 >> 2], G = HEAP32[z + (HEAP32[z >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), STACKTOP = b, 0;
        G = f;
        z = HEAP32[f >> 2];
        r = G + z;
        x = d;
        e = HEAP32[d >> 2];
        y = x + e;
        s = _jtga(a, j, 1, C + c + ((0 < (p | 0)) << 31 >> 31), d + 28);
        if (0 == (s | 0)) return STACKTOP =
            b, 0;
        j = s;
        t = HEAP32[s >> 2];
        m = j + t;
        _memcpy(s + 28 + (l << 2), f + 28, c << 2) | 0;
        (n = 0 != (p | 0)) && _memcpy(s + 28 + (l + c << 2), d + 28 + (l + 1 << 2), (p << 2) - 4) | 0;
        k = _jtirs2(a, G + (HEAP32[z + (G + 4) >> 2] + z), d, 0, 0, p, 2062);
        if (0 == (k | 0)) return STACKTOP = b, 0;
        D = _jtreshape(a, HEAP32[31086], k);
        if (0 == (D | 0)) return STACKTOP = b, 0;
        u = _jtdenseit(a, _jtva2(a, D, k, 61));
        do
            if (0 != (u | 0) && 0 == (_memchr(u + HEAP32[u >> 2], 0, HEAP32[u + 20 >> 2]) | 0)) {
                k = m;
                w = D - k;
                HEAP32[t + (j + 4) >> 2] = w;
                if (0 == (j + (w + t) | 0)) return g = 0, STACKTOP = b, g;
                do
                    if ((c | 0) > (HEAP32[G + (z + 20 + HEAP32[r >> 2]) >> 2] | 0)) {
                        w = c - 1;
                        B =
                            _jtga(a, 4, c, 1, 0);
                        do
                            if (0 == (B | 0)) A = 0;
                            else if (0 == (c | 0)) A = B;
                        else {
                            h = -1;
                            for (g = B + HEAP32[B >> 2];;)
                                if (i = h + 1, HEAP32[g >> 2] = i, (i | 0) == (w | 0)) {
                                    A = B;
                                    break
                                } else h = i, g += 4
                        }
                        while (0);
                        B = _jtreaxis(a, A, f);
                        if (0 == (B | 0)) return g = 0, STACKTOP = b, g;
                        u = B + HEAP32[B >> 2]
                    } else u = r;
                while (0);
                B = HEAP32[y >> 2] + e;
                w = B + (x + 20);
                A = HEAP32[w >> 2];
                g = _jtga(a, 1, C, 1, 0);
                if (0 == (g | 0)) return g = 0, STACKTOP = b, g;
                h = g;
                i = HEAP32[g >> 2];
                g = h + i;
                _memset(g, 0, C) | 0;
                f = x + (B + HEAP32[x + B >> 2]);
                B = HEAP32[w >> 2];
                do
                    if (0 < (B | 0))
                        for (w = 0;;)
                            if (HEAP8[h + (HEAP32[f + (w << 2) >> 2] + i)] = 1, z = w + 1, (z | 0) <
                                (B | 0)) w = z;
                            else break;
                else
                if (0 == (g | 0)) return g = 0, STACKTOP = b, g;
                while (0);
                if (n)
                    if (B = h + (i + l), 0 != (HEAP8[B] | 0)) g = A;
                    else {
                        HEAP8[B] = 1;
                        B = _jtreaxis(a, _jtifb(a, C, g), d);
                        if (0 == (B | 0)) return g = 0, STACKTOP = b, g;
                        d = B;
                        g = A + 1
                    } else g = A;
                A = _jtga(a, 4, (n << 31 >> 31) + c + g, 1, 0);
                if (0 == (A | 0)) return g = 0, STACKTOP = b, g;
                g = A + HEAP32[A >> 2];
                if (B = 0 < (l | 0)) {
                    f = g;
                    for (w = 0;;)
                        if (0 == (HEAP8[h + (i + w)] | 0) ? n = f : (HEAP32[f >> 2] = w, n = f + 4), z = w + 1, (z | 0) < (l | 0)) f = n, w = z;
                        else {
                            q = n;
                            break
                        }
                } else q = g;
                if (0 < (c | 0)) {
                    w = q;
                    for (f = 0;;)
                        if (HEAP32[w >> 2] = f + l, z = f + 1, (z | 0) < (c | 0)) w += 4, f = z;
                        else break;
                    n = q + (c << 2)
                } else n = q;
                f = p - 1;
                if (0 < (f | 0)) {
                    w = l + 1;
                    g = l + c;
                    z = n;
                    for (y = 0;;)
                        if (0 == (HEAP8[h + (i + (w + y))] | 0) ? q = z : (HEAP32[z >> 2] = g + y, q = z + 4), n = y + 1, (n | 0) < (f | 0)) z = q, y = n;
                        else break
                }
                y = A - k;
                HEAP32[m >> 2] = y;
                if (0 == (j + (y + t) | 0)) return g = 0, STACKTOP = b, g;
                y = _jtirs2(a, u + HEAP32[u + 12 >> 2], d, 0, 2147483647, p, 2062);
                if (0 == (y | 0)) return g = 0, STACKTOP = b, g;
                z = y;
                f = HEAP32[y >> 2];
                y = HEAP32[f + (z + 8) >> 2] + f;
                g = z + (y + HEAP32[z + y >> 2]);
                w = HEAP32[y + (z + 32) >> 2];
                n = HEAP32[y + (z + 28) >> 2];
                if (B)
                    for (p = y = 0;;)
                        if (q = (0 != (HEAP8[h + (i + p)] | 0) | 0) + y, x = p + 1, (x | 0) < (l | 0)) y =
                            q, p = x;
                        else {
                            v = q;
                            break
                        } else v = 0;
                p = HEAP32[u + 8 >> 2];
                y = u + (HEAP32[u + p >> 2] + p);
                i = HEAP32[p + (u + 32) >> 2];
                p = w - 1 + i;
                h = v + 1;
                B = _jtga(a, 4, Math_imul(p, n) | 0, 2, 0);
                if (0 == (B | 0)) return g = 0, STACKTOP = b, g;
                HEAP32[B + 28 >> 2] = n;
                HEAP32[B + 32 >> 2] = p;
                if (0 < (n | 0)) {
                    A = 0 == (v | 0);
                    q = i << 2;
                    x = (w | 0) == (h | 0);
                    u = i + v;
                    l = w - h << 2;
                    m = v << 2;
                    c = g;
                    g = B + HEAP32[B >> 2];
                    for (e = 0;;)
                        if (A || _memcpy(g, c, m) | 0, _memcpy(g + (v << 2), y + (Math_imul(HEAP32[c + (v << 2) >> 2], i) << 2), q) | 0, x || _memcpy(g + (u << 2), c + (h << 2), l) | 0, r = e + 1, (r | 0) < (n | 0)) c += w << 2, g += p << 2, e = r;
                        else break
                }
                e = B - k;
                HEAP32[t + (j + 8) >> 2] =
                    e;
                if (0 == (j + (e + t) | 0)) return g = 0, STACKTOP = b, g;
                e = z + (HEAP32[f + (z + 12) >> 2] + f) - k;
                HEAP32[t + (j + 12) >> 2] = e;
                g = 0 == (j + (e + t) | 0) ? 0 : s;
                STACKTOP = b;
                return g
            }
        while (0);
        s = HEAP32[a + 4408 >> 2];
        t = HEAP32[s + (HEAP32[s >> 2] + 116) >> 2];
        _jtjsigstr(a, 29, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]);
        STACKTOP = b;
        return 0
    }
}
function _jtfx(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = c;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    e = HEAP32[f + 12 >> 2];
    g = HEAP32[f + 20 >> 2];
    if (0 != (e & 2 | 0)) {
        if (2 <= (HEAP32[f + 24 >> 2] | 0)) return h = HEAP32[a + 4408 >> 2], j = HEAP32[h + (HEAP32[h >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), STACKTOP = c, 0;
        if (0 == (g | 0)) return j = HEAP32[a + 4408 >> 2], h = HEAP32[j + (HEAP32[j >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
        h = f;
        j = HEAP32[f >> 2];
        b = h + j;
        i = HEAP8[h + (g - 1 + j)];
        a: do
            if (0 <
                (g | 0)) {
                for (e = 0;;) {
                    l = HEAP8[h + (e + j)];
                    k = e + 1;
                    if (32 > l << 24 >> 24 | 127 == l << 24 >> 24) break;
                    if ((k | 0) < (g | 0)) e = k;
                    else break a
                }
                e = HEAP32[a + 4408 >> 2];
                k = HEAP32[e + (HEAP32[e >> 2] + 64) >> 2];
                _jtjsigstr(a, 16, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]);
                d = 0;
                STACKTOP = c;
                return d
            }
        while (0);
        k = HEAP8[b];
        if (2 == (HEAP8[113216 + (k << 24 >> 24)] | 0) && !(58 == i << 24 >> 24 | 46 == i << 24 >> 24)) return d = _jtswap(a, f), STACKTOP = c, d;
        i = _spellin(g, b);
        if (0 == i << 24 >> 24) return b = HEAP32[a + 4408 >> 2], e = HEAP32[b + (HEAP32[b >> 2] + 64) >> 2], _jtjsigstr(a, 16, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP =
            c, 0; - 24 == i << 24 >> 24 ? (e = HEAP8[h + (g - 2 + j)] | 0, 95 == k << 24 >> 24 ? 2 == (g | 0) ? j = HEAP32[40248] : (b = _jtga(a, 4, 1, 0, 0), 0 == (b | 0) ? j = 0 : (HEAP32[b + HEAP32[b >> 2] >> 2] = 48 - e, j = b)) : (b = _jtga(a, 4, 1, 0, 0), 0 == (b | 0) ? j = 0 : (HEAP32[b + HEAP32[b >> 2] >> 2] = e - 48, j = b)), 0 == (HEAP8[a + 204545] | 0) && (e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (b = e, l = HEAP32[e >> 2], HEAP32[b + l >> 2] = 1972, HEAP32[l + (b + 4) >> 2] = 1970, HEAP32[l + (b + 8) >> 2] = 0, HEAP32[l + (b + 12) >> 2] = 0, HEAP32[l + (b + 16) >> 2] = j, HEAP32[l + (b + 20) >> 2] = 0, HEAP32[l + (b + 24) >> 2] = 2147483647, HEAP32[l + (b + 28) >> 2] = 2147483647, HEAP32[l +
            (b + 32) >> 2] = 2147483647, HEAP32[l + (b + 36) >> 2] = 0, HEAP8[l + (b + 40)] = -24, m = e, d = 27))) : (e = HEAP32[123192 + ((i & 255) << 2) >> 2], 0 != (e | 0) && (m = e, d = 27));
        if (27 == d && 0 != (HEAP32[m + 12 >> 2] & 807403007 | 0)) return STACKTOP = c, m;
        m = HEAP32[a + 4408 >> 2];
        i = HEAP32[m + (HEAP32[m >> 2] + 12) >> 2];
        _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
        STACKTOP = c;
        return 0
    }
    if (0 == (e & 32 | 0)) return e = HEAP32[a + 4408 >> 2], i = HEAP32[e + (HEAP32[e >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), STACKTOP = c, 0;
    i = 0 != (HEAP32[f + 4 >> 2] & 14 | 0) ? f : 0;
    if (2 <= (HEAP32[f + 24 >>
            2] | 0)) return e = HEAP32[a + 4408 >> 2], m = HEAP32[e + (HEAP32[e >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[m + 20 >> 2], m + HEAP32[m >> 2]), STACKTOP = c, 0;
    if (2 <= g - 1 >>> 0) return m = HEAP32[a + 4408 >> 2], e = HEAP32[m + (HEAP32[m >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = c, 0;
    e = f;
    m = HEAP32[f >> 2];
    f = 0 != (i | 0);
    j = HEAP32[e + m >> 2];
    h = f ? j + i : j;
    j = HEAP32[h + 12 >> 2];
    if (0 == (j & 32 | 0)) {
        if (0 == (h | 0)) return STACKTOP = c, 0;
        if (2 <= (HEAP32[h + 24 >> 2] | 0)) return k = HEAP32[a + 4408 >> 2], j = HEAP32[k + (HEAP32[k >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[j + 20 >> 2],
            j + HEAP32[j >> 2]), STACKTOP = c, 0;
        0 == (j & 2 | 0) ? (j = a + 205336, k = HEAP32[j >> 2], HEAP32[j >> 2] = 0, h = _jtccvt(a, 2, h, b), HEAP32[j >> 2] = k, 0 == h << 24 >> 24 ? (h = HEAP32[a + 4408 >> 2], k = HEAP32[h + (HEAP32[h >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), l = 0) : l = HEAP32[b >> 2]) : l = h;
        if (0 == (l | 0)) return STACKTOP = c, 0;
        k = _spellin(HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
        if (0 != k << 24 >> 24) j = 0;
        else return k = HEAP32[a + 4408 >> 2], h = HEAP32[k + (HEAP32[k >> 2] + 64) >> 2], _jtjsigstr(a, 16, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0
    } else {
        h = _jtfx(a, h);
        if (0 == (h |
                0)) return STACKTOP = c, 0;
        j = h;
        k = 0
    }
    if (1 < (g | 0)) {
        h = HEAP32[m + (e + 4) >> 2];
        e = f ? h + i : h;
        h = HEAP32[e + 20 >> 2];
        l = e + HEAP32[e >> 2];
        i = (b = 0 == (HEAP32[e + 12 >> 2] & 32 | 0)) ? 0 : 0 != (HEAP32[e + 4 >> 2] & 14 | 0) | 0;
        if (48 == k << 24 >> 24) return STACKTOP = c, e;
        if (2 <= (HEAP32[e + 24 >> 2] | 0)) return j = HEAP32[a + 4408 >> 2], h = HEAP32[j + (HEAP32[j >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
        if (b) return l = HEAP32[a + 4408 >> 2], h = HEAP32[l + (HEAP32[l >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
        g = e & -i;
        e = h;
        m = l
    } else m =
        e = g = 0;
    i = k << 24 >> 24;
    if (50 == (i | 0) | 52 == (i | 0)) {
        if (2 != (e | 0)) return e = HEAP32[a + 4408 >> 2], i = HEAP32[e + (HEAP32[e >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), STACKTOP = c, 0;
        i = HEAP32[m >> 2];
        0 == (g | 0) ? (e = _jtfx(a, i), d = HEAP32[m + 4 >> 2]) : (e = _jtfx(a, i + g), d = HEAP32[m + 4 >> 2] + g);
        j = e;
        d = _jtfx(a, d);
        j = _jthook(a, j, d);
        STACKTOP = c;
        return j
    }
    if (51 == (i | 0)) {
        if (3 != (e | 0)) return i = HEAP32[a + 4408 >> 2], j = HEAP32[i + (HEAP32[i >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), STACKTOP = c, 0;
        j = 0 != (g | 0);
        i = HEAP32[m >> 2];
        i = _jtfx(a,
            j ? i + g : i);
        if (0 == (i | 0)) return STACKTOP = c, 0;
        if (0 == (HEAP32[i + 12 >> 2] & 805830143 | 0)) return h = HEAP32[a + 4408 >> 2], d = HEAP32[h + (HEAP32[h >> 2] + 76) >> 2], _jtjsigstr(a, 19, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), STACKTOP = c, 0;
        d = HEAP32[m + 4 >> 2];
        d = _jtfx(a, j ? d + g : d);
        if (0 == (d | 0)) return STACKTOP = c, 0;
        if (0 == (HEAP32[d + 12 >> 2] & 262144 | 0)) return d = HEAP32[a + 4408 >> 2], h = HEAP32[d + (HEAP32[d >> 2] + 76) >> 2], _jtjsigstr(a, 19, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
        h = HEAP32[m + 8 >> 2];
        j = j ? h + g : h;
        h = _jtfx(a, j);
        if (0 == (h | 0)) return STACKTOP = c, 0;
        0 == (HEAP32[h +
            12 >> 2] & 262144 | 0) ? (j = HEAP32[a + 4408 >> 2], j = HEAP32[j + (HEAP32[j >> 2] + 76) >> 2], _jtjsigstr(a, 19, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), d = 0) : d = _jtfolk(a, i, d, h)
    } else {
        b = 0 == k << 24 >> 24 ? j : HEAP32[123192 + ((k & 255) << 2) >> 2];
        if (0 != (b | 0) && (k = HEAP32[b + 12 >> 2], 0 != (k & 807403007 | 0))) {
            if (0 == (e | 0)) return STACKTOP = c, b;
            (j = 1 == (e | 0)) ? 0 == (k & 524288 | 0) && (d = 94): 2 != (e | 0) ? d = 94 : 0 == (k & 1048576 | 0) && (d = 94);
            if (94 == d) return k = HEAP32[a + 4408 >> 2], h = HEAP32[k + (HEAP32[k >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), STACKTOP = c, 0;
            h = 0 == (g | 0);
            k = HEAP32[m >>
                2];
            d = h ? k : k + g;
            k = _jtfx(a, d);
            if (0 == (k | 0)) return STACKTOP = c, 0;
            if (0 == (HEAP32[k + 12 >> 2] & 805830143 | 0)) return d = HEAP32[a + 4408 >> 2], i = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), STACKTOP = c, 0;
            if (1 < (e | 0)) {
                i = HEAP32[m + 4 >> 2];
                d = h ? i : i + g;
                i = _jtfx(a, d);
                if (0 == (i | 0)) return STACKTOP = c, 0;
                if (0 == (HEAP32[i + 12 >> 2] & 805830143 | 0)) return i = HEAP32[a + 4408 >> 2], d = HEAP32[i + (HEAP32[i >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), STACKTOP = c, 0
            } else i = 0;
            h = b;
            d = HEAP32[b >> 2];
            d = j ? getFUNCTION_TABLE(HEAP32[h +
                                             d >> 2])(a, k, b) : getFUNCTION_TABLE(HEAP32[d + (h + 4) >> 2])(a, k, i, b);
            STACKTOP = c;
            return d
        }
        b = HEAP32[a + 4408 >> 2];
        i = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2];
        _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
        d = 0
    }
    STACKTOP = c;
    return d
}
function _jtga(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m;
    e = 0;
    do {
        if (0 == (f & 256 | 0)) {
            g = c & 1 ^ 1;
            h = 0 != (f & 33685507 | 0) | 0;
            j = f >>> 21 & 16;
            e = 128 == (f | 0) ? 8 : 64 == (f | 0) ? 4 : 536870912 == (f | 0) ? 24 : 262144 == (f | 0) | 524288 == (f | 0) | 1048576 == (f | 0) ? 44 : 4 == (f | 0) | 67108864 == (f | 0) | 134217728 == (f | 0) | 4194304 == (f | 0) | 8388608 == (f | 0) ? 4 : 1024 == (f | 0) | 4096 == (f | 0) | 8192 == (f | 0) | 16384 == (f | 0) | 2048 == (f | 0) | 32768 == (f | 0) ? 16 : 16777216 == (f | 0) ? 12 : 131072 == (f | 0) ? 2 : 268435456 == (f | 0) ? 12 : 65536 == (f | 0) ? 4 : 2 == (f | 0) | 2097152 == (f | 0) | 33554432 == (f | 0) ? 1 : 1 == (f | 0) | 8 == (f | 0) | 16 == (f | 0) ? f : 32 ==
                (f | 0) ? 4 : -1;
            i = g + (c + (h + 7)) + ((j | 3) + (Math_imul(e, d) | 0) >>> 2);
            j = i << 2;
            if ((j | 0) > (d | 0) & -1 < (d | 0) && (j | 0) > (i | 0) & 0 < (i | 0)) {
                h = j;
                j = i;
                break
            }
            i = HEAP32[a + 4408 >> 2];
            j = HEAP32[i + (HEAP32[i >> 2] + 40) >> 2];
            _jtjsigstr(a, 10, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2])
        } else {
            j = 2 > (c | 0);
            if (0 == (b | 0) & (j ^ 1)) return i = HEAP32[a + 4408 >> 2], h = HEAP32[i + (HEAP32[i >> 2] + 80) >> 2], _jtjsigstr(a, 20, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), _jtwri(a, 4, 161016, 18, 119952), a = 0;
            do
                if (j) i = (d + 31 | 0) / 32 & -1;
                else {
                    h = c - 1;
                    do
                        if (0 < (h | 0)) {
                            i = 1;
                            for (g = 0;;)
                                if (l = i * (HEAP32[b + (g << 2) >> 2] | 0), g += 1, (g |
                                        0) < (h | 0)) i = l;
                                else break;
                            2147483647 >= l ? (k = l, e = 10) : (g = HEAP32[a + 4408 >> 2], i = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), m = 0)
                        } else k = 1, e = 10;
                    while (0);
                    10 == e && (m = k & -1 | 0);
                    i = m * ((HEAP32[b + (h << 2) >> 2] + 31 | 0) / 32 & -1 | 0);
                    2147483647 < i ? (g = HEAP32[a + 4408 >> 2], g = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), h = 0) : h = i & -1;
                    if (0 == (HEAP8[a + 204545] | 0)) i = h;
                    else return a = 0
                }
            while (0);
            j = c + 7 + (c & 1 ^ 1) + i;
            i = j << 2;
            if (-1 < (d | 0) && (i | 0) > (j | 0) & 0 < (j | 0)) {
                h = i;
                break
            }
            j = HEAP32[a + 4408 >>
                2];
            i = HEAP32[j + (HEAP32[j >> 2] + 40) >> 2];
            _jtjsigstr(a, 10, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2])
        }
        return a = 0
    } while (0);
    i = _jtma(a, h);
    if (0 == (i | 0)) return 0;
    0 == (f & 196895 | 0) && _memset(i, 0, h) | 0;
    h = i;
    0 != (f & 33685507 | 0) && (HEAP32[h + (j - 2 << 2) >> 2] = 0, HEAP32[h + (j - 1 << 2) >> 2] = 0);
    HEAP32[i + 16 >> 2] = 1;
    HEAP32[i + 20 >> 2] = d;
    HEAP32[i + 24 >> 2] = c;
    HEAP32[i + 4 >> 2] = 0;
    j = c + 7 + (c & 1 ^ 1) << 2;
    HEAP32[h >> 2] = j;
    HEAP32[i + 8 >> 2] = HEAP32[124360 + (HEAP16[i - 32 + 28 >> 1] << 2) >> 2] - 8 - j;
    j = i + 12;
    HEAP32[j >> 2] = 0;
    _jttpush(a, i);
    HEAP32[j >> 2] = f;
    if (1 == (c | 0)) {
        if (0 == (f & 64512 | 0)) return HEAP32[i +
            28 >> 2] = d, i
    } else if (0 == (c | 0)) return i;
    if (0 == (b | 0)) return i;
    _memcpy(i + 28, b, c << 2) | 0;
    return i
}
function _jthead(a, f) {
    var d, c, b;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 24 >> 2];
    c = HEAP32[a + 205336 >> 2];
    b = 0 == (c | 0) ? d : HEAP32[c + 4 >> 2];
    return 0 != (b | 0) && 0 == (HEAP32[f + 28 + (d - b << 2) >> 2] | 0) ? (0 == (HEAP32[f + 12 >> 2] & 64512 | 0) ? d = _jtrsh0(a, f) : (c = HEAP32[31069], d = _jtirs2(a, c, _jttake(a, HEAP32[31070], f), 0, 0, b, 2062)), d) : d = _jtfrom(a, HEAP32[31069], f)
}
function _jthook(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc;
    if (0 == (f | 0) | 0 == (d | 0)) return c = 0;
    b = HEAP32[f + 12 >> 2];
    0 == (b & 805567999 | 0) ? (e = b & 262144, (g = 0 == (e | 0)) ? (j = b >>> 18, i = j & 4, h = l = i + 4) : h = 12) : h = 0;
    k = HEAP32[d + 12 >> 2];
    0 == (k & 805567999 | 0) ? (m = k & 262144, (n = 0 == (m | 0)) ? (q = k >>> 20, r = q & 1, p = s = r + 1) : p = 3) : p = 0;
    t = p + h;
    a: do switch (t | 0) {
            case 8:
            case 11:
                u = b & 1835008;
                (w = 0 == (u | 0)) ? v = 0: (y = x = f, z = HEAP32[y >> 2], A = z + 40, D = x + A, B = HEAP8[D], v = G = B << 24 >> 24);
                C =
                    k & 32;
                if (F = 0 == (C | 0)) {
                    E = 1568;
                    J = 0;
                    break a
                }
                if (-111 == (v | 0)) {
                    if (L = d + 20, I = HEAP32[L >> 2], H = 1 < (I | 0), !H) {
                        E = 1568;
                        J = 0;
                        break a
                    }
                } else if (96 != (v | 0)) {
                    E = 1568;
                    J = 0;
                    break a
                }
                E = 1568;
                J = 512;
                break;
            case 2:
            case 14:
                K = k & 1835008;
                (N = 0 == (K | 0)) ? S = 0: (V = T = d, Q = HEAP32[V >> 2], P = Q + 40, M = T + P, R = HEAP8[M], S = O = R << 24 >> 24);
                aa = b & 32;
                if (Z = 0 == (aa | 0)) {
                    E = 2214;
                    J = 0;
                    break a
                }
                if (!(-76 == (S | 0) | 96 == (S | 0) | -77 == (S | 0))) {
                    E = 2214;
                    J = 0;
                    break a
                }
                E = 2214;
                J = 256;
                break;
            case 15:
                ba = $ = f;
                ka = HEAP32[ba >> 2];
                ea = ka + 40;
                ha = $ + ea;
                da = HEAP8[ha];
                U = ga = d;
                ca = HEAP32[U >> 2];
                X = ca + 40;
                Y = ga + X;
                ja = HEAP8[Y];
                fa = ca + 8;
                ra = ia = ga + fa;
                sa = HEAP32[ra >> 2];
                (ta = 0 == (sa | 0)) ? wa = 0: (za = sa + 12, Ba = HEAP32[za >> 2], ua = Ba & 1835008, (ya = 0 == (ua | 0)) ? wa = 0 : (oa = xa = sa, pa = HEAP32[oa >> 2], la = pa + 40, qa = xa + la, Da = HEAP8[qa], wa = Aa = Da << 24 >> 24));
                Ea = 44 == ja << 24 >> 24;
                Sa = da << 24 >> 24;
                b: do
                    if (Ea) switch (Sa | 0) {
                        case -82:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 772;
                            break b;
                        case 123:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 796;
                            break b;
                        case -84:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 208;
                            break b;
                        case 36:
                            Oa = 2186;
                            Ha = 4096;
                            Ga = 160;
                            break b;
                        case -60:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 2678;
                            break b;
                        default:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 2188;
                            break b
                    } else switch (Sa | 0) {
                        case -95:
                            if (!(64 ==
                                    ja << 24 >> 24 | -75 == ja << 24 >> 24 | 38 == ja << 24 >> 24 | -73 == ja << 24 >> 24)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Ma = -55 == (wa | 0);
                            if (!Ma) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Ia = ca + 12;
                            W = db = ga + Ia;
                            Xa = HEAP32[W >> 2];
                            if (Ta = 0 == (Xa | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            fb = Xa + 12;
                            mb = HEAP32[fb >> 2];
                            ma = mb & 1835008;
                            if (ab = 0 == (ma | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            $a = Na = Xa;
                            Ua = HEAP32[$a >> 2];
                            Pa = Ua + 40;
                            bb = Na + Pa;
                            La = HEAP8[bb];
                            Ja = 47 == La << 24 >> 24;
                            if (!Ja) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Qa = Ua + 8;
                            lb = Ya = Na + Qa;
                            Ca = HEAP32[lb >> 2];
                            if (gb = 0 == (Ca | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Fa =
                                Ca + 12;
                            Za = HEAP32[Fa >> 2];
                            qb = Za & 1835008;
                            if (ib = 0 == (qb | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            eb = ub = Ca;
                            rb = HEAP32[eb >> 2];
                            wb = rb + 40;
                            Ka = ub + wb;
                            Va = HEAP8[Ka];
                            nb = 42 == Va << 24 >> 24;
                            if (!nb) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Oa = 564;
                            Ha = 0;
                            Ga = 2188;
                            break b;
                        case 123:
                            if (ob = -91 == ja << 24 >> 24) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 818;
                                break b
                            }
                            cb = 126 == ja << 24 >> 24;
                            Wa = -91 == (wa | 0);
                            yb = cb & Wa;
                            if (!yb) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Oa = 2186;
                            Ha = 0;
                            Ga = 752;
                            break b;
                        case -92:
                            if (!(64 == ja << 24 >> 24 | -75 == ja << 24 >> 24 | 38 == ja << 24 >> 24 | -73 == ja << 24 >> 24)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Cb = -55 == (wa | 0);
                            if (!Cb) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Pb = ca + 12;
                            Zb = zb = ga + Pb;
                            ac = HEAP32[Zb >> 2];
                            if (Hb = 0 == (ac | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Ib = ac + 12;
                            Qb = HEAP32[Ib >> 2];
                            Rb = Qb & 1835008;
                            if (Ob = 0 == (Rb | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            xb = Bb = ac;
                            dc = HEAP32[xb >> 2];
                            tb = dc + 40;
                            oc = Bb + tb;
                            Mb = HEAP8[oc];
                            Tb = 35 == Mb << 24 >> 24;
                            if (!Tb) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Ra = ka + 8;
                            sb = Nb = $ + Ra;
                            Ab = HEAP32[sb >> 2];
                            if (Eb = 0 == (Ab | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Lb = Ab + 12;
                            vb = HEAP32[Lb >> 2];
                            wc = vb & 1835008;
                            if (Ec = 0 == (wc | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Db =
                                yc = Ab;
                            bc = HEAP32[Db >> 2];
                            pb = bc + 40;
                            Fb = yc + pb;
                            jb = HEAP8[Fb];
                            gc = 60 == jb << 24 >> 24;
                            if (!gc) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Oa = 3210;
                            Ha = 0;
                            Ga = 2188;
                            break b;
                        case -55:
                        case -54:
                            ic = 47 == ja << 24 >> 24;
                            if (!ic) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            if (!(-124 == (wa | 0) | -126 == (wa | 0))) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Oa = 968;
                            Ha = 0;
                            Ga = 2188;
                            break b;
                        case 35:
                            if (!(64 == ja << 24 >> 24 | -75 == ja << 24 >> 24 | 38 == ja << 24 >> 24 | -73 == ja << 24 >> 24)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            vc = -55 == (wa | 0);
                            if (!vc) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            hc = ca + 12;
                            Ac = uc = ga + hc;
                            xc = HEAP32[Ac >> 2];
                            if (cd =
                                0 == (xc | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            jc = xc + 12;
                            Tc = HEAP32[jc >> 2];
                            Fc = Tc & 1835008;
                            if (Bc = 0 == (Fc | 0)) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Xb = ec = xc;
                            sc = HEAP32[Xb >> 2];
                            nc = sc + 40;
                            tc = ec + nc;
                            Ub = HEAP8[tc];
                            $c = 35 == Ub << 24 >> 24;
                            if (!$c) {
                                Oa = 2186;
                                Ha = 0;
                                Ga = 2188;
                                break b
                            }
                            Oa = 3282;
                            Ha = 0;
                            Ga = 2188;
                            break b;
                        default:
                            Oa = 2186;
                            Ha = 0;
                            Ga = 2188;
                            break b
                    }
                    while (0);
                ad = a + 204545;
                qc = HEAP8[ad];
                Uc = 0 == qc << 24 >> 24;
                if (!Uc) return c = 0;
                rc = _jtga(a, 262144, 1, 0, 0);
                if (kb = 0 == (rc | 0)) return c = 0;
                $b = Jb = rc;
                na = HEAP32[$b >> 2];
                kc = Vb = Jb + na;
                HEAP32[kc >> 2] = Oa;
                va = na + 4;
                Yb = Wc = Jb + va;
                HEAP32[Yb >>
                    2] = Ga;
                fc = na + 8;
                Gb = Kb = Jb + fc;
                HEAP32[Gb >> 2] = f;
                gd = na + 12;
                Gc = mc = Jb + gd;
                HEAP32[Gc >> 2] = d;
                dd = na + 16;
                Fd = kd = Jb + dd;
                HEAP32[Fd >> 2] = 0;
                Vc = na + 20;
                bd = Hd = Jb + Vc;
                HEAP32[bd >> 2] = Ha;
                cc = na + 24;
                fd = Ic = Jb + cc;
                HEAP32[fd >> 2] = 2147483647;
                xd = na + 28;
                Wd = Xc = Jb + xd;
                HEAP32[Wd >> 2] = 2147483647;
                Wb = na + 32;
                pc = Sb = Jb + Wb;
                HEAP32[pc >> 2] = 2147483647;
                zc = na + 36;
                Yc = hd = Jb + zc;
                HEAP32[Yc >> 2] = 0;
                Ad = na + 40;
                Gd = Jb + Ad;
                HEAP8[Gd] = 50;
                return c = rc;
            case 5:
                E = 1940;
                J = 0;
                break;
            default:
                return hb = a + 4408, Jc = ed = ld = HEAP32[hb >> 2], Oc = HEAP32[Jc >> 2], Pc = Oc + 76, Ed = ke = ed + Pc, pd = HEAP32[Ed >> 2], id =
                    pd + 20, Cc = HEAP32[id >> 2], Zc = Qc = pd, vd = HEAP32[Zc >> 2], $d = Qc + vd, _jtjsigstr(a, 19, Cc, $d), c = 0
        }
        while (0);
        if (0 != HEAP8[a + 204545] << 24 >> 24) return c = 0;
    je = _jtga(a, 524288, 1, 0, 0);
    if (0 == (je | 0)) return c = 0;
    Kc = HEAP32[je >> 2];
    HEAP32[je + Kc >> 2] = E;
    HEAP32[je + (Kc + 4) >> 2] = 1980;
    HEAP32[je + (Kc + 8) >> 2] = f;
    HEAP32[je + (Kc + 12) >> 2] = d;
    HEAP32[je + (Kc + 16) >> 2] = 0;
    HEAP32[je + (Kc + 20) >> 2] = J;
    HEAP32[je + (Kc + 24) >> 2] = 0;
    HEAP32[je + (Kc + 28) >> 2] = 0;
    HEAP32[je + (Kc + 32) >> 2] = 0;
    HEAP32[je + (Kc + 36) >> 2] = 0;
    HEAP8[je + (Kc + 40)] = 52;
    return c = je
}

function _jtthorn2(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb;
    b = c = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    g = e + 8;
    h = a + 205692;
    j = a + 205752;
    i = HEAP32[j >> 2] + HEAP32[h >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return l = 0, STACKTOP = e, l;
    k = f + 24;
    m = HEAP32[k >> 2];
    if (1 < (m |
            0)) return l = _jtrank2ex(a, f, d, 0, 1, 2147483647, 1254), STACKTOP = e, l;
    n = HEAP32[d + 24 >> 2];
    p = HEAP32[f + 20 >> 2];
    q = HEAP32[d + 12 >> 2];
    if (0 != (q & 32 | 0)) {
        r = a + 205316;
        s = HEAP32[r >> 2];
        t = a + 205320;
        u = HEAP32[t >> 2];
        if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
            w = a + 205336;
            v = HEAP32[w >> 2];
            HEAP32[w >> 2] = 0;
            x = _jtccvt(a, 4, f, g);
            HEAP32[w >> 2] = v;
            if (0 == x << 24 >> 24) return x = HEAP32[a + 4408 >> 2], v = HEAP32[x + (HEAP32[x >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[v + 20 >> 2], v + HEAP32[v >> 2]), l = 0, STACKTOP = e, l;
            v = HEAP32[g >> 2];
            if (0 == (v | 0)) return l = 0, STACKTOP = e, l;
            y = v;
            z = HEAP32[v + 20 >> 2];
            A = HEAP32[v + 24 >> 2]
        } else y = f, z = p, A = m;
        g = y;
        v = HEAP32[y >> 2];
        if (2 <= (A | 0)) return A = HEAP32[a + 4408 >> 2], y = HEAP32[A + (HEAP32[A >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[y + 20 >> 2], y + HEAP32[y >> 2]), l = 0, STACKTOP = e, l;
        if (2 <= z - 1 >>> 0) return y = HEAP32[a + 4408 >> 2], A = HEAP32[y + (HEAP32[y >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), l = 0, STACKTOP = e, l;
        A = HEAP32[g + v >> 2];
        D = 2 > (z | 0) ? 0 : HEAP32[v + (g + 4) >> 2];
        3 > A >>> 0 & 3 > D >>> 0 ? (HEAP32[r >> 2] = A, HEAP32[t >> 2] = D, D = _jtthorn1(a, d), HEAP32[r >> 2] = s, HEAP32[t >> 2] = u, l = D) : (D = HEAP32[a + 4408 >> 2], u = HEAP32[D +
            (HEAP32[D >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), l = 0);
        STACKTOP = e;
        return l
    }
    do
        if (0 != (q & 805336541 | 0) & 0 == (q & 64512 | 0) && (u = f + 12, 0 == (HEAP32[u >> 2] & 64512 | 0))) {
            D = d + 28;
            t = 0 != (n | 0);
            a: do
                if (t)
                    if (s = n - 1, r = HEAP32[d + 28 + (s << 2) >> 2], 0 != (r | 0)) B = r, c = 24;
                    else {
                        do
                            if (0 < (s | 0)) {
                                r = 1;
                                for (A = 0;;)
                                    if (G = r * (HEAP32[d + 28 + (A << 2) >> 2] | 0), g = A + 1, (g | 0) < (s | 0)) r = G, A = g;
                                    else break;
                                if (2147483647 >= G) C = G;
                                else {
                                    A = HEAP32[a + 4408 >> 2];
                                    r = HEAP32[A + (HEAP32[A >> 2] + 40) >> 2];
                                    _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]);
                                    E = F = 0;
                                    J = HEAP32[k >>
                                        2];
                                    break a
                                }
                            } else C = 1;
                        while (0);
                        F = C & -1;
                        E = 0;
                        J = m
                    } else B = 1, c = 24;
            while (0);
            24 == c && (F = (HEAP32[d + 20 >> 2] | 0) / (B | 0) & -1, E = B, J = m);
            if (!(0 == (J | 0) | (E | 0) == (p | 0))) return s = HEAP32[a + 4408 >> 2], r = HEAP32[s + (HEAP32[s >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), l = 0, STACKTOP = e, l;
            L = 65536 == (q | 0) ? 4 : 268435456 == (q | 0) ? 12 : 536870912 == (q | 0) ? 24 : 16 == (q | 0) | 1024 == (q | 0) | 4096 == (q | 0) | 8192 == (q | 0) | 16384 == (q | 0) | 2048 == (q | 0) | 32768 == (q | 0) ? 16 : 4 == (q | 0) | 67108864 == (q | 0) | 134217728 == (q | 0) | 4194304 == (q | 0) | 8388608 == (q | 0) ? 4 : 32 == (q | 0) ? 4 : 64 ==
                (q | 0) ? 4 : 128 == (q | 0) ? 8 : 262144 == (q | 0) | 524288 == (q | 0) | 1048576 == (q | 0) ? 44 : 16777216 == (q | 0) ? 12 : 8 == (q | 0) ? q : 1 == (q | 0) ? q : 2 == (q | 0) | 2097152 == (q | 0) | 33554432 == (q | 0) ? 1 : 131072 == (q | 0) ? 2 : -1;
            r = Math_imul(L, E) | 0;
            s = d + (HEAP32[d >> 2] - L);
            A = HEAP32[u >> 2] & 16;
            g = a + 205700;
            HEAP32[g >> 2] = 500;
            if (v = 0 == (A | 0)) {
                A = a + 205336;
                z = HEAP32[A >> 2];
                HEAP32[A >> 2] = 0;
                y = _jtccvt(a, 4, f, e);
                HEAP32[A >> 2] = z;
                if (0 == y << 24 >> 24) return y = HEAP32[a + 4408 >> 2], z = HEAP32[y + (HEAP32[y >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[z + 20 >> 2], z + HEAP32[z >> 2]), l = 0, STACKTOP = e, l;
                z = HEAP32[e >> 2];
                if (0 ==
                    (z | 0)) return l = 0, STACKTOP = e, l;
                I = z
            } else I = f;
            u = HEAP32[I + 20 >> 2];
            A = y = z = I + HEAP32[I >> 2];
            z = _jtga(a, 1, u, 1, 0);
            if (0 == (z | 0)) return l = 0, STACKTOP = e, l;
            w = x = z;
            z = HEAP32[w >> 2];
            H = _jtga(a, 4, u, 1, 0);
            if (0 == (H | 0)) return l = 0, STACKTOP = e, l;
            N = K = H;
            H = K + HEAP32[N >> 2];
            S = _jtga(a, 4, u, 1, 0);
            if (0 == (S | 0)) return l = 0, STACKTOP = e, l;
            V = T = S;
            S = T + HEAP32[V >> 2];
            Q = _jtga(a, 2, 15 * u & -1, 2, 0);
            if (0 == (Q | 0)) return l = 0, STACKTOP = e, l;
            M = P = Q;
            R = P + HEAP32[M >> 2];
            HEAP32[Q + 28 >> 2] = u;
            O = Q + 32;
            HEAP32[O >> 2] = 15;
            a: do {
                if (0 < (u | 0)) {
                    b: do
                        if (v) {
                            Q = R;
                            aa = 1;
                            for ($ = Z = 0;;) {
                                ba = HEAP32[A +
                                    (Z << 2) >> 2];
                                ea = (ka = 0 > (ba | 0)) ? -ba : ba;
                                if (-1 >= (ea | 0)) break b;
                                ka ? _sprintf(Q, 121936, (b = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[b >> 2] = ea - 1, HEAP32[b + 8 >> 2] = 0, b)) : _sprintf(Q, 122240, (b = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[b >> 2] = ea, HEAP32[b + 8 >> 2] = 0, b));
                                STACKTOP = b;
                                HEAP8[x + (Z + z)] = ba >>> 31;
                                HEAP32[H + (Z << 2) >> 2] = ea;
                                HEAP32[S + (Z << 2) >> 2] = 0;
                                ka = ea + $;
                                ha = 0 == (aa | 0) ? 0 : 0 != (ba | 0) | 0;
                                ba = HEAP32[g >> 2];
                                da = (ba | 0) < (ea | 0) ? HEAP32[g >> 2] = ea : ba;
                                ga = 500 > (da | 0) ? HEAP32[g >> 2] = 500 : da;
                                ba = Z + 1;
                                if ((ba | 0) < (u | 0)) Q += 15, aa = ha, Z = ba, $ = ka;
                                else {
                                    U = ha;
                                    ca = ka;
                                    X = ga;
                                    break a
                                }
                            }
                        } else {
                            $ = a + 1152;
                            Z = R;
                            aa = 1;
                            for (ka = Q = 0;;) {
                                ba = HEAPF64[y + (Q << 4) >> 3]; - 4E35 > ba | 4E35 < ba ? Y = ba : (ea = Math_floor(ba + 0.5), ja = ea > ba, ea == ba | ja ^ 1 ? fa = 0 : (ia = 0 < ba, ia ^ 0 < ea ? fa = 1 : (ia ? ea < ba ? (ra = ba, sa = ba - ea) : (ra = ea, sa = ea - ba) : ja ? (ra = -0 - ba, sa = ea - ba) : (ra = -0 - ea, sa = ba - ea), fa = sa > ra * HEAPF64[$ >> 3] ? 1 : ra == HEAPF64[14142] & 1)), Y = ea - fa);
                                ja = Y & -1;
                                ia = ja | 0;
                                if (ba != ia) {
                                    ta = 0 < ba;
                                    if (ta ^ 0 < (ja | 0)) {
                                        c = 93;
                                        break
                                    }
                                    ta ? ba > ia ? (wa = ba, za = ba - ia) : (wa = ia, za = ia - ba) : ba < ia ? (wa = -0 - ba, za = ia - ba) : (wa = -0 - ia, za = ba - ia);
                                    if (za > wa * HEAPF64[$ >> 3] | wa == HEAPF64[14142]) {
                                        c =
                                            93;
                                        break
                                    }
                                }
                                ia = HEAPF64[y + (Q << 4) + 8 >> 3]; - 4E35 > ia | 4E35 < ia ? Ba = ia : (ta = Math_floor(ia + 0.5), ea = ta > ia, ta == ia | ea ^ 1 ? ua = 0 : (ya = 0 < ia, ya ^ 0 < ta ? ua = 1 : (ya ? ta < ia ? (xa = ia, oa = ia - ta) : (xa = ta, oa = ta - ia) : ea ? (xa = -0 - ia, oa = ta - ia) : (xa = -0 - ta, oa = ia - ta), ua = oa > xa * HEAPF64[$ >> 3] ? 1 : xa == HEAPF64[14142] & 1)), Ba = ta - ua);
                                ea = Ba & -1;
                                ya = ea | 0;
                                if (ia != ya) {
                                    pa = 0 < ia;
                                    if (pa ^ 0 < (ea | 0)) {
                                        c = 117;
                                        break
                                    }
                                    pa ? ia > ya ? (la = ia, qa = ia - ya) : (la = ya, qa = ya - ia) : ia < ya ? (la = -0 - ia, qa = ya - ia) : (la = -0 - ya, qa = ia - ya);
                                    if (qa > la * HEAPF64[$ >> 3] | la == HEAPF64[14142]) {
                                        c = 117;
                                        break
                                    }
                                }
                                ya = 0 > ia ? -1 : ba;
                                pa =
                                    0 > (ja | 0) ? -ja : ja;
                                ta = 0 > (ea | 0) ? -ea : ea;
                                if (-1 >= (ta | pa | 0)) break b;
                                0 > ya ? (Da = 0 != (ja | 0), _sprintf(Z, Da ? 121936 : 121704, (b = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[b >> 2] = Da ? pa - 1 : 0, HEAP32[b + 8 >> 2] = ta, b))) : _sprintf(Z, 122240, (b = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[b >> 2] = pa, HEAP32[b + 8 >> 2] = ta, b));
                                STACKTOP = b;
                                HEAP8[x + (Q + z)] = 0 > ya | 0;
                                HEAP32[H + (Q << 2) >> 2] = pa;
                                HEAP32[S + (Q << 2) >> 2] = ta;
                                ya = pa + ka;
                                Aa = 0 == (aa | 0) ? 0 : 0 != (ja | 0) | 0;
                                Da = HEAP32[g >> 2];
                                Ea = (Da | 0) < (pa | 0) ? HEAP32[g >> 2] = pa : Da;
                                Da = ta + 500;
                                Sa = (Ea | 0) < (Da | 0) ? HEAP32[g >> 2] = Da : Ea;
                                Da = Q + 1;
                                if ((Da |
                                        0) < (u | 0)) Z += 15, aa = Aa, Q = Da, ka = ya;
                                else {
                                    U = Aa;
                                    ca = ya;
                                    X = Sa;
                                    break a
                                }
                            }
                            if (93 == c) return ka = HEAP32[a + 4408 >> 2], Q = HEAP32[ka + (HEAP32[ka >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[Q + 20 >> 2], Q + HEAP32[Q >> 2]), l = 0, STACKTOP = e, l;
                            if (117 == c) return Q = HEAP32[a + 4408 >> 2], ka = HEAP32[Q + (HEAP32[Q >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[ka + 20 >> 2], ka + HEAP32[ka >> 2]), l = 0, STACKTOP = e, l
                        }while (0);ka = HEAP32[a + 4408 >> 2];Q = HEAP32[ka + (HEAP32[ka >> 2] + 40) >> 2];_jtjsigstr(a, 10, HEAP32[Q + 20 >> 2], Q + HEAP32[Q >> 2]);l = 0;STACKTOP = e;
                    return l
                }
                U = 1;
                ca = 0;
                X = HEAP32[g >> 2]
            } while (0);
            g = _jtga(a, 2, X, 1, 0);
            if (0 == (g | 0)) return l = 0, STACKTOP = e, l;
            u = a + 205696;
            HEAP32[u >> 2] = g + HEAP32[g >> 2];
            g = 0 != (U | 0) ? ca : 0;
            S = HEAP32[w >> 2];
            H = K + HEAP32[N >> 2];
            z = T + HEAP32[V >> 2];
            Oa = 1 < (p | 0) ? HEAP32[O >> 2] : 0;
            y = P + (HEAP32[M >> 2] - Oa);
            do
                if (0 == (g | 0))
                    if (0 == (HEAP32[d + 20 >> 2] | 0)) c = 135;
                    else {
                        R = _jtga(a, 32, E, 1, 0);
                        if (0 == (R | 0)) return l = 0, STACKTOP = e, l;
                        A = R + HEAP32[R >> 2];
                        a: do
                            if (0 < (E | 0)) {
                                v = 0 < (F | 0);
                                Q = 0 == (q & 1 | 0) ? 0 != (q & 4 | 0) ? 12 : 17 : 3;
                                aa = ka = 0;
                                Z = s;
                                $ = y;
                                Da = ya = 0;
                                b: for (;;) {
                                    (Da | 0) < (p | 0) ? (Ha = HEAP8[x + (Da + S)], Ga = HEAP32[z + (Da << 2) >> 2], Ma = HEAP32[H + (Da << 2) >>
                                        2]) : (Ha = ya, Ga = aa, Ma = ka);
                                    ta = $ + Oa;
                                    pa = Z + L;
                                    Ia = HEAP32[j >> 2] + HEAP32[h >> 2];
                                    W = (db = 0 != (Ma | 0)) ? Ma : Q;
                                    Xa = Math_imul(W, F) | 0;
                                    Ta = _jtga(a, 2, Xa, 2, 0);
                                    if (0 == (Ta | 0)) break;
                                    HEAP32[Ta + 28 >> 2] = F;
                                    HEAP32[Ta + 32 >> 2] = W;
                                    W = Ta + HEAP32[Ta >> 2];
                                    do
                                        if (db)
                                            if (v) {
                                                fb = W;
                                                mb = 0;
                                                for (ma = pa;;)
                                                    if (_jtfmt1(a, Ha, Ma, Ga, ta, q, ma), _jtc2j(a, Ha, Ma, fb), Na = mb + 1, (Na | 0) < (F | 0)) fb += Ma, mb = Na, ma += r;
                                                    else {
                                                        ab = Ta;
                                                        break
                                                    }
                                            } else ab = Ta;
                                    else {
                                        if (v) {
                                            Na = 0;
                                            $a = W;
                                            Ua = 0;
                                            Pa = Ta;
                                            bb = pa;
                                            La = Xa;
                                            for (Qa = Ja = 0;;) {
                                                _jtfmt1(a, Ha, 0, Ga, ta, q, bb);
                                                Ya = Ja + 1;
                                                if ((La | 0) < (_strlen(HEAP32[u >> 2]) + Ya | 0)) {
                                                    lb = Pa;
                                                    for (Ca = La;;) {
                                                        gb = _jtover(a, lb, lb);
                                                        if (0 == (gb | 0)) break b;
                                                        Fa = Ca << 1;
                                                        if ((Fa | 0) < (_strlen(HEAP32[u >> 2]) + Ya | 0)) lb = gb, Ca = Fa;
                                                        else break
                                                    }
                                                    Za = gb + HEAP32[gb >> 2];
                                                    qb = gb;
                                                    ib = Fa
                                                } else Za = $a, qb = Pa, ib = La;
                                                Ca = Za + Ja;
                                                lb = _jtc2j(a, Ha, 0, Ca);
                                                Ya = lb + Ja;
                                                ub = 0 == (Na | 0) ? 95 == (HEAP8[Ca] | 0) | 0 : 1;
                                                HEAP8[Za + Ya] = 0;
                                                Ca = (Qa | 0) > (lb | 0) ? Qa : lb;
                                                lb = Ua + 1;
                                                if ((lb | 0) < (F | 0)) Na = ub, $a = Za, Ua = lb, Pa = qb, bb += r, La = ib, Ja = Ya + 1, Qa = Ca;
                                                else {
                                                    eb = ub;
                                                    rb = Za;
                                                    wb = Ca;
                                                    break
                                                }
                                            }
                                        } else eb = 0, rb = W, wb = 0;
                                        Qa = 0 != (Da | 0) | 0;
                                        Ja = wb + Qa;
                                        La = _jtga(a, 2, Math_imul(Ja, F) | 0, 2, 0);
                                        if (0 == (La | 0)) break b;
                                        HEAP32[La +
                                            28 >> 2] = F;
                                        HEAP32[La + 32 >> 2] = Ja;
                                        bb = La;
                                        Pa = HEAP32[La >> 2];
                                        _memset(bb + Pa, 32, HEAP32[La + 20 >> 2]) | 0;
                                        do
                                            if (0 == Ha << 24 >> 24) {
                                                if (v) {
                                                    Ua = rb;
                                                    $a = bb + (Pa + Ja);
                                                    for (Na = 0;;)
                                                        if (Ca = _strlen(Ua), _memcpy($a + -Ca, Ua, Ca) | 0, Ya = Na + 1, (Ya | 0) < (F | 0)) Ua = Ca + (Ua + 1), $a += Ja, Na = Ya;
                                                        else break
                                                }
                                            } else if (v) {
                                            Na = 0 == (eb | 0);
                                            $a = rb;
                                            Ua = bb + (Pa + Qa);
                                            for (Ya = 0;;)
                                                if (Ca = _strlen($a), Ka = Na ? 0 : 95 != (HEAP8[$a] | 0) | 0, _memcpy(Ua + Ka, $a, Ca) | 0, lb = Ya + 1, (lb | 0) < (F | 0)) $a = Ca + ($a + 1), Ua += Ja, Ya = lb;
                                                else break
                                        } while (0);
                                        _jttraverse(a, La, 654);
                                        Ja = La + 16;
                                        HEAP32[Ja >> 2] += 1;
                                        _jttpop(a, Ia);
                                        ab = _jttpush(a, La)
                                    } while (0);
                                    HEAP32[A + (Da << 2) >> 2] = ab;
                                    Ia = Da + 1;
                                    if (0 == (ab | 0)) {
                                        l = 0;
                                        c = 184;
                                        break
                                    }
                                    if ((Ia | 0) < (E | 0)) ka = Ma, aa = Ga, Z = pa, $ = ta, ya = Ha, Da = Ia;
                                    else break a
                                }
                                if (184 == c) return STACKTOP = e, l;
                                l = HEAP32[A + (Da << 2) >> 2] = 0;
                                STACKTOP = e;
                                return l
                            }
                        while (0);
                        A = _jtrazeh(a, R);
                        if (0 == (A | 0)) return l = 0, STACKTOP = e, l;
                        if (2 >= (n | 0) && 1 != (F | 0) | 2 == (n | 0)) Va = A, c = 181;
                        else {
                            ya = t ? n : 1;
                            $ = _jtga(a, 4, ya, 1, 0);
                            if (0 == ($ | 0)) return l = 0, STACKTOP = e, l;
                            aa = Z = $;
                            _memcpy(Z + HEAP32[aa >> 2], D, ya << 2) | 0;
                            HEAP32[Z + HEAP32[aa >> 2] + (ya - 1 << 2) >> 2] = HEAP32[A + 32 >> 2];
                            ya = _jtreshape(a,
                                $, A);
                            if (0 == (ya | 0)) return l = 0, STACKTOP = e, l;
                            nb = ya;
                            c = 182
                        }
                    } else c = 135; while (0);
            do
                if (135 == c) {
                    ob = 1 == (p | 0) ? Math_imul(g, E) | 0 : g;
                    u = Math_imul(ob, F) | 0;
                    M = _jtga(a, 2, u, t ? n : 1, D);
                    if (0 == (M | 0)) return l = 0, STACKTOP = e, l;
                    HEAP32[M + 28 + (HEAP32[M + 24 >> 2] - 1 << 2) >> 2] = ob;
                    if (0 >= (E | 0)) nb = M, c = 182;
                    else {
                        u = 0 < (F | 0);
                        O = P = 0;
                        V = M + HEAP32[M >> 2];
                        T = s;
                        N = y;
                        for (w = K = 0;;) {
                            (w | 0) < (p | 0) ? (cb = HEAP8[x + (w + S)], Wa = HEAP32[z + (w << 2) >> 2], yb = HEAP32[H + (w << 2) >> 2]) : (cb = K, Wa = O, yb = P);
                            ya = N + Oa;
                            A = T + L;
                            if (u) {
                                $ = V;
                                aa = 0;
                                for (Z = A;;)
                                    if (_jtfmt1(a, cb, yb, Wa, ya, q, Z), _jtc2j(a, cb, yb,
                                            $), ka = aa + 1, (ka | 0) < (F | 0)) $ += ob, aa = ka, Z += r;
                                    else break
                            }
                            Z = w + 1;
                            if ((Z | 0) < (E | 0)) P = yb, O = Wa, V += yb, T = A, N = ya, K = cb, w = Z;
                            else {
                                Va = M;
                                c = 181;
                                break
                            }
                        }
                    }
                }
            while (0);
            181 == c && (0 == (Va | 0) ? Cb = 0 : (nb = Va, c = 182));
            182 == c && (_jttraverse(a, nb, 654), r = nb + 16, HEAP32[r >> 2] += 1, Cb = nb);
            _jttpop(a, i);
            l = _jttpush(a, Cb);
            STACKTOP = e;
            return l
        }
    while (0);
    Cb = HEAP32[a + 4408 >> 2];
    i = HEAP32[Cb + (HEAP32[Cb >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
    l = 0;
    STACKTOP = e;
    return l
}

function _jtbslash(a, f) {
    var d, c, b, e, g, h;
    if (0 == (f | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 805567999 | 0)) {
        d = _jtfxeachv(a, 1, f);
        c = HEAP8[a + 204545];
        if (0 != c << 24 >> 24) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = HEAP32[c >> 2];
        HEAP32[c + b >> 2] = 3044;
        e = c + (b + 4);
        HEAP32[e >> 2] = 1896;
        e = c + (b + 8);
        HEAP32[e >> 2] = f;
        e = c + (b + 12);
        HEAP32[e >> 2] = 0;
        e = c + (b + 16);
        HEAP32[e >> 2] = d;
        d = c + (b + 20);
        HEAP32[d >> 2] = 256;
        d = c + (b + 24);
        HEAP32[d >> 2] = 2147483647;
        d = c + (b + 28);
        HEAP32[d >> 2] = 0;
        d = c + (b + 32);
        HEAP32[d >> 2] = 2147483647;
        d = c + (b + 36);
        HEAP32[d >> 2] = 0;
        b = c + (b +
            40);
        HEAP8[b] = 92;
        return c
    }
    c = HEAP32[f >> 2];
    b = HEAP8[f + (c + 40)] << 24 >> 24;
    a: do switch (b | 0) {
            case 47:
                d = c + 8;
                d = f + d;
                d = e = HEAP32[d >> 2];
                e = HEAP32[e >> 2];
                g = e + 40;
                g = d + g;
                g = HEAP8[g];
                (h = -67 == g << 24 >> 24) ? (e += 8, d += e, d = HEAP32[d >> 2], e = d + 12, e = HEAP32[e >> 2], e &= 4, (e = 0 == (e | 0)) ? d = -67 : (e = d + 24, e = HEAP32[e >> 2], (e = 0 == (e | 0)) ? (e = d, d = HEAP32[d >> 2], d = e + d, d = HEAP32[d >> 2], e = d - 16, e = 16 > e >>> 0, d &= 255, d = e ? d : -67) : d = -67)) : d = g;
                e = d & 255;
                e += 56;
                e = HEAP8[e];
                e = 0 == e << 24 >> 24;
                d = 0 == d << 24 >> 24;
                if (d |= e) {
                    d = 3030;
                    e = 684;
                    break a
                }
                d = 3030;
                e = 3126;
                break;
            case 51:
                d = f + c;
                d = HEAP32[d >>
                    2];
                d = 1334 == (d | 0);
                if (!d) {
                    d = 3094;
                    e = 684;
                    break a
                }
                d = 1256;
                e = 684;
                break;
            case 91:
            case 93:
            case 44:
                d = 3228;
                e = 684;
                break;
            case 35:
                d = 3094;
                e = 2106;
                break;
            default:
                d = 3094, e = 684
        }
        while (0);
        if (0 != HEAP8[a + 204545] << 24 >> 24) return 0;
    c = _jtga(a, 262144, 1, 0, 0);
    if (0 == (c | 0)) return 0;
    b = HEAP32[c >> 2];
    HEAP32[c + b >> 2] = e;
    HEAP32[c + (b + 4) >> 2] = d;
    HEAP32[c + (b + 8) >> 2] = f;
    HEAP32[c + (b + 12) >> 2] = 0;
    HEAP32[c + (b + 16) >> 2] = 0;
    HEAP32[c + (b + 20) >> 2] = 0;
    HEAP32[c + (b + 24) >> 2] = 2147483647;
    HEAP32[c + (b + 28) >> 2] = 0;
    HEAP32[c + (b + 32) >> 2] = 2147483647;
    HEAP32[c + (b + 36) >> 2] = 0;
    HEAP8[c +
        (b + 40)] = 92;
    return c
}

function _jtdot(a, f, d) {
    var c, b, e, g, h;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    c = HEAP32[f + 12 >> 2];
    if (0 != (c & 262144 | 0) && (b = HEAP32[d + 12 >> 2], 0 != (b & 262144 | 0))) {
        if (0 == (c & 1835008 | 0)) e = 0, g = 1732;
        else if (h = f, c = HEAP32[f >> 2], 47 != (HEAP8[c + (h + 40)] | 0)) e = 0, g = 1732;
        else if (c = HEAP32[c + (h + 8) >> 2], h = 0 == (c | 0) ? 0 : 0 == (HEAP32[c + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[c + (HEAP32[c >> 2] + 40)] | 0, 0 == (b & 1835008 | 0)) e = 0, g = 1732;
        else if (42 != (HEAP8[d + (HEAP32[d >> 2] + 40)] | 0)) e = 0, g = 1732;
        else {
            c = 43 == (h | 0) ? 556 : 1732;
            if (45 != (h | 0)) e = 0;
            else {
                h = _jtga(a, 2, 27, 1, 0);
                0 == (h | 0) ? b = 0 :
                    (_memcpy(h + HEAP32[h >> 2], 121888, 27) | 0, b = h);
                h = _jtparse(a, _jtenqueue(a, _jtwordil(a, b), b));
                if (0 == (h | 0)) return 0;
                e = h
            }
            g = c
        }
        if (0 != (HEAP8[a + 204545] | 0)) return 0;
        b = _jtga(a, 262144, 1, 0, 0);
        if (0 == (b | 0)) return 0;
        c = b;
        h = HEAP32[b >> 2];
        HEAP32[c + h >> 2] = 172;
        HEAP32[h + (c + 4) >> 2] = g;
        HEAP32[h + (c + 8) >> 2] = f;
        HEAP32[h + (c + 12) >> 2] = d;
        HEAP32[h + (c + 16) >> 2] = e;
        HEAP32[h + (c + 20) >> 2] = 0;
        HEAP32[h + (c + 24) >> 2] = 2;
        HEAP32[h + (c + 28) >> 2] = 2147483647;
        HEAP32[h + (c + 32) >> 2] = 2147483647;
        HEAP32[h + (c + 36) >> 2] = 0;
        HEAP8[h + (c + 40)] = 46;
        return b
    }
    e = HEAP32[a + 4408 >> 2];
    d = HEAP32[e +
        (HEAP32[e >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]);
    return 0
}

function _jtamend(a, f, d) {
    var c, b, e, g, h, j, i;
    if (0 == (f | 0)) return 0;
    c = HEAP32[f + 12 >> 2];
    if (0 != (c & 262144 | 0)) {
        if (0 != (HEAP8[a + 204545] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        e = HEAP32[c >> 2];
        HEAP32[b + e >> 2] = 2454;
        HEAP32[e + (b + 4) >> 2] = 0 != d << 24 >> 24 ? 1916 : 270;
        HEAP32[e + (b + 8) >> 2] = f;
        HEAP32[e + (b + 12) >> 2] = 0;
        HEAP32[e + (b + 16) >> 2] = 0;
        HEAP32[e + (b + 20) >> 2] = 0;
        HEAP32[e + (b + 24) >> 2] = 2147483647;
        HEAP32[e + (b + 28) >> 2] = 2147483647;
        HEAP32[e + (b + 32) >> 2] = 2147483647;
        HEAP32[e + (b + 36) >> 2] = 0;
        HEAP8[e + (b + 40)] = 125;
        return c
    }
    a: do
        if (0 !=
            (c & 32 | 0)) {
            c = f + HEAP32[f >> 2];
            b = 0 != (HEAP32[f + 4 >> 2] & 14 | 0) ? f : 0;
            e = HEAP32[f + 20 >> 2];
            if (0 < (e | 0)) {
                g = 0 == (b | 0);
                for (h = 0;;) {
                    j = HEAP32[c + (h << 2) >> 2];
                    i = g ? j : j + b;
                    0 != (HEAP32[i + 12 >> 2] & 32 | 0) && (1 == (HEAP32[i + 24 >> 2] | 0) && 2 == (HEAP32[i + 20 >> 2] | 0)) && (j = i + HEAP32[i >> 2], i = 0 == (HEAP32[i + 4 >> 2] & 14 | 0) ? HEAP32[j >> 2] : HEAP32[j >> 2] + i);
                    if (0 == (HEAP32[i + 12 >> 2] & 2 | 0)) break a;
                    if (2 <= (HEAP32[i + 24 >> 2] | 0)) break a;
                    j = h + 1;
                    if (0 == (HEAP32[i + 20 >> 2] | 0)) break a;
                    if ((j | 0) < (e | 0)) h = j;
                    else break
                }
            }
            if (2 <= (HEAP32[f + 24 >> 2] | 0)) return h = HEAP32[a + 4408 >> 2], b = HEAP32[h + (HEAP32[h >>
                2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), a = 0;
            if (!(0 != (e | 0) & 4 > (e | 0))) return b = HEAP32[a + 4408 >> 2], h = HEAP32[b + (HEAP32[b >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), a = 0;
            3 == (e | 0) ? c = f : (h = _jtreshape(a, HEAP32[31073], f), c = _jtdrop(a, HEAP32[31058], h));
            h = _jtevery(a, c, 0, 1906);
            if (0 == (h | 0) || 0 != (HEAP8[a + 204545] | 0)) return a = 0;
            b = _jtga(a, 262144, 1, 0, 0);
            if (0 == (b | 0)) return a = 0;
            g = b;
            c = HEAP32[b >> 2];
            HEAP32[g + c >> 2] = 2632;
            HEAP32[c + (g + 4) >> 2] = 2634;
            HEAP32[c + (g + 8) >> 2] = f;
            HEAP32[c + (g + 12) >> 2] = 0;
            HEAP32[c +
                (g + 16) >> 2] = h;
            HEAP32[c + (g + 20) >> 2] = 256;
            HEAP32[c + (g + 24) >> 2] = 2147483647;
            HEAP32[c + (g + 28) >> 2] = 2147483647;
            HEAP32[c + (g + 32) >> 2] = 2147483647;
            HEAP32[c + (g + 36) >> 2] = 0;
            HEAP8[c + (g + 40)] = 125;
            return a = b
        }
    while (0);
    if (0 != (HEAP8[a + 204545] | 0)) return 0;
    c = _jtga(a, 262144, 1, 0, 0);
    if (0 == (c | 0)) return 0;
    a = c;
    i = HEAP32[c >> 2];
    HEAP32[a + i >> 2] = 610;
    HEAP32[i + (a + 4) >> 2] = 0 != d << 24 >> 24 ? 152 : 2514;
    HEAP32[i + (a + 8) >> 2] = f;
    HEAP32[i + (a + 12) >> 2] = 0;
    HEAP32[i + (a + 16) >> 2] = 0;
    HEAP32[i + (a + 20) >> 2] = 0;
    HEAP32[i + (a + 24) >> 2] = 2147483647;
    HEAP32[i + (a + 28) >> 2] = 2147483647;
    HEAP32[i +
        (a + 32) >> 2] = 2147483647;
    HEAP32[i + (a + 36) >> 2] = 0;
    HEAP8[i + (a + 40)] = 125;
    return c
}

function _jtsymfree(a, f) {
    var d, c, b, e, g, h, j, i, l, k;
    d = f + 16;
    c = HEAP32[d >> 2];
    b = 0 != (c | 0);
    e = f + 20;
    b && (HEAP32[HEAP32[a + 205688 >> 2] + (24 * c & -1) + 20 >> 2] = HEAP32[e >> 2]);
    g = f + 8;
    h = HEAP32[e >> 2];
    0 == (HEAP32[g >> 2] & 2 | 0) ? (j = a + 205688, HEAP32[HEAP32[j >> 2] + (24 * h & -1) + 16 >> 2] = c) : (HEAP32[h >> 2] = c, j = a + 205688, b && (b = HEAP32[j >> 2] + (24 * c & -1) + 8, HEAP32[b >> 2] |= 2));
    i = j;
    c = f;
    b = HEAP32[c >> 2];
    0 != (b | 0) && (_jttraverse(a, b, 1910), h = b + 16, j = HEAP32[h >> 2] - 1, HEAP32[h >> 2] = j, 0 == (j | 0) && (j = b - 32 + 24, h = HEAP16[j + 4 >> 1], b = h << 16 >> 16, l = HEAP32[124360 + (b << 2) >> 2], k = a + 1056,
        HEAP32[k >> 2] -= l, 10 < h << 16 >> 16 ? _free(j) : (h = a + 204588 + (b << 2), HEAP32[j >> 2] = HEAP32[h >> 2], HEAP32[h >> 2] = j, j = a + 204712 + (b << 2), HEAP32[j >> 2] += l)));
    HEAP32[c >> 2] = 0;
    c = f + 4;
    b = HEAP32[c >> 2];
    0 != (b | 0) && (_jttraverse(a, b, 1910), l = b + 16, j = HEAP32[l >> 2] - 1, HEAP32[l >> 2] = j, 0 == (j | 0) && (j = b - 32 + 24, l = HEAP16[j + 4 >> 1], b = l << 16 >> 16, h = HEAP32[124360 + (b << 2) >> 2], k = a + 1056, HEAP32[k >> 2] -= h, 10 < l << 16 >> 16 ? _free(j) : (l = a + 204588 + (b << 2), HEAP32[j >> 2] = HEAP32[l >> 2], HEAP32[l >> 2] = j, j = a + 204712 + (b << 2), HEAP32[j >> 2] += h)));
    HEAP32[c >> 2] = 0;
    HEAP32[e >> 2] = 0;
    HEAP32[g >>
        2] = 0;
    HEAP32[f + 12 >> 2] = 0;
    g = HEAP32[i >> 2];
    i = g + 16;
    HEAP32[d >> 2] = HEAP32[i >> 2];
    HEAP32[i >> 2] = (f - g | 0) / 24 & -1
}


function _jtsymbrdlock(a, f) {
    var d;
    if (0 == (f | 0)) return 0;
    d = _jtsyrd(a, f, 0);
    if (0 == (d | 0)) return HEAP32[a + 1168 >> 2] = f, d = HEAP32[a + 4408 >> 2], d = HEAP32[d + (HEAP32[d >> 2] + 84) >> 2], _jtjsigstr(a, 21, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), 0;
    d = HEAP32[d + 4 >> 2];
    return 0 == (d | 0) ? 0 : 0 == (HEAP32[d + 12 >> 2] & 1835008 | 0) || 0 == (HEAP32[a + 204524 >> 2] | 0) && 0 == (HEAP32[d + (HEAP32[d >> 2] + 20) >> 2] & 65536 | 0) ? d : d = _jtnameref(a, f)
}

function _jtoprod(a, f, d, c) {
    c = HEAP32[c + (HEAP32[c >> 2] + 16) >> 2];
    return 0 == (c | 0) ? 0 : a = getFUNCTION_TABLE(HEAP32[c + (HEAP32[c >> 2] + 4) >> 2])(a, f, d, c)
}

function _rank2i(a, f, d, c) {
    var b, e, g;
    b = c;
    e = HEAP32[c >> 2];
    c = HEAP32[e + (b + 8) >> 2];
    g = 0 == (c | 0) ? 0 : HEAP32[c + (HEAP32[c >> 2] + 4) >> 2];
    b = e = HEAP32[e + (b + 16) >> 2];
    e = HEAP32[e >> 2];
    return _jtirs2(a, f, d, c, HEAP32[e + (b + 4) >> 2], HEAP32[e + (b + 8) >> 2], g)
}
function _jtlamin1(a, f) {
    var d, c, b, e, g, h;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 24 >> 2];
    c = a + 205336;
    b = HEAP32[c >> 2];
    0 == (b | 0) ? e = d : (g = HEAP32[b + 4 >> 2], HEAP32[c >> 2] = 0, e = (d | 0) < (g | 0) ? d : g);
    g = d - e;
    c = _jtga(a, 4, d + 1, 1, 0);
    if (0 == (c | 0)) return 0;
    d = c;
    b = HEAP32[c >> 2];
    h = d + b;
    _memcpy(h, f + 28, g << 2) | 0;
    HEAP32[h + (g << 2) >> 2] = 1;
    _memcpy(b + (d + 4) + (g << 2), f + 28 + (g << 2), e << 2) | 0;
    return d = _jtreshape(a, c, f)
}

function _om(a, f, d, c, b, e, g, h, j) {
    var i, l, k, m, n, p, q;
    i = (f | 0) / (d | 0) & -1;
    d = Math_imul(c, a) | 0;
    l = Math_imul(b, a) | 0;
    k = Math_imul(e, a) | 0;
    if (0 != (g | 0) | (b | 0) == (e | 0))
        if (n = (b | 0) > (e | 0), 1 >= (i | 0))
            if (e = 0 < (f | 0), n) {
                if (e) {
                    a = (e = (k | 0) < (l | 0)) ? k : l;
                    q = 0;
                    p = j;
                    for (b = h;;) {
                        _memcpy(b, p, a) | 0;
                        if (e)
                            for (m = k;;)
                                if (g = l - m, _memcpy(b + m, b, (m | 0) < (g | 0) ? m : g) | 0, g = m << 1, (g | 0) < (l | 0)) m = g;
                                else break;
                        m = q + 1;
                        if ((m | 0) < (f | 0)) q = m, p += k, b += d;
                        else break
                    }
                }
            } else {
                if (e) {
                    p = j;
                    q = 0;
                    for (a = h;;)
                        if (_memcpy(a, p, k) | 0, b = q + 1, (b | 0) < (f | 0)) p += k, q = b, a += d;
                        else break
                }
            } else if (b = (f | 0) /
        (i | 0) & -1, f = 0 < (b | 0) & 0 < (i | 0), n) {
        if (f) {
            f = Math_imul(Math_imul(i, c) | 0, a) | 0;
            c = (a = (k | 0) < (l | 0)) ? k : l;
            n = 0;
            e = j;
            for (j = h;;) {
                h = 0;
                for (q = j;;) {
                    _memcpy(q, e, c) | 0;
                    if (a)
                        for (p = k;;)
                            if (m = l - p, _memcpy(q + p, q, (p | 0) < (m | 0) ? p : m) | 0, m = p << 1, (m | 0) < (l | 0)) p = m;
                            else break;
                    p = h + 1;
                    if ((p | 0) < (i | 0)) h = p, q += d;
                    else break
                }
                q = n + 1;
                if ((q | 0) < (b | 0)) n = q, e += k, j += f;
                else break
            }
        }
    } else {
        if (f) {
            n = Math_imul(Math_imul(i, c) | 0, a) | 0;
            p = 0;
            q = j;
            for (e = h;;) {
                a = 0;
                for (m = e;;)
                    if (_memcpy(m, q, k) | 0, g = a + 1, (g | 0) < (i | 0)) a = g, m += d;
                    else break;
                m = p + 1;
                if ((m | 0) < (b | 0)) p = m, q += k, e += n;
                else break
            }
        }
    } else if (!(0 >=
            (f | 0))) {
        b = (g = (k | 0) < (l | 0)) ? k : l;
        m = 0;
        for (n = h;;) {
            _memcpy(n, j, b) | 0;
            if (g)
                for (h = k;;)
                    if (e = l - h, _memcpy(n + h, n, (h | 0) < (e | 0) ? h : e) | 0, e = h << 1, (e | 0) < (l | 0)) h = e;
                    else break;
            h = m + 1;
            if ((h | 0) < (f | 0)) m = h, n += d;
            else break
        }
    }
}

function _jtifrom(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    e = b;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = b, 0;
    h = HEAP32[f + 24 >> 2];
    j = a + 205336;
    i = HEAP32[j >> 2];
    0 == (i | 0) ? (k = l = HEAP32[d + 24 >> 2], m = h, n = l) : (k = HEAP32[i + 4 >> 2], m = HEAP32[i >> 2], n = HEAP32[d + 24 >> 2]);
    i = n - k;
    HEAP32[j >> 2] = 0;
    if ((h | 0) > (m | 0)) return g = _jtrank2ex(a, f, d, 0, m, k, 526), STACKTOP = b, g;
    m = HEAP32[f + 20 >> 2];
    l = HEAP32[d + 20 >> 2];
    p = d + 28;
    if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
        HEAP32[j >> 2] = 0;
        q = _jtccvt(a, 4, f, e);
        HEAP32[j >> 2] = 0;
        if (0 == q << 24 >> 24) return q = HEAP32[a + 4408 >> 2], r = HEAP32[q + (HEAP32[q >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), STACKTOP = b, 0;
        r = HEAP32[e >> 2];
        if (0 == (r | 0)) return STACKTOP = b, 0;
        s = r
    } else s = f;
    t = (f = 0 != (k | 0)) ? HEAP32[d + 28 + (i << 2) >> 2] : 1;
    e = 0 != (t | 0) ? t : 1;
    do
        if (0 < (i | 0)) {
            j = 1;
            for (r = 0;;)
                if (u = j * (HEAP32[d + 28 + (r << 2) >> 2] | 0), q = r + 1, (q | 0) < (i | 0)) j = u, r = q;
                else break;
            2147483647 >= u ? (w = u, c = 17) : (r = HEAP32[a + 4408 >> 2], j = HEAP32[r + (HEAP32[r >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[j + 20 >> 2], j + HEAP32[j >>
                2]), v = 0)
        } else w = 1, c = 17;
    while (0);
    17 == c && (v = w & -1);
    w = a + 204545;
    if (0 != (HEAP8[w] | 0)) return STACKTOP = b, 0;
    u = (m | 0) * ((l | 0) / (e | 0) & -1 | 0);
    if (2147483647 < u)
        if (j = HEAP32[a + 4408 >> 2], r = HEAP32[j + (HEAP32[j >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), 0 == (HEAP8[w] | 0)) x = 0;
        else return STACKTOP = b, 0;
    else x = u & -1;
    u = (l | 0) / ((0 != (v | 0) ? v : 1) | 0) & -1;
    l = d + 12;
    w = HEAP32[l >> 2];
    r = (Math_imul(262144 == (w | 0) | 524288 == (w | 0) | 1048576 == (w | 0) ? 44 : 1024 == (w | 0) | 4096 == (w | 0) | 8192 == (w | 0) | 16384 == (w | 0) | 2048 == (w | 0) | 32768 == (w | 0) ? 16 : 128 == (w | 0) ?
        8 : 16777216 == (w | 0) ? 12 : 65536 == (w | 0) ? 4 : 268435456 == (w | 0) ? 12 : 536870912 == (w | 0) ? 24 : 1 == (w | 0) | 8 == (w | 0) | 16 == (w | 0) ? w : 2 == (w | 0) | 2097152 == (w | 0) | 33554432 == (w | 0) ? 1 : 131072 == (w | 0) ? 2 : 64 == (w | 0) ? 4 : 32 == (w | 0) ? 4 : 4 == (w | 0) | 67108864 == (w | 0) | 134217728 == (w | 0) | 4194304 == (w | 0) | 8388608 == (w | 0) ? 4 : -1, u) | 0) / (e | 0) & -1;
    u = Math_imul(r, e) | 0;
    p = y = _jtga(a, w, x, n + h + ((0 < (k | 0)) << 31 >> 31), p);
    if (0 == (y | 0)) return STACKTOP = b, 0;
    _memcpy(y + 28 + (i << 2), s + 28, h << 2) | 0;
    f && _memcpy(y + 28 + (i + h << 2), d + 28 + (i + 1 << 2), (k << 2) - 4) | 0;
    k = s + HEAP32[s >> 2];
    s = d;
    i = HEAP32[d >> 2];
    h = s + i;
    f =
        y;
    n = p + HEAP32[f >> 2];
    if (0 == (m | 0)) z = e;
    else if (x = HEAP32[k >> 2], -1 < (x | 0))
        if ((x | 0) < (t | 0)) z = x;
        else return w = HEAP32[a + 4408 >> 2], j = HEAP32[w + (HEAP32[w >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), STACKTOP = b, 0;
    else if (j = x + t, -1 < (j | 0)) z = j;
    else return j = HEAP32[a + 4408 >> 2], x = HEAP32[j + (HEAP32[j >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2]), STACKTOP = b, 0;
    a: do
        if (0 == (HEAP32[l >> 2] & 24 | 0))
            if (1 == (r | 0)) {
                e = 0 < (v | 0);
                if (1 == (m | 0)) {
                    if (!e) break;
                    x = 0;
                    j = n;
                    for (w = s + (z + i);;)
                        if (HEAP8[j] = HEAP8[w], q = x + 1, (q | 0) < (v |
                                0)) x = q, j += 1, w += t;
                        else break a
                }
                if (e) {
                    w = 0 < (m | 0);
                    j = 0;
                    x = n;
                    q = h;
                    b: for (;;) {
                        if (w) {
                            A = 0;
                            for (D = x;;) {
                                B = HEAP32[k + (A << 2) >> 2];
                                if (-1 < (B | 0))
                                    if ((B | 0) < (t | 0)) x = B;
                                    else {
                                        c = 92;
                                        break b
                                    } else if (G = B + t, -1 < (G | 0)) x = G;
                                else {
                                    c = 94;
                                    break b
                                }
                                G = D + 1;
                                HEAP8[D] = HEAP8[q + x];
                                B = A + 1;
                                if ((B | 0) < (m | 0)) A = B, D = G;
                                else {
                                    C = G;
                                    break
                                }
                            }
                        } else C = x;
                        D = j + 1;
                        if ((D | 0) < (v | 0)) j = D, x = C, q += t;
                        else break a
                    }
                    if (92 == c) return q = HEAP32[a + 4408 >> 2], x = HEAP32[q + (HEAP32[q >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2]), g = 0, STACKTOP = b, g;
                    if (94 == c) return x = HEAP32[a + 4408 >> 2],
                        q = HEAP32[x + (HEAP32[x >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), g = 0, STACKTOP = b, g
                }
            } else
    if (2 == (r | 0)) {
        q = h;
        x = n;
        j = 0 < (v | 0);
        if (1 == (m | 0)) {
            if (!j) break;
            w = q + (z << 1);
            e = x;
            for (D = 0;;)
                if (HEAP16[e >> 1] = HEAP16[w >> 1], A = D + 1, (A | 0) < (v | 0)) w += t << 1, e += 2, D = A;
                else break a
        }
        if (j) {
            D = 0 < (m | 0);
            e = q;
            w = x;
            A = 0;
            b: for (;;) {
                if (D) {
                    G = w;
                    for (B = 0;;) {
                        F = HEAP32[k + (B << 2) >> 2];
                        if (-1 < (F | 0))
                            if ((F | 0) < (t | 0)) q = F;
                            else {
                                c = 106;
                                break b
                            } else if (E = F + t, -1 < (E | 0)) q = E;
                        else {
                            c = 108;
                            break b
                        }
                        E = G + 2;
                        HEAP16[G >> 1] = HEAP16[e + (q << 1) >> 1];
                        F = B + 1;
                        if ((F | 0) < (m | 0)) G = E,
                            B = F;
                        else {
                            J = E;
                            break
                        }
                    }
                } else J = w;
                B = A + 1;
                if ((B | 0) < (v | 0)) e += t << 1, w = J, A = B;
                else break a
            }
            if (106 == c) return A = HEAP32[a + 4408 >> 2], w = HEAP32[A + (HEAP32[A >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[w + 20 >> 2], w + HEAP32[w >> 2]), g = 0, STACKTOP = b, g;
            if (108 == c) return w = HEAP32[a + 4408 >> 2], A = HEAP32[w + (HEAP32[w >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), g = 0, STACKTOP = b, g
        }
    } else if (4 == (r | 0)) {
        A = h;
        w = n;
        e = 0 < (v | 0);
        if (1 == (m | 0)) {
            if (!e) break;
            D = A + (z << 2);
            x = w;
            for (q = 0;;)
                if (HEAP32[x >> 2] = HEAP32[D >> 2], j = q + 1, (j | 0) < (v | 0)) D += t << 2, x += 4, q = j;
                else break a
        }
        if (e) {
            q =
                0 < (m | 0);
            x = A;
            D = w;
            j = 0;
            b: for (;;) {
                if (q) {
                    B = D;
                    for (G = 0;;) {
                        E = HEAP32[k + (G << 2) >> 2];
                        if (-1 < (E | 0))
                            if ((E | 0) < (t | 0)) A = E;
                            else {
                                c = 120;
                                break b
                            } else if (F = E + t, -1 < (F | 0)) A = F;
                        else {
                            c = 122;
                            break b
                        }
                        F = B + 4;
                        HEAP32[B >> 2] = HEAP32[x + (A << 2) >> 2];
                        E = G + 1;
                        if ((E | 0) < (m | 0)) B = F, G = E;
                        else {
                            L = F;
                            break
                        }
                    }
                } else L = D;
                G = j + 1;
                if ((G | 0) < (v | 0)) x += t << 2, D = L, j = G;
                else break a
            }
            if (120 == c) return j = HEAP32[a + 4408 >> 2], D = HEAP32[j + (HEAP32[j >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[D + 20 >> 2], D + HEAP32[D >> 2]), g = 0, STACKTOP = b, g;
            if (122 == c) return D = HEAP32[a + 4408 >> 2], j = HEAP32[D + (HEAP32[D >>
                2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), g = 0, STACKTOP = b, g
        }
    } else {
        if (0 == (r & 3 | 0)) {
            j = h;
            D = n;
            x = r >>> 2;
            q = Math_imul(x, t) | 0;
            if (1 == (m | 0)) {
                if (1 > (v | 0) | 0 == (x | 0)) break;
                w = j + (Math_imul(z, x) << 2);
                A = 1 < x >>> 0 ? x : 1;
                e = w;
                w = D;
                for (G = 0;;) {
                    B = e;
                    F = w;
                    for (E = 0;;)
                        if (HEAP32[F >> 2] = HEAP32[B >> 2], I = E + 1, (I | 0) < (x | 0)) B += 4, F += 4, E = I;
                        else break;
                    E = G + 1;
                    if ((E | 0) < (v | 0)) e += q << 2, w += A << 2, G = E;
                    else break a
                }
            }
            if (0 >= (v | 0)) break;
            G = 0 < (m | 0);
            A = 0 == (x | 0);
            w = 1 < x >>> 0 ? x : 1;
            e = j;
            E = D;
            F = 0;
            b: for (;;) {
                if (G) {
                    B = E;
                    for (I = 0;;) {
                        H = HEAP32[k + (I << 2) >> 2];
                        if (-1 < (H | 0))
                            if ((H |
                                    0) < (t | 0)) D = H;
                            else {
                                c = 137;
                                break b
                            } else if (E = H + t, -1 < (E | 0)) D = E;
                        else {
                            c = 139;
                            break b
                        }
                        if (!A) {
                            E = e + (Math_imul(D, x) << 2);
                            H = B;
                            for (K = 0;;)
                                if (HEAP32[H >> 2] = HEAP32[E >> 2], N = K + 1, (N | 0) < (x | 0)) E += 4, H += 4, K = N;
                                else break;
                            B += w << 2
                        }
                        K = I + 1;
                        if ((K | 0) < (m | 0)) I = K;
                        else {
                            S = B;
                            break
                        }
                    }
                } else S = E;
                I = F + 1;
                if ((I | 0) < (v | 0)) e += q << 2, E = S, F = I;
                else break a
            }
            if (137 == c) return F = HEAP32[a + 4408 >> 2], E = HEAP32[F + (HEAP32[F >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[E + 20 >> 2], E + HEAP32[E >> 2]), g = 0, STACKTOP = b, g;
            if (139 == c) return E = HEAP32[a + 4408 >> 2], F = HEAP32[E + (HEAP32[E >> 2] + 24) >>
                2], _jtjsigstr(a, 6, HEAP32[F + 20 >> 2], F + HEAP32[F >> 2]), g = 0, STACKTOP = b, g
        }
        if (0 != (r & 1 | 0)) {
            F = (r >>> 1) + 1;
            E = 0 < (v | 0);
            if (1 == (m | 0)) {
                if (!E) break;
                q = 0 < (F | 0);
                e = 0;
                w = n;
                for (x = s + ((Math_imul(z, r) | 0) + i);;) {
                    if (q) {
                        A = w;
                        G = x;
                        for (D = 0;;)
                            if (HEAP16[A >> 1] = HEAP16[G >> 1], j = D + 1, (j | 0) < (F | 0)) A += 2, G += 2, D = j;
                            else break
                    }
                    D = e + 1;
                    if ((D | 0) < (v | 0)) e = D, w += r, x += u;
                    else break a
                }
            }
            if (!E) break;
            x = 0 < (m | 0);
            w = 0 < (F | 0);
            e = n;
            q = 0;
            D = h;
            b: for (;;) {
                if (x) {
                    G = e;
                    for (A = 0;;) {
                        j = HEAP32[k + (A << 2) >> 2];
                        if (-1 < (j | 0))
                            if ((j | 0) < (t | 0)) B = j;
                            else {
                                c = 180;
                                break b
                            } else if (I = j + t, -1 < (I | 0)) B = I;
                        else {
                            c =
                                182;
                            break b
                        }
                        if (w) {
                            I = G;
                            j = D + (Math_imul(B, r) | 0);
                            for (B = 0;;)
                                if (HEAP16[I >> 1] = HEAP16[j >> 1], K = B + 1, (K | 0) < (F | 0)) I += 2, j += 2, B = K;
                                else break
                        }
                        B = G + r;
                        j = A + 1;
                        if ((j | 0) < (m | 0)) G = B, A = j;
                        else {
                            T = B;
                            break
                        }
                    }
                } else T = e;
                A = q + 1;
                if ((A | 0) < (v | 0)) e = T, q = A, D += u;
                else break a
            }
            if (180 == c) return D = HEAP32[a + 4408 >> 2], q = HEAP32[D + (HEAP32[D >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), g = 0, STACKTOP = b, g;
            if (182 == c) return q = HEAP32[a + 4408 >> 2], D = HEAP32[q + (HEAP32[q >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[D + 20 >> 2], D + HEAP32[D >> 2]), g = 0, STACKTOP = b,
                g
        }
        D = h;
        q = n;
        e = r >>> 1;
        F = Math_imul(e, t) | 0;
        w = 0 < (v | 0);
        if (1 == (m | 0)) {
            if (!w) break;
            x = D + (Math_imul(z, e) << 1);
            E = 0 == (e | 0);
            A = 1 < e >>> 0 ? e : 1;
            G = x;
            x = q;
            for (B = 0;;) {
                if (!E) {
                    j = G;
                    I = x;
                    for (K = 0;;)
                        if (HEAP16[I >> 1] = HEAP16[j >> 1], H = K + 1, (H | 0) < (e | 0)) j += 2, I += 2, K = H;
                        else break;
                    x += A << 1
                }
                K = B + 1;
                if ((K | 0) < (v | 0)) G += F << 1, B = K;
                else break a
            }
        }
        if (w) {
            B = 0 < (m | 0);
            x = 0 == (e | 0);
            G = 1 < e >>> 0 ? e : 1;
            A = D;
            E = q;
            K = 0;
            b: for (;;) {
                if (B) {
                    I = E;
                    for (j = 0;;) {
                        H = HEAP32[k + (j << 2) >> 2];
                        if (-1 < (H | 0))
                            if ((H | 0) < (t | 0)) q = H;
                            else {
                                c = 159;
                                break b
                            } else if (E = H + t, -1 < (E | 0)) q = E;
                        else {
                            c = 161;
                            break b
                        }
                        if (x) q =
                            I;
                        else {
                            E = A + (Math_imul(q, e) << 1);
                            H = I;
                            for (N = 0;;)
                                if (HEAP16[H >> 1] = HEAP16[E >> 1], V = N + 1, (V | 0) < (e | 0)) E += 2, H += 2, N = V;
                                else break;
                            q = I + (G << 1)
                        }
                        N = j + 1;
                        if ((N | 0) < (m | 0)) I = q, j = N;
                        else {
                            Q = q;
                            break
                        }
                    }
                } else Q = E;
                j = K + 1;
                if ((j | 0) < (v | 0)) A += F << 1, E = Q, K = j;
                else break a
            }
            if (159 == c) return K = HEAP32[a + 4408 >> 2], E = HEAP32[K + (HEAP32[K >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[E + 20 >> 2], E + HEAP32[E >> 2]), g = 0, STACKTOP = b, g;
            if (161 == c) return E = HEAP32[a + 4408 >> 2], K = HEAP32[E + (HEAP32[E >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[K + 20 >> 2], K + HEAP32[K >> 2]), g = 0, STACKTOP = b, g
        }
    } else {
        K =
            h;
        E = n;
        if (8 == (r | 0)) {
            F = 0 < (v | 0);
            if (1 == (m | 0)) {
                if (!F) break;
                A = 0;
                G = E;
                for (e = K + (z << 3);;)
                    if (HEAPF64[G >> 3] = HEAPF64[e >> 3], x = A + 1, (x | 0) < (v | 0)) A = x, G += 8, e += t << 3;
                    else break a
            }
            if (!F) break;
            e = 0 < (m | 0);
            G = 0;
            A = E;
            x = K;
            b: for (;;) {
                if (e) {
                    B = 0;
                    for (q = A;;) {
                        D = HEAP32[k + (B << 2) >> 2];
                        if (-1 < (D | 0))
                            if ((D | 0) < (t | 0)) A = D;
                            else {
                                c = 56;
                                break b
                            } else if (w = D + t, -1 < (w | 0)) A = w;
                        else {
                            c = 58;
                            break b
                        }
                        w = q + 8;
                        HEAPF64[q >> 3] = HEAPF64[x + (A << 3) >> 3];
                        D = B + 1;
                        if ((D | 0) < (m | 0)) B = D, q = w;
                        else {
                            P = w;
                            break
                        }
                    }
                } else P = A;
                q = G + 1;
                if ((q | 0) < (v | 0)) G = q, A = P, x += t << 3;
                else break a
            }
            if (56 == c) return x =
                HEAP32[a + 4408 >> 2], A = HEAP32[x + (HEAP32[x >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), g = 0, STACKTOP = b, g;
            if (58 == c) return A = HEAP32[a + 4408 >> 2], x = HEAP32[A + (HEAP32[A >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2]), g = 0, STACKTOP = b, g
        }
        x = r >>> 3;
        A = Math_imul(x, t) | 0;
        G = 0 < (v | 0);
        if (1 == (m | 0)) {
            if (!G) break;
            e = K + (Math_imul(z, x) << 3);
            F = 0 == (x | 0);
            q = 1 < x >>> 0 ? x : 1;
            B = 0;
            w = E;
            for (D = e;;) {
                if (F) e = w;
                else {
                    e = 0;
                    j = w;
                    for (I = D;;)
                        if (HEAPF64[j >> 3] = HEAPF64[I >> 3], N = e + 1, (N | 0) < (x | 0)) e = N, j += 8, I += 8;
                        else break;
                    e = w + (q << 3)
                }
                I = B + 1;
                if ((I | 0) < (v | 0)) B = I, w = e, D += A << 3;
                else break a
            }
        }
        if (G) {
            D = 0 < (m | 0);
            w = 0 == (x | 0);
            B = 1 < x >>> 0 ? x : 1;
            q = 0;
            F = E;
            I = K;
            b: for (;;) {
                if (D) {
                    j = 0;
                    for (e = F;;) {
                        N = HEAP32[k + (j << 2) >> 2];
                        if (-1 < (N | 0))
                            if ((N | 0) < (t | 0)) G = N;
                            else {
                                c = 73;
                                break b
                            } else if (H = N + t, -1 < (H | 0)) G = H;
                        else {
                            c = 75;
                            break b
                        }
                        if (w) G = e;
                        else {
                            H = 0;
                            N = e;
                            for (E = I + (Math_imul(G, x) << 3);;)
                                if (HEAPF64[N >> 3] = HEAPF64[E >> 3], V = H + 1, (V | 0) < (x | 0)) H = V, N += 8, E += 8;
                                else break;
                            G = e + (B << 3)
                        }
                        E = j + 1;
                        if ((E | 0) < (m | 0)) j = E, e = G;
                        else {
                            M = G;
                            break
                        }
                    }
                } else M = F;
                e = q + 1;
                if ((e | 0) < (v | 0)) q = e, F = M, I += A << 3;
                else break a
            }
            if (73 == c) return A =
                HEAP32[a + 4408 >> 2], I = HEAP32[A + (HEAP32[A >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[I + 20 >> 2], I + HEAP32[I >> 2]), g = 0, STACKTOP = b, g;
            if (75 == c) return I = HEAP32[a + 4408 >> 2], A = HEAP32[I + (HEAP32[I >> 2] + 24) >> 2], _jtjsigstr(a, 6, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), g = 0, STACKTOP = b, g
        }
    }
    while (0);
    if (0 == (HEAP32[l >> 2] & 32 | 0) || 0 == (HEAP32[d + 4 >> 2] & 14 | 0)) return g = y, STACKTOP = b, g;
    l = d - y;
    d = y + 4;
    HEAP32[d >> 2] |= 8;
    d = p + HEAP32[f >> 2];
    f = HEAP32[y + 20 >> 2];
    if (0 < (f | 0)) a = 0;
    else return g = y, STACKTOP = b, g;
    for (;;)
        if (p = d + (a << 2), HEAP32[p >> 2] += l, p = a + 1, (p | 0) < (f | 0)) a = p;
        else {
            g =
                y;
            break
        }
    STACKTOP = b;
    return g
}
function _jtIfromD(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n;
    c = 0;
    b = HEAP32[f + 20 >> 2];
    e = f + HEAP32[f >> 2];
    f = d;
    d = a + 1;
    g = -2147483648 * d;
    h = 2147483647 * d;
    if (0 < (b | 0)) j = 0;
    else return 1;
    for (;;) {
        d = HEAPF64[e + (j << 3) >> 3];
        j += 1;
        if (d < g | h < d) {
            i = 0;
            c = 29;
            break
        }
        if (!((j | 0) < (b | 0))) {
            l = 0;
            k = f;
            break
        }
    }
    if (29 == c) return i;
    for (;;) {
        f = HEAPF64[e + (l << 3) >> 3];
        j = Math_floor(f);
        h = f - j;
        d = 0 > h ? -0 - h : h;
        m = (h = 0 <= f) ? f : -0 - f;
        n = (g = 0 <= j) ? j : -0 - j;
        g = m > n ? h ? f : -0 - f : g ? j : -0 - j;
        if (d > g * a)
            if (g = j + 1, j = f - g, d = 0 > j ? -0 - j : j, m = h ? f : -0 - f, n = (j = 0 <= g) ? g : -0 - g, f = m > n ? h ? f : -0 - f : j ? g : -0 - g, d > f * a) {
                i =
                    0;
                c = 29;
                break
            } else f = g;
        else f = j;
        HEAP32[k >> 2] = f & -1;
        j = l + 1;
        if ((j | 0) < (b | 0)) l = j, k += 4;
        else {
            i = 1;
            c = 29;
            break
        }
    }
    if (29 == c) return i
}
function _jtimmex(a, f) {
    var d, c;
    d = a + 204440;
    c = HEAP32[d >> 2] + 1;
    (HEAP32[a + 204444 >> 2] | 0) < (c | 0) ? (d = HEAP32[a + 4408 >> 2], d = HEAP32[d + (HEAP32[d >> 2] + 68) >> 2], _jtjsigstr(a, 17, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2])) : (HEAP32[d >> 2] = c, c = _jtparse(a, _jtenqueue(a, _jtwordil(a, f), f)), HEAP32[d >> 2] -= 1, d = a + 204545, 55 == (HEAP8[d] | 0) ? (HEAP8[d] = 0, HEAP32[a + 4400 >> 2] = 0, d = HEAP32[31088]) : d = c, 0 != (d | 0) && 0 == (HEAP8[a + 8] | 0) && _jtjpr(a, d))
}
function _jtincrem(a, f) {
    return _jtva2(a, HEAP32[31058], f, 43)
}
function _jtindexof(a, f, d) {
    return _jtindexofsub(a, 0, f, d)
}
function _jtindexofsub(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb,
        Jb, $b, na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf,
        Qf, Sf, Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk,
        Ei, Nk, jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl,
        Gn, Pm, Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo,
        fp, jq, un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr,
        cs, ss, cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv,
        gu, Qr, iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz,
        Oz, HC, ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG, PC, HB, UD, jC, rD, ZA, ZF, kC, MG, IL, lC, NG, sD, $F, dI, jF, OG, eI, tD, uD, VD,
        CE, WD, mC, IB, kF, JB, xH, DE, vD, XD, zy, KB, BA, lF, mF, nC, $A, wJ, aG, JI, EE, nF, aB, yH, wD, bG, cG, YD, FE, oC, pC, dG, ZD, zH, PG, fI, QG, eG, gI, nz, xD, xJ, KI, LI, AH, fG, oF, BH, pF, yJ, RG, CA, GE, QC, zJ, qC, $D, oy, MI, rC, bB, sB, gG, NI, qF, sC, LB, rF, CH, yD, hG, sF, cB, py, tB, Ow, SG, hI, TG, OI, MB, aE, tF, UG, NB, PI, QI, zD, bE, Uy, uF, tC, cK, cE, dE, RC, iI, DA, EA, dB, AD, uC, AJ, dK, iG, SC, HE, jG, vF, BD, fx, DH, IE, kG, TC, VG, JE, lG, WG, JL, CD, Ay, XG, wF, eE, mG, xF, KE, eA, vC, yF, LE, UC, RI, eB, OK, nG, DD, wC, FA, OB, PB, QB, fB, zF, oG, fE, YG, RB, GA, ME, ED, jI, ZG, NE, gE, xC, SB, PK, EH, OE, PE, pG, AF, BF, yC, FH,
        $G, hE, aH, QE, RE, bH, SI, eK, SE, CF, GH, FD, zC, Fz, HA, oz, fK, TB, qG, iE, HH, fA, UB, IH, cH, jE, DF, VB, VC, TE, kE, EF, gA, hA, uB, UE, WC, gB, BJ, IA, FF, XC, rG, GD, sG, vB, WB, lE, XB, dH, GF, gK, eH, JH, mE, VE, WE, TI, kI, lI, KH, By, gx, ux, HF, fH, mI, tG, YC, ZC, hK, nE, JA, LH, YB, hx, uG, oE, $C, IF, UI, AC, MH, XE, QK, wB, gH, hB, YE, JF, ZB, aD, KF, VI, iA, bD, iB, jB, KA, LF, hH, cD, iK, MF, nI, BC, NH, dD, RK, iH, CJ;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    g = e + 8;
    h = e + 16;
    j = e + 24;
    i = e + 32;
    l = e + 40;
    k = e + 48;
    m = e + 56;
    n = e + 64;
    p = e + 72;
    q = e + 80;
    r = e + 88;
    s = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    HEAP32[r >> 2] =
        0;
    t = HEAP32[31086];
    u = (HEAP32[31134] | 0) == (c | 0);
    if (0 == (d | 0) | 0 == (c | 0)) return w = 0, STACKTOP = e, w;
    v = HEAP32[d + 24 >> 2];
    x = a + 205336;
    y = HEAP32[x >> 2];
    0 == (y | 0) ? (z = c + 24, D = A = HEAP32[z >> 2], B = v, G = 0, C = A) : (F = HEAP32[y >> 2], E = v - F, J = c + 24, L = HEAP32[J >> 2], I = y + 4, D = H = HEAP32[I >> 2], B = F, G = E, C = L);
    K = C - D;
    HEAP32[x >> 2] = 0;
    N = d + 28;
    S = d + 12;
    T = HEAP32[S >> 2];
    V = c + 28;
    Q = c + 12;
    P = HEAP32[Q >> 2];
    a: do
        if (u) M = 1 - B, R = M + D, O = G, aa = R, Z = N;
        else {
            ba = ($ = (v | 0) != (B | 0)) ? G : K;
            ka = $ ? N : V;
            ea = 0 != (B | 0);
            ha = B - 1;
            da = ea ? ha : 0;
            ga = D - da;
            U = 0 > (ga | 0);
            b: do
                if (!U) {
                    if (ca = 0 == (da | 0)) {
                        O = ba;
                        aa = ga;
                        Z = ka;
                        break a
                    }
                    X = ga + K;
                    Y = G + 1;
                    ja = c + 28 + (X << 2);
                    fa = d + 28 + (Y << 2);
                    ia = da << 2;
                    ra = ja;
                    sa = fa;
                    ta = ia;
                    wa = sa;
                    for (za = ra;;) {
                        Ba = HEAP8[wa];
                        ua = HEAP8[za];
                        ya = Ba << 24 >> 24 == ua << 24 >> 24;
                        if (!ya) break b;
                        xa = ta - 1;
                        oa = wa + 1;
                        pa = za + 1;
                        if (la = 0 == (xa | 0)) {
                            O = ba;
                            aa = ga;
                            Z = ka;
                            break a
                        } else ta = xa, wa = oa, za = pa
                    }
                }
            while (0);
            ea ? (qa = d + 28 + (G << 2), Aa = Da = HEAP32[qa >> 2]) : Aa = 1;
            Ea = U ? 0 : ga;
            Sa = 0 < (ba | 0);
            do
                if (Sa) {
                    Oa = 1;
                    for (Ha = 0;;)
                        if (Ga = ka + (Ha << 2), Ma = HEAP32[Ga >> 2], Ia = Ma | 0, db = Oa * Ia, W = Ha + 1, Xa = (W | 0) < (ba | 0)) Oa = db, Ha = W;
                        else break;
                        (Ta = 2147483647 < db) ? (mb = a + 4408, Na = ab = ma = HEAP32[mb >>
                            2], $a = HEAP32[Na >> 2], Ua = $a + 40, bb = Pa = ab + Ua, La = HEAP32[bb >> 2], Ja = La + 20, Qa = HEAP32[Ja >> 2], lb = Ya = La, Ca = HEAP32[lb >> 2], gb = Ya + Ca, _jtjsigstr(a, 10, Qa, gb), Fa = 0) : (fb = db, b = 18)
                } else fb = 1, b = 18;
            while (0);
            18 == b && (Za = fb & -1, Fa = qb = Za | 0);
            ib = c + 28 + (K << 2);
            ub = 0 < (Ea | 0);
            do
                if (ub) {
                    eb = 1;
                    for (rb = 0;;)
                        if (wb = K + rb, Ka = c + 28 + (wb << 2), Va = HEAP32[Ka >> 2], nb = Va | 0, ob = eb * nb, cb = rb + 1, Wa = (cb | 0) < (Ea | 0)) eb = ob, rb = cb;
                        else break;
                        (yb = 2147483647 < ob) ? (Pb = a + 4408, ac = Zb = zb = HEAP32[Pb >> 2], Hb = HEAP32[ac >> 2], Ib = Hb + 40, Rb = Qb = Zb + Ib, Ob = HEAP32[Rb >> 2], Bb = Ob + 20, xb = HEAP32[Bb >>
                            2], tb = dc = Ob, oc = HEAP32[tb >> 2], Mb = dc + oc, _jtjsigstr(a, 10, xb, Mb), Tb = 0) : (Cb = ob, b = 23)
                } else Cb = 1, b = 23;
            while (0);
            23 == b && (Ra = Cb & -1, Tb = Nb = Ra | 0);
            sb = Fa * Tb;
            (Ab = 2147483647 < sb) ? (Eb = a + 4408, wc = vb = Lb = HEAP32[Eb >> 2], Ec = HEAP32[wc >> 2], yc = Ec + 40, bc = Db = vb + yc, pb = HEAP32[bc >> 2], Fb = pb + 20, jb = HEAP32[Fb >> 2], ic = gc = pb, vc = HEAP32[ic >> 2], hc = gc + vc, _jtjsigstr(a, 10, jb, hc), uc = 0) : uc = Ac = sb & -1;
            xc = a + 204545;
            cd = HEAP8[xc];
            jc = 0 == cd << 24 >> 24;
            if (!jc) return w = 0, STACKTOP = e, w;
            switch (f | 0) {
                case 9:
                    Tc = _jtga(a, 4, 1, 0, 0);
                    if (Fc = 0 == (Tc | 0)) return w = 0, STACKTOP = e,
                        w;
                    Bc = uc - 1;
                    Xb = ec = Tc;
                    sc = HEAP32[Xb >> 2];
                    tc = nc = ec + sc;
                    HEAP32[tc >> 2] = Bc;
                    w = Tc;
                    STACKTOP = e;
                    return w;
                case 2:
                case 3:
                case 5:
                    return Ub = a + 4408, qc = ad = $c = HEAP32[Ub >> 2], Uc = HEAP32[qc >> 2], rc = Uc + 80, Jb = kb = ad + rc, $b = HEAP32[Jb >> 2], na = $b + 20, Vb = HEAP32[na >> 2], va = kc = $b, Wc = HEAP32[va >> 2], Yb = kc + Wc, _jtjsigstr(a, 20, Vb, Yb), _jtwri(a, 4, 161016, 10, 122224), w = 0, STACKTOP = e, w;
                case 14:
                    return w = fc = HEAP32[31086], STACKTOP = e, w;
                case 6:
                    Kb = Ea + ba;
                    Gb = _jtga(a, 1, uc, Kb, ka);
                    if (gd = 0 == (Gb | 0)) return w = 0, STACKTOP = e, w;
                    $ && (Gc = mc = Gb + 28 + (ba << 2), dd = ib, kd = Ea << 2,
                        _memcpy(Gc, dd, kd) | 0);
                    Vc = Fd = Gb;
                    Hd = HEAP32[Vc >> 2];
                    bd = Fd + Hd;
                    _memset(bd, 0, uc) | 0;
                    w = Gb;
                    STACKTOP = e;
                    return w;
                case 4:
                    return w = cc = _jtca(a, c), STACKTOP = e, w;
                case 8:
                case 10:
                    Ic = _jtga(a, 4, 1, 0, 0);
                    if (fd = 0 == (Ic | 0)) return w = 0, STACKTOP = e, w;
                    Xc = xd = Ic;
                    Wd = HEAP32[Xc >> 2];
                    Sb = Wb = xd + Wd;
                    HEAP32[Sb >> 2] = uc;
                    w = Ic;
                    STACKTOP = e;
                    return w;
                case 12:
                case 13:
                case 7:
                    return w = pc = HEAP32[30648], STACKTOP = e, w;
                case 0:
                case 1:
                    zc = Ea + ba;
                    hd = _jtga(a, 4, uc, zc, ka);
                    if (Yc = 0 == (hd | 0)) return w = 0, STACKTOP = e, w;
                    $ && (Gd = Ad = hd + 28 + (ba << 2), hb = ib, ld = Ea << 2, _memcpy(Gd, hb, ld) |
                        0);
                    ed = 0 < (uc | 0);
                    if (!ed) return w = hd, STACKTOP = e, w;
                    Jc = hd;
                    Oc = HEAP32[Jc >> 2];
                    Pc = hd;
                    pd = Ed = ke = Pc + Oc;
                    for (id = 0;;)
                        if (Cc = pd + 4, HEAP32[pd >> 2] = Aa, Qc = id + 1, Zc = (Qc | 0) < (uc | 0)) pd = Cc, id = Qc;
                        else {
                            w = hd;
                            break
                        }
                    STACKTOP = e;
                    return w;
                case 11:
                    vd = _jtga(a, 4, 1, 0, 0);
                    if ($d = 0 == (vd | 0)) return w = 0, STACKTOP = e, w;
                    Kc = je = vd;
                    Bd = HEAP32[Kc >> 2];
                    Vd = od = je + Bd;
                    HEAP32[Vd >> 2] = 0;
                    w = vd;
                    STACKTOP = e;
                    return w;
                default:
                    O = ba;
                    aa = ga;
                    Z = ka;
                    break a
            }
        }
    while (0);
    (Zd = 0 != (T & 64512 | 0)) ? b = 51: (Jd = P & 64512, (Md = 0 == (Jd | 0)) || (b = 51));
    do
        if (51 == b) {
            Cd = 2 > (B | 0);
            fe = (v | 0) != (B | 0);
            if (Cd) {
                if (fe) return w =
                    Sc = _jtsprank2(a, d, c, 0, B, 2147483647, 1316), STACKTOP = e, w;
                lc = P & 64512;
                if (nd = 0 == (lc | 0)) {
                    Hc = Rc = d;
                    Kd = HEAP32[Hc >> 2];
                    Rd = Kd + 12;
                    be = Nd = Rc + Rd;
                    zd = HEAP32[be >> 2];
                    we = zd + Kd;
                    rd = Lc = Rc + we;
                    se = Kd + 8;
                    Cf = Ud = Rc + se;
                    td = HEAP32[Cf >> 2];
                    Te = td + Kd;
                    pe = Te + 20;
                    Me = Pd = Rc + pe;
                    Sd = HEAP32[Me >> 2];
                    if ($e = 0 == (Sd | 0)) return qe = _jtravel(a, rd), w = Ce = _jtindexofsub(a, f, qe, c), STACKTOP = e, w;
                    cf = Rc + Te;
                    sf = we + 20;
                    kf = Ue = Rc + sf;
                    Re = HEAP32[kf >> 2];
                    ce = HEAP32[N >> 2];
                    De = cf;
                    Ge = HEAP32[De >> 2];
                    He = Ge + Te;
                    Yd = We = Rc + He;
                    Ne = Kd + 4;
                    Ee = Se = Rc + Ne;
                    Ld = HEAP32[Ee >> 2];
                    he = Ld + Kd;
                    re = Qd = Rc + he;
                    Ke =
                        HEAP32[S >> 2];
                    Ae = Ke & 1024;
                    (te = 0 == (Ae | 0)) ? (ie = Ke & 4096, (ff = 0 == (ie | 0)) ? (Oe = Ke & 8192, (ne = 0 == (Oe | 0)) ? (ze = Ke & 16384, (vf = 0 == (ze | 0)) ? (lf = Ke & 2048, (Xe = 0 == (lf | 0)) ? (Be = Ke >>> 10, ue = hf = Be & 32) : ue = 2) : ue = 16) : ue = 8) : ue = 4) : ue = 1;
                    af = HEAP32[Q >> 2];
                    zf = (ue | 0) == (af | 0);
                    do
                        if (zf) b = 151;
                        else {
                            uf = ue & 29;
                            ve = 0 == (uf | 0);
                            if (!ve && (If = af & 805336541, Df = 0 == (If | 0), !Df)) {
                                b = 151;
                                break
                            }
                            Ef = ue & 2;
                            (Gf = 0 == (Ef | 0)) ? of = c: (Lf = af & 133122, (pf = 0 == (Lf | 0)) ? of = c : b = 151)
                        }
                    while (0);
                    if (151 == b)
                        if (bf = _jtmaxtype(a, ue, af), Bf = (bf | 0) == (af | 0)) of = c;
                        else {
                            Pf = HEAP32[x >> 2];
                            HEAP32[x >>
                                2] = 0;
                            Ye = _jtccvt(a, bf, c, l);
                            HEAP32[x >> 2] = Pf;
                            if (Hf = 0 == Ye << 24 >> 24) return jf = a + 4408, Ve = Le = mf = HEAP32[jf >> 2], df = HEAP32[Ve >> 2], wf = df + 12, Jf = Yf = Le + wf, Qf = HEAP32[Jf >> 2], Sf = Qf + 20, Mf = HEAP32[Sf >> 2], oe = ee = Qf, rf = HEAP32[oe >> 2], Ff = ee + rf, _jtjsigstr(a, 3, Mf, Ff), w = 0, STACKTOP = e, w;
                            xf = HEAP32[l >> 2];
                            if (Pe = 0 == (xf | 0)) return w = 0, STACKTOP = e, w;
                            of = xf
                        }
                    qf = _jtioev(a, f, d);
                    yf = _jtindexofsub(a, f, rd, of);
                    if (Nf = 0 == (yf | 0)) return w = 0, STACKTOP = e, w;
                    Zf = yf;
                    tg = HEAP32[Zf >> 2];
                    Ze = _jtva2(a, re, of, 61);
                    if (gf = 0 == (Ze | 0)) return w = 0, STACKTOP = e, w;
                    Kf = ef = Ze;
                    bg =
                        HEAP32[Kf >> 2];
                    lg = of + 20;
                    Rf = HEAP32[lg >> 2];
                    Ug = 0 < (Rf | 0);
                    if (!Ug) return w = yf, STACKTOP = e, w;
                    Vf = yf;
                    Lg = hg = Jg = Vf + tg;
                    for ($f = 0;;)
                        if (ah = $f + bg, nh = ef + ah, dh = HEAP8[nh], (mg = 0 == dh << 24 >> 24) ? (yh = HEAP32[Lg >> 2], (Bg = (Re | 0) > (yh | 0)) ? (ng = Yd + (yh << 2), ig = Ng = HEAP32[ng >> 2]) : ig = ce) : ig = qf, HEAP32[Lg >> 2] = ig, Ch = Lg + 4, Dg = $f + 1, Vg = (Dg | 0) < (Rf | 0)) Lg = Ch, $f = Dg;
                        else {
                            w = yf;
                            break
                        }
                    STACKTOP = e;
                    return w
                }
                pg = HEAP32[S >> 2];
                zg = pg & 64512;
                (Pg = 0 == (zg | 0)) ? (cg = pg, dg = 0) : (qg = pg & 1024, (vg = 0 == (qg | 0)) ? (bh = pg & 4096, (Zg = 0 == (bh | 0)) ? (wg = pg & 8192, (vh = 0 == (wg | 0)) ? (Kh = pg & 16384, ($g = 0 == (Kh | 0)) ? (Ag = pg & 2048, (Lh = 0 == (Ag | 0)) ? (xg = pg >>> 10, Eg = Mg = xg & 32) : Eg = 2) : Eg = 16) : Eg = 8) : Eg = 4) : Eg = 1, Sg = rg = d, jg = HEAP32[Sg >> 2], Of = Uh = rg + jg, cg = Eg, dg = Of);
                Tg = HEAP32[Q >> 2];
                qi = Tg & 1024;
                (eg = 0 == (qi | 0)) ? (gi = Tg & 4096, (kg = 0 == (gi | 0)) ? (Wg = Tg & 8192, (wi = 0 == (Wg | 0)) ? (zh = Tg & 16384, (Wf = 0 == (zh | 0)) ? (di = Tg & 2048, (ch = 0 == (di | 0)) ? (Mh = Tg >>> 10, Qg = Fg = Mh & 32) : Qg = 2) : Qg = 16) : Qg = 8) : Qg = 4) : Qg = 1;
                Vh = Rg = c;
                Gg = HEAP32[Vh >> 2];
                eh = Rg + Gg;
                kh = (cg | 0) == (Qg | 0);
                do
                    if (kh) fh = 1, b = 74;
                    else {
                        Wh = cg & 805336541;
                        qh = 0 == (Wh | 0);
                        if (!qh && (og = Qg & 29, Og = 0 == (og | 0), !Og)) {
                            fh = 1;
                            b =
                                74;
                            break
                        }
                        Kg = cg & 133122;
                        (Ih = 0 == (Kg | 0)) ? wh = ai = 0: (Xh = Qg >>> 1, Nh = Xh & 255, Jh = Nh & 1, (lj = 0 == Jh << 24 >> 24) ? wh = ai = 0 : (fh = Jh, b = 74))
                    }
                while (0);
                74 == b && (ai = gh = _jtmaxtype(a, cg, Qg), wh = fh);
                rh = c + 24;
                Ph = HEAP32[rh >> 2];
                hi = _jtga(a, 4096, 1, Ph, V);
                if (sh = 0 == (hi | 0)) return w = 0, STACKTOP = e, w;
                Yi = fg = hi;
                mj = HEAP32[Yi >> 2];
                xi = fg + mj;
                Hi = eh;
                Ii = HEAP32[Hi >> 2];
                lh = Ii + Gg;
                vj = yg = Rg + lh;
                Ji = xi;
                Xj = vj - Ji;
                yi = xi;
                HEAP32[yi >> 2] = Xj;
                hh = Xj + mj;
                Aj = fg + hh;
                if (ih = 0 == (Aj | 0)) return w = 0, STACKTOP = e, w;
                Hj = Gg + 8;
                ni = zi = Rg + Hj;
                ti = HEAP32[ni >> 2];
                Cg = ti + Gg;
                th = Ah = Rg + Cg;
                oh = th - Ji;
                Hg = mj +
                    8;
                ui = bi = fg + Hg;
                HEAP32[ui >> 2] = oh;
                gj = oh + mj;
                rj = fg + gj;
                if (Ki = 0 == (rj | 0)) return w = 0, STACKTOP = e, w;
                Pj = Gg + 4;
                ii = Zi = Rg + Pj;
                mh = HEAP32[ii >> 2];
                ji = mh + Gg;
                Qh = vi = Rg + ji;
                Ij = 0 == wh << 24 >> 24;
                ik = (ai | 0) == (Qg | 0);
                if (hj = Ij | ik) Xg = Gg + 12, ph = Li = Rg + Xg, al = HEAP32[ph >> 2], oi = al + Gg, ki = ek = Yh = Rg + oi, ci = Qh;
                else {
                    Rh = HEAP32[x >> 2];
                    HEAP32[x >> 2] = 0;
                    Bj = _jtccvt(a, ai, Qh, q);
                    HEAP32[x >> 2] = Rh;
                    if (wj = 0 == Bj << 24 >> 24) return Cj = a + 4408, Qj = Ri = Qi = HEAP32[Cj >> 2], Dh = HEAP32[Qj >> 2], Vk = Dh + 12, Dj = Sh = Ri + Vk, xj = HEAP32[Dj >> 2], Eh = xj + 20, Rj = HEAP32[Eh >> 2], Vi = Ai = xj, Yg = HEAP32[Vi >> 2],
                        ri = Ai + Yg, _jtjsigstr(a, 3, Rj, ri), w = 0, STACKTOP = e, w;
                    Fh = HEAP32[q >> 2];
                    if (fk = 0 == (Fh | 0)) return w = 0, STACKTOP = e, w;
                    Ei = Gg + 12;
                    jk = Nk = Rg + Ei;
                    qk = HEAP32[jk >> 2];
                    nj = qk + Gg;
                    yj = pi = Rg + nj;
                    HEAP32[x >> 2] = 0;
                    Ig = _jtccvt(a, ai, yj, p);
                    HEAP32[x >> 2] = Rh;
                    if (Th = 0 == Ig << 24 >> 24) return ij = a + 4408, $i = Yj = Ej = HEAP32[ij >> 2], Ik = HEAP32[$i >> 2], zk = Ik + 12, Fj = sj = Yj + zk, Jj = HEAP32[Fj >> 2], Wk = Jj + 20, Fi = HEAP32[Wk >> 2], Ak = jj = Jj, jl = HEAP32[Ak >> 2], Wi = jj + jl, _jtjsigstr(a, 3, Fi, Wi), w = 0, STACKTOP = e, w;
                    tk = HEAP32[p >> 2];
                    if (ei = 0 == (tk | 0)) return w = 0, STACKTOP = e, w;
                    ki = tk;
                    ci = Fh
                }
                Bk =
                    0 == (dg | 0);
                do
                    if (Bk) {
                        zj = (ai | 0) == (cg | 0);
                        if (kj = Ij | zj) Bi = d;
                        else {
                            Ck = HEAP32[x >> 2];
                            HEAP32[x >> 2] = 0;
                            ol = _jtccvt(a, ai, d, k);
                            HEAP32[x >> 2] = Ck;
                            if (Ci = 0 == ol << 24 >> 24) return Sj = a + 4408, Tj = Zj = Kj = HEAP32[Sj >> 2], bl = HEAP32[Tj >> 2], Jk = bl + 12, fi = Ui = Zj + Jk, xh = HEAP32[fi >> 2], oj = xh + 20, Dk = HEAP32[oj >> 2], cl = gk = xh, uk = HEAP32[cl >> 2], sg = gk + uk, _jtjsigstr(a, 3, Dk, sg), w = 0, STACKTOP = e, w;
                            Lj = HEAP32[k >> 2];
                            if (ul = 0 == (Lj | 0)) return w = 0, STACKTOP = e, w;
                            Bi = Lj
                        }
                        tf = pj = _jtindexofsub(a, f, Bi, ci);
                        Xi = tf - Ji;
                        $j = mj + 4;
                        gg = Si = fg + $j;
                        HEAP32[gg >> 2] = Xi;
                        Kk = Xi + mj;
                        Gh = fg + Kk;
                        if (ag =
                            0 == (Gh | 0)) return w = 0, STACKTOP = e, w;
                        Hh = jh = _jtindexofsub(a, f, Bi, ki);
                        Af = Hh - Ji;
                        Mi = mj + 12;
                        si = kl = fg + Mi;
                        HEAP32[si >> 2] = Af;
                        Ok = Af + mj;
                        Zh = fg + Ok;
                        if (dl = 0 == (Zh | 0)) return w = 0, STACKTOP = e, w
                    } else {
                        Lk = dg + 8;
                        li = HEAP32[Lk >> 2];
                        Uj = dg;
                        Di = fm = Uj + li;
                        Mk = HEAP32[Di >> 2];
                        qj = Mk + li;
                        vl = Pk = Uj + qj;
                        Mj = dg + 4;
                        ak = HEAP32[Mj >> 2];
                        Jl = mi = Uj + ak;
                        Gi = (ai | 0) == (cg | 0);
                        if (Nj = Ij | Gi) Oh = dg + 12, fl = HEAP32[Oh >> 2], bk = vk = ll = Uj + fl, Vj = Jl;
                        else {
                            ck = HEAP32[x >> 2];
                            HEAP32[x >> 2] = 0;
                            ml = _jtccvt(a, ai, Jl, n);
                            HEAP32[x >> 2] = ck;
                            if (rk = 0 == ml << 24 >> 24) return pl = a + 4408, wl = Qk = Kl = HEAP32[pl >>
                                2], Ek = HEAP32[wl >> 2], sk = Ek + 12, aj = Bl = Qk + sk, kk = HEAP32[aj >> 2], Ni = kk + 20, Oi = HEAP32[Ni >> 2], mk = lk = kk, nk = HEAP32[mk >> 2], Fl = lk + nk, _jtjsigstr(a, 3, Oi, Fl), w = 0, STACKTOP = e, w;
                            Xk = HEAP32[n >> 2];
                            if (bj = 0 == (Xk | 0)) return w = 0, STACKTOP = e, w;
                            Ll = dg + 12;
                            $h = HEAP32[Ll >> 2];
                            Bh = gl = Uj + $h;
                            HEAP32[x >> 2] = 0;
                            cj = _jtccvt(a, ai, Bh, m);
                            HEAP32[x >> 2] = ck;
                            if (Fk = 0 == cj << 24 >> 24) return Rk = a + 4408, Sk = ql = dj = HEAP32[Rk >> 2], ej = HEAP32[Sk >> 2], xl = ej + 12, Gl = dk = ql + xl, hk = HEAP32[Gl >> 2], nl = hk + 20, Yk = HEAP32[nl >> 2], Wj = ok = hk, Rl = HEAP32[Wj >> 2], pk = ok + Rl, _jtjsigstr(a, 3, Yk, pk),
                                w = 0, STACKTOP = e, w;
                            Vl = HEAP32[m >> 2];
                            if (rl = 0 == (Vl | 0)) return w = 0, STACKTOP = e, w;
                            bk = Vl;
                            Vj = Xk
                        }
                        Zk = li + 20;
                        Cl = Gj = Uj + Zk;
                        Gk = HEAP32[Cl >> 2];
                        if (gm = 0 == (Gk | 0)) {
                            hl = _jtravel(a, bk);
                            if (sl = 0 == (hl | 0)) return w = 0, STACKTOP = e, w;
                            Xf = hl
                        } else Xf = bk;
                        mm = Xf + 20;
                        $k = HEAP32[mm >> 2];
                        Dl = HEAP32[N >> 2];
                        tl = _jtioev(a, f, d);
                        bm = _jtequ(a, Vj, ci);
                        Ti = 0 == bm << 24 >> 24;
                        do
                            if (Ti) {
                                ug = _jtindexofsub(a, f, Xf, ci);
                                Tf = 0 == (ug | 0);
                                a: do
                                    if (Tf) uh = 0;
                                    else {
                                        Uf = ug + 12;
                                        tj = HEAP32[Uf >> 2];
                                        uj = tj & 4;
                                        Sl = 0 == (uj | 0);
                                        do
                                            if (Sl)
                                                if (il = HEAP32[x >> 2], HEAP32[x >> 2] = 0, Wl = _jtccvt(a, 4, ug, e), HEAP32[x >>
                                                        2] = il, yn = 0 == Wl << 24 >> 24) {
                                                    im = a + 4408;
                                                    Xl = zl = Im = HEAP32[im >> 2];
                                                    vm = HEAP32[Xl >> 2];
                                                    Tl = vm + 12;
                                                    kn = Ml = zl + Tl;
                                                    nm = HEAP32[kn >> 2];
                                                    Fn = nm + 20;
                                                    Nl = HEAP32[Fn >> 2];
                                                    Pm = Gn = nm;
                                                    Hl = HEAP32[Pm >> 2];
                                                    Op = Gn + Hl;
                                                    _jtjsigstr(a, 3, Nl, Op);
                                                    uh = 0;
                                                    break a
                                                } else if (Hn = HEAP32[e >> 2], uo = 0 == (Hn | 0)) {
                                            uh = 0;
                                            break a
                                        } else Ol = Hn;
                                        else Ol = ug;
                                        while (0);
                                        Do = Ol + 24;
                                        Xn = HEAP32[Do >> 2];
                                        (io = 0 == (Xn | 0)) ? (qm = ln = Ol, el = HEAP32[qm >> 2], mn = Il = ln + el, uh = $m = HEAP32[mn >> 2]) : (Jm = a + 4408, Am = zm = om = HEAP32[Jm >> 2], Eo = HEAP32[Am >> 2], jo = Eo + 56, Fo = hm = zm + jo, ko = HEAP32[Fo >> 2], pm = ko + 20, Bm = HEAP32[pm >>
                                            2], Cm = Km = ko, rm = HEAP32[Cm >> 2], Lm = Km + rm, _jtjsigstr(a, 14, Bm, Lm), uh = 0)
                                    }
                                while (0);
                                Tm = a + 204545;
                                Qm = HEAP8[Tm];
                                an = 0 == Qm << 24 >> 24;
                                if (!an) return w = 0, STACKTOP = e, w;
                                wk = HEAP32[Cl >> 2];
                                (Go = 0 == (wk | 0)) ? nn = uh: (on = ($k | 0) > (uh | 0)) ? (cm = vl + (uh << 2), nn = In = HEAP32[cm >> 2]) : nn = Dl;
                                bp = _jtga(a, 4, 1, 0, 0);
                                (Dp = 0 == (bp | 0)) ? lo = 0: (cn = bn = bp, Um = HEAP32[cn >> 2], Yn = Ro = bn + Um, HEAP32[Yn >> 2] = nn, lo = Yl = bp);
                                pn = lo - Ji;
                                Hk = mj + 4;
                                Ho = vo = fg + Hk;
                                HEAP32[Ho >> 2] = pn;
                                Pp = pn + mj;
                                vp = fg + Pp;
                                if (mo = 0 == (vp | 0)) return w = 0, STACKTOP = e, w
                            } else if (Io = _jtga(a, 4, 1, 0, 0), (hp = 0 == (Io | 0)) ?
                            Vm = 0 : (Zn = sm = Io, Oj = HEAP32[Zn >> 2], Yp = Mm = sm + Oj, HEAP32[Yp >> 2] = tl, Vm = Tq = Io), Dm = Vm - Ji, Zl = mj + 4, Nm = dn = fg + Zl, HEAP32[Nm >> 2] = Dm, Rm = Dm + mj, jm = fg + Rm, Ep = 0 == (jm | 0)) return w = 0, STACKTOP = e, w; while (0);
                        cp = _jtindexofsub(a, f, Xf, ki);
                        if (So = 0 == (cp | 0)) return w = 0, STACKTOP = e, w;
                        Jn = Jo = cp;
                        Ko = HEAP32[Jn >> 2];
                        Em = $n = Jo + Ko;
                        dm = HEAP32[Cl >> 2];
                        (To = 0 == (dm | 0)) ? (Kn = dg, El = HEAP32[Kn >> 2], rq = El + 20, Bq = Zp = Uj + rq, zn = HEAP32[Bq >> 2], (wp = 0 == (zn | 0)) || (b = 119)) : b = 119;
                        do
                            if (119 == b) {
                                no = ki + 20;
                                ip = HEAP32[no >> 2];
                                if (Er = 0 < (ip | 0)) {
                                    Lo = Em;
                                    for (sq = 0;;)
                                        if (An = HEAP32[Lo >>
                                                2], (jp = ($k | 0) > (An | 0)) ? (Mo = vl + (An << 2), kp = Ln = HEAP32[Mo >> 2]) : kp = Dl, en = Lo + 4, HEAP32[Lo >> 2] = kp, Bn = sq + 1, Mn = (Bn | 0) < (ip | 0)) Lo = en, sq = Bn;
                                        else break
                                }
                                if (gq = (tl | 0) < (Dl | 0)) {
                                    Nn = _jtva2(a, Vj, ki, 61);
                                    if (Hq = 0 == (Nn | 0)) return w = 0, STACKTOP = e, w;
                                    wo = dp = Nn;
                                    Fp = HEAP32[wo >> 2];
                                    fn = HEAP32[no >> 2];
                                    if (On = 0 < (fn | 0)) {
                                        ao = HEAP32[Jn >> 2];
                                        tm = gn = Qp = Jo + ao;
                                        for (um = 0;;)
                                            if (xo = um + Fp, No = dp + xo, Gp = HEAP8[No], ($l = 0 == Gp << 24 >> 24) || (HEAP32[tm >> 2] = tl), lp = tm + 4, km = um + 1, am = (km | 0) < (fn | 0)) tm = lp, um = km;
                                            else break
                                    }
                                }
                            }
                        while (0);
                        mp = cp;
                        Fm = mp - Ji;
                        Ar = mj + 12;
                        iq = hq = fg + Ar;
                        HEAP32[iq >>
                            2] = Fm;
                        Hp = Fm + mj;
                        hn = fg + Hp;
                        if (Pn = 0 == (hn | 0)) return w = 0, STACKTOP = e, w
                    }
                while (0);
                w = hi;
                STACKTOP = e;
                return w
            }
            Xd = fe ^ 1;
            qd = (C | 0) == (D | 0);
            Od = qd & Xd;
            if (!Od) return w = Mc = _jtsprank2(a, d, c, 0, B, D, 1316), STACKTOP = e, w;
            Dd = Zd ? 2 : 0;
            Td = P & 64512;
            le = 0 != (Td | 0);
            me = le & 1;
            wd = me | Dd;
            if (1 == (wd | 0)) return Ie = _jtindexofxx(a, f, d, c), xe = 0 == (Ie | 0), xe || (_jttraverse(a, Ie, 654), ye = Ie + 16, Fe = HEAP32[ye >> 2], nf = Fe + 1, HEAP32[ye >> 2] = nf), _jttpop(a, s), w = Je = _jttpush(a, Ie), STACKTOP = e, w;
            if (2 == (wd | 0)) return Id = _jtindexofxx(a, f, d, c), Qe = 0 == (Id | 0), Qe || (_jttraverse(a,
                Id, 654), sd = Id + 16, ge = HEAP32[sd >> 2], ud = ge + 1, HEAP32[sd >> 2] = ud), _jttpop(a, s), w = md = _jttpush(a, Id), STACKTOP = e, w;
            if (3 == (wd | 0)) return de = _jtindexofss(a, f, d, c), ae = 0 == (de | 0), ae || (_jttraverse(a, de, 654), Dc = de + 16, Nc = HEAP32[Dc >> 2], yd = Nc + 1, HEAP32[Dc >> 2] = yd), _jttpop(a, s), w = jd = _jttpush(a, de), STACKTOP = e, w
        }
    while (0);
    yo = 0 != (B | 0);
    a: do
        if (yo) {
            np = d + 28 + (G << 2);
            qn = HEAP32[np >> 2];
            tq = B - 1;
            rn = G + 1;
            $p = 0 < (tq | 0);
            do
                if ($p) {
                    Uq = 1;
                    for (Rp = 0;;)
                        if (Cq = rn + Rp, sn = d + 28 + (Cq << 2), Qn = HEAP32[sn >> 2], uq = Qn | 0, Iq = Uq * uq, Uo = Rp + 1, Rn = (Uo | 0) < (tq | 0)) Uq = Iq, Rp =
                            Uo;
                        else break;
                    if (Vo = 2147483647 < Iq) {
                        Ip = a + 4408;
                        Pi = Cn = ep = HEAP32[Ip >> 2];
                        xk = HEAP32[Pi >> 2];
                        Tk = xk + 40;
                        yk = yl = Cn + Tk;
                        tn = HEAP32[yk >> 2];
                        lm = tn + 20;
                        Tn = HEAP32[lm >> 2];
                        Dn = vq = tn;
                        oo = HEAP32[Dn >> 2];
                        Wo = vq + oo;
                        _jtjsigstr(a, 10, Tn, Wo);
                        wm = 0;
                        Pl = qn;
                        break a
                    } else Sn = Iq
                } else Sn = 1;
            while (0);
            wm = Sp = Sn & -1;
            Pl = qn
        } else Pl = wm = 1;
    while (0);
    Vq = 0 < (O | 0);
    do
        if (Vq) {
            Tp = 1;
            for (Oo = 0;;)
                if (fp = Z + (Oo << 2), jq = HEAP32[fp >> 2], un = jq | 0, Ul = Tp * un, op = Oo + 1, rr = (op | 0) < (O | 0)) Tp = Ul, Oo = op;
                else break;
                (Up = 2147483647 < Ul) ? (Po = a + 4408, aq = Jq = Un = HEAP32[Po >> 2], xp = HEAP32[aq >> 2], Gm =
                    xp + 40, co = kq = Jq + Gm, pp = HEAP32[co >> 2], En = pp + 20, Kq = HEAP32[En >> 2], dr = eo = pp, Ql = HEAP32[dr >> 2], Wq = eo + Ql, _jtjsigstr(a, 10, Kq, Wq), kr = 0) : (bo = Ul, b = 185)
        } else bo = 1, b = 185;
    while (0);
    185 == b && (Xo = bo & -1, kr = yp = Xo | 0);
    Jp = c + 28 + (K << 2);
    qp = 0 < (aa | 0);
    do
        if (qp) {
            Yo = 1;
            for (Wm = 0;;)
                if (Vn = K + Wm, Vp = c + 28 + (Vn << 2), Zo = HEAP32[Vp >> 2], lq = Zo | 0, Kp = Yo * lq, sr = Wm + 1, Lp = (sr | 0) < (aa | 0)) Yo = Kp, Wm = sr;
                else break;
                (mq = 2147483647 < Kp) ? (fo = a + 4408, nq = rp = Br = HEAP32[fo >> 2], Xq = HEAP32[nq >> 2], Yr = Xq + 40, Cr = Dq = rp + Yr, lr = HEAP32[Cr >> 2], tr = lr + 20, wq = HEAP32[tr >> 2], oq = Lq = lr, er =
                    HEAP32[oq >> 2], bq = Lq + er, _jtjsigstr(a, 10, wq, bq), mr = 0) : (zo = Kp, b = 190)
        } else zo = 1, b = 190;
    while (0);
    190 == b && (Yq = zo & -1, mr = po = Yq | 0);
    qo = kr * mr;
    2147483647 < qo ? (fr = a + 4408, $o = HEAP32[fr >> 2], Xm = HEAP32[$o >> 2], gp = Xm + 40, go = $o + gp, Ym = HEAP32[go >> 2], ro = Ym + 20, ap = HEAP32[ro >> 2], ho = HEAP32[Ym >> 2], Zm = Ym + ho, _jtjsigstr(a, 10, ap, Zm), Ao = 0) : Ao = Wn = qo & -1;
    so = a + 204545;
    if (0 != HEAP8[so] << 24 >> 24) return w = 0, STACKTOP = e, w;
    if (u) fj = T;
    else if (Mq = _jtmaxtype(a, T, P), sp = HEAP8[so], tp = 0 == sp << 24 >> 24) fj = Mq;
    else return w = 0, STACKTOP = e, w;
    Zq = 32 == (fj | 0) ? 4 : 64 ==
        (fj | 0) ? 4 : 128 == (fj | 0) ? 8 : 65536 == (fj | 0) ? 4 : 268435456 == (fj | 0) ? 12 : 536870912 == (fj | 0) ? 24 : 2 == (fj | 0) | 2097152 == (fj | 0) | 33554432 == (fj | 0) ? 1 : 131072 == (fj | 0) ? 2 : 4 == (fj | 0) | 67108864 == (fj | 0) | 134217728 == (fj | 0) | 4194304 == (fj | 0) | 8388608 == (fj | 0) ? 4 : 1 == (fj | 0) | 8 == (fj | 0) | 16 == (fj | 0) ? fj : 1024 == (fj | 0) | 4096 == (fj | 0) | 8192 == (fj | 0) | 16384 == (fj | 0) | 2048 == (fj | 0) | 32768 == (fj | 0) ? 16 : 262144 == (fj | 0) | 524288 == (fj | 0) | 1048576 == (fj | 0) ? 44 : 16777216 == (fj | 0) ? 12 : -1;
    Uk = Math_imul(Zq, wm) | 0;
    zp = (T | 0) == (P | 0);
    do
        if (zp) em = 1;
        else {
            to = T & 805336541;
            vn = 0 == (to | 0);
            if (!vn &&
                (Hm = P & 805336541, xm = 0 == (Hm | 0), !xm)) {
                em = 1;
                break
            }
            wn = T & 133122;
            (Ap = 0 == (wn | 0)) ? em = 0: (ym = P & 133122, jn = 0 != (ym | 0), em = Om = jn & 1)
        }
    while (0);
    Mp = a + 204960;
    HEAP32[Mp >> 2] = 0;
    xn = 0 < (G | 0);
    do
        if (xn) {
            Bo = 1;
            for (Zr = 0;;)
                if (Ur = d + 28 + (Zr << 2), Qo = HEAP32[Ur >> 2], Wp = Qo | 0, xq = Bo * Wp, Fr = Zr + 1, Eq = (Fr | 0) < (G | 0)) Bo = xq, Zr = Fr;
                else break;
                (yq = 2147483647 < xq) ? (Lr = a + 4408, is = cq = ur = HEAP32[Lr >> 2], Fq = HEAP32[is >> 2], nr = Fq + 40, Gr = Bp = cq + nr, Gq = HEAP32[Gr >> 2], pq = Gq + 20, Mr = HEAP32[pq >> 2], vr = $q = Gq, Nq = HEAP32[vr >> 2], js = $q + Nq, _jtjsigstr(a, 10, Mr, js), Np = Hr = 0) : (qs = xq, b = 220)
        } else qs =
            1, b = 220;
    while (0);
    220 == b && (qq = qs & -1, (Oq = 0 == (qq | 0)) ? Np = Hr = 0 : (ar = d + 20, zq = HEAP32[ar >> 2], wr = Math_imul(zq, Zq) | 0, Hr = br = (wr | 0) / (qq | 0) & -1, Np = qq));
    Al = 0 < (K | 0);
    do
        if (Al) {
            Co = 1;
            for (dq = 0;;)
                if (Aq = c + 28 + (dq << 2), Vr = HEAP32[Aq >> 2], eq = Vr | 0, Xp = Co * eq, fq = dq + 1, $r = (fq | 0) < (K | 0)) Co = Xp, dq = fq;
                else break;
                (Ir = 2147483647 < Xp) ? (Rr = a + 4408, Es = Or = Pq = HEAP32[Rr >> 2], ks = HEAP32[Es >> 2], gr = ks + 40, dt = ls = Or + gr, ms = HEAP32[dt >> 2], Qq = ms + 20, as = HEAP32[Qq >> 2], Wr = Jr = ms, bs = HEAP32[Wr >> 2], nt = Jr + bs, _jtjsigstr(a, 10, as, nt), or = Rq = 0) : (Nr = Xp, b = 226)
        } else Nr = 1, b =
            226;
    while (0);
    226 == b && (hr = Nr & -1, (Dr = 0 == (hr | 0)) ? or = Rq = 0 : (Fs = c + 20, Kr = HEAP32[Fs >> 2], As = Math_imul(Kr, Zq) | 0, Rq = Gs = (As | 0) / (hr | 0) & -1, or = hr));
    pr = 1 < (Np | 0) ? ir = (Rq | 0) / (Uk | 0) & -1 : Ao;
    Xr = 1 < (or | 0) ? Rq : 0;
    Vs = 0 != (em | 0);
    Bs = Vs ^ 1;
    Ws = (fj | 0) == (T | 0) | Bs;
    do
        if (Ws)
            if (rs = fj & 24, Js = 0 == (rs | 0)) Cp = d;
            else if (Sr = HEAP32[S >> 2], cs = d + 20, ss = HEAP32[cs >> 2], cr = 0 == (ss | 0)) Cp = d;
    else if (jr = Sr & 24, et = 0 == (jr | 0)) Cp = d;
    else if (Wt = Sr >>> 4, ku = Wt & 1, Xt = ss << ku, ft = HEAP32[31130], Ps = HEAP32[31131], Xs = 0 < (Xt | 0)) {
        Cs = d;
        Dt = HEAP32[Cs >> 2];
        vt = d;
        Ks = ns = ot = vt + Dt;
        for (Ds = 0;;) {
            Tr =
                HEAP32[Ks >> 2];
            if (Ys = (ft | 0) == (Tr | 0))
                if (lu = Ks + 4, Yt = HEAP32[lu >> 2], Nt = (Ps | 0) == (Yt | 0)) HEAP32[lu >> 2] = 0, HEAP32[Ks >> 2] = 0;
            xt = Ks + 8;
            xr = Ds + 1;
            if (qr = (xr | 0) < (Xt | 0)) Ks = xt, Ds = xr;
            else {
                Cp = d;
                break
            }
        }
    } else Cp = d;
    else {
        Zs = fj & 64;
        (Et = 0 == (Zs | 0)) ? (Ku = HEAP32[x >> 2], HEAP32[x >> 2] = 0, gt = _jtccvt(a, fj, d, j), HEAP32[x >> 2] = Ku, (Qs = 0 == gt << 24 >> 24) ? (xs = a + 4408, Zt = $s = pt = HEAP32[xs >> 2], qt = HEAP32[Zt >> 2], ds = qt + 12, ys = yt = $s + ds, Lu = HEAP32[ys >> 2], us = Lu + 20, at = HEAP32[us >> 2], Rs = zs = Lu, Pr = HEAP32[Rs >> 2], os = zs + Pr, _jtjsigstr(a, 3, at, os), $t = 0) : $t = Ls = HEAP32[j >> 2]) :
        (Ss = a + 205764, ht = HEAP32[Ss >> 2], HEAP32[Ss >> 2] = 3, wt = HEAP32[x >> 2], HEAP32[x >> 2] = 0, yu = _jtccvt(a, 64, d, i), HEAP32[x >> 2] = wt, (kv = 0 == yu << 24 >> 24) ? (Ft = a + 4408, rt = au = uv = HEAP32[Ft >> 2], mu = HEAP32[rt >> 2], vv = mu + 12, Mu = wv = au + vv, Sm = HEAP32[Mu >> 2], es = Sm + 20, vs = HEAP32[es >> 2], it = bu = Sm, Ot = HEAP32[it >> 2], qw = bu + Ot, _jtjsigstr(a, 3, vs, qw), zu = 0) : zu = zt = HEAP32[i >> 2], HEAP32[Ss >> 2] = ht, $t = zu);
        if (Gt = 0 == ($t | 0)) return w = 0, STACKTOP = e, w;
        Cp = $t
    }
    while (0);
    jt = (fj | 0) == (P | 0) | Bs;
    do
        if (jt)
            if (cu = fj & 24, nu = 0 == (cu | 0), Zu = (Cp | 0) == (c | 0), st = nu | Zu) kt = c;
            else if (ws =
        HEAP32[Q >> 2], lt = c + 20, xv = HEAP32[lt >> 2], qy = 0 == (xv | 0)) kt = c;
    else if (Pv = ws & 24, Nu = 0 == (Pv | 0)) kt = c;
    else if (Pt = ws >>> 4, cw = Pt & 1, ou = xv << cw, dw = HEAP32[31130], Ou = HEAP32[31131], Qv = 0 < (ou | 0)) {
        At = c;
        yv = HEAP32[At >> 2];
        zv = c;
        $u = Pu = lv = zv + yv;
        for (Av = 0;;) {
            Ms = HEAP32[$u >> 2];
            if (rw = (dw | 0) == (Ms | 0))
                if (Hs = $u + 4, du = HEAP32[Hs >> 2], mt = (Ou | 0) == (du | 0)) HEAP32[Hs >> 2] = 0, HEAP32[$u >> 2] = 0;
            Au = $u + 8;
            Bu = Av + 1;
            if (mv = (Bu | 0) < (ou | 0)) $u = Au, Av = Bu;
            else {
                kt = c;
                break
            }
        }
    } else kt = c;
    else {
        Bv = fj & 64;
        (sw = 0 == (Bv | 0)) ? (av = HEAP32[x >> 2], HEAP32[x >> 2] = 0, Rv = _jtccvt(a, fj, c, g),
            HEAP32[x >> 2] = av, (Qt = 0 == Rv << 24 >> 24) ? (pu = a + 4408, yr = bt = Ew = HEAP32[pu >> 2], Rt = HEAP32[yr >> 2], Cv = Rt + 12, qu = Ht = bt + Cv, ix = HEAP32[qu >> 2], Fw = ix + 20, ct = HEAP32[Fw >> 2], Dv = Sv = ix, Qu = HEAP32[Dv >> 2], Ru = Sv + Qu, _jtjsigstr(a, 3, ct, Ru), Bt = 0) : Bt = Is = HEAP32[g >> 2]) : (Tv = a + 205764, Ev = HEAP32[Tv >> 2], HEAP32[Tv >> 2] = 3, bv = HEAP32[x >> 2], HEAP32[x >> 2] = 0, It = _jtccvt(a, 64, c, h), HEAP32[x >> 2] = bv, (Jt = 0 == It << 24 >> 24) ? (gs = a + 4408, vx = Ts = Cu = HEAP32[gs >> 2], Fv = HEAP32[vx >> 2], Su = Fv + 12, Du = Tu = Ts + Su, Pw = HEAP32[Du >> 2], ru = Pw + 20, Qw = HEAP32[ru >> 2], wx = Kt = Pw, hs = HEAP32[wx >>
            2], up = Kt + hs, _jtjsigstr(a, 3, Qw, up), tw = 0) : tw = Ix = HEAP32[h >> 2], HEAP32[Tv >> 2] = Ev, Bt = tw);
        if (Us = 0 == (Bt | 0)) return w = 0, STACKTOP = e, w;
        kt = Bt
    }
    while (0);
    ts = Cp + 12;
    Sq = 0 != (HEAP32[ts >> 2] & 65540 | 0) & 4 == (Uk | 0);
    do
        if (Sq) {
            xx = Cp + 20;
            uw = HEAP32[xx >> 2];
            vw = Math_imul(uw, Zq) | 0;
            eu = (vw | 0) / 4 & -1;
            ew = Uv = Cp;
            fw = HEAP32[ew >> 2];
            Uu = Jx = Uv + fw;
            Vv = (vw | 0) / 8 & -1;
            su = Vv << 1;
            (nv = (su | 0) < (eu | 0)) ? (gw = fw + 4, fu = hw = Uv + gw, Gv = HEAP32[Uu >> 2], gu = fu, iw = Qr = Gv) : (cv = vw + 3, tu = (Hv = 7 > cv >>> 0) ? 0 : -2147483648, Vu = Hv ? 0 : 2147483647, gu = Uu, Qr = Vu, iw = tu);
            if (ww = 7 < (vw | 0)) {
                Ns = iw;
                uu = Qr;
                Lt = 0;
                for (St = gu;;)
                    if (Kx = St + 4, hu = HEAP32[St >> 2], Rw = St + 8, Wv = HEAP32[Kx >> 2], (Lx = (hu | 0) < (Wv | 0)) ? (Xv = (Iz = (hu | 0) < (uu | 0)) ? hu : uu, ov = (iu = (Ns | 0) < (Wv | 0)) ? Wv : Ns, Iv = Xv, pv = ov) : (tt = (Os = (Wv | 0) < (uu | 0)) ? Wv : uu, Sw = (Tt = (Ns | 0) < (hu | 0)) ? hu : Ns, Iv = tt, pv = Sw), jx = Lt + 1, yx = (jx | 0) < (Vv | 0)) Ns = pv, uu = Iv, Lt = jx, St = Rw;
                    else {
                        Mx = pv;
                        Wu = Iv;
                        break
                    }
            } else Mx = iw, Wu = Qr;
            jw = Mx - Wu;
            Tw = 0 > (jw | 0);
            ut = 2147483647 == (jw | 0);
            Dy = Tw | ut;
            xw = jw + 1;
            kx = Dy ? 0 : xw;
            (Ey = 0 == (kx | 0)) ? vu = 0: (HEAP32[Mp >> 2] = Wu, vu = kx)
        } else vu = 0;
    while (0);
    Jv = 1 == (Uk | 0);
    a: do
        if (Jv) Gw = fj & 1, Eu = kA = (dy = 0 != (Gw |
            0)) ? 2 : 256;
        else
    if (2 == (Uk | 0)) Vy = fj & 1, Eu = zx = (Wy = 0 != (Vy | 0)) ? 258 : 65536;
    else {
        4 == (Uk | 0) && (b = 283);
        do
            if (283 == b && (Xy = 0 == (vu | 0), !Xy && (Yy = vu | 0, Nx = (Uw = (Pl | 0) > (pr | 0)) ? Pl : pr, kw = Nx | 0, ey = 2.1 * kw, Fy = Yy < ey))) {
                Eu = vu;
                break a
            }
        while (0);
        fy = Pl << 1;
        yw = 0;
        for (Yv = 12544;;) {
            Kv = HEAP32[Yv >> 2];
            Zy = (fy | 0) > (Kv | 0);
            if (!Zy) {
                Eu = Kv;
                break a
            }
            Lv = Yv + 4;
            Hw = yw + 1;
            if (Xu = 23 > (Hw | 0)) yw = Hw, Yv = Lv;
            else break
        }
        Eu = Ox = HEAP32[Lv >> 2]
    }
    while (0);
    do
        if (u) Zv = (Cp | 0) == (kt | 0), Ut = t, Fu = Zv, b = 377;
        else {
            a: do switch (f | 0) {
                    case 4:
                        Vw = kt + 20;
                        Px = HEAP32[Vw >> 2];
                        Rx = (Qx = 1 > (C | 0)) ? 1 : C;
                        ry = _jtga(a, fj, Px, Rx, V);
                        if (Ax = 0 == (ry | 0)) w = 0;
                        else {
                            zr = ry;
                            break a
                        }
                        STACKTOP = e;
                        return w;
                    case 6:
                        qv = O + aa;
                        lx = _jtga(a, 1, Ao, qv, Z);
                        if (Sx = 0 == (lx | 0)) return w = 0, STACKTOP = e, w;
                        if (Tx = (v | 0) == (B | 0)) {
                            zr = lx;
                            break a
                        }
                        sy = Jz = lx + 28 + (O << 2);
                        gy = Jp;
                        Iw = aa << 2;
                        _memcpy(sy, gy, Iw) | 0;
                        zr = lx;
                        break;
                    case 2:
                        Ww = yo & 1;
                        dv = Ww ^ 1;
                        zw = aa + dv;
                        Mt = zw + O;
                        Ux = _jtga(a, 1, Ao, Mt, Z);
                        if (MA = 0 == (Ux | 0)) return w = 0, STACKTOP = e, w;
                        mx = (v | 0) == (B | 0);
                        mx || (Gy = Bx = Ux + 28 + (O << 2), Vx = Jp, rv = aa << 2, _memcpy(Gy, Vx, rv) | 0);
                        if (yo) {
                            zr = Ux;
                            break a
                        }
                        Cx = Ux + 24;
                        Hy = HEAP32[Cx >> 2];
                        lw = Hy - 1;
                        NA = Ux + 28 +
                            (lw << 2);
                        HEAP32[NA >> 2] = 1;
                        zr = Ux;
                        break;
                    case 5:
                        nx = (Gu = (Pl | 0) < (Eu | 0)) ? Pl : Eu;
                        ty = _jtga(a, 4, nx, 1, 0);
                        if (ox = 0 == (ty | 0)) w = 0;
                        else {
                            zr = ty;
                            break a
                        }
                        STACKTOP = e;
                        return w;
                    case 14:
                        Iy = _jtga(a, 4, pr, 1, 0);
                        if (Jw = 0 == (Iy | 0)) w = 0;
                        else {
                            zr = Iy;
                            break a
                        }
                        STACKTOP = e;
                        return w;
                    case 12:
                    case 13:
                        Aw = _jtga(a, 1, 1, 0, 0);
                        if (ev = 0 == (Aw | 0)) w = 0;
                        else {
                            zr = Aw;
                            break a
                        }
                        STACKTOP = e;
                        return w;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        Wx = _jtga(a, 4, 1, 0, 0);
                        if (Xx = 0 == (Wx | 0)) w = 0;
                        else {
                            zr = Wx;
                            break a
                        }
                        STACKTOP = e;
                        return w;
                    case 0:
                    case 1:
                        Xw = O + aa;
                        uy = _jtga(a, 4, Ao, Xw, Z);
                        if (hy = 0 ==
                            (uy | 0)) return w = 0, STACKTOP = e, w;
                        if (qz = (v | 0) == (B | 0)) {
                            zr = uy;
                            break a
                        }
                        lA = sv = uy + 28 + (O << 2);
                        vy = Jp;
                        px = aa << 2;
                        _memcpy(lA, vy, px) | 0;
                        zr = uy;
                        break;
                    case 3:
                        fv = (wy = (Pl | 0) < (Eu | 0)) ? Pl : Eu;
                        xy = Cp + 24;
                        Dx = HEAP32[xy >> 2];
                        (mw = 0 == (Dx | 0)) ? (Ex = 1, b = 301) : (qx = Cp + 28, gv = HEAP32[qx >> 2], (Kz = 0 == (gv | 0)) ? b = 303 : (Ex = gv, b = 301));
                        301 == b && (Ct = HEAP32[ts >> 2], Hu = Ct & 64512, (mA = 0 == (Hu | 0)) ? ($y = Cp + 20, nA = HEAP32[$y >> 2], az = Lz = (nA | 0) / (Ex | 0) & -1) : b = 303);
                        b: do
                            if (303 == b) {
                                OA = Dx - 1;
                                bz = 0 < (OA | 0);
                                do
                                    if (bz) {
                                        rz = 1;
                                        for (Jy = 0;;)
                                            if (Mz = Jy + 1, rx = Cp + 28 + (Mz << 2), Yw = HEAP32[rx >> 2],
                                                nw = Yw | 0, Iu = rz * nw, oA = (Mz | 0) < (OA | 0)) rz = Iu, Jy = Mz;
                                            else break;
                                        if (Ky = 2147483647 < Iu) {
                                            Nz = a + 4408;
                                            pA = Ly = Zx = HEAP32[Nz >> 2];
                                            PA = HEAP32[pA >> 2];
                                            Yu = PA + 40;
                                            Mv = Zw = Ly + Yu;
                                            QA = HEAP32[Mv >> 2];
                                            $v = QA + 20;
                                            sz = HEAP32[$v >> 2];
                                            My = Kw = QA;
                                            $x = HEAP32[My >> 2];
                                            qA = Kw + $x;
                                            _jtjsigstr(a, 10, sz, qA);
                                            az = 0;
                                            break b
                                        } else Yx = Iu
                                    } else Yx = 1;
                                while (0);
                                az = Fx = Yx & -1
                            }
                        while (0);
                        tz = fv | 0;
                        iy = az | 0;
                        ow = tz * iy;
                        ($w = 2147483647 < ow) ? (RA = a + 4408, cz = ND = kB = HEAP32[RA >> 2], dz = HEAP32[cz >> 2], Oz = dz + 40, ez = HC = ND + Oz, SA = HEAP32[ez >> 2], pw = SA + 20, rA = HEAP32[pw >> 2], Bw = hv = SA, iv = HEAP32[Bw >> 2], fz =
                            hv + iv, _jtjsigstr(a, 10, rA, fz), Pz = 0) : Pz = ax = ow & -1;
                        Qz = (iD = 1 > (C | 0)) ? 1 : C;
                        bx = _jtga(a, fj, Pz, Qz, V);
                        if (uz = 0 == (bx | 0)) return w = 0, STACKTOP = e, w;
                        OD = bx + 28;
                        HEAP32[OD >> 2] = fv;
                        zr = bx;
                        break a;
                    default:
                        zr = t
                }
                while (0);
                vz = 0 != (Pl | 0);lB = vz ^ 1;cx = 0 == (wm | 0);jy = cx | lB;gz = 0 == (Ao | 0);Ny = jy | gz;BB = Ny | Bs;a: do
                if (BB) switch (f | 0) {
                    case 12:
                        return IC = 0 != (wm | 0), jD = HEAP32[30648], JC = HEAP32[31058], w = PD = IC ? jD : JC, STACKTOP = e, w;
                    case 1:
                        return (eC = 0 == (zr | 0)) ? ky = 0 : (Rz = zr + 24, Sz = HEAP32[Rz >> 2], ly = _jtga(a, 4, Sz, 1, 0), (ay = 0 == (ly | 0)) ? ky = 0 : (Oy = kD = zr + 28, Tz = AE = ly,
                            by = HEAP32[Tz >> 2], Vt = AE + by, wz = Sz << 2, _memcpy(Vt, Oy, wz) | 0, ky = ly)), hz = _jtga(a, 4, 1, 0, 0), (Py = 0 == (hz | 0)) ? Cw = 0 : (Qy = cx << 31 >> 31, Dw = Qy + Pl, cy = iz = hz, mB = HEAP32[cy >> 2], Uz = fC = iz + mB, HEAP32[Uz >> 2] = Dw, Cw = hz), w = lD = _jtreshape(a, ky, Cw), STACKTOP = e, w;
                    case 3:
                        return gC = zr + 20, HEAP32[gC >> 2] = 0, xz = vz & 1, hC = zr + 28, HEAP32[hC >> 2] = xz, w = zr, STACKTOP = e, w;
                    case 4:
                        return vz ? (iC = zr + 28, HEAP32[iC >> 2] = 0, yz = zr + 20, HEAP32[yz >> 2] = 0) : (CB = nB = zr, QD = HEAP32[CB >> 2], dx = nB + QD, oB = aw = kt, Ry = HEAP32[oB >> 2], sA = aw + Ry, jz = kt + 20, DB = HEAP32[jz >> 2], my = Math_imul(DB, Zq) |
                            0, _memcpy(dx, sA, my) | 0), w = zr, STACKTOP = e, w;
                    case 6:
                        return (iF = 0 == (zr | 0)) ? pB = 0 : (tA = zr + 24, TA = HEAP32[tA >> 2], Gx = _jtga(a, 4, TA, 1, 0), (Sy = 0 == (Gx | 0)) ? pB = 0 : (Ju = UA = zr + 28, LC = KC = Gx, EB = HEAP32[LC >> 2], MC = KC + EB, uA = TA << 2, _memcpy(MC, Ju, uA) | 0, pB = Gx)), RD = cx | Vs, VA = vz & RD, NC = HEAP32[31058], mD = HEAP32[30648], zz = VA ? NC : mD, w = vA = _jtreshape(a, pB, zz), STACKTOP = e, w;
                    case 2:
                        return (cI = 0 == (zr | 0)) ? Vz = 0 : (Wz = zr + 24, Ty = HEAP32[Wz >> 2], Xz = _jtga(a, 4, Ty, 1, 0), (BE = 0 == (Xz | 0)) ? Vz = 0 : (Az = nD = zr + 28, oD = wA = Xz, OC = HEAP32[oD >> 2], ex = wA + OC, bw = Ty << 2, _memcpy(ex, Az,
                            bw) | 0, Vz = Xz)), Lw = _jtga(a, 4, 1, 0, 0), (jv = 0 == (Lw | 0)) ? wu = 0 : (sx = Yz = Lw, Zz = HEAP32[sx >> 2], $z = Bz = Yz + Zz, HEAP32[$z >> 2] = Pl, wu = Lw), Nv = HEAP32[31058], kz = _jttake(a, wu, Nv), w = xA = _jtreshape(a, Vz, kz), STACKTOP = e, w;
                    case 13:
                        return II = 0 == (pr | 0), yA = II | cx, Cz = HEAP32[31058], lz = HEAP32[30648], w = wH = yA ? Cz : lz, STACKTOP = e, w;
                    case 14:
                        if (!cx) return w = XF = HEAP32[31086], STACKTOP = e, w;
                        YF = pr - 1;
                        zA = _jtga(a, 4, pr, 1, 0);
                        if (SD = 0 == (zA | 0)) return w = 0, STACKTOP = e, w;
                        if (tv = 0 == (pr | 0)) return w = zA, STACKTOP = e, w;
                        FB = zA;
                        AA = HEAP32[FB >> 2];
                        Dz = zA;
                        yy = ny = Dz + AA;
                        Mw = -1;
                        for (ju = yy;;)
                            if (Nw = Mw + 1, WA = ju + 4, HEAP32[ju >> 2] = Nw, GB = (Nw | 0) == (YF | 0)) {
                                w = zA;
                                break
                            } else Mw = Nw, ju = WA;
                        STACKTOP = e;
                        return w;
                    case 0:
                        return (pD = 0 == (zr | 0)) ? aA = 0 : (qB = zr + 24, mz = HEAP32[qB >> 2], tx = _jtga(a, 4, mz, 1, 0), (bA = 0 == (tx | 0)) ? aA = 0 : (XA = Ez = zr + 28, cA = YA = tx, qD = HEAP32[cA >> 2], TD = YA + qD, rB = mz << 2, _memcpy(TD, XA, rB) | 0, aA = tx)), dA = _jtga(a, 4, 1, 0, 0), (LG = 0 == (dA | 0)) ? PC = 0 : (UD = (HB = 0 != (wm | 0)) ? Pl : 0, rD = jC = dA, ZA = HEAP32[rD >> 2], kC = ZF = jC + ZA, HEAP32[kC >> 2] = UD, PC = dA), w = MG = _jtreshape(a, aA, PC), STACKTOP = e, w;
                    case 10:
                        cx ? (IL = 1 > (pr | 0), lC = pr - 1, sD = NG =
                            IL ? 0 : lC) : sD = pr;
                        $F = _jtga(a, 4, 1, 0, 0);
                        if (dI = 0 == ($F | 0)) return w = 0, STACKTOP = e, w;
                        OG = jF = $F;
                        eI = HEAP32[OG >> 2];
                        uD = tD = jF + eI;
                        HEAP32[uD >> 2] = sD;
                        w = $F;
                        STACKTOP = e;
                        return w;
                    case 11:
                        VD = _jtga(a, 4, 1, 0, 0);
                        if (CE = 0 == (VD | 0)) return w = 0, STACKTOP = e, w;
                        mC = (WD = 0 != (wm | 0)) ? 0 : pr;
                        kF = IB = VD;
                        JB = HEAP32[kF >> 2];
                        DE = xH = IB + JB;
                        HEAP32[DE >> 2] = mC;
                        w = VD;
                        STACKTOP = e;
                        return w;
                    case 9:
                        cx ? vD = pr : (XD = 1 > (pr | 0), zy = pr - 1, vD = KB = XD ? 0 : zy);
                        BA = _jtga(a, 4, 1, 0, 0);
                        if (lF = 0 == (BA | 0)) return w = 0, STACKTOP = e, w;
                        nC = mF = BA;
                        $A = HEAP32[nC >> 2];
                        aG = wJ = mF + $A;
                        HEAP32[aG >> 2] = vD;
                        w = BA;
                        STACKTOP =
                            e;
                        return w;
                    case 5:
                        return JI = HEAP32[31140], EE = HEAP32[31086], w = nF = vz ? JI : EE, STACKTOP = e, w;
                    case 7:
                        aB = _jtga(a, 4, 1, 0, 0);
                        if (yH = 0 == (aB | 0)) return w = 0, STACKTOP = e, w;
                        bG = (wD = 0 != (wm | 0)) ? 0 : pr;
                        YD = cG = aB;
                        FE = HEAP32[YD >> 2];
                        pC = oC = cG + FE;
                        HEAP32[pC >> 2] = bG;
                        w = aB;
                        STACKTOP = e;
                        return w;
                    case 8:
                        dG = _jtga(a, 4, 1, 0, 0);
                        if (ZD = 0 == (dG | 0)) return w = 0, STACKTOP = e, w;
                        PG = (zH = 0 != (wm | 0)) ? pr : 0;
                        QG = fI = dG;
                        eG = HEAP32[QG >> 2];
                        nz = gI = fI + eG;
                        HEAP32[nz >> 2] = PG;
                        w = dG;
                        STACKTOP = e;
                        return w;
                    default:
                        break a
                }
                while (0);xD = (Cp | 0) == (kt | 0);xJ = xD ^ 1;KI = 1 == (B | 0);
            (LI = KI & xJ) ? (AH =
                1 == (or | 0), fG = (Np | 0) == (or | 0), (oF = AH | fG) ? (BH = Pl | 0, pF = wm | 0, yJ = BH * pF, RG = Ao | 0, CA = yJ * RG, GE = yJ + RG, QC = 13 * GE, (zJ = CA < QC) ? 6 == (f | 0) | 1 == (f | 0) | 0 == (f | 0) ? (qC = t, $D = 728, oy = zr) : (Ut = zr, Fu = xD, b = 377) : (Ut = zr, Fu = xD, b = 377)) : (Ut = zr, Fu = xD, b = 377)) : (Ut = zr, Fu = xD, b = 377)
        }
    while (0);
    a: do
        if (377 == b) {
            MI = a + 1152;
            rC = HEAPF64[MI >> 3];
            bB = 0 == rC;
            if (!bB && (sB = fj & 56, gG = 0 == (sB | 0), !gG)) {
                NI = 1 - rC;
                qF = 3.141592653589793 * NI;
                sC = 3.141592653589793 / NI;
                HEAPF64[tempDoublePtr >> 3] = qF;
                LB = HEAP32[tempDoublePtr >> 2];
                rF = HEAP32[tempDoublePtr + 4 >> 2];
                CH = LB & 0;
                yD = rF & -1;
                (hG =
                    0 == (CH | 0) & 1074340347 == (yD | 0)) ? (cB = sF = LB, tB = py = cB ^ 1413754136) : tB = 0;
                HEAPF64[tempDoublePtr >> 3] = sC;
                Ow = HEAP32[tempDoublePtr >> 2];
                SG = HEAP32[tempDoublePtr + 4 >> 2];
                hI = Ow & 0;
                TG = SG & -1;
                (OI = 0 == (hI | 0) & 1074340347 == (TG | 0)) ? (aE = MB = Ow, tF = aE ^ 1413754136, NB = UG = tB | tF) : NB = tB;
                if (PI = 0 == (NB | 0)) QI = -1;
                else {
                    for (bE = zD = NB; !(Uy = zD >>> 1, uF = Uy | bE, tC = 0 == (Uy | 0));) zD = Uy, bE = uF;
                    QI = cK = ~uF
                }
                cE = a + 1160;
                HEAP32[cE >> 2] = QI
            }
            dE = fj & 32;
            RC = 0 == (dE | 0);
            b: do
                if (RC)
                    if (iI = fj & 64, DA = 0 == (iI | 0))
                        if (AD = fj & 128, uC = 0 == (AD | 0))
                            if (Jv) EA = dK = (AJ = 2 > f >>> 0) ? 4 : 1, dB = 640;
                            else {
                                if (4 ==
                                    (Uk | 0)) b = 410;
                                else if (2 == (Uk | 0)) {
                                    EA = SC = (iG = 2 > f >>> 0) ? 4 : 1;
                                    dB = 642;
                                    break
                                }
                                do
                                    if (410 == b && (HE = fj & 8, jG = 0 == (HE | 0))) {
                                        vF = (Eu | 0) == (vu | 0);
                                        if (!vF) {
                                            EA = 4;
                                            dB = 24;
                                            break b
                                        }
                                        EA = fx = (BD = 2 > f >>> 0) ? 4 : 1;
                                        dB = 638;
                                        break b
                                    }
                                while (0);
                                bB ? DH = 680 : (IE = fj & 198663, (kG = 0 == (IE | 0)) ? (TC = 1 == (wm | 0), VG = fj & 8, JE = 0 != (VG | 0), DH = TC ? lG = JE ? 1860 : 2806 : WG = JE ? 582 : 670) : DH = 680);
                                b = 418
                            } else EA = 4, dB = 692;
            else EA = 4, dB = 662;
            else {
                do
                    if (bB) {
                        if (JL = 1 < (wm | 0)) {
                            qC = t;
                            $D = 110;
                            oy = Ut;
                            break a
                        }
                        CD = HEAP32[ts >> 2];
                        Ay = CD & 32;
                        XG = 0 == (Ay | 0);
                        if (!XG && (eE = wF = Cp, mG = HEAP32[eE >> 2], KE = xF = wF + mG, eA =
                                Cp, vC = Cp + 4, yF = HEAP32[vC >> 2], LE = yF & 14, RI = (UC = 0 != (LE | 0)) ? eA : 0, eB = Math_imul(Np, Pl) | 0, OK = 0 < (eB | 0)))
                            if (nG = 0 == (RI | 0))
                                for (DD = 0;;) {
                                    wC = KE + (DD << 2);
                                    FA = HEAP32[wC >> 2];
                                    OB = FA + 12;
                                    PB = HEAP32[OB >> 2];
                                    QB = PB & 48;
                                    fB = 0 == (QB | 0);
                                    if (!fB) {
                                        qC = t;
                                        $D = 110;
                                        oy = Ut;
                                        break a
                                    }
                                    zF = FA + 20;
                                    oG = HEAP32[zF >> 2];
                                    if (fE = 1 < (oG | 0))
                                        if (YG = PB & 805336541, RB = 0 == (YG | 0), !RB) {
                                            qC = t;
                                            $D = 110;
                                            oy = Ut;
                                            break a
                                        }
                                    GA = DD + 1;
                                    if (ME = (GA | 0) < (eB | 0)) DD = GA;
                                    else break
                                } else
                                    for (ED = 0;;) {
                                        jI = KE + (ED << 2);
                                        NE = ZG = HEAP32[jI >> 2];
                                        xC = gE = NE + RI;
                                        SB = xC + 12;
                                        PK = HEAP32[SB >> 2];
                                        EH = PK & 48;
                                        OE = 0 == (EH | 0);
                                        if (!OE) {
                                            qC =
                                                t;
                                            $D = 110;
                                            oy = Ut;
                                            break a
                                        }
                                        PE = xC + 20;
                                        pG = HEAP32[PE >> 2];
                                        if (AF = 1 < (pG | 0))
                                            if (BF = PK & 805336541, yC = 0 == (BF | 0), !yC) {
                                                qC = t;
                                                $D = 110;
                                                oy = Ut;
                                                break a
                                            }
                                        FH = ED + 1;
                                        if ($G = (FH | 0) < (eB | 0)) ED = FH;
                                        else break
                                    }
                    }
                while (0);
                hE = 1 < (wm | 0);
                aH = hE | bB;
                QE = hE ? 676 : 140;
                aH ? DH = QE : (RE = _jtutype(Cp, Np), bH = 0 == (RE | 0), SI = bH | u, eK = bH ? 1396 : 768, SE = SI | Fu, CF = SI ? eK : 768, SE ? DH = CF : (GH = _jtutype(kt, or), DH = zC = (FD = (RE | 0) == (GH | 0)) ? 768 : 1396));
                b = 418
            }
            while (0);
            418 == b && (Fz = DH, EA = 4, dB = Fz);
            HA = _jtga(a, EA, Eu, 1, 0);
            HEAP32[r >> 2] = HA;
            if (oz = 0 == (HA | 0)) return w = 0, STACKTOP = e, w;
            if (fK = 680 ==
                (dB | 0)) {
                TB = _jtga(a, 1, Uk, 1, 0);
                if (qG = 0 == (TB | 0)) return w = 0, STACKTOP = e, w;
                HH = iE = TB;
                fA = HEAP32[HH >> 2];
                UB = iE + fA;
                _memset(UB, 1, Uk) | 0;
                cH = IH = Cp;
                jE = HEAP32[cH >> 2];
                DF = Pl - 1;
                VB = Math_imul(Np, DF) | 0;
                if (VC = 0 < (VB | 0)) {
                    TE = jE + Uk;
                    kE = IH + TE;
                    EF = 0 < (Uk | 0);
                    gA = kE;
                    hA = Uk;
                    for (uB = 0;;) {
                        if (EF) {
                            UE = gA;
                            WC = hA;
                            for (gB = 0;;)
                                if (BJ = gB + jE, IA = IH + BJ, FF = HEAP8[IA], XC = HEAP8[UE], (rG = FF << 24 >> 24 == XC << 24 >> 24) ? GD = WC : (sG = gB + fA, vB = iE + sG, WB = HEAP8[vB], (lE = 0 == WB << 24 >> 24) ? GD = WC : (HEAP8[vB] = 0, GD = XB = WC - 1)), dH = UE + 1, GF = gB + 1, gK = (GF | 0) < (Uk | 0)) UE = dH, WC = GD, gB = GF;
                                else break;
                            JH = eH = gA + Uk;
                            mE = GD
                        } else JH = gA, mE = hA;
                        VE = 0 == (mE | 0);
                        WE = uB + 1;
                        if (VE) {
                            qC = t;
                            $D = 680;
                            oy = Ut;
                            break a
                        }
                        if (TI = (WE | 0) < (VB | 0)) gA = JH, hA = mE, uB = WE;
                        else {
                            kI = mE;
                            break
                        }
                    }
                } else kI = Uk;
                if (lI = 0 == (kI | 0)) qC = t, $D = 680, oy = Ut;
                else {
                    KH = Uk - kI;
                    By = a + 204532;
                    HEAP32[By >> 2] = KH;
                    gx = _jtga(a, 4, KH, 1, 0);
                    if (ux = 0 == (gx | 0)) return w = 0, STACKTOP = e, w;
                    fH = HF = gx;
                    mI = HEAP32[fH >> 2];
                    YC = tG = HF + mI;
                    ZC = a + 204536;
                    HEAP32[ZC >> 2] = YC;
                    if (hK = 0 < (Uk | 0)) {
                        nE = YC;
                        for (JA = 0;;)
                            if (LH = JA + fA, YB = iE + LH, hx = HEAP8[YB], (uG = 0 == hx << 24 >> 24) ? (oE = nE + 4, HEAP32[nE >> 2] = JA, $C = oE) : $C = nE, IF = JA + 1, UI = (IF |
                                    0) < (Uk | 0)) nE = $C, JA = IF;
                            else {
                                qC = gx;
                                $D = 312;
                                oy = Ut;
                                break
                            }
                    } else qC = gx, $D = 312, oy = Ut
                }
            } else qC = t, $D = dB, oy = Ut
        }
    while (0);
    if (0 == (getFUNCTION_TABLE($D)(a, f, Pl, wm, pr, Uk, B, D, Np, or, Hr, Xr, Cp, kt, r, oy) | 0)) return w = 0, STACKTOP = e, w;
    if (u) {
        AC = _jtga(a, 32, 3, 1, 0);
        if (MH = 0 == (AC | 0)) return w = 0, STACKTOP = e, w;
        XE = HEAP32[AC >> 2];
        QK = AC + XE;
        wB = _jtga(a, 4, 6, 1, 0);
        if (gH = 0 == (wB | 0)) return w = 0, STACKTOP = e, w;
        hB = HEAP32[wB >> 2];
        YE = wB + hB;
        switch (f | 0) {
            case 4:
                JF = 1;
                break;
            case 6:
                JF = 2;
                break;
            case 12:
            case 13:
                JF = 3;
                break;
            case 11:
            case 7:
            case 8:
            case 9:
            case 10:
                JF = 4;
                break;
            default:
                JF = 0
        }
        HEAP32[YE >> 2] = f;
        ZB = hB + 4;
        aD = wB + ZB;
        HEAP32[aD >> 2] = wm;
        KF = hB + 8;
        VI = wB + KF;
        HEAP32[VI >> 2] = Uk;
        iA = HEAP32[Mp >> 2];
        bD = hB + 12;
        iB = wB + bD;
        HEAP32[iB >> 2] = iA;
        jB = $D;
        KA = hB + 16;
        LF = wB + KA;
        HEAP32[LF >> 2] = jB;
        hH = hB + 20;
        cD = wB + hH;
        HEAP32[cD >> 2] = JF;
        HEAP32[QK >> 2] = wB;
        iK = HEAP32[r >> 2];
        MF = XE + 4;
        nI = AC + MF;
        HEAP32[nI >> 2] = iK;
        BC = XE + 8;
        NH = AC + BC;
        HEAP32[NH >> 2] = qC;
        dD = AC
    } else dD = oy;
    0 != (dD | 0) && (_jttraverse(a, dD, 654), RK = dD + 16, iH = HEAP32[RK >> 2], CJ = iH + 1, HEAP32[RK >> 2] = CJ);
    _jttpop(a, s);
    w = _jttpush(a, dD);
    STACKTOP = e;
    return w
}
function _jtinpl(a, f, d, c) {
    var b, e, g, h, j;
    0 == (d | 0) ? b = 0 : (e = d - 1, g = HEAP8[c + e], b = 10 == g << 24 >> 24 | 13 == g << 24 >> 24 ? e : d);
    d = HEAP32[a >> 2];
    if (0 != (HEAP8[d] | 0)) return HEAP8[d] = 0, d = HEAP32[a + 4408 >> 2], e = HEAP32[d + (HEAP32[d >> 2] + 32) >> 2], _jtjsigstr(a, 8, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    a: do
        if (0 == f << 24 >> 24)
            if (0 != (b | 0) && 4 == (HEAP8[c + (b - 1)] | 0) && _jtjoff(a, HEAP32[30648]), e = HEAP8[HEAP32[a + 1048 >> 2] + 9], 0 > e << 24 >> 24 & 0 < (b | 0))
                for (h = 0;;) {
                    d = HEAP8[c + h];
                    g = h + 1;
                    if (!(32 == d << 24 >> 24 | e << 24 >> 24 == d << 24 >> 24)) {
                        j = h;
                        break a
                    }
                    if ((g | 0) < (b | 0)) h = g;
                    else {
                        j =
                            0;
                        break
                    }
                } else j = 0;
            else j = 0;
    while (0);
    h = b - j;
    b = _jtga(a, 2, h, 1, 0);
    if (0 == (b | 0)) return 0;
    _memcpy(b + HEAP32[b >> 2], c + j, h) | 0;
    return b
}
function _jtiosc(a, f, d, c, b, e, g, h, j, i, l, k, m, n, p, q) {
    var r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, p = 1 < (j | 0) ? d : 0;
    r = 1 < (i | 0) ? 1 : 1 < (b | 0) | 0;
    l = k = q + HEAP32[q >> 2];
    g = h = m + HEAP32[m >> 2];
    c = e = n + HEAP32[n >> 2];
    s = HEAP32[m + 12 >> 2];
    if (131072 ==
        (s | 0))
        if (t = h, u = e, 0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            w = 0 < (b | 0);
            v = 1 == (i | 0);
            x = 0 < (d | 0);
            y = -r & b;
            z = 0;
            A = u;
            D = t;
            for (B = l;;) {
                if (w) {
                    G = A + (y << 1);
                    C = 0;
                    F = A;
                    for (E = B;;) {
                        J = HEAP16[F >> 1];
                        a: do
                            if (x)
                                for (L = 0;;) {
                                    I = L + 1;
                                    if (J << 16 >> 16 == (HEAP16[D + (L << 1) >> 1] | 0)) {
                                        H = L;
                                        break a
                                    }
                                    if ((I | 0) < (d | 0)) L = I;
                                    else {
                                        H = I;
                                        break
                                    }
                                } else H = 0;
                        while (0);
                        HEAP32[E >> 2] = H;
                        J = C + 1;
                        if ((J | 0) < (b | 0)) C = J, F += r << 1, E += 4;
                        else break
                    }
                    K = G;
                    N = B + (b << 2)
                } else K = A, N = B;
                E = z + 1;
                if ((E | 0) < (j | 0)) z = E, A = v ? u : K, D += p << 1, B = N;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        N = 0 < (b | 0);
        B = 1 == (i | 0);
        D = -r & b;
        K = 0;
        v = u;
        A = t;
        for (z = l;;) {
            if (N) {
                H = v + (D << 1);
                x = 0;
                y = v;
                for (w = z;;) {
                    E = HEAP16[y >> 1];
                    for (F = d;;) {
                        S = F - 1;
                        if (0 >= (F | 0)) break;
                        if (E << 16 >> 16 == (HEAP16[A + (S << 1) >> 1] | 0)) break;
                        else F = S
                    }
                    HEAP32[w >> 2] = 1 > (F | 0) ? d : S;
                    E = x + 1;
                    if ((E | 0) < (b | 0)) x = E, y += r << 1, w += 4;
                    else break
                }
                T = H;
                V = z + (b << 2)
            } else T = v, V = z;
            w = K + 1;
            if ((w | 0) < (j | 0)) K = w, v = B ? u : T, A += p << 1, z = V;
            else break
        }
    } else {
        if (6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            V = 0 < (b | 0);
            z = 1 == (i | 0);
            A = 0 < (d | 0);
            T = -r & b;
            B = 0;
            v = u;
            K = t;
            for (t = k;;) {
                if (V) {
                    S = v + (T << 1);
                    D = 0;
                    N = v;
                    for (w = t;;) {
                        y = HEAP16[N >> 1];
                        a: do
                            if (A)
                                for (x = 0;;) {
                                    G = x +
                                        1;
                                    if (y << 16 >> 16 == (HEAP16[K + (x << 1) >> 1] | 0)) {
                                        Q = 1;
                                        break a
                                    }
                                    if ((G | 0) < (d | 0)) x = G;
                                    else {
                                        Q = 0;
                                        break
                                    }
                                } else Q = 0;
                        while (0);
                        HEAP8[w] = Q;
                        y = D + 1;
                        if ((y | 0) < (b | 0)) D = y, N += r << 1, w += 1;
                        else break
                    }
                    P = S;
                    M = t + b
                } else P = v, M = t;
                w = B + 1;
                if ((w | 0) < (j | 0)) B = w, v = z ? u : P, K += p << 1, t = M;
                else break
            }
        }
    } else if (16 == (s | 0))
        if (M = h, t = e, 6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            K = 0 < (b | 0);
            P = 1 == (i | 0);
            u = 0 < (d | 0);
            z = -r & b;
            v = 0;
            B = t;
            Q = M;
            for (A = k;;) {
                if (K) {
                    T = B + (z << 4);
                    V = 0;
                    w = B;
                    for (N = A;;) {
                        D = HEAPF64[w >> 3];
                        H = HEAPF64[w + 8 >> 3];
                        a: do
                            if (u)
                                for (y = 0;;) {
                                    F = y + 1;
                                    if (0 != _jtzeq(a, D, H, HEAPF64[Q + (y << 4) >>
                                            3], HEAPF64[Q + (y << 4) + 8 >> 3]) << 24 >> 24) {
                                        R = 1;
                                        break a
                                    }
                                    if ((F | 0) < (d | 0)) y = F;
                                    else {
                                        R = 0;
                                        break
                                    }
                                } else R = 0;
                        while (0);
                        HEAP8[N] = R;
                        H = V + 1;
                        if ((H | 0) < (b | 0)) V = H, w += r << 4, N += 1;
                        else break
                    }
                    O = T;
                    aa = A + b
                } else O = B, aa = A;
                N = v + 1;
                if ((N | 0) < (j | 0)) v = N, B = P ? t : O, Q += p << 4, A = aa;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        aa = 0 < (b | 0);
        A = 1 == (i | 0);
        Q = -r & b;
        O = 0;
        P = t;
        B = M;
        for (v = l;;) {
            if (aa) {
                R = P + (Q << 4);
                u = 0;
                z = P;
                for (K = v;;) {
                    N = HEAPF64[z >> 3];
                    w = HEAPF64[z + 8 >> 3];
                    for (V = d;;) {
                        Z = V - 1;
                        if (0 >= (V | 0)) break;
                        if (0 == _jtzeq(a, N, w, HEAPF64[B + (Z << 4) >> 3], HEAPF64[B + (Z << 4) + 8 >>
                                3]) << 24 >> 24) V = Z;
                        else break
                    }
                    HEAP32[K >> 2] = 1 > (V | 0) ? d : Z;
                    w = u + 1;
                    if ((w | 0) < (b | 0)) u = w, z += r << 4, K += 4;
                    else break
                }
                $ = R;
                ba = v + (b << 2)
            } else $ = P, ba = v;
            K = O + 1;
            if ((K | 0) < (j | 0)) O = K, P = A ? t : $, B += p << 4, v = ba;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            ba = 0 < (b | 0);
            v = 1 == (i | 0);
            B = 0 < (d | 0);
            $ = -r & b;
            A = 0;
            P = t;
            O = M;
            for (M = l;;) {
                if (ba) {
                    Z = P + ($ << 4);
                    Q = 0;
                    aa = P;
                    for (K = M;;) {
                        z = HEAPF64[aa >> 3];
                        u = HEAPF64[aa + 8 >> 3];
                        a: do
                            if (B)
                                for (T = 0;;) {
                                    w = T + 1;
                                    if (0 != _jtzeq(a, z, u, HEAPF64[O + (T << 4) >> 3], HEAPF64[O + (T << 4) + 8 >> 3]) << 24 >> 24) {
                                        ka = T;
                                        break a
                                    }
                                    if ((w | 0) < (d | 0)) T = w;
                                    else {
                                        ka =
                                            w;
                                        break
                                    }
                                } else ka = 0;
                        while (0);
                        HEAP32[K >> 2] = ka;
                        u = Q + 1;
                        if ((u | 0) < (b | 0)) Q = u, aa += r << 4, K += 4;
                        else break
                    }
                    ea = Z;
                    ha = M + (b << 2)
                } else ea = P, ha = M;
                K = A + 1;
                if ((K | 0) < (j | 0)) A = K, P = v ? t : ea, O += p << 4, M = ha;
                else break
            }
        }
    } else if (64 == (s | 0))
        if (ha = h, M = e, 6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            O = 0 < (b | 0);
            ea = 1 == (i | 0);
            t = 0 < (d | 0);
            v = -r & b;
            P = 0;
            A = M;
            ka = ha;
            for (B = k;;) {
                if (O) {
                    $ = A + (v << 2);
                    ba = 0;
                    K = A;
                    for (aa = B;;) {
                        Q = HEAP32[K >> 2];
                        a: do
                            if (t)
                                for (R = 0;;) {
                                    u = R + 1;
                                    if (0 != _jtequ(a, Q, HEAP32[ka + (R << 2) >> 2]) << 24 >> 24) {
                                        da = 1;
                                        break a
                                    }
                                    if ((u | 0) < (d | 0)) R = u;
                                    else {
                                        da = 0;
                                        break
                                    }
                                } else da = 0;
                        while (0);
                        HEAP8[aa] = da;
                        Q = ba + 1;
                        if ((Q | 0) < (b | 0)) ba = Q, K += r << 2, aa += 1;
                        else break
                    }
                    ga = $;
                    U = B + b
                } else ga = A, U = B;
                aa = P + 1;
                if ((aa | 0) < (j | 0)) P = aa, A = ea ? M : ga, ka += p << 2, B = U;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        U = 0 < (b | 0);
        B = 1 == (i | 0);
        ka = -r & b;
        ga = 0;
        ea = M;
        A = ha;
        for (P = l;;) {
            if (U) {
                da = ea + (ka << 2);
                t = 0;
                v = ea;
                for (O = P;;) {
                    aa = HEAP32[v >> 2];
                    for (K = d;;) {
                        ca = K - 1;
                        if (0 >= (K | 0)) break;
                        if (0 == _jtequ(a, aa, HEAP32[A + (ca << 2) >> 2]) << 24 >> 24) K = ca;
                        else break
                    }
                    HEAP32[O >> 2] = 1 > (K | 0) ? d : ca;
                    aa = t + 1;
                    if ((aa | 0) < (b | 0)) t = aa, v += r << 2, O += 4;
                    else break
                }
                X = da;
                Y = P + (b << 2)
            } else X =
                ea, Y = P;
            O = ga + 1;
            if ((O | 0) < (j | 0)) ga = O, ea = B ? M : X, A += p << 2, P = Y;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Y = 0 < (b | 0);
            P = 1 == (i | 0);
            A = 0 < (d | 0);
            X = -r & b;
            B = 0;
            ea = M;
            ga = ha;
            for (ha = l;;) {
                if (Y) {
                    ca = ea + (X << 2);
                    ka = 0;
                    U = ea;
                    for (O = ha;;) {
                        v = HEAP32[U >> 2];
                        a: do
                            if (A)
                                for (t = 0;;) {
                                    $ = t + 1;
                                    if (0 != _jtequ(a, v, HEAP32[ga + (t << 2) >> 2]) << 24 >> 24) {
                                        ja = t;
                                        break a
                                    }
                                    if (($ | 0) < (d | 0)) t = $;
                                    else {
                                        ja = $;
                                        break
                                    }
                                } else ja = 0;
                        while (0);
                        HEAP32[O >> 2] = ja;
                        v = ka + 1;
                        if ((v | 0) < (b | 0)) ka = v, U += r << 2, O += 4;
                        else break
                    }
                    fa = ca;
                    ia = ha + (b << 2)
                } else fa = ea, ia = ha;
                O = B + 1;
                if ((O | 0) < (j | 0)) B = O, ea =
                    P ? M : fa, ga += p << 2, ha = ia;
                else break
            }
        }
    } else if (128 == (s | 0))
        if (ia = h, ha = e, 6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            ga = 0 < (b | 0);
            fa = 1 == (i | 0);
            M = 0 < (d | 0);
            P = -r & b;
            ea = ha;
            B = 0;
            ja = ia;
            for (A = k;;) {
                if (ga) {
                    X = ea + (P << 3);
                    Y = ea;
                    O = 0;
                    for (U = A;;) {
                        ka = HEAP32[Y >> 2];
                        da = HEAP32[Y + 4 >> 2];
                        a: do
                            if (M)
                                for (v = 0;;) {
                                    if (0 != _jtequ(a, ka, HEAP32[ja + (v << 3) >> 2]) << 24 >> 24 && 0 != _jtequ(a, da, HEAP32[ja + (v << 3) + 4 >> 2]) << 24 >> 24) {
                                        ra = 1;
                                        break a
                                    }
                                    K = v + 1;
                                    if ((K | 0) < (d | 0)) v = K;
                                    else {
                                        ra = 0;
                                        break
                                    }
                                } else ra = 0;
                        while (0);
                        HEAP8[U] = ra;
                        da = O + 1;
                        if ((da | 0) < (b | 0)) Y += r << 3, O = da, U += 1;
                        else break
                    }
                    sa = X;
                    ta =
                        A + b
                } else sa = ea, ta = A;
                U = B + 1;
                if ((U | 0) < (j | 0)) ea = fa ? ha : sa, B = U, ja += p << 3, A = ta;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        ta = 0 < (b | 0);
        A = 1 == (i | 0);
        ja = d - 1;
        B = 0 < (d | 0);
        sa = -r & b;
        fa = 0;
        ea = ha;
        ra = ia;
        for (M = l;;) {
            if (ta) {
                P = ea + (sa << 3);
                ga = 0;
                U = ea;
                for (O = M;;) {
                    Y = HEAP32[U >> 2];
                    ca = HEAP32[U + 4 >> 2];
                    a: do
                        if (B) {
                            da = d;
                            for (ka = ja;;) {
                                if (0 != _jtequ(a, Y, HEAP32[ra + (ka << 3) >> 2]) << 24 >> 24 && 0 != _jtequ(a, ca, HEAP32[ra + (ka << 3) + 4 >> 2]) << 24 >> 24) {
                                    wa = da;
                                    za = ka;
                                    break a
                                }
                                v = ka - 1;
                                if (0 < (ka | 0)) da = ka, ka = v;
                                else {
                                    wa = ka;
                                    za = v;
                                    break
                                }
                            }
                        } else wa = d, za = ja;
                    while (0);
                    HEAP32[O >>
                        2] = 1 > (wa | 0) ? d : za;
                    ca = ga + 1;
                    if ((ca | 0) < (b | 0)) ga = ca, U += r << 3, O += 4;
                    else break
                }
                Ba = P;
                ua = M + (b << 2)
            } else Ba = ea, ua = M;
            O = fa + 1;
            if ((O | 0) < (j | 0)) fa = O, ea = A ? ha : Ba, ra += p << 3, M = ua;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            ua = 0 < (b | 0);
            M = 1 == (i | 0);
            ra = 0 < (d | 0);
            Ba = -r & b;
            A = 0;
            ea = ha;
            fa = ia;
            for (ia = l;;) {
                if (ua) {
                    za = ea + (Ba << 3);
                    wa = 0;
                    ja = ea;
                    for (B = ia;;) {
                        sa = HEAP32[ja >> 2];
                        ta = HEAP32[ja + 4 >> 2];
                        a: do
                            if (ra)
                                for (O = 0;;) {
                                    if (0 != _jtequ(a, sa, HEAP32[fa + (O << 3) >> 2]) << 24 >> 24 && 0 != _jtequ(a, ta, HEAP32[fa + (O << 3) + 4 >> 2]) << 24 >> 24) {
                                        ya = O;
                                        break a
                                    }
                                    U = O + 1;
                                    if ((U | 0) <
                                        (d | 0)) O = U;
                                    else {
                                        ya = U;
                                        break
                                    }
                                } else ya = 0;
                        while (0);
                        HEAP32[B >> 2] = ya;
                        ta = wa + 1;
                        if ((ta | 0) < (b | 0)) wa = ta, ja += r << 3, B += 4;
                        else break
                    }
                    xa = za;
                    oa = ia + (b << 2)
                } else xa = ea, oa = ia;
                B = A + 1;
                if ((B | 0) < (j | 0)) A = B, ea = M ? ha : xa, fa += p << 3, ia = oa;
                else break
            }
        }
    } else if (4 == (s | 0))
        if (6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            oa = 0 < (b | 0);
            ia = 1 == (i | 0);
            fa = 0 < (d | 0);
            xa = -r & b;
            ha = g;
            M = c;
            ea = 0;
            for (A = k;;) {
                if (oa) {
                    ya = M + (xa << 2);
                    ra = M;
                    Ba = 0;
                    for (ua = A;;) {
                        B = HEAP32[ra >> 2];
                        a: do
                            if (fa)
                                for (ja = 0;;) {
                                    wa = ja + 1;
                                    if ((B | 0) == (HEAP32[ha + (ja << 2) >> 2] | 0)) {
                                        pa = 1;
                                        break a
                                    }
                                    if ((wa | 0) < (d | 0)) ja = wa;
                                    else {
                                        pa =
                                            0;
                                        break
                                    }
                                } else pa = 0;
                        while (0);
                        HEAP8[ua] = pa;
                        B = Ba + 1;
                        if ((B | 0) < (b | 0)) ra += r << 2, Ba = B, ua += 1;
                        else break
                    }
                    la = ya;
                    qa = A + b
                } else la = M, qa = A;
                ua = ea + 1;
                if ((ua | 0) < (j | 0)) ha += p << 2, M = ia ? c : la, ea = ua, A = qa;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        qa = 0 < (b | 0);
        A = 1 == (i | 0);
        ea = -r & b;
        la = g;
        ia = c;
        M = 0;
        for (ha = l;;) {
            if (qa) {
                pa = ia + (ea << 2);
                fa = ia;
                xa = 0;
                for (oa = ha;;) {
                    ua = HEAP32[fa >> 2];
                    for (Ba = d;;) {
                        Da = Ba - 1;
                        if (0 >= (Ba | 0)) break;
                        if ((ua | 0) == (HEAP32[la + (Da << 2) >> 2] | 0)) break;
                        else Ba = Da
                    }
                    HEAP32[oa >> 2] = 1 > (Ba | 0) ? d : Da;
                    ua = xa + 1;
                    if ((ua | 0) < (b | 0)) fa += r << 2, xa =
                        ua, oa += 4;
                    else break
                }
                Aa = pa;
                Ea = ha + (b << 2)
            } else Aa = ia, Ea = ha;
            oa = M + 1;
            if ((oa | 0) < (j | 0)) la += p << 2, ia = A ? c : Aa, M = oa, ha = Ea;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Ea = 0 < (b | 0);
            ha = 1 == (i | 0);
            M = 0 < (d | 0);
            Aa = -r & b;
            A = g;
            ia = c;
            la = 0;
            for (Da = l;;) {
                if (Ea) {
                    ea = ia + (Aa << 2);
                    qa = ia;
                    oa = 0;
                    for (xa = Da;;) {
                        fa = HEAP32[qa >> 2];
                        a: do
                            if (M)
                                for (ya = 0;;) {
                                    ua = ya + 1;
                                    if ((fa | 0) == (HEAP32[A + (ya << 2) >> 2] | 0)) {
                                        Sa = ya;
                                        break a
                                    }
                                    if ((ua | 0) < (d | 0)) ya = ua;
                                    else {
                                        Sa = ua;
                                        break
                                    }
                                } else Sa = 0;
                        while (0);
                        HEAP32[xa >> 2] = Sa;
                        fa = oa + 1;
                        if ((fa | 0) < (b | 0)) qa += r << 2, oa = fa, xa += 4;
                        else break
                    }
                    Oa =
                        ea;
                    Ha = Da + (b << 2)
                } else Oa = ia, Ha = Da;
                xa = la + 1;
                if ((xa | 0) < (j | 0)) A += p << 2, ia = ha ? c : Oa, la = xa, Da = Ha;
                else break
            }
        }
    } else if (65536 == (s | 0))
        if (6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Ha = 0 < (b | 0);
            Da = 1 == (i | 0);
            la = 0 < (d | 0);
            Oa = -r & b;
            ha = g;
            ia = c;
            A = 0;
            for (Sa = k;;) {
                if (Ha) {
                    M = ia + (Oa << 2);
                    Aa = ia;
                    Ea = 0;
                    for (xa = Sa;;) {
                        oa = HEAP32[Aa >> 2];
                        a: do
                            if (la)
                                for (qa = 0;;) {
                                    pa = qa + 1;
                                    if ((oa | 0) == (HEAP32[ha + (qa << 2) >> 2] | 0)) {
                                        Ga = 1;
                                        break a
                                    }
                                    if ((pa | 0) < (d | 0)) qa = pa;
                                    else {
                                        Ga = 0;
                                        break
                                    }
                                } else Ga = 0;
                        while (0);
                        HEAP8[xa] = Ga;
                        oa = Ea + 1;
                        if ((oa | 0) < (b | 0)) Aa += r << 2, Ea = oa, xa += 1;
                        else break
                    }
                    Ma = M;
                    Ia =
                        Sa + b
                } else Ma = ia, Ia = Sa;
                xa = A + 1;
                if ((xa | 0) < (j | 0)) ha += p << 2, ia = Da ? c : Ma, A = xa, Sa = Ia;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        Ia = 0 < (b | 0);
        Sa = 1 == (i | 0);
        A = -r & b;
        Ma = g;
        Da = c;
        ia = 0;
        for (ha = l;;) {
            if (Ia) {
                Ga = Da + (A << 2);
                la = Da;
                Oa = 0;
                for (Ha = ha;;) {
                    xa = HEAP32[la >> 2];
                    for (Ea = d;;) {
                        db = Ea - 1;
                        if (0 >= (Ea | 0)) break;
                        if ((xa | 0) == (HEAP32[Ma + (db << 2) >> 2] | 0)) break;
                        else Ea = db
                    }
                    HEAP32[Ha >> 2] = 1 > (Ea | 0) ? d : db;
                    xa = Oa + 1;
                    if ((xa | 0) < (b | 0)) la += r << 2, Oa = xa, Ha += 4;
                    else break
                }
                W = Ga;
                Xa = ha + (b << 2)
            } else W = Da, Xa = ha;
            Ha = ia + 1;
            if ((Ha | 0) < (j | 0)) Ma += p << 2, Da = Sa ? c : W, ia =
                Ha, ha = Xa;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Xa = 0 < (b | 0);
            ha = 1 == (i | 0);
            ia = 0 < (d | 0);
            W = -r & b;
            Sa = g;
            g = c;
            Da = 0;
            for (Ma = l;;) {
                if (Xa) {
                    db = g + (W << 2);
                    A = g;
                    Ia = 0;
                    for (Ha = Ma;;) {
                        Oa = HEAP32[A >> 2];
                        a: do
                            if (ia)
                                for (la = 0;;) {
                                    M = la + 1;
                                    if ((Oa | 0) == (HEAP32[Sa + (la << 2) >> 2] | 0)) {
                                        Ta = la;
                                        break a
                                    }
                                    if ((M | 0) < (d | 0)) la = M;
                                    else {
                                        Ta = M;
                                        break
                                    }
                                } else Ta = 0;
                        while (0);
                        HEAP32[Ha >> 2] = Ta;
                        Oa = Ia + 1;
                        if ((Oa | 0) < (b | 0)) A += r << 2, Ia = Oa, Ha += 4;
                        else break
                    }
                    fb = db;
                    mb = Ma + (b << 2)
                } else fb = g, mb = Ma;
                Ha = Da + 1;
                if ((Ha | 0) < (j | 0)) Sa += p << 2, g = ha ? c : fb, Da = Ha, Ma = mb;
                else break
            }
        }
    } else if (32 ==
        (s | 0))
        if (mb = 0 != (HEAP32[m + 4 >> 2] & 14 | 0) ? m : 0, ma = 0 == (HEAP32[n + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[n + 4 >> 2] & 14 | 0) | 0, m = n & -ma, ma = h, n = e, 6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Ma = 0 < (b | 0);
            Da = 1 == (i | 0);
            fb = 0 == (m | 0);
            c = 0 < (d | 0);
            ha = 0 == (mb | 0);
            g = -r & b;
            Sa = ma;
            Ta = n;
            ia = 0;
            for (W = k;;) {
                if (Ma) {
                    Xa = Ta + (g << 2);
                    Ha = Ta;
                    Ia = 0;
                    for (A = W;;) {
                        Ga = HEAP32[Ha >> 2];
                        ab = fb ? Ga : Ga + m;
                        a: do
                            if (c)
                                for (Ga = 0;;) {
                                    Oa = HEAP32[Sa + (Ga << 2) >> 2];
                                    Na = ha ? Oa : Oa + mb;
                                    Oa = Ga + 1;
                                    if (0 != _jtequ(a, ab, Na) << 24 >> 24) {
                                        $a = 1;
                                        break a
                                    }
                                    if ((Oa | 0) < (d | 0)) Ga = Oa;
                                    else {
                                        $a = 0;
                                        break
                                    }
                                } else $a = 0;
                        while (0);
                        HEAP8[A] = $a;
                        Ga = Ia +
                            1;
                        if ((Ga | 0) < (b | 0)) Ha += r << 2, Ia = Ga, A += 1;
                        else break
                    }
                    Ua = Xa;
                    Pa = W + b
                } else Ua = Ta, Pa = W;
                A = ia + 1;
                if ((A | 0) < (j | 0)) Sa += p << 2, Ta = Da ? n : Ua, ia = A, W = Pa;
                else break
            }
        } else if (1 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        Pa = 0 < (b | 0);
        W = 1 == (i | 0);
        ia = 0 == (m | 0);
        Ua = 0 == (mb | 0);
        Da = -r & b;
        Ta = ma;
        Sa = n;
        $a = 0;
        for (Na = l;;) {
            if (Pa) {
                ab = Sa + (Da << 2);
                ha = Sa;
                c = 0;
                for (fb = Na;;) {
                    g = HEAP32[ha >> 2];
                    bb = ia ? g : g + m;
                    for (g = d;;) {
                        La = g - 1;
                        if (0 >= (g | 0)) break;
                        Ma = HEAP32[Ta + (La << 2) >> 2];
                        Ja = Ua ? Ma : Ma + mb;
                        if (0 == _jtequ(a, bb, Ja) << 24 >> 24) g = La;
                        else break
                    }
                    HEAP32[fb >> 2] = 1 > (g | 0) ? d : La;
                    Ma = c + 1;
                    if ((Ma | 0) <
                        (b | 0)) ha += r << 2, c = Ma, fb += 4;
                    else break
                }
                Qa = ab;
                Ya = Na + (b << 2)
            } else Qa = Sa, Ya = Na;
            fb = $a + 1;
            if ((fb | 0) < (j | 0)) Ta += p << 2, Sa = W ? n : Qa, $a = fb, Na = Ya;
            else break
        }
    } else {
        if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Ya = 0 < (b | 0);
            Na = 1 == (i | 0);
            $a = 0 == (m | 0);
            Qa = 0 < (d | 0);
            W = 0 == (mb | 0);
            Sa = -r & b;
            Ta = ma;
            ma = n;
            La = 0;
            for (Ja = l;;) {
                if (Ya) {
                    bb = ma + (Sa << 2);
                    Ua = ma;
                    ia = 0;
                    for (Da = Ja;;) {
                        Pa = HEAP32[Ua >> 2];
                        lb = $a ? Pa : Pa + m;
                        a: do
                            if (Qa)
                                for (Pa = 0;;) {
                                    fb = HEAP32[Ta + (Pa << 2) >> 2];
                                    Ca = W ? fb : fb + mb;
                                    fb = Pa + 1;
                                    if (0 != _jtequ(a, lb, Ca) << 24 >> 24) {
                                        gb = Pa;
                                        break a
                                    }
                                    if ((fb | 0) < (d | 0)) Pa = fb;
                                    else {
                                        gb = fb;
                                        break
                                    }
                                } else gb =
                                    0;
                        while (0);
                        HEAP32[Da >> 2] = gb;
                        g = ia + 1;
                        if ((g | 0) < (b | 0)) Ua += r << 2, ia = g, Da += 4;
                        else break
                    }
                    Fa = bb;
                    Za = Ja + (b << 2)
                } else Fa = ma, Za = Ja;
                Da = La + 1;
                if ((Da | 0) < (j | 0)) Ta += p << 2, ma = Na ? n : Fa, La = Da, Ja = Za;
                else break
            }
        }
    } else if (8 == (s | 0)) {
        s = a + 1152;
        a = HEAPF64[s >> 3];
        Za = h;
        Ja = e;
        if (0 == a) {
            if (6 == (f | 0)) {
                if (0 >= (j | 0)) return q;
                La = 0 < (b | 0);
                Fa = 1 == (i | 0);
                n = 0 < (d | 0);
                Na = -r & b;
                ma = Za;
                Ta = Ja;
                gb = 0;
                for (Ca = k;;) {
                    if (La) {
                        lb = Ta + (Na << 3);
                        mb = Ta;
                        W = 0;
                        for (Qa = Ca;;) {
                            m = HEAPF64[mb >> 3];
                            a: do
                                if (n)
                                    for ($a = 0;;) {
                                        Sa = $a + 1;
                                        if (m == HEAPF64[ma + ($a << 3) >> 3]) {
                                            qb = 1;
                                            break a
                                        }
                                        if ((Sa | 0) < (d | 0)) $a =
                                            Sa;
                                        else {
                                            qb = 0;
                                            break
                                        }
                                    } else qb = 0;
                            while (0);
                            HEAP8[Qa] = qb;
                            m = W + 1;
                            if ((m | 0) < (b | 0)) mb += r << 3, W = m, Qa += 1;
                            else break
                        }
                        ib = lb;
                        ub = Ca + b
                    } else ib = Ta, ub = Ca;
                    Qa = gb + 1;
                    if ((Qa | 0) < (j | 0)) ma += p << 3, Ta = Fa ? Ja : ib, gb = Qa, Ca = ub;
                    else break
                }
            } else if (1 == (f | 0)) {
                if (0 >= (j | 0)) return q;
                ub = 0 < (b | 0);
                Ca = 1 == (i | 0);
                gb = -r & b;
                ib = Za;
                Fa = Ja;
                Ta = 0;
                for (ma = l;;) {
                    if (ub) {
                        qb = Fa + (gb << 3);
                        n = Fa;
                        Na = 0;
                        for (La = ma;;) {
                            Qa = HEAPF64[n >> 3];
                            for (W = d;;) {
                                eb = W - 1;
                                if (0 >= (W | 0)) break;
                                if (Qa != HEAPF64[ib + (eb << 3) >> 3]) W = eb;
                                else break
                            }
                            HEAP32[La >> 2] = 1 > (W | 0) ? d : eb;
                            Qa = Na + 1;
                            if ((Qa | 0) < (b | 0)) n += r <<
                                3, Na = Qa, La += 4;
                            else break
                        }
                        rb = qb;
                        wb = ma + (b << 2)
                    } else rb = Fa, wb = ma;
                    La = Ta + 1;
                    if ((La | 0) < (j | 0)) ib += p << 3, Fa = Ca ? Ja : rb, Ta = La, ma = wb;
                    else break
                }
            } else if (0 == (f | 0)) {
                if (0 >= (j | 0)) return q;
                wb = 0 < (b | 0);
                ma = 1 == (i | 0);
                Ta = 0 < (d | 0);
                rb = -r & b;
                Ca = Za;
                Fa = Ja;
                ib = 0;
                for (eb = l;;) {
                    if (wb) {
                        gb = Fa + (rb << 3);
                        ub = Fa;
                        La = 0;
                        for (Na = eb;;) {
                            n = HEAPF64[ub >> 3];
                            a: do
                                if (Ta)
                                    for (lb = 0;;) {
                                        Qa = lb + 1;
                                        if (n == HEAPF64[Ca + (lb << 3) >> 3]) {
                                            Ka = lb;
                                            break a
                                        }
                                        if ((Qa | 0) < (d | 0)) lb = Qa;
                                        else {
                                            Ka = Qa;
                                            break
                                        }
                                    } else Ka = 0;
                            while (0);
                            HEAP32[Na >> 2] = Ka;
                            n = La + 1;
                            if ((n | 0) < (b | 0)) ub += r << 3, La = n, Na += 4;
                            else break
                        }
                        Va =
                            gb;
                        nb = eb + (b << 2)
                    } else Va = Fa, nb = eb;
                    Na = ib + 1;
                    if ((Na | 0) < (j | 0)) Ca += p << 3, Fa = ma ? Ja : Va, ib = Na, eb = nb;
                    else break
                }
            }
            return q
        }
        if (6 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            nb = 0 < (b | 0);
            eb = 1 == (i | 0);
            ib = 0 < (d | 0);
            Va = -r & b;
            ma = Za;
            Fa = Ja;
            Ca = 0;
            for (Ka = k;;) {
                if (nb) {
                    Ta = Fa + (Va << 3);
                    rb = Fa;
                    wb = 0;
                    for (Na = Ka;;) {
                        La = HEAPF64[rb >> 3];
                        a: do
                            if (ib) {
                                ub = 0 < La;
                                qb = HEAPF64[14142];
                                n = -0 - La;
                                for (W = 0;;) {
                                    lb = HEAPF64[ma + (W << 3) >> 3];
                                    if (La == lb) {
                                        ob = 1;
                                        break a
                                    }
                                    if (!(ub ^ 0 < lb) && (ub ? La > lb ? (cb = La, Wa = La - lb) : (cb = lb, Wa = lb - La) : La < lb ? (cb = n, Wa = lb - La) : (cb = -0 - lb, Wa = La - lb), !(Wa > cb * HEAPF64[s >>
                                            3] | cb == qb))) {
                                        ob = 1;
                                        break a
                                    }
                                    lb = W + 1;
                                    if ((lb | 0) < (d | 0)) W = lb;
                                    else {
                                        ob = 0;
                                        break
                                    }
                                }
                            } else ob = 0;
                        while (0);
                        HEAP8[Na] = ob;
                        La = wb + 1;
                        if ((La | 0) < (b | 0)) rb += r << 3, wb = La, Na += 1;
                        else break
                    }
                    yb = Ta;
                    Cb = Ka + b
                } else yb = Fa, Cb = Ka;
                Na = Ca + 1;
                if ((Na | 0) < (j | 0)) ma += p << 3, Fa = eb ? Ja : yb, Ca = Na, Ka = Cb;
                else break
            }
        } else if (1 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Cb = 0 < (b | 0);
            Ka = 1 == (i | 0);
            Ca = -r & b;
            yb = HEAPF64[14142];
            eb = Za;
            Fa = Ja;
            ma = 0;
            for (ob = l;;) {
                if (Cb) {
                    cb = Fa + (Ca << 3);
                    s = Fa;
                    Wa = 0;
                    for (ib = ob;;) {
                        Va = HEAPF64[s >> 3];
                        nb = 0 < Va;
                        Na = -0 - Va;
                        for (wb = d;;) {
                            Pb = wb - 1;
                            if (0 >= (wb | 0)) break;
                            rb = HEAPF64[eb +
                                (Pb << 3) >> 3];
                            if (Va == rb) break;
                            if (nb ^ 0 < rb) wb = Pb;
                            else if (nb ? Va > rb ? (zb = Va, Zb = Va - rb) : (zb = rb, Zb = rb - Va) : Va < rb ? (zb = Na, Zb = rb - Va) : (zb = -0 - rb, Zb = Va - rb), Zb > zb * a | zb == yb) wb = Pb;
                            else break
                        }
                        HEAP32[ib >> 2] = 1 > (wb | 0) ? d : Pb;
                        Va = Wa + 1;
                        if ((Va | 0) < (b | 0)) s += r << 3, Wa = Va, ib += 4;
                        else break
                    }
                    ac = cb;
                    Hb = ob + (b << 2)
                } else ac = Fa, Hb = ob;
                ib = ma + 1;
                if ((ib | 0) < (j | 0)) eb += p << 3, Fa = Ka ? Ja : ac, ma = ib, ob = Hb;
                else break
            }
        } else if (0 == (f | 0)) {
            if (0 >= (j | 0)) return q;
            Hb = 0 < (b | 0);
            ob = 1 == (i | 0);
            ma = 0 < (d | 0);
            ac = -r & b;
            Ka = HEAPF64[14142];
            Fa = Za;
            Za = Ja;
            eb = 0;
            for (Pb = l;;) {
                if (Hb) {
                    yb = Za + (ac <<
                        3);
                    zb = Za;
                    Zb = 0;
                    for (Ca = Pb;;) {
                        Cb = HEAPF64[zb >> 3];
                        a: do
                            if (ma) {
                                ib = 0 < Cb;
                                Wa = -0 - Cb;
                                for (s = 0;;) {
                                    Ta = HEAPF64[Fa + (s << 3) >> 3];
                                    if (Cb == Ta) {
                                        Ib = s;
                                        break a
                                    }
                                    if (!(ib ^ 0 < Ta) && (ib ? Cb > Ta ? (Qb = Cb, Rb = Cb - Ta) : (Qb = Ta, Rb = Ta - Cb) : Cb < Ta ? (Qb = Wa, Rb = Ta - Cb) : (Qb = -0 - Ta, Rb = Cb - Ta), !(Rb > Qb * a | Qb == Ka))) {
                                        Ib = s;
                                        break a
                                    }
                                    Ta = s + 1;
                                    if ((Ta | 0) < (d | 0)) s = Ta;
                                    else {
                                        Ib = Ta;
                                        break
                                    }
                                }
                            } else Ib = 0;
                        while (0);
                        HEAP32[Ca >> 2] = Ib;
                        Cb = Zb + 1;
                        if ((Cb | 0) < (b | 0)) zb += r << 3, Zb = Cb, Ca += 4;
                        else break
                    }
                    Ob = yb;
                    Bb = Pb + (b << 2)
                } else Ob = Za, Bb = Pb;
                Ca = eb + 1;
                if ((Ca | 0) < (j | 0)) Fa += p << 3, Za = ob ? Ja : Ob, eb = Ca, Pb = Bb;
                else break
            }
        }
    } else if (0 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        Bb = 0 < (b | 0);
        Pb = 1 == (i | 0);
        eb = 0 < (d | 0);
        Ob = -r & b;
        Ja = 0;
        ob = e;
        Za = h;
        for (Fa = l;;) {
            if (Bb) {
                Ib = ob + Ob;
                Ka = 0;
                Qb = ob;
                for (a = Fa;;) {
                    Rb = HEAP8[Qb];
                    a: do
                        if (eb)
                            for (ma = 0;;) {
                                ac = ma + 1;
                                if (Rb << 24 >> 24 == (HEAP8[Za + ma] | 0)) {
                                    xb = ma;
                                    break a
                                }
                                if ((ac | 0) < (d | 0)) ma = ac;
                                else {
                                    xb = ac;
                                    break
                                }
                            } else xb = 0;
                    while (0);
                    HEAP32[a >> 2] = xb;
                    Rb = Ka + 1;
                    if ((Rb | 0) < (b | 0)) Ka = Rb, Qb += r, a += 4;
                    else break
                }
                dc = Ib;
                tb = Fa + (b << 2)
            } else dc = ob, tb = Fa;
            a = Ja + 1;
            if ((a | 0) < (j | 0)) Ja = a, ob = Pb ? e : dc, Za += p, Fa = tb;
            else break
        }
    } else if (1 == (f | 0)) {
        if (0 >= (j |
                0)) return q;
        tb = 0 < (b | 0);
        Fa = 1 == (i | 0);
        Za = -r & b;
        dc = 0;
        Pb = e;
        ob = h;
        for (Ja = l;;) {
            if (tb) {
                l = Pb + Za;
                xb = 0;
                eb = Pb;
                for (Ob = Ja;;) {
                    Bb = HEAP8[eb];
                    for (a = d;;) {
                        oc = a - 1;
                        if (0 >= (a | 0)) break;
                        if (Bb << 24 >> 24 == (HEAP8[ob + oc] | 0)) break;
                        else a = oc
                    }
                    HEAP32[Ob >> 2] = 1 > (a | 0) ? d : oc;
                    Bb = xb + 1;
                    if ((Bb | 0) < (b | 0)) xb = Bb, eb += r, Ob += 4;
                    else break
                }
                Mb = l;
                Tb = Ja + (b << 2)
            } else Mb = Pb, Tb = Ja;
            Ob = dc + 1;
            if ((Ob | 0) < (j | 0)) dc = Ob, Pb = Fa ? e : Mb, ob += p, Ja = Tb;
            else break
        }
    } else if (6 == (f | 0)) {
        if (0 >= (j | 0)) return q;
        f = 0 < (b | 0);
        Tb = 1 == (i | 0);
        i = 0 < (d | 0);
        Ja = -r & b;
        ob = 0;
        Mb = e;
        Fa = h;
        for (h = k;;) {
            if (f) {
                k = Mb +
                    Ja;
                Pb = 0;
                dc = Mb;
                for (oc = h;;) {
                    Za = HEAP8[dc];
                    a: do
                        if (i)
                            for (tb = 0;;) {
                                Ob = tb + 1;
                                if (Za << 24 >> 24 == (HEAP8[Fa + tb] | 0)) {
                                    Ra = 1;
                                    break a
                                }
                                if ((Ob | 0) < (d | 0)) tb = Ob;
                                else {
                                    Ra = 0;
                                    break
                                }
                            } else Ra = 0;
                    while (0);
                    HEAP8[oc] = Ra;
                    Za = Pb + 1;
                    if ((Za | 0) < (b | 0)) Pb = Za, dc += r, oc += 1;
                    else break
                }
                Nb = k;
                sb = h + b
            } else Nb = Mb, sb = h;
            oc = ob + 1;
            if ((oc | 0) < (j | 0)) ob = oc, Mb = Tb ? e : Nb, Fa += p, h = sb;
            else break
        }
    }
    return q
}
function _jtiota(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    b = c;
    e = c + 8;
    g = c + 16;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    if (1 < (HEAP32[f + 24 >> 2] | 0)) return h = _jtrank1ex(a, f, 0, 1, 2318), STACKTOP = c, h;
    j = HEAP32[f + 12 >> 2];
    i = 0 == (j & 192 | 0);
    0 == (j & 4 | 0) ? (l = a + 205336, k = HEAP32[l >> 2], HEAP32[l >> 2] = 0, m = _jtccvt(a, 4, f, b), HEAP32[l >> 2] = k, 0 == m << 24 >> 24 ? (m = HEAP32[a + 4408 >> 2], k = HEAP32[m + (HEAP32[m >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), l = 0) : l = HEAP32[b >> 2]) : l = f;

    if (!i) return i = _jtiota(a, l),
        f = a + 205336, b = HEAP32[f >> 2], HEAP32[f >> 2] = 0, j = _jtccvt(a, 64, i, e), HEAP32[f >> 2] = b, 0 == j << 24 >> 24 ? (j = HEAP32[a + 4408 >> 2], b = HEAP32[j + (HEAP32[j >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), i = 0) : i = HEAP32[e >> 2], STACKTOP = c, i;
    if (0 == (l | 0)) return STACKTOP = c, 0;
    i = HEAP32[l + 20 >> 2];
    m = l + HEAP32[l >> 2];

    if (1 == (i | 0)) {
        k = HEAP32[m >> 2];
        if (0 > (k | 0)) {
            e = -k;
            b = _jtga(a, 4, e, 1, 0);
            if (0 == (b | 0)) return STACKTOP = c, 0;
            j = e;
            for (e = b + HEAP32[b >> 2];;)
                if (f = j - 1, HEAP32[e >> 2] = f, 0 == (f | 0)) {
                    h = b;
                    break
                } else j = f, e += 4;
            STACKTOP = c;
            return h
        }
        e = k - 1;
        j = _jtga(a,
            4, k, 1, 0);
        if (0 == (j | 0)) return STACKTOP = c, 0;
        if (0 == (k | 0)) return STACKTOP = c, j;
        k = -1;
        for (b = j + HEAP32[j >> 2];;)
            if (f = k + 1, HEAP32[b >> 2] = f, (f | 0) == (e | 0)) {
                h = j;
                break
            } else k = f, b += 4;
        STACKTOP = c;
        return h
    }
    b = 0 < (i | 0);
    do
        if (b) {
            k = 1;
            for (j = 0;;)
                if (n = k * (HEAP32[m + (j << 2) >> 2] | 0), e = j + 1, (e | 0) < (i | 0)) k = n, j = e;
                else break;
            2147483647 >= n ? (p = n, d = 27) : (j = HEAP32[a + 4408 >> 2], k = HEAP32[j + (HEAP32[j >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), q = 0)
        } else p = 1, d = 27;
    while (0);
    27 == d && (q = p & -1);
    if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = c, 0;
    p = _jtva1(a, l, 124);
    l = -1 < (q | 0) ? q : -q;
    q = l - 1;
    d = _jtga(a, 4, l, 1, 0);
    do
        if (0 == (d | 0)) r = 0;
        else if (0 == (l | 0)) r = d;
    else {
        n = -1;
        for (k = d + HEAP32[d >> 2];;)
            if (j = n + 1, HEAP32[k >> 2] = j, (j | 0) == (q | 0)) {
                r = d;
                break
            } else n = j, k += 4
    }
    while (0);
    d = _jtreshape(a, p, r);
    if (!b) return STACKTOP = c, d;
    b = a + 205336;
    r = g + 4;
    p = g;
    g = d;
    for (d = 0;;)
        if (0 > (HEAP32[m + (d << 2) >> 2] | 0) && (q = i - d, l = HEAP32[b >> 2], 0 == (g | 0) ? g = 0 : (k = HEAP32[g + 24 >> 2], 0 > (q | 0) ? (n = k + q, e = 0 > (n | 0) ? 0 : n) : e = (k | 0) > (q | 0) ? q : k, HEAP32[r >> 2] = e, (e | 0) < (k | 0) ? (HEAP32[p >> 2] = 0, HEAP32[b >> 2] = p, k = _jtreverse(a, g), HEAP32[b >>
                2] = l, g = k) : g = _jtreverse(a, g))), k = d + 1, (k | 0) < (i | 0)) d = k;
        else {
            h = g;
            break
        }
    STACKTOP = c;
    return h
}
function _jtirs2(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n, p;
    h = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    j = h;
    i = a + 205336;
    l = HEAP32[i >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = h, 0;
    k = HEAP32[f + 24 >> 2];
    0 > (b | 0) ? (m = k + b, n = 0 > (m | 0) ? 0 : m) : n = (k | 0) > (b | 0) ? b : k;
    b = j;
    HEAP32[b >> 2] = n;
    m = k - n;
    p = HEAP32[d + 24 >> 2];
    0 > (e | 0) ? (e = p + e, e = 0 > (e | 0) ? 0 : e) : e = (p | 0) > (e | 0) ? e : p;
    HEAP32[j + 4 >> 2] = e;
    j = p - e;
    if ((k | 0) == (n | 0) & (p | 0) == (e | 0)) return a = getFUNCTION_TABLE(g)(a, f, d, c), STACKTOP = h, a;
    e = (m | 0) < (j | 0) ? m : j;
    a: do
        if (0 != (e | 0)) {
            j = e << 2;
            m = f + 28;
            for (p = d + 28;
                (HEAP8[m] | 0) == (HEAP8[p] | 0);)
                if (n =
                    j - 1, 0 == (n | 0)) break a;
                else j = n, m += 1, p += 1;
            p = HEAP32[a + 4408 >> 2];
            m = HEAP32[p + (HEAP32[p >> 2] + 36) >> 2];
            _jtjsigstr(a, 9, HEAP32[m + 20 >> 2], m + HEAP32[m >> 2]);
            a = 0;
            STACKTOP = h;
            return a
        }
    while (0);
    HEAP32[i >> 2] = b;
    b = getFUNCTION_TABLE(g)(a, f, d, c);
    HEAP32[i >> 2] = l;
    STACKTOP = h;
    return b
}
function _jtis(a, f, d, c) {
    var b, e, g, h, j, i, l;
    b = 0;
    e = HEAP32[c + (f << 2) >> 2];
    g = HEAP32[c + (d << 2) >> 2];
    if (0 == (HEAP32[e + 12 >> 2] & 2 | 0)) d = e, h = 0;
    else if (2 <= (HEAP32[e + 24 >> 2] | 0)) d = e, h = 0;
    else {
        d = e;
        j = HEAP32[e >> 2];
        i = 96 == (HEAP8[d + j] | 0);
        h = i & 1;
        i ? (e = HEAP32[e + 20 >> 2] - 1, i = _jtga(a, 2, e, 1, 0), 0 == (i | 0) ? d = 0 : (_memcpy(i + HEAP32[i >> 2], j + (d + 1), e) | 0, d = i)) : d = e;
        d = _jtwords(a, d);
        if (0 == (d | 0)) return 0;
        if (1 == (HEAP32[d + 20 >> 2] | 0)) {
            j = _jthead(a, d);
            if (0 == (j | 0)) return 0;
            d = j
        }
    }
    if (0 == (HEAP32[d + 20 >> 2] | 0) && !(0 != (HEAP32[g + 24 >> 2] | 0) && 0 == (HEAP32[g + 28 >> 2] | 0))) return d =
        HEAP32[a + 4408 >> 2], e = HEAP32[d + (HEAP32[d >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    e = HEAP32[c + (f + 1 << 2) >> 2];
    f = HEAP32[a + 204564 >> 2];
    0 == (f | 0) ? b = 15 : -128 == (HEAP8[e + HEAP32[e >> 2]] | 0) ? l = f : b = 15;
    15 == b && (l = HEAP32[a + 204520 >> 2]);
    b = a + 205676;
    HEAP32[b >> 2] = l;
    if (0 == (HEAP32[d + 12 >> 2] & 33554432 | 0))
        if (f = HEAP32[d + 24 >> 2], 1 == (f | 0)) HEAP32[a + 205332 >> 2] = 0 != h << 24 >> 24 ? 928 : 2684, _jtrank2ex(a, d, g, 0, -1, -1, 540);
        else if (0 == (f | 0)) f = _jtope(a, d), 0 == (f | 0) ? f = 0 : (e = _jtstdnm(a, f), 0 != (e | 0) ? f = e : (HEAP32[a + 1168 >> 2] = _jtnfs(a, HEAP32[f +
        20 >> 2], f + HEAP32[f >> 2]), e = HEAP32[a + 4408 >> 2], c = HEAP32[e + (HEAP32[e >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), f = 0)), _jtsymbis(a, f, g, HEAP32[b >> 2]);
    else return f = HEAP32[a + 4408 >> 2], h = HEAP32[f + (HEAP32[f >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), 0;
    else _jtsymbis(a, d, g, l);
    HEAP32[b >> 2] = 0;
    return a = 0 != (HEAP8[a + 204545] | 0) ? 0 : g
}
function _jtisf(a, f, d) {
    var c;
    c = _jtope(a, f);
    0 == (c | 0) ? f = 0 : (f = _jtstdnm(a, c), 0 == (f | 0) && (HEAP32[a + 1168 >> 2] = _jtnfs(a, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), f = HEAP32[a + 4408 >> 2], c = HEAP32[f + (HEAP32[f >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), f = 0));
    c = getFUNCTION_TABLE(HEAP32[a + 205332 >> 2])(a, d, 0);
    return _jtsymbis(a, f, c, HEAP32[a + 205676 >> 2])
}
function _jtjgets(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m;
    d = a;
    HEAP8[HEAP32[d >> 2]] = 0;
    c = 1 == (HEAP8[f] | 0);
    b = c & 1;
    e = c ? 161016 : f;
    f = HEAP32[a + 1224 >> 2];
    if (0 == (f | 0)) {
        _jtshowerr(a);
        if (0 == (HEAP32[a + 204976 >> 2] | 0))
            if (c = HEAP32[a + 205624 >> 2], 0 != (c | 0)) g = getFUNCTION_TABLE(c)(a, e);
            else return HEAP8[HEAP32[d >> 2]] = 0, c = HEAP32[a + 4408 >> 2], h = HEAP32[c + (HEAP32[c >> 2] + 8) >> 2], _jtjsigstr(a, 2, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), 0;
        else h = 0 != (HEAP8[e] | 0) ? 120112 : 119032, c = a + 1040, HEAP8[c] = 1, j = _strlen(h), i = _jtga(a, 2, j, 1, 0), 0 == (i | 0) ? l = 0 : (_memcpy(i + HEAP32[i >>
            2], h, j) | 0, l = i), i = _jtexec1(a, l), HEAP8[c] = 0, 0 != (i | 0) ? (j = c = i, i = c + HEAP32[j >> 2], _jtwri(a, 3, 161016, _strlen(i), i), g = c + HEAP32[j >> 2]) : (j = HEAP32[d >> 2], 156616 == (j | 0) && _exit(2), _munmap(j, 1), HEAP32[d >> 2] = 156616, j = a + 12, _close(HEAP32[j >> 2]), HEAP32[j >> 2] = 0, j = a + 16, _unlink(j), HEAP8[j] = 0, _exit(2));
        d = _jtinpl(a, b, _strlen(g), g)
    } else {
        g = f + 36;
        HEAP32[g >> 2] += 1;
        g = f + 28;
        d = HEAP32[g >> 2];
        l = HEAP32[f + 16 >> 2];
        j = HEAP32[l + 20 >> 2];
        c = l;
        i = HEAP32[l >> 2];
        if ((d | 0) >= (j | 0)) return 0;
        HEAP32[f + 32 >> 2] = d;
        f = j - d;
        a: do
            if (0 < (f | 0)) {
                l = c + (i + d);
                for (h = 0;;) {
                    k =
                        l + 1;
                    m = HEAP8[l];
                    if (13 == m << 24 >> 24 | 10 == m << 24 >> 24) break;
                    h += 1;
                    if ((h | 0) < (f | 0)) l = k;
                    else {
                        h = j;
                        break a
                    }
                }
                l = 13 == m << 24 >> 24 ? 10 == (HEAP8[k] | 0) | 0 : 0;
                h = l + (d + (h + 1))
            } else h = j;
        while (0);
        HEAP32[g >> 2] = h;
        g = h - d;
        g = (h | 0) == (d | 0) ? g : ((32 > HEAPU8[c + (i - 1 + h)]) << 31 >> 31) + g;
        j = 0 == (g | 0) ? 0 : ((32 > HEAPU8[c + (d - 1 + i + g)]) << 31 >> 31) + g;
        g = c + (i + d);
        _jtwri(a, 3, e, j, g);
        d = _jtinpl(a, b, j, g)
    }
    return d
}
function _jtjpr(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b, na,
        Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf, Mf,
        ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    if (0 == (f | 0)) STACKTOP = c;
    else {
        b = f + 12;
        e = HEAP32[b >> 2];
        g = e & 805567999;
        h = 0 == (g | 0);
        if (!h && (j = a + 205709, i = HEAP8[j], l = 0 == i << 24 >> 24, !l)) {
            k = a + 205692;
            m = HEAP32[k >> 2];
            n = a + 205752;
            p = HEAP32[n >> 2];
            q = p + m;
            r = a + 205272;
            s = HEAP32[r >> 2];
            t = a + 205284;
            u = HEAP32[t >> 2];
            w = a + 205280;
            v = HEAP32[w >> 2];
            x = a + 205276;
            y = HEAP32[x >> 2];
            z = _jtjprx(a, s, u, v, y, f);
            if (A = 0 == (z | 0)) {
                STACKTOP = c;
                return
            }
            D = z + 20;
            B = HEAP32[D >> 2];
            G = 0 == (B | 0);
            if (!G)
                if (C = a + 204968, F = HEAP32[C >>
                        2], J = (E = 0 == (F | 0)) ? 1 : F, L = HEAP32[z >> 2], I = z + L, H = a + 204976, K = HEAP32[H >> 2], N = 0 == (K | 0)) {
                    if (S = a + 205628, T = HEAP32[S >> 2], V = 0 == (T | 0), !V) getFUNCTION_TABLE(T)(a, J, I)
                } else _memcpy(c, 113016, 24) | 0, Q = J + 48, P = Q & 255, HEAP8[c] = P, M = a + 204972, HEAP32[M >> 2] = I, R = a + 204545, O = HEAP8[R], aa = a + 4400, Z = HEAP32[aa >> 2], HEAP8[R] = 0, HEAP32[aa >> 2] = 0, $ = a + 1040, HEAP8[$] = 1, ba = _strlen(c), ka = _jtga(a, 2, ba, 1, 0), (ea = 0 == (ka | 0)) ? ha = 0 : (da = HEAP32[ka >> 2], ga = ka + da, _memcpy(ga, c, ba) | 0, ha = ka), _jtexec1(a, ha), HEAP8[$] = 0, HEAP8[R] = O, HEAP32[aa >> 2] = Z;
            U = HEAP32[31088];
            ca = 0 == (U | 0);
            ca || (_jttraverse(a, U, 654), X = U + 16, Y = HEAP32[X >> 2], ja = Y + 1, HEAP32[X >> 2] = ja);
            _jttpop(a, q);
            _jttpush(a, U);
            STACKTOP = c;
            return
        }
        fa = e & 1835008;
        if (ia = 0 == (fa | 0)) STACKTOP = c;
        else if (ra = HEAP32[f >> 2], sa = ra + 40, ta = f + sa, wa = HEAP8[ta], (za = 126 == wa << 24 >> 24) ? (Ba = ra + 8, ua = f + Ba, ya = HEAP32[ua >> 2], (xa = 0 == (ya | 0)) ? oa = f : (pa = ya + 12, la = HEAP32[pa >> 2], qa = la & 33554432, oa = (Da = 0 == (qa | 0)) ? f : Aa = _jtsymbrdlock(a, ya))) : oa = f, Ea = 0 == (oa | 0)) STACKTOP = c;
        else if (Sa = a + 205709, Oa = HEAP8[Sa], Ha = 0 == Oa << 24 >> 24) STACKTOP = c;
        else if (Ga = a + 2356, Ma = HEAP32[Ga >>
                2], Ia = 0 < (Ma | 0)) {
            db = a + 2360;
            W = a + 205692;
            Xa = a + 205752;
            Ta = a + 205272;
            fb = a + 205284;
            mb = a + 205280;
            ma = a + 205276;
            ab = a + 204968;
            Na = a + 204976;
            $a = a + 205628;
            Ua = a + 204972;
            Pa = a + 204545;
            bb = a + 4400;
            La = a + 1040;
            Ja = a + 204580;
            Qa = a + 204552;
            Ya = a + 204584;
            lb = 0;
            Ca = db;
            a: for (;;) {
                gb = Ca + 4;
                Fa = HEAP32[Ca >> 2];
                switch (Fa | 0) {
                    case 1:
                        Za = _jtaro(a, oa);
                        qb = _jtbox(a, Za);
                        ib = HEAP32[W >> 2];
                        ub = HEAP32[Xa >> 2];
                        eb = ub + ib;
                        rb = HEAP32[Ta >> 2];
                        wb = HEAP32[fb >> 2];
                        Ka = HEAP32[mb >> 2];
                        Va = HEAP32[ma >> 2];
                        nb = _jtjprx(a, rb, wb, Ka, Va, qb);
                        if (ob = 0 == (nb | 0)) {
                            d = 96;
                            break a
                        }
                        cb = nb + 20;
                        Wa = HEAP32[cb >>
                            2];
                        yb = 0 == (Wa | 0);
                    yb || (Cb = HEAP32[ab >> 2], zb = (Pb = 0 == (Cb | 0)) ? 1 : Cb, ac = Zb = nb, Hb = HEAP32[ac >> 2], Ib = Zb + Hb, Qb = HEAP32[Na >> 2], (Rb = 0 == (Qb | 0)) ? (Ob = HEAP32[$a >> 2], Bb = 0 == (Ob | 0), Bb || (xb = Ob, getFUNCTION_TABLE(xb)(a, zb, Ib))) : (_memcpy(c, 113016, 24) | 0, dc = zb + 48, tb = dc & 255, HEAP8[c] = tb, HEAP32[Ua >> 2] = Ib, oc = HEAP8[Pa], Mb = HEAP32[bb >> 2], HEAP8[Pa] = 0, HEAP32[bb >> 2] = 0, HEAP8[La] = 1, Tb = _strlen(c), Ra = _jtga(a, 2, Tb, 1, 0), (Nb = 0 == (Ra | 0)) ? sb = 0 : (Eb = Ab = Ra, Lb = HEAP32[Eb >> 2], vb = Ab + Lb, _memcpy(vb, c, Tb) | 0, sb = Ra), _jtexec1(a, sb), HEAP8[La] = 0, HEAP8[Pa] = oc, HEAP32[bb >>
                            2] = Mb));
                        wc = HEAP32[31088];
                        Ec = 0 == (wc | 0);
                        Ec || (_jttraverse(a, wc, 654), yc = wc + 16, Db = HEAP32[yc >> 2], bc = Db + 1, HEAP32[yc >> 2] = bc);
                        _jttpop(a, eb);
                        pb = _jttpush(a, wc);
                        if (Fb = 0 == (pb | 0)) {
                            d = 96;
                            break a
                        }
                        break;
                    case 2:
                        jb = _jtdrr(a, oa);
                        (gc = 0 == (jb | 0)) ? d = 38: (ic = jb + 12, vc = HEAP32[ic >> 2], hc = vc & 32, (uc = 0 == (hc | 0)) ? d = 38 : Ac = jb);
                        38 == d && (d = 0, xc = _jtbox(a, jb), Ac = cd = _jtravel(a, xc));
                        jc = HEAP32[W >> 2];
                        Tc = HEAP32[Xa >> 2];
                        Fc = Tc + jc;
                        Bc = HEAP32[Ta >> 2];
                        ec = HEAP32[fb >> 2];
                        Xb = HEAP32[mb >> 2];
                        sc = HEAP32[ma >> 2];
                        nc = _jtjprx(a, Bc, ec, Xb, sc, Ac);
                        if (tc = 0 == (nc | 0)) {
                            d = 96;
                            break a
                        }
                        Ub = nc + 20;
                        $c = HEAP32[Ub >> 2];
                        ad = 0 == ($c | 0);
                    ad || (qc = HEAP32[ab >> 2], rc = (Uc = 0 == (qc | 0)) ? 1 : qc, Jb = kb = nc, $b = HEAP32[Jb >> 2], na = kb + $b, Vb = HEAP32[Na >> 2], (kc = 0 == (Vb | 0)) ? (va = HEAP32[$a >> 2], Wc = 0 == (va | 0), Wc || (Yb = va, getFUNCTION_TABLE(Yb)(a, rc, na))) : (_memcpy(c, 113016, 24) | 0, fc = rc + 48, Kb = fc & 255, HEAP8[c] = Kb, HEAP32[Ua >> 2] = na, Gb = HEAP8[Pa], gd = HEAP32[bb >> 2], HEAP8[Pa] = 0, HEAP32[bb >> 2] = 0, HEAP8[La] = 1, mc = _strlen(c), Gc = _jtga(a, 2, mc, 1, 0), (dd = 0 == (Gc | 0)) ? kd = 0 : (Vc = Fd = Gc, Hd = HEAP32[Vc >> 2], bd = Fd + Hd, _memcpy(bd, c, mc) | 0, kd = Gc), _jtexec1(a,
                            kd), HEAP8[La] = 0, HEAP8[Pa] = Gb, HEAP32[bb >> 2] = gd));
                        cc = HEAP32[31088];
                        Ic = 0 == (cc | 0);
                        Ic || (_jttraverse(a, cc, 654), fd = cc + 16, xd = HEAP32[fd >> 2], Xc = xd + 1, HEAP32[fd >> 2] = Xc);
                        _jttpop(a, Fc);
                        Wd = _jttpush(a, cc);
                        if (Wb = 0 == (Wd | 0)) {
                            d = 96;
                            break a
                        }
                        break;
                    case 4:
                        Sb = _jttrep(a, oa);
                        pc = HEAP32[W >> 2];
                        zc = HEAP32[Xa >> 2];
                        hd = zc + pc;
                        Yc = HEAP32[Ta >> 2];
                        Ad = HEAP32[fb >> 2];
                        Gd = HEAP32[mb >> 2];
                        hb = HEAP32[ma >> 2];
                        ld = _jtjprx(a, Yc, Ad, Gd, hb, Sb);
                        if (ed = 0 == (ld | 0)) {
                            d = 96;
                            break a
                        }
                        Jc = ld + 20;
                        Oc = HEAP32[Jc >> 2];
                        Pc = 0 == (Oc | 0);
                        Pc || (ke = HEAP32[ab >> 2], pd = (Ed = 0 == (ke | 0)) ? 1 : ke,
                               Cc = id = ld, Qc = HEAP32[Cc >> 2], Zc = id + Qc, vd = HEAP32[Na >> 2], ($d = 0 == (vd | 0)) ? (je = HEAP32[$a >> 2], Kc = 0 == (je | 0), Kc || (Bd = je, getFUNCTION_TABLE(Bd)(a, pd, Zc))) : (_memcpy(c, 113016, 24) | 0, od = pd + 48, Vd = od & 255, HEAP8[c] = Vd, HEAP32[Ua >> 2] = Zc, Zd = HEAP8[Pa], Jd = HEAP32[bb >> 2], HEAP8[Pa] = 0, HEAP32[bb >> 2] = 0, HEAP8[La] = 1, Md = _strlen(c), Cd = _jtga(a, 2, Md, 1, 0), (fe = 0 == (Cd | 0)) ? Xd = 0 : (Od = qd = Cd, Mc = HEAP32[Od >> 2], Dd = qd + Mc, _memcpy(Dd, c, Md) | 0, Xd = Cd), _jtexec1(a, Xd), HEAP8[La] = 0, HEAP8[Pa] = Zd, HEAP32[bb >> 2] = Jd));
                        Td = HEAP32[31088];
                        le = 0 == (Td | 0);
                        le || (_jttraverse(a,
                            Td, 654), me = Td + 16, wd = HEAP32[me >> 2], Ie = wd + 1, HEAP32[me >> 2] = Ie);
                        _jttpop(a, hd);
                        xe = _jttpush(a, Td);
                        if (ye = 0 == (xe | 0)) {
                            d = 96;
                            break a
                        }
                        break;
                    case 6:
                        Fe = HEAP32[W >> 2];
                        nf = HEAP32[Xa >> 2];
                        Je = nf + Fe;
                        HEAP32[Ja >> 2] = 0;
                        HEAP32[Qa >> 2] = 718;
                        HEAP32[Ya >> 2] = 2472;
                        Id = _jtlrr(a, oa);
                        Qe = HEAP8[Pa];
                        (sd = 0 == Qe << 24 >> 24) ? (ge = HEAP32[Ja >> 2], md = (ud = 0 == (ge | 0)) ? Id : de = _jtover(a, Id, ge), HEAP32[Ja >> 2] = 0, ae = 0 == (md | 0), ae || (_jttraverse(a, md, 654), Dc = md + 16, Nc = HEAP32[Dc >> 2], yd = Nc + 1, HEAP32[Dc >> 2] = yd), _jttpop(a, Je), Sc = jd = _jttpush(a, md)) : Sc = 0;
                        lc = HEAP32[W >> 2];
                        nd = HEAP32[Xa >> 2];
                        Rc = nd + lc;
                        Hc = HEAP32[Ta >> 2];
                        Kd = HEAP32[fb >> 2];
                        Rd = HEAP32[mb >> 2];
                        Nd = HEAP32[ma >> 2];
                        be = _jtjprx(a, Hc, Kd, Rd, Nd, Sc);
                        if (zd = 0 == (be | 0)) {
                            d = 96;
                            break a
                        }
                        we = be + 20;
                        Lc = HEAP32[we >> 2];
                        rd = 0 == (Lc | 0);
                    rd || (se = HEAP32[ab >> 2], Cf = (Ud = 0 == (se | 0)) ? 1 : se, Te = td = be, pe = HEAP32[Te >> 2], Pd = td + pe, Me = HEAP32[Na >> 2], (Sd = 0 == (Me | 0)) ? ($e = HEAP32[$a >> 2], qe = 0 == ($e | 0), qe || (Ce = $e, getFUNCTION_TABLE(Ce)(a, Cf, Pd))) : (_memcpy(c, 113016, 24) | 0, cf = Cf + 48, sf = cf & 255, HEAP8[c] = sf, HEAP32[Ua >> 2] = Pd, Ue = HEAP8[Pa], kf = HEAP32[bb >> 2], HEAP8[Pa] = 0, HEAP32[bb >>
                            2] = 0, HEAP8[La] = 1, Re = _strlen(c), ce = _jtga(a, 2, Re, 1, 0), (De = 0 == (ce | 0)) ? Ge = 0 : (We = He = ce, Yd = HEAP32[We >> 2], Ne = He + Yd, _memcpy(Ne, c, Re) | 0, Ge = ce), _jtexec1(a, Ge), HEAP8[La] = 0, HEAP8[Pa] = Ue, HEAP32[bb >> 2] = kf));
                        Se = HEAP32[31088];
                        Ee = 0 == (Se | 0);
                        Ee || (_jttraverse(a, Se, 654), Ld = Se + 16, he = HEAP32[Ld >> 2], Qd = he + 1, HEAP32[Ld >> 2] = Qd);
                        _jttpop(a, Rc);
                        re = _jttpush(a, Se);
                        if (Ke = 0 == (re | 0)) {
                            d = 96;
                            break a
                        }
                        break;
                    case 5:
                        Ae = HEAP32[W >> 2];
                        te = HEAP32[Xa >> 2];
                        ie = te + Ae;
                        HEAP32[Ja >> 2] = 0;
                        HEAP32[Qa >> 2] = 716;
                        HEAP32[Ya >> 2] = 2468;
                        ff = _jtlrr(a, oa);
                        ue = HEAP8[Pa];
                        (Oe = 0 == ue << 24 >> 24) ? (ne = HEAP32[Ja >> 2], vf = (ze = 0 == (ne | 0)) ? ff : lf = _jtover(a, ff, ne), HEAP32[Ja >> 2] = 0, Xe = 0 == (vf | 0), Xe || (_jttraverse(a, vf, 654), Be = vf + 16, hf = HEAP32[Be >> 2], af = hf + 1, HEAP32[Be >> 2] = af), _jttpop(a, ie), uf = zf = _jttpush(a, vf)) : uf = 0;
                        ve = HEAP32[W >> 2];
                        If = HEAP32[Xa >> 2];
                        Df = If + ve;
                        Ef = HEAP32[Ta >> 2];
                        Gf = HEAP32[fb >> 2];
                        of = HEAP32[mb >> 2];
                        Lf = HEAP32[ma >> 2];
                        pf = _jtjprx(a, Ef, Gf, of, Lf, uf);
                        if (bf = 0 == (pf | 0)) {
                            d = 96;
                            break a
                        }
                        Bf = pf + 20;
                        Pf = HEAP32[Bf >> 2];
                        Ye = 0 == (Pf | 0);
                        Ye || (Hf = HEAP32[ab >> 2], mf = (jf = 0 == (Hf | 0)) ? 1 : Hf, Ve = Le = pf, df = HEAP32[Ve >>
                                                                                                                   2], wf = Le + df, Yf = HEAP32[Na >> 2], (Jf = 0 == (Yf | 0)) ? (Qf = HEAP32[$a >> 2], Sf = 0 == (Qf | 0), Sf || (Mf = Qf, getFUNCTION_TABLE(Mf)(a, mf, wf))) : (_memcpy(c, 113016, 24) | 0, ee = mf + 48, oe = ee & 255, HEAP8[c] = oe, HEAP32[Ua >> 2] = wf, rf = HEAP8[Pa], Ff = HEAP32[bb >> 2], HEAP8[Pa] = 0, HEAP32[bb >> 2] = 0, HEAP8[La] = 1, xf = _strlen(c), Pe = _jtga(a, 2, xf, 1, 0), (qf = 0 == (Pe | 0)) ? yf = 0 : (Zf = Nf = Pe, tg = HEAP32[Zf >> 2], Ze = Nf + tg, _memcpy(Ze, c, xf) | 0, yf = Pe), _jtexec1(a, yf), HEAP8[La] = 0, HEAP8[Pa] = rf, HEAP32[bb >> 2] = Ff));
                        gf = HEAP32[31088];
                        ef = 0 == (gf | 0);
                        ef || (_jttraverse(a, gf, 654), Kf = gf + 16, bg =
                            HEAP32[Kf >> 2], lg = bg + 1, HEAP32[Kf >> 2] = lg);
                        _jttpop(a, Df);
                        Rf = _jttpush(a, gf);
                        if (Ug = 0 == (Rf | 0)) {
                            d = 96;
                            break a
                        }
                }
                Vf = lb + 1;
                if (Jg = (Vf | 0) < (Ma | 0)) lb = Vf, Ca = gb;
                else {
                    d = 96;
                    break
                }
            }
            96 == d && (STACKTOP = c)
        } else STACKTOP = c
    }
}
function _jtjprx(a, f, d, c, b, e) {
    var g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea;
    h = _jtthorn1(a, e);
    if (0 == (h | 0)) return 0;
    j = e + 12;
    e = 0 != (HEAP32[j >> 2] & 196610 | 0);
    i = HEAP32[h + 24 >> 2];
    l = h;
    k = HEAP32[h >> 2];
    m = l + k;
    1 < (i | 0) ? (n = i - 2, p = HEAP32[h + 28 + (n << 2) >> 2], q = n, g = 6) : 0 == (i | 0) ? (t = s = r = 1, u = -2, g = 10) : (p = 1, q = i - 2, g = 6);
    do
        if (6 == g)
            if (n = HEAP32[h + 28 + (i - 1 << 2) >> 2], 0 < (q | 0)) {
                w = 1;
                for (v = 0;;)
                    if (x = w * (HEAP32[h + 28 + (v << 2) >> 2] | 0), y = v + 1, (y | 0) < (q | 0)) w = x, v = y;
                    else break;
                2147483647 >= x ? (r = x, s = p, t =
                    n, u = q, g = 10) : (y = HEAP32[a + 4408 >> 2], z = HEAP32[y + (HEAP32[y >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[z + 20 >> 2], z + HEAP32[z >> 2]), A = 0, D = p, B = n, G = q)
            } else r = 1, s = p, t = n, u = q, g = 10;
    while (0);
    10 == g && (A = r & -1 | 0, D = s, B = t, G = u);
    u = a + 204545;
    if (0 != (HEAP8[u] | 0)) return 0;
    t = A * (D | 0);
    if (2147483647 < t)
        if (A = HEAP32[a + 4408 >> 2], s = HEAP32[A + (HEAP32[A >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[s + 20 >> 2], s + HEAP32[s >> 2]), 0 == (HEAP8[u] | 0)) C = 0;
        else return 0;
    else C = t & -1;
    f = (t = 0 == (f | 0)) ? 10 : 13;
    s = t ? 1 : 2;
    A = (B | 0) < (d | 0) ? B : d;
    r = (c | 0) + (b | 0);
    q = 2 < (i | 0) ? 2 - i : 0;
    a: do
        if (0 < (G |
                0)) {
            p = q;
            x = 0;
            for (v = 1;;) {
                w = HEAP32[h + 28 + (x << 2) >> 2];
                if (0 == (w | 0)) {
                    F = 0;
                    break a
                }
                z = Math_imul(w, v) | 0;
                w = z + p;
                y = x + 1;
                if ((y | 0) < (G | 0)) p = w, x = y, v = z;
                else {
                    F = w;
                    break
                }
            }
        } else F = q;
    while (0);
    q = 2147483647 > r ? b + c : 2147483647;
    v = (C | 0) < (q | 0) ? C : q;
    q = s + 3;
    E = (x = 0 != (D | 0)) ? Math_imul(F, s) | 0 : 0;
    p = E + q;
    J = e ? B + s + (Math_imul(((B | 0) / (d | 0) & -1) + 1, q) | 0) : A + s + ((A | 0) < (B | 0) ? 3 : 0);
    E = (v | 0) * (J | 0);
    if (2147483647 < E)
        if (J = HEAP32[a + 4408 >> 2], n = HEAP32[J + (HEAP32[J >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), 0 == (HEAP8[u] | 0)) L = p;
        else return 0;
    else L =
        p + (E & -1);
    if (e & (t ^ 1)) {
        do
            if ((v | 0) < (C | 0)) {
                E = Math_imul(B, c) | 0;
                if (0 < (E | 0)) {
                    n = u = p = 0;
                    for (J = m;;)
                        if (w = J + 1, z = HEAP8[J], u = 13 == z << 24 >> 24 ? p + 1 : 10 == z << 24 >> 24 ? 13 == u << 24 >> 24 ? p - 1 : p + 1 : p, y = n + 1, (y | 0) < (E | 0)) p = u, u = z, n = y, J = w;
                        else {
                            I = u;
                            H = z;
                            break
                        }
                } else H = I = 0;
                J = Math_imul(B, b) | 0;
                if (0 >= (J | 0)) K = I;
                else {
                    n = I;
                    u = H;
                    p = l + ((Math_imul(C - b, B) | 0) + k);
                    for (E = 0;;)
                        if (y = p + 1, p = HEAP8[p], u = 13 == p << 24 >> 24 ? n + 1 : 10 == p << 24 >> 24 ? 13 == u << 24 >> 24 ? n - 1 : n + 1 : n, z = E + 1, (z | 0) < (J | 0)) n = u, u = p, p = y, E = z;
                        else {
                            K = u;
                            break
                        }
                }
            } else if (E = Math_imul(C, B) | 0, 0 < (E | 0)) {
            n = w = z = 0;
            for (y = m;;)
                if (p =
                    y + 1, u = HEAP8[y], J = 13 == u << 24 >> 24 ? z + 1 : 10 == u << 24 >> 24 ? 13 == (n | 0) ? z - 1 : z + 1 : z, y = w + 1, (y | 0) < (E | 0)) z = J, w = y, n = u << 24 >> 24, y = p;
                else {
                    K = J;
                    break
                }
        } else K = 0;
        while (0);
        E = K + L
    } else E = L;
    e ? g = 53 : 0 == (HEAP32[j >> 2] & 64544 | 0) ? (N = E, S = 0) : g = 53;
    if (53 == g) {
        do
            if ((v | 0) < (C | 0)) {
                g = Math_imul(B, c) | 0;
                if (0 < (g | 0)) {
                    L = j = 0;
                    for (K = m;;)
                        if (J = 11 > (HEAP8[K] - 16 & 255) ? j + 3 : j, y = L + 1, (y | 0) < (g | 0)) j = J, L = y, K += 1;
                        else {
                            T = J;
                            break
                        }
                } else T = 0;
                K = Math_imul(B, b) | 0;
                if (0 >= (K | 0)) V = T;
                else {
                    L = T;
                    j = 0;
                    for (g = l + ((Math_imul(C - b, B) | 0) + k);;)
                        if (J = 11 > (HEAP8[g] - 16 & 255) ? L + 3 : L, y = j + 1, (y | 0) < (K |
                                0)) L = J, j = y, g += 1;
                        else {
                            V = J;
                            break
                        }
                }
            } else if (g = Math_imul(C, B) | 0, 0 < (g | 0)) {
            H = I = 0;
            for (z = m;;)
                if (j = 11 > (HEAP8[z] - 16 & 255) ? H + 3 : H, L = I + 1, (L | 0) < (g | 0)) I = L, H = j, z += 1;
                else {
                    V = j;
                    break
                }
        } else V = 0;
        while (0);
        N = V + E;
        S = V
    }
    V = _jtga(a, 2, N, 1, 0);
    if (0 == (V | 0)) return 0;
    E = V + HEAP32[V >> 2];
    if (0 < (C | 0)) {
        z = i - 1;
        i = (C | 0) > (b | 0);
        H = C - b;
        I = H - 1;
        k = 0 == (S | 0);
        S = (A | 0) < (B | 0);
        l = A + 1;
        T = A + 2;
        v = A + 3;
        g = 0 < (A | 0);
        j = B - A;
        L = 0 < (B | 0);
        K = ~B;
        J = ~d;
        d = ~((K | 0) > (J | 0) ? K : J);
        K = J = 0;
        y = r < ((x ? F : 0) + C | 0) ? c : 2147483647;
        F = E;
        for (x = m;;) {
            do
                if (0 == ((K | 0) % (D | 0) & -1 | 0))
                    if (m = 0 == (K | 0) ? 0 : z, 0 < (m | 0)) {
                        Q =
                            J;
                        p = 1;
                        u = F;
                        for (P = 0;;)
                            if (n = Math_imul(HEAP32[h + 28 + (G - P << 2) >> 2], p) | 0, 0 == ((K | 0) % (n | 0) & -1 | 0) && (HEAP8[u] = f, HEAP8[u + 1] = 10, u += s, Q += 1), w = P + 1, (w | 0) < (m | 0)) p = n, P = w;
                            else {
                                M = u;
                                R = Q;
                                break
                            }
                    } else M = F, R = J;
            else M = F, R = J; while (0);
            do
                if ((y | 0) <= (R | 0) & i) m = x + (Math_imul(H - K, B) | 0), HEAP8[M] = 46, HEAP8[M + 1] = 46, HEAP8[M + 2] = 46, u = m, Q = M + 3, m = 2147483647, F = I, P = R;
                else if (e)
                if (L) {
                    F = R;
                    Q = P = 0;
                    J = M;
                    n = 0;
                    for (m = x;;)
                        if (u = m + 1, p = HEAP8[m], m = p << 24 >> 24, 13 == p << 24 >> 24 ? (HEAP8[J] = f, HEAP8[J + 1] = 10, aa = J + s, P = 0, Z = F + 1) : 10 == p << 24 >> 24 ? 13 == (n | 0) ? (aa = J, P = 0, Z = F) : (HEAP8[J] =
                                f, HEAP8[J + 1] = 10, aa = J + s, P = 0, Z = F + 1) : (0 == p << 24 >> 24 ? aa = J : ((P | 0) < (A | 0) ? (n = J + 1, HEAP8[J] = p, 11 <= (p - 16 & 255) ? aa = n : (HEAP8[J] = -30, HEAP8[n] = -108, HEAP8[J + 2] = HEAP8[m + 112936], aa = J + 3)) : (P | 0) != (A | 0) ? aa = J : (HEAP8[J] = 46, HEAP8[J + 1] = 46, HEAP8[J + 2] = 46, aa = J + 3), P += 1), Z = F), p = Q + 1, (p | 0) < (B | 0)) F = Z, Q = p, J = aa, n = m, m = u;
                        else break;
                    u = x + B;
                    Q = aa;
                    m = y;
                    F = K;
                    P = Z
                } else u = x, Q = M, m = y, F = K, P = R;
            else {
                if (k) _memcpy(M, x, A) | 0, m = M + A, S ? (HEAP8[m] = 46, HEAP8[M + l] = 46, HEAP8[M + T] = 46, u = x + B, Q = M + v) : (u = x + A, Q = m);
                else {
                    if (g) {
                        m = M;
                        p = x;
                        for (u = 0;;)
                            if (w = HEAP8[p], n = m + 1, HEAP8[m] =
                                w, 11 > (w - 16 & 255) ? (HEAP8[m] = -30, HEAP8[n] = -108, HEAP8[m + 2] = HEAP8[112936 + (w << 24 >> 24)], O = m + 3) : O = n, n = u + 1, (n | 0) < (A | 0)) m = O, p += 1, u = n;
                            else break;
                        m = O;
                        F = x + d
                    } else m = M, F = x;
                    S ? (HEAP8[m] = 46, HEAP8[m + 1] = 46, HEAP8[m + 2] = 46, u = F + j, Q = m + 3) : (u = F, Q = m)
                }
                m = y;
                F = K;
                P = R
            } while (0);
            HEAP8[Q] = f;
            HEAP8[Q + 1] = 10;
            Q += s;
            P += 1;
            p = F + 1;
            if ((p | 0) < (C | 0)) J = P, K = p, y = m, F = Q, x = u;
            else break
        }
        e = P | 0;
        d = Q
    } else e = 0, d = E;
    if (e > r + 1) {
        r = 0 < (N | 0) & 0 < (c | 0);
        do
            if (t) {
                if (r) {
                    Q = e = 0;
                    for (P = E;;)
                        if (u = P + 1, x = (10 == (HEAP8[P] | 0) | 0) + Q, F = e + 1, (F | 0) < (N | 0) & (x | 0) < (c | 0)) e = F, Q = x, P = u;
                        else {
                            $ = u;
                            break
                        }
                } else $ =
                    E;
                if (1 > (N | 0) | 0 > (b | 0)) ba = $, ka = d;
                else {
                    e = x = 0;
                    for (g = d;;)
                        if (P = g - 1, Q = (10 == (HEAP8[P] | 0) | 0) + x, e += 1, (e | 0) >= (N | 0) | (Q | 0) > (b | 0)) {
                            ba = $;
                            ka = P;
                            break
                        } else x = Q, g = P
                }
            } else {
                if (r) {
                    P = f & 255 | 2560;
                    Q = e = 0;
                    for (u = E;;)
                        if (x = u + 1, F = (P << 16 >> 16 == (HEAP16[u >> 1] | 0) | 0) + e, m = Q + 1, (m | 0) < (N | 0) & (F | 0) < (c | 0)) e = F, Q = m, u = x;
                        else {
                            ea = x;
                            break
                        }
                } else ea = E;
                if (1 > (N | 0) | 0 > (b | 0)) ba = ea, ka = d;
                else {
                    u = f & 255 | 2560;
                    Q = 0;
                    e = d;
                    for (P = 0;;)
                        if (x = e - 1, m = (u << 16 >> 16 == (HEAP16[x >> 1] | 0) | 0) + Q, F = P + 1, (F | 0) >= (N | 0) | (m | 0) > (b | 0)) {
                            ba = ea;
                            ka = x;
                            break
                        } else Q = m, e = x, P = F
                }
            }
        while (0);
        HEAP8[ba] = 46;
        HEAP8[ba + 1] = 46;
        HEAP8[ba + 2] = 46;
        HEAP8[ba + 3] = f;
        HEAP8[ba + 4] = 10;
        f = ka + s;
        s = d - f;
        _memmove(ba + q, f, s, 1, 0);
        f = ba + (s + q)
    } else f = d;
    d = f - E;
    (d | 0) > (N | 0) ? (N = HEAP32[a + 4408 >> 2], E = HEAP32[N + (HEAP32[N >> 2] + 80) >> 2], _jtjsigstr(a, 20, HEAP32[E + 20 >> 2], E + HEAP32[E >> 2]), _jtwri(a, 4, 161016, 7, 120136), a = 0) : (HEAP8[f] = 0, HEAP32[V + 28 >> 2] = d, HEAP32[V + 20 >> 2] = d, a = V);
    return a
}
function _jtjsignal3(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 48 | 0;
    g = e + 8;
    h = e + 16;
    j = e + 24;
    i = e + 32;
    l = e + 40;
    k = a + 204545;
    if (0 == (HEAP8[k] | 0)) {
        HEAP8[k] = f;
        HEAP32[a + 204548 >> 2] = f;
        m = a + 4400;
        HEAP32[m >> 2] = 0;
        HEAP8[112968] = 124;
        n = HEAP32[m >> 2];
        p = 2E3 - n;
        q = 1 < (p | 0) ? 1 : p;
        0 < (q | 0) ? (_memcpy(n + (a + 2396), 112968, q) | 0, p = HEAP32[m >> 2] + q, r = HEAP32[m >> 2] = p) : r = n;
        n = HEAP32[a + 4408 >> 2];
        p = HEAP32[n + HEAP32[n >> 2] + (HEAP8[k] << 2) >> 2];
        k = HEAP32[p + 20 >> 2];
        n = 2E3 - r;
        q = (n | 0) > (k | 0) ? k : n;
        0 < (q | 0) ? (_memcpy(r + (a + 2396), p + HEAP32[p >>
            2], q) | 0, p = HEAP32[m >> 2] + q, n = HEAP32[m >> 2] = p) : n = r;
        HEAP8[l] = 10;
        r = 2E3 - n;
        p = 1 < (r | 0) ? 1 : r;
        0 < (p | 0) && (_memcpy(n + (a + 2396), l, p) | 0, HEAP32[m >> 2] += p);
        do
            if (0 == (HEAP32[a + 204524 >> 2] | 0)) {
                HEAP8[112968] = 124;
                p = HEAP32[m >> 2];
                l = 2E3 - p;
                n = 4 < (l | 0) ? 4 : l;
                0 < (n | 0) ? (_memcpy(p + (a + 2396), 112968, n) | 0, l = HEAP32[m >> 2] + n, k = HEAP32[m >> 2] = l) : k = p;
                do
                    if (23 == (f | 0)) 15 < (2E3 - k | 0) ? (p = k + (a + 2396), _sprintf(p, 119104, (b = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[b >> 2] = c, b)), STACKTOP = b, l = _strlen(p), p = HEAP32[m >> 2] + l, r = HEAP32[m >> 2] = p) : r = k, p = HEAP32[d + 20 >> 2], l = 2E3 -
                        r, n = (l | 0) > (p | 0) ? p : l, 0 < (n | 0) ? (_memcpy(r + (a + 2396), d + HEAP32[d >> 2], n) | 0, l = HEAP32[m >> 2] + n, p = HEAP32[m >> 2] = l) : p = r, HEAP8[e] = 10, l = 2E3 - p, n = 1 < (l | 0) ? 1 : l, 0 >= (n | 0) || (_memcpy(p + (a + 2396), e, n) | 0, HEAP32[m >> 2] += n);
                    else {
                        n = HEAP32[d + 20 >> 2];
                        l = 2E3 - k;
                        p = (l | 0) > (n | 0) ? n : l;
                        0 < (p | 0) ? (_memcpy(k + (a + 2396), d + HEAP32[d >> 2], p) | 0, l = HEAP32[m >> 2] + p, r = HEAP32[m >> 2] = l) : r = k;
                        HEAP8[g] = 10;
                        l = 2E3 - r;
                        p = 1 < (l | 0) ? 1 : l;
                        0 < (p | 0) && (_memcpy(r + (a + 2396), g, p) | 0, HEAP32[m >> 2] += p);
                        HEAP8[112968] = 124;
                        p = HEAP32[m >> 2];
                        l = 2E3 - p;
                        n = 4 < (l | 0) ? 4 : l;
                        0 < (n | 0) ? (_memcpy(p + (a + 2396),
                            112968, n) | 0, l = HEAP32[m >> 2] + n, HEAP32[m >> 2] = l) : l = p;
                        if (0 < (c | 0))
                            for (p = 0;;)
                                if (HEAP8[h] = 32, n = 2E3 - l, r = 1 < (n | 0) ? 1 : n, 0 < (r | 0) && (_memcpy(l + (a + 2396), h, r) | 0, n = HEAP32[m >> 2] + r, l = HEAP32[m >> 2] = n), n = p + 1, (n | 0) < (c | 0)) p = n;
                                else {
                                    s = l;
                                    break
                                } else s = l;
                        HEAP8[j] = 94;
                        l = 2E3 - s;
                        p = 1 < (l | 0) ? 1 : l;
                        0 < (p | 0) ? (_memcpy(s + (a + 2396), j, p) | 0, l = HEAP32[m >> 2] + p, r = HEAP32[m >> 2] = l) : r = s;
                        HEAP8[i] = 10;
                        l = 2E3 - r;
                        p = 1 < (l | 0) ? 1 : l;
                        0 >= (p | 0) || (_memcpy(r + (a + 2396), i, p) | 0, HEAP32[m >> 2] += p)
                    }
                while (0);
                p = HEAP32[a + 205600 >> 2];
                if (0 != (p | 0) && (l = HEAP8[p + 48], _jtdebdisp(a, p), n = HEAP32[p >>
                        2], 0 != (n | 0) & 1 == l << 24 >> 24)) {
                    l = HEAP8[n + 48];
                    if (3 == l << 24 >> 24) {
                        if (0 == (HEAP32[n + 20 >> 2] | 0)) break
                    } else if (2 != l << 24 >> 24) break;
                    _jtdebdisp(a, n)
                }
            }
        while (0);
        HEAP32[a + 4404 >> 2] = HEAP32[m >> 2]
    }
    STACKTOP = e
}
function _jtjsigstr(a, f, d, c) {
    var b, e, g, h, j, i, l, k;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    e = b;
    g = a + 204545;
    if (0 == (HEAP8[g] | 0)) {
        HEAP8[g] = f;
        HEAP32[a + 204548 >> 2] = f;
        f = a + 4400;
        HEAP32[f >> 2] = 0;
        HEAP8[112968] = 124;
        g = HEAP32[f >> 2];
        h = 2E3 - g;
        j = 1 < (h | 0) ? 1 : h;
        0 < (j | 0) ? (_memcpy(g + (a + 2396), 112968, j) | 0, h = HEAP32[f >> 2] + j, i = HEAP32[f >> 2] = h) : i = g;
        g = 2E3 - i;
        h = (g | 0) > (d | 0) ? d : g;
        0 < (h | 0) ? (_memcpy(i + (a + 2396), c, h) | 0, c = HEAP32[f >> 2] + h, l = HEAP32[f >> 2] = c) : l = i;
        i = a + 204524;
        0 == (HEAP32[i >> 2] | 0) ? (c = a + 1168, h = HEAP32[c >> 2], 0 == (h | 0) ? c = l : (g = 2E3 - l, j = 2 < (g | 0) ? 2 : g, 0 <
            (j | 0) ? (_memcpy(l + (a + 2396), 118520, j) | 0, g = HEAP32[f >> 2] + j, HEAP32[f >> 2] = g, k = HEAP32[c >> 2], l = g) : k = h, h = HEAP32[k + 20 >> 2], g = 2E3 - l, j = (g | 0) > (h | 0) ? h : g, 0 < (j | 0) ? (_memcpy(l + (a + 2396), k + (HEAP32[k >> 2] + 14), j) | 0, g = HEAP32[f >> 2] + j, HEAP32[f >> 2] = g) : g = l, HEAP32[c >> 2] = 0, c = g)) : c = l;
        HEAP8[e] = 10;
        l = 2E3 - c;
        g = 1 < (l | 0) ? 1 : l;
        0 < (g | 0) && (_memcpy(c + (a + 2396), e, g) | 0, HEAP32[f >> 2] += g);
        do
            if (0 != (d | 0) && 0 == (HEAP32[i >> 2] | 0) && (g = HEAP32[a + 205600 >> 2], 0 != (g | 0) && (e = HEAP8[g + 48], _jtdebdisp(a, g), c = HEAP32[g >> 2], 0 != (c | 0) & 1 == e << 24 >> 24))) {
                e = HEAP8[c + 48];
                if (3 ==
                    e << 24 >> 24) {
                    if (0 == (HEAP32[c + 20 >> 2] | 0)) break
                } else if (2 != e << 24 >> 24) break;
                _jtdebdisp(a, c)
            }
        while (0);
        HEAP32[a + 4404 >> 2] = HEAP32[f >> 2]
    }
    STACKTOP = b
}
function _jtlamin2(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    b = a + 205336;
    e = HEAP32[b >> 2];
    g = 0 == (e | 0);
    h = f + 24;
    j = HEAP32[(g ? h : e) >> 2];
    i = d + 24;
    l = HEAP32[(g ? i : e + 4) >> 2];
    (g = 0 != (j | 0)) ? (k = HEAP32[h >> 2], 0 > (j | 0) ? (m = k + j, m = 0 > (m | 0) ? 0 : m) : m = (k | 0) > (j | 0) ? j : k, HEAP32[c + 4 >> 2] = m, (m | 0) < (k | 0) ? (k = c, HEAP32[k >> 2] = 0, HEAP32[b >> 2] = k, k = _jtlamin1(a, f), HEAP32[b >> 2] = e) : k = _jtlamin1(a, f)) : k = f;
    if (f = 0 != (l | 0)) e = HEAP32[b >> 2], m = HEAP32[i >> 2], 0 > (l | 0) ? (h = m + l, i = 0 > (h | 0) ? 0 : h) : i = (m | 0) > (l | 0) ?
        l : m, HEAP32[c + 4 >> 2] = i, (i | 0) < (m | 0) ? (m = c, HEAP32[m >> 2] = 0, HEAP32[b >> 2] = m, m = _jtlamin1(a, d), HEAP32[b >> 2] = e, d = m) : d = _jtlamin1(a, d);
    d = _jtirs2(a, k, d, 0, (g & 1) + j, (f & 1) + l, 774);
    if (0 != (l | j | 0)) return STACKTOP = c, d;
    j = HEAP32[b >> 2];
    if (0 == (d | 0)) return STACKTOP = c, 0;
    l = HEAP32[d + 24 >> 2];
    f = 0 < (l | 0);
    HEAP32[c + 4 >> 2] = f ? 0 : l;
    f ? (f = c, HEAP32[f >> 2] = 0, HEAP32[b >> 2] = f, f = _jtlamin1(a, d), HEAP32[b >> 2] = j, a = f) : a = _jtlamin1(a, d);
    STACKTOP = c;
    return a
}
function _jtline(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y;
    e = 0;
    g = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    h = g;
    j = HEAP32[31086];
    i = a + 205709;
    l = HEAP8[i];
    k = a + 1224;
    m = HEAP32[k >> 2];
    if (0 != _jtequ(a, f, HEAP32[31058]) << 24 >> 24) return a = HEAP32[31088], STACKTOP = g, a;
    if (0 == (f | 0)) return STACKTOP = g, 0;
    if (2 <= (HEAP32[f + 24 >> 2] | 0)) return n = HEAP32[a + 4408 >> 2], p = HEAP32[n + (HEAP32[n >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), STACKTOP = g, 0;
    0 == (HEAP32[f + 12 >> 2] & 2 | 0) ? (p = a + 205336, n = HEAP32[p >> 2], HEAP32[p >> 2] = 0, q = _jtccvt(a,
        2, f, h), HEAP32[p >> 2] = n, 0 == q << 24 >> 24 ? (q = HEAP32[a + 4408 >> 2], n = HEAP32[q + (HEAP32[q >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), r = 0) : r = HEAP32[h >> 2]) : r = f;
    if (0 == (r | 0)) return STACKTOP = g, 0;
    f = a + 204444;
    h = a + 204440;
    n = HEAP32[h >> 2] + 1;
    if ((HEAP32[f >> 2] | 0) < (n | 0)) return q = HEAP32[a + 4408 >> 2], p = HEAP32[q + (HEAP32[q >> 2] + 68) >> 2], _jtjsigstr(a, 17, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), STACKTOP = g, 0;
    HEAP32[h >> 2] = n;
    n = _jtga(a, 2, 52, 1, 0);
    if (0 == (n | 0)) return STACKTOP = g, 0;
    p = n;
    q = HEAP32[n >> 2];
    s = n = p + q;
    _memset(n, 0, 52) | 0;
    HEAP8[q + (p +
        48)] = 2;
    t = a + 205600;
    HEAP32[n >> 2] = HEAP32[t >> 2];
    HEAP32[t >> 2] = s;
    HEAP32[q + (p + 16) >> 2] = r;
    HEAP32[q + (p + 40) >> 2] = d;
    if (0 == (n | 0)) return STACKTOP = g, 0;
    HEAP32[k >> 2] = s;
    u = 0 == b << 24 >> 24 ? 0 : 0 == (HEAP32[a + 205588 >> 2] | 0) | 0;
    HEAP8[i] = u;
    u = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = c << 24 >> 24;
    a: do
        if (2 == (b | 0) | 3 == (b | 0)) {
            s = a + 204545;
            b: do
                if (0 == (j | 0)) w = a + 8;
                else {
                    n = a + 4400;
                    d = a + 4408;
                    for (p = a + 8;;) {
                        if (0 != (HEAP8[s] | 0)) {
                            w = p;
                            break b
                        }
                        HEAP32[n >> 2] = 0;
                        q = _jtjgets(a, 120248);
                        r = HEAP32[h >> 2] + 1;
                        c: do
                            if ((HEAP32[f >> 2] | 0) < (r | 0)) v = HEAP32[d >> 2], x = HEAP32[v + (HEAP32[v >>
                                2] + 68) >> 2], _jtjsigstr(a, 17, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2]);
                            else
                        if (HEAP32[h >> 2] = r, x = _jtparse(a, _jtenqueue(a, _jtwordil(a, q), q)), HEAP32[h >> 2] -= 1, 55 == (HEAP8[s] | 0) ? (HEAP8[s] = 0, HEAP32[n >> 2] = 0, v = HEAP32[31088]) : v = x, 0 != (v | 0) && 0 == (HEAP8[p] | 0) && (_jtjpr(a, v), 0 == (HEAP8[p] | 0) && (x = v + 12, 0 != (HEAP32[x >> 2] & 805567999 | 0)))) {
                            v = _jtva2(a, HEAP32[31058], v, 61);
                            0 == (HEAP32[x >> 2] & 64512 | 0) ? (y = v, e = 42) : (x = _jtslash(a, HEAP32[30936]), x = _jtatop(a, x, HEAP32[30842]), 0 != (x | 0) && (y = getFUNCTION_TABLE(HEAP32[x + HEAP32[x >> 2] >> 2])(a, v, x), e = 42));
                            do
                                if (42 == e && (e = 0, 0 != (y | 0) && 0 == (_memchr(y + HEAP32[y >> 2], 0, HEAP32[y + 20 >> 2]) | 0))) break c;
                            while (0);
                            v = HEAP32[d >> 2];
                            x = HEAP32[v + (HEAP32[v >> 2] + 48) >> 2];
                            _jtjsigstr(a, 12, HEAP32[x + 20 >> 2], x + HEAP32[x >> 2])
                        }
                        while (0);
                        _jttpop(a, u);
                        if (0 == (q | 0)) {
                            w = p;
                            break
                        }
                    }
                }
            while (0);
            HEAP8[w] = 0
        } else
    if (1 == (b | 0)) {
        if (0 != (j | 0)) {
            s = a + 205588;
            for (p = a + 204545; !(0 == (HEAP32[s >> 2] | 0) && _jtshowerr(a), HEAP8[p] = 0, d = _jtjgets(a, 120248), _jtimmex(a, d), _jttpop(a, u), 0 == (d | 0)););
        }
    } else if (0 == (b | 0) && (p = a + 204545, 0 != (j | 0)))
        for (s = a + 4400;;) {
            if (0 != (HEAP8[p] | 0)) break a;
            HEAP32[s >> 2] = 0;
            d = _jtjgets(a, 120248);
            _jtimmex(a, d);
            _jttpop(a, u);
            if (0 == (d | 0)) break
        }
    while (0);
    HEAP32[k >> 2] = m;
    HEAP8[i] = l;
    HEAP32[t >> 2] = HEAP32[HEAP32[t >> 2] >> 2];
    HEAP32[h >> 2] -= 1;
    h = a + 204545;
    t = 0 != (HEAP8[h] | 0);
    3 == c << 24 >> 24 ? (c = t ? HEAP32[30648] : HEAP32[31058], HEAP8[h] = 0, HEAP32[a + 4400 >> 2] = 0, a = c) : a = t ? 0 : HEAP32[31088];
    STACKTOP = g;
    return a
}
function _jtlink(a, f, d) {
    var c, b, e;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = _jtbox(a, f);
    0 == (HEAP32[d + 20 >> 2] | 0) ? c = 6 : 0 == (HEAP32[d + 12 >> 2] & 32 | 0) ? c = 6 : (f = _jttpush(a, d), 0 == (f | 0) ? e = 0 : (_jttraverse(a, f, 654), e = f + 16, HEAP32[e >> 2] += 1, e = f));
    6 == c && (e = _jtbox(a, d));
    return a = _jtover(a, b, e)
}
function _jtlocindirect(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n;
    c = 0;
    b = HEAP32[a + 204520 >> 2];
    e = 1;
    g = d + f;
    a: for (;;) {
        if (g >>> 0 > d >>> 0) h = g;
        else {
            j = b;
            c = 32;
            break
        }
        for (; !(f = h - 1, 95 == (HEAP8[f] | 0));) h = f;
        f = h - 2;
        h = _jtnfs(a, g - h, h);
        if (0 == (h | 0)) {
            j = 0;
            c = 32;
            break
        }
        b = _jtsyrd1(a, h, b, e);
        if (0 == (b | 0)) {
            c = 6;
            break
        }
        e = HEAP32[b + 4 >> 2];
        if (0 != (HEAP32[e + 24 >> 2] | 0)) {
            c = 8;
            break
        }
        if (0 == (HEAP32[e + 12 >> 2] & 32 | 0)) {
            c = 10;
            break
        }
        b = e + HEAP32[e >> 2];
        i = 0 == (HEAP32[e + 4 >> 2] & 14 | 0) ? HEAP32[b >> 2] : HEAP32[b >> 2] + e;
        e = HEAP32[i + 20 >> 2];
        b = i;
        g = HEAP32[i >> 2];
        l = b + g;
        if (2 <= (HEAP32[i + 24 >>
                2] | 0)) {
            c = 15;
            break
        }
        if (0 == (e | 0)) {
            c = 17;
            break
        }
        if (0 == (HEAP32[i + 12 >> 2] & 2 | 0)) {
            c = 19;
            break
        }
        if (i = 0 < (e | 0))
            for (k = 0;;) {
                m = HEAP8[b + (g + k)];
                if (95 == m << 24 >> 24) {
                    c = 30;
                    break a
                }
                n = HEAP8[113216 + (m << 24 >> 24)];
                if (!(2 == n << 24 >> 24 | 5 == n << 24 >> 24)) {
                    c = 30;
                    break a
                }
                n = k + 1;
                if ((n | 0) < (e | 0)) k = n;
                else break
            }
        k = HEAP8[l];
        b: do
            if (5 == (HEAP8[113216 + (k << 24 >> 24)] | 0)) {
                n = 1 != (e | 0) & 48 == k << 24 >> 24;
                if (n | i ^ 1)
                    if (n) {
                        c = 30;
                        break a
                    } else break;
                else m = 1, n = k;
                for (;;) {
                    if (10 <= (n - 48 & 255)) {
                        c = 30;
                        break a
                    }
                    if ((m | 0) >= (e | 0)) break b;
                    n = HEAP8[b + (g + m)];
                    m += 1
                }
            }
        while (0);
        g = _jtstfind(a,
            1, e, l);
        if (0 == (g | 0)) {
            j = 0;
            c = 32;
            break
        } else b = g, e = 0, g = f
    }
    if (6 == c) return HEAP32[a + 1168 >> 2] = h, g = HEAP32[a + 4408 >> 2], e = HEAP32[g + (HEAP32[g >> 2] + 84) >> 2], _jtjsigstr(a, 21, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    if (8 == c) return HEAP32[a + 1168 >> 2] = h, e = HEAP32[a + 4408 >> 2], g = HEAP32[e + (HEAP32[e >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), 0;
    if (10 == c) return HEAP32[a + 1168 >> 2] = h, g = HEAP32[a + 4408 >> 2], e = HEAP32[g + (HEAP32[g >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    if (15 == c) return HEAP32[a + 1168 >> 2] = h,
        e = HEAP32[a + 4408 >> 2], g = HEAP32[e + (HEAP32[e >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), 0;
    if (17 == c) return HEAP32[a + 1168 >> 2] = h, g = HEAP32[a + 4408 >> 2], e = HEAP32[g + (HEAP32[g >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), 0;
    if (19 == c) return HEAP32[a + 1168 >> 2] = h, e = HEAP32[a + 4408 >> 2], g = HEAP32[e + (HEAP32[e >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), 0;
    if (30 == c) return HEAP32[a + 1168 >> 2] = h, h = HEAP32[a + 4408 >> 2], g = HEAP32[h + (HEAP32[h >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[g + 20 >> 2], g +
        HEAP32[g >> 2]), 0;
    if (32 == c) return j
}
function _jtlocswitch(a, f) {
    var d, c, b, e, g, h;
    if (0 == (f | 0)) return 0;
    if (0 != (HEAP32[f + 24 >> 2] | 0)) return c = HEAP32[a + 4408 >> 2], b = HEAP32[c + (HEAP32[c >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), 0;
    if (0 == (_jtvlocnl(a, 1, f) | 0)) return 0;
    b = f + HEAP32[f >> 2];
    e = 0 == (HEAP32[f + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) | 0;
    c = f & -e;
    e = HEAP32[f + 20 >> 2];
    a: do {
        if (0 < (e | 0)) {
            f = 0 == (c | 0);
            for (g = 0;;) {
                h = HEAP32[b + (g << 2) >> 2];
                h = f ? h : h + c;
                h = _jtstfind(a, 1, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]);
                g += 1;
                if (0 == (h | 0)) {
                    d = 0;
                    break
                }
                if (!((g | 0) < (e | 0))) {
                    g =
                        h;
                    break a
                }
            }
            return d
        }
        g = 0
    } while (0);
    HEAP32[a + 204520 >> 2] = g;
    HEAP8[a + 205668] = 1;
    return d = HEAP32[31088]
}
function _jtlt(a, f, d) {
    return _jtva2(a, f, d, 60)
}
function _jtma(a, f) {
    var d, c, b, e, g, h, j, i, l, k;
    d = f + 8;
    if ((d | 0) > (HEAP32[a + 204964 >> 2] | 0)) return f = HEAP32[a + 4408 >> 2], c = HEAP32[f + (HEAP32[f >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), 0;
    c = d >> 6;
    if (0 == (c | 0)) b = 6;
    else {
        f = 6;
        for (e = c;;)
            if (c = e >> 1, g = f + 1, 0 == (c | 0)) {
                b = g;
                break
            } else f = g, e = c
    }
    e = b - 1;
    f = (d | 0) == (HEAP32[124360 + (e << 2) >> 2] | 0) ? e : b;
    b = HEAP32[124360 + (f << 2) >> 2];
    e = a + 204588 + (f << 2);
    d = HEAP32[e >> 2];
    do
        if (0 == (d | 0)) {
            if (1024 < (b | 0)) {
                c = _malloc(b);
                if (0 != (c | 0)) {
                    g = c + 8;
                    break
                }
                c = HEAP32[a + 4408 >> 2];
                g = HEAP32[c + (HEAP32[c >>
                    2] + 88) >> 2];
                _jtjsigstr(a, 22, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]);
                return d = 0
            }
            g = _malloc(65536);
            if (0 == (g | 0)) return c = HEAP32[a + 4408 >> 2], h = HEAP32[c + (HEAP32[c >> 2] + 88) >> 2], _jtjsigstr(a, 22, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), d = 0;
            h = 65536 / (b | 0) & -1;
            if (0 < (h | 0)) {
                c = (f & 255) << 24 >> 24;
                j = Math_imul(b, h - 1) | 0;
                i = g;
                for (l = 0;;)
                    if (k = i + b, HEAP32[i >> 2] = k, HEAP16[i + 4 >> 1] = c, HEAP8[i + 6] = 0, l += 1, (l | 0) < (h | 0)) i = k;
                    else break;
                c = g + j
            } else c = 0;
            HEAP32[c >> 2] = 0;
            HEAP8[g + 6] = 1;
            HEAP32[e >> 2] = HEAP32[g >> 2];
            l = a + 204712 + (f << 2);
            HEAP32[l >> 2] = 65536 - b + HEAP32[l >> 2];
            g +=
                8
        } else HEAP32[e >> 2] = HEAP32[d >> 2], l = a + 204712 + (f << 2), HEAP32[l >> 2] -= b, g = d + 8;
    while (0);
    d = g;
    e = HEAP32[a >> 2];
    if (1 < (HEAP8[e] | 0) && 0 == (HEAP8[a + 1040] | 0)) return HEAP8[e] = 0, c = HEAP32[a + 4408 >> 2], l = HEAP32[c + (HEAP32[c >> 2] + 8) >> 2], _jtjsigstr(a, 2, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]), 0;
    e = a + 1056;
    l = HEAP32[e >> 2] + b;
    HEAP32[e >> 2] = l;
    e = a + 1060;
    a = HEAP32[e >> 2];
    HEAP32[e >> 2] = (l | 0) > (a | 0) ? l : a;
    HEAP32[g - 8 >> 2] = 0;
    HEAP16[g - 4 >> 1] = (f & 255) << 24 >> 24;
    return d
}
function _jtmonad(a, f, d, c) {
    var b, e;
    b = HEAP32[c + (f << 2) >> 2];
    f = a + 205596;
    if (0 == (b | 0)) return 0;
    e = HEAP32[c + (d << 2) >> 2];
    d = HEAP32[f >> 2];
    c = HEAP32[b + HEAP32[b >> 2] >> 2];
    HEAP32[f >> 2] = b;
    a = getFUNCTION_TABLE(c)(a, e, b);
    HEAP32[f >> 2] = d;
    return a
}
function _jtnfs(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A;
    do
        if (0 < (f | 0)) {
            c = 0;
            b = d;
            for (e = f;;) {
                if (32 != (HEAP8[b] | 0)) {
                    g = b;
                    h = e;
                    break
                }
                b += 1;
                e -= 1;
                c += 1;
                if (!((c | 0) < (f | 0))) {
                    g = b;
                    h = e;
                    break
                }
            }
            e = g + (h - 1);
            if (0 < (h | 0)) {
                c = 0;
                for (b = h;;) {
                    if (32 != (HEAP8[e] | 0)) {
                        k = e;
                        m = b;
                        break
                    }
                    e -= 1;
                    b -= 1;
                    c += 1;
                    if (!((c | 0) < (h | 0))) {
                        k = e;
                        m = b;
                        break
                    }
                }
                1 == (m | 0) ? (n = g, p = 1, q = k, r = 1, c = 12) : (s = g, t = m, u = k, w = 0, c = 10)
            } else j = e, i = h, l = g, c = 8
        } else j = d + (f - 1), i = f, l = d, c = 8;
    while (0);
    8 == c && (s = l, t = i, u = j, w = 1 == (i | 0), c = 10);
    if (10 == c)
        if (2 == (t | 0)) 46 == (HEAP8[s + 1] | 0) ? (n =
            s, p = 2, q = u, r = w, c = 12) : (v = s, x = 2, y = u);
        else if (0 != (t | 0)) v = s, x = t, y = u;
    else return i = HEAP32[a + 4408 >> 2], j = HEAP32[i + (HEAP32[i >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), 0;
    if (12 == c)
        if (u = HEAP8[n], 0 == (_memchr(118088, u << 24 >> 24, 7) | 0)) v = n, x = p, y = q;
        else {
            t = 121 == u << 24 >> 24;
            if (r) {
                if (t) return a = HEAP32[30650];
                a = 117 == u << 24 >> 24 ? HEAP32[30730] : 118 == u << 24 >> 24 ? HEAP32[30726] : 120 == u << 24 >> 24 ? HEAP32[30658] : 110 == u << 24 >> 24 ? HEAP32[31082] : HEAP32[31128]
            } else {
                if (t) return a = HEAP32[30652];
                a = 118 == u << 24 >> 24 ? HEAP32[30728] : 120 ==
                    u << 24 >> 24 ? HEAP32[30660] : 117 == u << 24 >> 24 ? HEAP32[30732] : 110 == u << 24 >> 24 ? HEAP32[31084] : HEAP32[31132]
            }
            return a
        }
    r = _jtga(a, 33554432, x, 1, 0);
    if (0 == (r | 0)) return 0;
    q = r;
    p = HEAP32[r >> 2];
    n = q + p;
    c = p + 14;
    _memcpy(q + c, v, x) | 0;
    HEAP8[q + (c + x)] = 0;
    a: do
        if (95 == (HEAP8[y] | 0)) {
            for (c = y;;) {
                z = c - 1;
                if (v >>> 0 >= z >>> 0) break;
                if (95 == (HEAP8[z] | 0)) break;
                else c = z
            }
            c = v - z;
            f = 1;
            d = x - 2 + c;
            h = -c
        } else
    if (0 < (x | 0)) {
        for (g = 0;;) {
            c = g + 1;
            if (95 == (HEAP8[v + g] | 0) && 95 == (HEAP8[v + c] | 0)) break;
            if ((c | 0) < (x | 0)) g = c;
            else {
                d = f = 0;
                h = x;
                break a
            }
        }
        f = 2;
        d = x - 2 - g;
        h = g
    } else d = f = 0, h = x;
    while (0);
    if (!(256 > (h | 0) & 256 > (d | 0))) return d = HEAP32[a + 4408 >> 2], g = HEAP32[d + (HEAP32[d >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), 0;
    HEAP8[p + (q + 13)] = f;
    HEAP32[p + (q + 4) >> 2] = 0;
    HEAP32[p + (q + 8) >> 2] = 0;
    HEAP8[p + (q + 12)] = h;
    q = HEAP8[v];
    p = (q & 255) >>> 7;
    a: do
        if (0 < (h | 0)) {
            f = p;
            g = 0;
            a = v;
            for (d = q;;) {
                x = a + 1;
                z = h - g ^ 1000003 * f & -1 ^ d & 255;
                y = g + 1;
                if ((y | 0) >= (h | 0)) {
                    A = z;
                    break a
                }
                f = z;
                g = y;
                a = x;
                d = HEAP8[x]
            }
        } else A = p;
    while (0);
    HEAP32[n >> 2] = A;
    return r
}
function _jtnumcase(a, f, d, c, b, e, g) {
    var h, j;
    h = 0;
    HEAP8[g] = 0;
    HEAP8[e] = 0;
    HEAP8[b] = 0;
    j = 0 == (_memchr(f, 106, a) | 0) ? 0 != (_memchr(f, 97, a) | 0) | 0 : 1;
    HEAP8[c] = j;
    if (0 != (_memchr(f, 98, a) | 0)) HEAP8[d] = 1;
    else if (j = 0 != (_memchr(f, 112, a) | 0), HEAP8[d] = j & 1, 0 == (HEAP8[c] | 0) & (j ^ 1)) {
        0 != (_memchr(f, 120, a) | 0) && (HEAP8[b] = 1, HEAP8[d] = 1, HEAP8[g] = 0);
        0 != (_memchr(f, 114, a) | 0) && (HEAP8[e] = 1, HEAP8[g] = 0);
        if (0 == (HEAP8[b] | 0))
            if (0 != (HEAP8[g] | HEAP8[e]) << 24 >> 24 & 0 < (a | 0)) c = 0;
            else return;
        else if (0 < (a | 0)) c = 0;
        else return;
        for (;;) {
            d = HEAP8[f + c];
            j = c + 1;
            if (46 ==
                d << 24 >> 24 | 101 == d << 24 >> 24) break;
            else if (120 == d << 24 >> 24 && 0 != (HEAP8[f + j] | 0)) break;
            if ((j | 0) < (a | 0)) c = j;
            else {
                h = 17;
                break
            }
        }
        17 != h && (HEAP8[g] = 0, HEAP8[e] = 0, HEAP8[b] = 0)
    }
}
function _jtnumd(a, f, d, c) {
    var b, e, g, h, a = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = a;
    if (0 == (f | 0)) return STACKTOP = a, 0;
    e = c;
    if (45 == (HEAP8[d] | 0) & 3 > (f | 0)) {
        if (1 == (f | 0)) return HEAPF64[e >> 3] = HEAPF64[14142], STACKTOP = a, 1;
        c = HEAP8[d + 1];
        if (46 == c << 24 >> 24) return HEAPF64[e >> 3] = HEAPF64[14130], STACKTOP = a, 1;
        if (45 == c << 24 >> 24) return HEAPF64[e >> 3] = HEAPF64[14141], STACKTOP = a, 1
    }
    c = _strtod(d, b);
    g = HEAP32[b >> 2];
    h = d + f;
    g >>> 0 < d + (f - 1) >>> 0 && 114 == (HEAP8[g] | 0) && (f = _strtod(g + 1, b), c = 0 != f ? c / f : 0 < c ? HEAPF64[14142] : 0 > c ? HEAPF64[14141] : 0);
    if (HEAP32[b >>
            2] >>> 0 < h >>> 0) return STACKTOP = a, 0;
    HEAPF64[e >> 3] = c;
    STACKTOP = a;
    return 1
}
function _jtnvv1(a, f, d) {
    var c, b, e, g, h;
    c = d;
    b = HEAP32[d >> 2];
    d = HEAP32[b + (c + 8) >> 2];
    e = HEAP32[b + (c + 12) >> 2];
    g = 0 == (e | 0) ? 0 : HEAP32[e + (HEAP32[e >> 2] + 4) >> 2];
    b = HEAP32[b + (c + 16) >> 2];
    h = 0 == (b | 0) ? 0 : HEAP32[b + HEAP32[b >> 2] >> 2];
    c = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = getFUNCTION_TABLE(h)(a, f, b);
    b = getFUNCTION_TABLE(g)(a, d, b, e);
    if (0 == (b | 0)) return _jttpop(a, c), a = _jttpush(a, b);
    _jttraverse(a, b, 654);
    e = b + 16;
    HEAP32[e >> 2] += 1;
    _jttpop(a, c);
    return a = _jttpush(a, b)
}
function _jtope(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    b = c + 8;
    e = c + 16;
    g = c + 24;
    h = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 ==
        (f | 0)) return j = 0, STACKTOP = c, j;
    i = f + 20;
    l = HEAP32[i >> 2];
    k = f + HEAP32[f >> 2];
    do
        if (0 != (HEAP32[f + 12 >> 2] & 32 | 0) && (m = 0 != (HEAP32[f + 4 >> 2] & 14 | 0), 0 != (l | 0))) {
            n = f + 24;
            if (0 == (HEAP32[n >> 2] | 0)) {
                p = HEAP32[k >> 2];
                if (!m) return j = p, STACKTOP = c, j;
                j = p + f;
                STACKTOP = c;
                return j
            }
            p = 0 < (l | 0);
            a: do
                if (p) {
                    q = f;
                    r = 2147483647;
                    u = t = s = 0;
                    w = 1;
                    b: for (;;) {
                        v = HEAP32[k + (u << 2) >> 2];
                        x = m ? v + q : v;
                        v = HEAP32[x + 24 >> 2];
                        y = (r | 0) < (v | 0) ? r : v;
                        z = (s | 0) > (v | 0) ? s : v;
                        do
                            if (0 == (HEAP32[x + 20 >> 2] | 0)) A = w, D = t;
                            else if (v = HEAP32[x + 12 >> 2], B = 0 != (t | 0) ? t : v, G = B | v, (B | 0) == (v | 0)) A = w, D = v;
                        else {
                            if (0 ==
                                (B & 805336541 | 0) | 0 == (v & 805336541 | 0) && 0 == (B & 133122 | 0) | 0 == (v & 133122 | 0)) {
                                d = 17;
                                break b
                            }
                            if (!(0 == (G & 64512 | 0) | 0 == (G & 192 | 0))) {
                                d = 17;
                                break b
                            }
                            A = 0;
                            D = _jtmaxtype(a, B, v)
                        }
                        while (0);
                        v = u + 1;
                        if ((v | 0) < (l | 0)) r = y, s = z, t = D, u = v, w = A;
                        else break
                    }
                    if (17 == d) return w = HEAP32[a + 4408 >> 2], u = HEAP32[w + (HEAP32[w >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), j = 0, STACKTOP = c, j;
                    if (0 != (D | 0)) C = D, F = A, E = z, J = y;
                    else {
                        u = a + 204545;
                        for (t = w = 0;;) {
                            s = HEAP32[k + (t << 2) >> 2];
                            L = m ? s + q : s;
                            s = _jtmaxtype(a, w, HEAP32[L + 12 >> 2]);
                            r = t + 1;
                            if (0 != (HEAP8[u] | 0)) {
                                j = 0;
                                break
                            }
                            if ((r | 0) < (l | 0)) w = s, t = r;
                            else {
                                C = s;
                                F = A;
                                E = z;
                                J = y;
                                break a
                            }
                        }
                        STACKTOP = c;
                        return j
                    }
                } else C = 0, F = 1, E = 0, J = 2147483647;
            while (0);
            w = t = _jtga(a, 4, E, 1, 0);
            if (0 == (t | 0)) return j = 0, STACKTOP = c, j;
            u = t;
            q = HEAP32[u >> 2];
            r = s = w + q;
            v = E - J;
            if (0 < (v | 0))
                for (B = 0;;)
                    if (HEAP32[r + (B << 2) >> 2] = 1, G = B + 1, (G | 0) < (v | 0)) B = G;
                    else break;
            0 < (J | 0) && _memset(w + (q + (v << 2)), 0, J << 2) | 0;
            if (p)
                if (B = f, m)
                    for (G = 0;;) {
                        I = HEAP32[k + (G << 2) >> 2] + B;
                        H = HEAP32[I + 24 >> 2];
                        K = E - H;
                        if (0 < (H | 0))
                            for (N = 0;;)
                                if (S = r + (K + N << 2), T = HEAP32[S >> 2], V = HEAP32[I + 28 + (N << 2) >> 2], HEAP32[S >> 2] = (T | 0) > (V | 0) ?
                                    T : V, V = N + 1, (V | 0) < (H | 0)) N = V;
                                else break;
                        N = G + 1;
                        if ((N | 0) < (l | 0)) G = N;
                        else break
                    } else
                        for (G = 0;;) {
                            B = HEAP32[k + (G << 2) >> 2];
                            v = HEAP32[B + 24 >> 2];
                            q = E - v;
                            if (0 < (v | 0))
                                for (N = 0;;)
                                    if (H = r + (q + N << 2), I = HEAP32[H >> 2], K = HEAP32[B + 28 + (N << 2) >> 2], HEAP32[H >> 2] = (I | 0) > (K | 0) ? I : K, K = N + 1, (K | 0) < (v | 0)) N = K;
                                    else break;
                            N = G + 1;
                            if ((N | 0) < (l | 0)) G = N;
                            else break
                        }
                a: do
                if (0 == (C & 64512 | 0)) {
                    do
                        if (0 < (E | 0)) {
                            G = 1;
                            for (N = 0;;)
                                if (Q = G * (HEAP32[r + (N << 2) >> 2] | 0), v = N + 1, (v | 0) < (E | 0)) G = Q, N = v;
                                else break;
                            2147483647 >= Q ? (P = Q, d = 174) : (N = HEAP32[a + 4408 >> 2], G = HEAP32[N + (HEAP32[N >> 2] +
                                40) >> 2], _jtjsigstr(a, 10, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), M = 0)
                        } else P = 1, d = 174;
                    while (0);
                    174 == d && (M = P & -1);
                    G = a + 204545;
                    if (0 != (HEAP8[G] | 0)) return j = 0, STACKTOP = c, j;
                    N = (l | 0) * (M | 0);
                    if (2147483647 < N)
                        if (v = HEAP32[a + 4408 >> 2], B = HEAP32[v + (HEAP32[v >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[B + 20 >> 2], B + HEAP32[B >> 2]), 0 == (HEAP8[G] | 0)) R = 0;
                        else return j = 0, STACKTOP = c, j;
                    else R = N & -1;
                    O = 2 == (C | 0) | 2097152 == (C | 0) | 33554432 == (C | 0) ? 1 : 131072 == (C | 0) ? 2 : 4 == (C | 0) | 67108864 == (C | 0) | 134217728 == (C | 0) | 4194304 == (C | 0) | 8388608 == (C | 0) ? 4 : 32 == (C | 0) ? 4 : 64 ==
                        (C | 0) ? 4 : 128 == (C | 0) ? 8 : 1024 == (C | 0) | 4096 == (C | 0) | 8192 == (C | 0) | 16384 == (C | 0) | 2048 == (C | 0) | 32768 == (C | 0) ? 16 : 262144 == (C | 0) | 524288 == (C | 0) | 1048576 == (C | 0) ? 44 : 16777216 == (C | 0) ? 12 : 65536 == (C | 0) ? 4 : 268435456 == (C | 0) ? 12 : 536870912 == (C | 0) ? 24 : 1 == (C | 0) | 8 == (C | 0) | 16 == (C | 0) ? C : -1;
                    N = Math_imul(O, M) | 0;
                    G = _jtga(a, C, R, HEAP32[n >> 2] + E, f + 28);
                    if (0 == (G | 0)) return j = 0, STACKTOP = c, j;
                    _memcpy(G + 28 + (HEAP32[n >> 2] << 2), s, E << 2) | 0;
                    B = G + HEAP32[G >> 2];
                    do
                        if (m)
                            if (v = C >>> 5 & 1, 0 == v << 24 >> 24) d = 199;
                            else {
                                HEAP32[G + 4 >> 2] = 8;
                                q = HEAP32[31086] - G;
                                if (0 < (R | 0)) {
                                    K = B;
                                    for (I =
                                        0;;)
                                        if (HEAP32[K >> 2] = q, H = I + 1, (H | 0) < (R | 0)) K += 4, I = H;
                                        else break
                                }
                                aa = v & 255
                            } else d = 199; while (0);
                    199 == d && (_fillv(C, R, B), aa = 0);
                    if (p) {
                        I = f;
                        K = 0 != F << 24 >> 24 & 2 > (E | 0);
                        q = G & -aa;
                        H = a + 205336;
                        V = a + 4408;
                        T = 0;
                        S = B;
                        b: for (;;) {
                            $ = HEAP32[k + (T << 2) >> 2];
                            ba = m ? $ + I : $;
                            do
                                if (0 == (HEAP32[ba + 12 >> 2] & 32 | 0)) ka = ba;
                                else if (0 == (HEAP32[ba + 4 >> 2] & 14 | 0)) ka = ba;
                            else {
                                $ = ba - q;
                                ea = _jtca(a, ba);
                                if (0 == (ea | 0)) {
                                    j = 0;
                                    d = 222;
                                    break b
                                }
                                ha = ea + 4;
                                HEAP32[ha >> 2] |= 8;
                                ha = ea + HEAP32[ea >> 2];
                                da = HEAP32[ea + 20 >> 2];
                                if (0 < (da | 0))
                                    for (ga = 0;;)
                                        if (U = ha + (ga << 2), HEAP32[U >> 2] += $, U = ga + 1, (U | 0) <
                                            (da | 0)) ga = U;
                                        else {
                                            ka = ea;
                                            break
                                        } else ka = ea
                            }
                            while (0);
                            do
                                if (K) _memcpy(S, ka + HEAP32[ka >> 2], Math_imul(HEAP32[ka + 20 >> 2], O) | 0) | 0;
                                else if (v = (C | 0) == (HEAP32[ka + 12 >> 2] | 0), ea = HEAP32[ka + 20 >> 2], v & (M | 0) == (ea | 0)) _memcpy(S, ka + HEAP32[ka >> 2], N) | 0;
                            else if (0 != (ea | 0) && (v ? ca = ka : (ea = HEAP32[H >> 2], HEAP32[H >> 2] = 0, da = _jtccvt(a, C, ka, c), HEAP32[H >> 2] = ea, 0 == da << 24 >> 24 ? (da = HEAP32[V >> 2], ea = HEAP32[da + (HEAP32[da >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[ea + 20 >> 2], ea + HEAP32[ea >> 2]), ca = 0) : ca = HEAP32[c >> 2]), 0 == _povtake(t, ca, S) << 24 >> 24)) {
                                j = 0;
                                d = 222;
                                break b
                            }
                            while (0);
                            v = T + 1;
                            if ((v | 0) < (l | 0)) T = v, S += N;
                            else {
                                Z = G;
                                break a
                            }
                        }
                        if (222 == d) return STACKTOP = c, j
                    } else Z = G
                } else {
                    G = HEAP32[i >> 2];
                    N = HEAP32[n >> 2];
                    S = f + HEAP32[f >> 2];
                    T = HEAP32[t + 20 >> 2];
                    0 == (C & 1024 | 0) ? 0 != (C & 4096 | 0) ? Y = X = 4 : 0 != (C & 8192 | 0) ? Y = X = 8 : 0 != (C & 16384 | 0) ? Y = X = 16 : 0 != (C & 2048 | 0) ? (X = 1, Y = 2) : (V = C >>> 10 & 32, X = (H = 32 == (V | 0)) ? 4 : -1, Y = H ? 32 : V) : Y = X = 1;
                    H = V = _jtga(a, 1, T, 1, 0);
                    if (0 == (V | 0)) return j = 0, STACKTOP = c, j;
                    K = HEAP32[V >> 2];
                    V = H + K;
                    _memset(V, 0, T) | 0;
                    q = 0 < (G | 0);
                    b: do {
                        if (q) {
                            v = B = I = 0;
                            c: for (;;) {
                                ea = HEAP32[S + (B << 2) >> 2];
                                do
                                    if (0 == (HEAP32[ea +
                                            12 >> 2] & 64512 | 0)) ja = v, fa = I;
                                    else {
                                        da = ea;
                                        $ = HEAP32[ea >> 2];
                                        ha = da + $;
                                        U = HEAP32[da + ($ + 28 + HEAP32[$ + (da + 12) >> 2]) >> 2] + I;
                                        ia = da + (HEAP32[$ + (da + 4) >> 2] + $);
                                        if (0 == (v | 0)) ra = ia;
                                        else if (0 == _jtequ(a, v, ia) << 24 >> 24) break c;
                                        else ra = v;
                                        ia = T - HEAP32[ea + 24 >> 2];
                                        0 < (ia | 0) && _memset(V, 1, ia) | 0;
                                        sa = HEAP32[ha >> 2] + $;
                                        $ = HEAP32[sa + (da + 20) >> 2];
                                        if (0 >= ($ | 0)) ja = ra, fa = U;
                                        else {
                                            ha = ia + K;
                                            ia = da + (HEAP32[da + sa >> 2] + sa);
                                            for (sa = 0;;)
                                                if (HEAP8[H + (ha + HEAP32[ia >> 2])] = 1, da = sa + 1, (da | 0) < ($ | 0)) ia += 4, sa = da;
                                                else {
                                                    ja = ra;
                                                    fa = U;
                                                    break
                                                }
                                        }
                                    }
                                while (0);
                                ea = B + 1;
                                if ((ea | 0) < (G | 0)) I = fa,
                                    B = ea, v = ja;
                                else {
                                    ta = fa;
                                    wa = ja;
                                    break b
                                }
                            }
                            v = HEAP32[a + 4408 >> 2];
                            B = HEAP32[v + (HEAP32[v >> 2] + 116) >> 2];
                            _jtjsigstr(a, 29, HEAP32[B + 20 >> 2], B + HEAP32[B >> 2]);
                            j = 0;
                            STACKTOP = c;
                            return j
                        }
                        wa = ta = 0
                    } while (0);
                    B = _jtifb(a, T, V);
                    if (0 == (B | 0)) return j = 0, STACKTOP = c, j;
                    v = HEAP32[30648];
                    I = HEAP32[B + 20 >> 2];
                    ea = B + HEAP32[B >> 2];
                    U = _jtga(a, C, 1, T + N, 0);
                    if (0 == (U | 0)) return j = 0, STACKTOP = c, j;
                    sa = N << 2;
                    _memcpy(U + 28, f + 28, sa) | 0;
                    ia = T << 2;
                    _memcpy(U + 28 + (N << 2), w + HEAP32[u >> 2], ia) | 0;
                    $ = U;
                    ha = HEAP32[U >> 2];
                    da = $ + ha;
                    za = T - I;
                    Ba = I + N;
                    ua = a + 205336;
                    ya = HEAP32[ua >> 2];
                    HEAP32[ua >>
                        2] = 0;
                    xa = _jtccvt(a, Y, 0 != (wa | 0) ? wa : v, g);
                    HEAP32[ua >> 2] = ya;
                    0 == xa << 24 >> 24 ? (xa = HEAP32[a + 4408 >> 2], ya = HEAP32[xa + (HEAP32[xa >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[ya + 20 >> 2], ya + HEAP32[ya >> 2]), oa = 0) : oa = HEAP32[g >> 2];
                    ya = da;
                    xa = oa - ya;
                    HEAP32[ha + ($ + 4) >> 2] = xa;
                    if (0 == ($ + (xa + ha) | 0)) return j = 0, STACKTOP = c, j;
                    xa = _jtga(a, 4, Ba, 1, 0);
                    if (0 == (xa | 0)) return j = 0, STACKTOP = c, j;
                    v = xa + HEAP32[xa >> 2];
                    if (0 < (N | 0))
                        for (pa = 0;;)
                            if (HEAP32[v + (pa << 2) >> 2] = pa, la = pa + 1, (la | 0) < (N | 0)) pa = la;
                            else break;
                    if (0 < (I | 0))
                        for (pa = 0;;)
                            if (HEAP32[v + (pa + N << 2) >> 2] = HEAP32[ea +
                                    (pa << 2) >> 2] + N, V = pa + 1, (V | 0) < (I | 0)) pa = V;
                            else break;
                    pa = xa - ya;
                    HEAP32[da >> 2] = pa;
                    if (0 == ($ + (pa + ha) | 0)) return j = 0, STACKTOP = c, j;
                    pa = za + 1;
                    ea = _jtga(a, 4, pa, 1, 0);
                    if (0 == (ea | 0)) return j = 0, STACKTOP = c, j;
                    v = ea;
                    V = HEAP32[ea >> 2];
                    la = v + V;
                    HEAP32[la >> 2] = ta;
                    if (0 < (T | 0)) {
                        qa = 1;
                        for (Da = 0;;)
                            if (0 == (HEAP8[H + (Da + K)] | 0) ? (HEAP32[la + (qa << 2) >> 2] = HEAP32[U + 28 + (Da + N << 2) >> 2], Aa = qa + 1) : Aa = qa, Ea = Da + 1, (Ea | 0) < (T | 0)) qa = Aa, Da = Ea;
                            else break
                    }
                    qa = Da = V + (v + 4);
                    do
                        if (0 < (za | 0)) {
                            da = 1;
                            for (xa = 0;;)
                                if (Sa = da * (HEAP32[qa + (xa << 2) >> 2] | 0), Ea = xa + 1, (Ea | 0) < (za | 0)) da = Sa,
                                    xa = Ea;
                                else break;
                            2147483647 >= Sa ? (Oa = Sa, d = 79) : (xa = HEAP32[a + 4408 >> 2], da = HEAP32[xa + (HEAP32[xa >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[da + 20 >> 2], da + HEAP32[da >> 2]), Ha = 0)
                        } else Oa = 1, d = 79;
                    while (0);
                    79 == d && (Ha = Oa & -1);
                    qa = a + 204545;
                    if (0 != (HEAP8[qa] | 0)) return j = 0, STACKTOP = c, j;
                    v = Math_imul(Ha, X) | 0;
                    V = _jtga(a, 4, N, 1, 0);
                    if (0 == (V | 0)) return j = 0, STACKTOP = c, j;
                    V = da = V + HEAP32[V >> 2];
                    _memset(da, 0, sa) | 0;
                    xa = ta | 0;
                    Ea = xa * (Ha | 0);
                    2147483647 < Ea ? (Ga = HEAP32[a + 4408 >> 2], Ma = HEAP32[Ga + (HEAP32[Ga >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Ma + 20 >> 2], Ma +
                        HEAP32[Ma >> 2]), Ia = 0) : Ia = Ea & -1;
                    if (0 != (HEAP8[qa] | 0)) return j = 0, STACKTOP = c, j;
                    Ea = _jtga(a, Y, Ia, pa, la);
                    if (0 == (Ea | 0)) return j = 0, STACKTOP = c, j;
                    Ma = Ea;
                    Ga = HEAP32[Ea >> 2];
                    db = Ma + Ga;
                    W = Math_imul(v, ta) | 0;
                    Ta = Xa = oa;
                    fb = (X | 0) < (W | 0);
                    _memcpy(db, Xa + HEAP32[Ta >> 2], fb ? X : W) | 0;
                    if (fb)
                        for (fb = X;;)
                            if (mb = W - fb, _memcpy(Ma + (Ga + fb), db, (fb | 0) < (mb | 0) ? fb : mb) | 0, mb = fb << 1, (mb | 0) < (W | 0)) fb = mb;
                            else break;
                    fb = xa * (Ba | 0);
                    2147483647 < fb ? (W = HEAP32[a + 4408 >> 2], Ga = HEAP32[W + (HEAP32[W >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Ga + 20 >> 2], Ga + HEAP32[Ga >> 2]), ma = 0) : ma =
                        fb & -1;
                    if (0 != (HEAP8[qa] | 0)) return j = 0, STACKTOP = c, j;
                    fb = _jtga(a, 4, ma, 2, 0);
                    if (0 == (fb | 0)) return j = 0, STACKTOP = c, j;
                    HEAP32[fb + 28 >> 2] = ta;
                    HEAP32[fb + 32 >> 2] = Ba;
                    Ga = fb + HEAP32[fb >> 2];
                    _memset(Ga, 0, ma << 2) | 0;
                    b: do
                        if (q) {
                            W = oa + 12;
                            Ma = ia + 28;
                            pa = G - 1;
                            mb = N - 1;
                            ab = 0 == (mb | 0);
                            Na = za << 2;
                            $a = V + (mb << 2);
                            Ua = a + 4408;
                            Pa = (T | 0) == (I | 0);
                            bb = ta;
                            La = 0;
                            Ja = Ga;
                            Qa = 0;
                            Ya = db;
                            lb = fb;
                            Ca = Ea;
                            c: for (;;) {
                                gb = HEAP32[S + (Qa << 2) >> 2];
                                Fa = HEAP32[W >> 2];
                                Za = HEAP32[gb + 24 >> 2];
                                qb = T - Za;
                                ib = HEAP32[gb + 12 >> 2];
                                d: do
                                    if (0 == (ib & 64512 | 0)) {
                                        if ((Za | 0) == (T | 0)) ub = gb;
                                        else {
                                            eb = gb + 20;
                                            wb = rb = _jtga(a,
                                                ib, HEAP32[eb >> 2], T, 0);
                                            if (0 == (rb | 0)) {
                                                j = 0;
                                                d = 222;
                                                break c
                                            }
                                            Ka = rb + 28;
                                            Va = Za << 2;
                                            if (0 < (qb | 0)) {
                                                nb = Ka;
                                                for (ob = 0;;)
                                                    if (HEAP32[nb >> 2] = 1, cb = ob + 1, (cb | 0) < (qb | 0)) nb += 4, ob = cb;
                                                    else break;
                                                Wa = wb + (Ma - Va)
                                            } else Wa = Ka;
                                            _memcpy(Wa, gb + 28, Va) | 0;
                                            ob = wb + HEAP32[rb >> 2];
                                            nb = gb + HEAP32[gb >> 2];
                                            cb = HEAP32[eb >> 2];
                                            yb = 1 == (ib | 0) | 8 == (ib | 0) | 16 == (ib | 0) ? ib : 2 == (ib | 0) | 2097152 == (ib | 0) | 33554432 == (ib | 0) ? 1 : 131072 == (ib | 0) ? 2 : 4 == (ib | 0) | 67108864 == (ib | 0) | 134217728 == (ib | 0) | 4194304 == (ib | 0) | 8388608 == (ib | 0) ? 4 : 32 == (ib | 0) ? 4 : 64 == (ib | 0) ? 4 : 128 == (ib | 0) ? 8 : 1024 == (ib | 0) |
                                                4096 == (ib | 0) | 8192 == (ib | 0) | 16384 == (ib | 0) | 2048 == (ib | 0) | 32768 == (ib | 0) ? 16 : 262144 == (ib | 0) | 524288 == (ib | 0) | 1048576 == (ib | 0) ? 44 : 16777216 == (ib | 0) ? 12 : 65536 == (ib | 0) ? 4 : 268435456 == (ib | 0) ? 12 : 536870912 == (ib | 0) ? 24 : -1;
                                            _memcpy(ob, nb, Math_imul(yb, cb) | 0) | 0;
                                            ub = rb
                                        }
                                        0 == (ib & Fa | 0) ? (cb = HEAP32[ua >> 2], HEAP32[ua >> 2] = 0, nb = _jtccvt(a, Fa, ub, e), HEAP32[ua >> 2] = cb, 0 == nb << 24 >> 24 ? (nb = HEAP32[Ua >> 2], cb = HEAP32[nb + (HEAP32[nb >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[cb + 20 >> 2], cb + HEAP32[cb >> 2]), Cb = 0) : Cb = HEAP32[e >> 2]) : Cb = ub;
                                        rb = _jtsparseit(a, Cb, B, oa);
                                        if (0 == (rb | 0)) {
                                            j = 0;
                                            d = 222;
                                            break c
                                        } else Pb = rb
                                    } else {
                                        rb = gb;
                                        eb = HEAP32[gb >> 2];
                                        wb = HEAP32[rb + eb >> 2] + eb;
                                        eb = _jtga(a, 1, Za, 1, 0);
                                        if (0 == (eb | 0)) {
                                            j = 0;
                                            d = 222;
                                            break c
                                        }
                                        Va = eb;
                                        Ka = HEAP32[eb >> 2];
                                        eb = Va + Ka;
                                        _memset(eb, 0, Za) | 0;
                                        cb = rb + (wb + HEAP32[rb + wb >> 2]);
                                        nb = HEAP32[wb + (rb + 20) >> 2];
                                        if (0 < (nb | 0))
                                            for (rb = 0;;)
                                                if (HEAP8[Va + (HEAP32[cb + (rb << 2) >> 2] + Ka)] = 1, wb = rb + 1, (wb | 0) < (nb | 0)) rb = wb;
                                                else break;
                                        else if (0 == (eb | 0)) {
                                            j = 0;
                                            d = 222;
                                            break c
                                        }
                                        if (0 >= (Za | 0)) Pb = gb;
                                        else {
                                            rb = qb + K;
                                            for (nb = 0;;) {
                                                cb = nb + 1;
                                                if ((HEAP8[H + (nb + rb)] | 0) != (HEAP8[Va + (Ka + nb)] | 0)) break;
                                                if ((cb |
                                                        0) < (Za | 0)) nb = cb;
                                                else {
                                                    Pb = gb;
                                                    break d
                                                }
                                            }
                                            nb = _jtreaxis(a, _jtifb(a, Za, H + rb), gb);
                                            if (0 == (nb | 0)) {
                                                j = 0;
                                                d = 222;
                                                break c
                                            } else Pb = nb
                                        }
                                    }
                                while (0);
                                gb = Pb;
                                Za = HEAP32[Pb >> 2];
                                qb = HEAP32[Za + (gb + 12) >> 2] + Za;
                                ib = gb + qb;
                                if (0 == (HEAP32[qb + (gb + 12) >> 2] & Fa | 0)) {
                                    qb = HEAP32[ua >> 2];
                                    HEAP32[ua >> 2] = 0;
                                    nb = _jtccvt(a, Fa, ib, b);
                                    HEAP32[ua >> 2] = qb;
                                    if (0 == nb << 24 >> 24) {
                                        d = 133;
                                        break
                                    }
                                    nb = HEAP32[b >> 2];
                                    if (0 == (nb | 0)) {
                                        j = 0;
                                        d = 222;
                                        break
                                    } else zb = nb
                                } else zb = ib;
                                ib = HEAP32[Za + (gb + 8) >> 2] + Za;
                                Za = gb + ib;
                                nb = HEAP32[ib + (gb + 28) >> 2];
                                qb = HEAP32[ib + (gb + 32) >> 2];
                                Ka = nb + La;
                                if ((bb | 0) < (Ka |
                                        0)) {
                                    Va = ((Qa | 0) < (pa | 0) ? bb << 1 : 0) + La + nb;
                                    eb = _jtga(a, 4, 1, 0, 0);
                                    0 == (eb | 0) ? Zb = 0 : (HEAP32[eb + HEAP32[eb >> 2] >> 2] = Va, Zb = eb);
                                    eb = _jttake(a, Zb, Ca);
                                    if (0 == (eb | 0)) {
                                        j = 0;
                                        d = 222;
                                        break
                                    }
                                    cb = eb;
                                    wb = HEAP32[eb >> 2] + (Math_imul(La, v) | 0);
                                    ob = cb + wb;
                                    ac = Math_imul(Va - bb, v) | 0;
                                    Hb = (X | 0) < (ac | 0);
                                    _memcpy(ob, Xa + HEAP32[Ta >> 2], Hb ? X : ac) | 0;
                                    if (Hb)
                                        for (Hb = X;;)
                                            if (Ib = ac - Hb, _memcpy(cb + (wb + Hb), ob, (Hb | 0) < (Ib | 0) ? Hb : Ib) | 0, Ib = Hb << 1, (Ib | 0) < (ac | 0)) Hb = Ib;
                                            else break;
                                    Hb = _jtga(a, 4, 1, 0, 0);
                                    0 == (Hb | 0) ? Qb = 0 : (HEAP32[Hb + HEAP32[Hb >> 2] >> 2] = Va, Qb = Hb);
                                    Hb = _jttake(a, Qb, lb);
                                    if (0 ==
                                        (Hb | 0)) {
                                        j = 0;
                                        d = 222;
                                        break
                                    }
                                    Rb = eb;
                                    Ob = Hb;
                                    Bb = ob;
                                    xb = Hb + HEAP32[Hb >> 2] + (Math_imul(La, Ba) << 2);
                                    dc = Va
                                } else Rb = Ca, Ob = lb, Bb = Ya, xb = Ja, dc = bb;
                                d: do
                                    if (!ab) {
                                        Hb = mb;
                                        for (ac = HEAP32[$a >> 2];;) {
                                            if ((ac | 0) != (HEAP32[U + 28 + (Hb << 2) >> 2] | 0)) break d;
                                            HEAP32[V + (Hb << 2) >> 2] = 0;
                                            wb = Hb - 1;
                                            cb = V + (wb << 2);
                                            Fa = HEAP32[cb >> 2] + 1;
                                            HEAP32[cb >> 2] = Fa;
                                            if (0 == (wb | 0)) break;
                                            else Hb = wb, ac = Fa
                                        }
                                    }
                                while (0);
                                if (0 < (nb | 0)) {
                                    Va = Ba - qb;
                                    ob = qb << 2;
                                    eb = gb + (HEAP32[Za >> 2] + ib);
                                    ac = xb;
                                    for (Hb = 0;;)
                                        if (_memcpy(ac, da, sa) | 0, _memcpy(ac + (Va << 2), eb, ob) | 0, rb = Hb + 1, (rb | 0) < (nb | 0)) eb += qb << 2, ac +=
                                            Ba << 2, Hb = rb;
                                        else break;
                                    tb = xb + (Math_imul(nb, Ba) << 2)
                                } else tb = xb;
                                d: do
                                    if (Pa) d = 158;
                                    else {
                                        Hb = Na;
                                        ac = zb + 32;
                                        for (qb = Da;
                                            (HEAP8[ac] | 0) == (HEAP8[qb] | 0);)
                                            if (eb = Hb - 1, 0 == (eb | 0)) {
                                                d = 158;
                                                break d
                                            } else Hb = eb, ac += 1, qb += 1;
                                        HEAP32[la >> 2] = nb;
                                        _povtake(ea, zb, Bb);
                                        oc = Math_imul(nb, v) | 0
                                    }
                                while (0);
                                158 == d && (d = 0, qb = Math_imul(nb, v) | 0, _memcpy(Bb, zb + HEAP32[zb >> 2], qb) | 0, oc = qb);
                                HEAP32[$a >> 2] += 1;
                                qb = Qa + 1;
                                if ((qb | 0) < (G | 0)) bb = dc, La = Ka, Ja = tb, Qa = qb, Ya = Bb + oc, lb = Ob, Ca = Rb;
                                else {
                                    Mb = dc;
                                    Tb = Ka;
                                    Ra = Ob;
                                    Nb = Rb;
                                    break b
                                }
                            }
                            if (133 == d) return Ca = HEAP32[Ua >> 2], lb = HEAP32[Ca +
                                (HEAP32[Ca >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[lb + 20 >> 2], lb + HEAP32[lb >> 2]), j = 0, STACKTOP = c, j;
                            if (222 == d) return STACKTOP = c, j
                        } else Mb = ta, Tb = 0, Ra = fb, Nb = Ea;
                    while (0);
                    (Ea = (Tb | 0) == (Mb | 0)) ? sb = Nb: (fb = _jtga(a, 4, 1, 0, 0), 0 == (fb | 0) ? Ab = 0 : (HEAP32[fb + HEAP32[fb >> 2] >> 2] = Tb, Ab = fb), sb = _jttake(a, Ab, Nb));
                    fb = sb - ya;
                    HEAP32[ha + ($ + 12) >> 2] = fb;
                    if (0 == ($ + (fb + ha) | 0)) return j = 0, STACKTOP = c, j;
                    Ea ? Eb = Ra : (Ea = _jtga(a, 4, 1, 0, 0), 0 == (Ea | 0) ? Lb = 0 : (HEAP32[Ea + HEAP32[Ea >> 2] >> 2] = Tb, Lb = Ea), Eb = _jttake(a, Lb, Ra));
                    Ea = Eb - ya;
                    HEAP32[ha + ($ + 8) >> 2] = Ea;
                    fb = 0 == ($ +
                        (Ea + ha) | 0) ? 0 : U;
                    if (0 == (fb | 0)) return j = 0, STACKTOP = c, j;
                    Z = fb
                }
            while (0);
            _jttraverse(a, Z, 654);
            u = Z + 16;
            HEAP32[u >> 2] += 1;
            _jttpop(a, h);
            j = _jttpush(a, Z);
            STACKTOP = c;
            return j
        }
    while (0);
    j = _jtca(a, f);
    STACKTOP = c;
    return j
}
function _jtover(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    e = b;
    g = b + 8;
    h = b + 16;
    j = b + 24;
    HEAP32[h >> 2] = f;
    HEAP32[j >> 2] = d;
    if (0 == (f | 0) | 0 == (d | 0)) return i = 0, STACKTOP = b, i;
    l = 0 == (HEAP32[f + 12 >> 2] & 64512 | 0);
    do
        if (l && 0 == (HEAP32[d +
                12 >> 2] & 64512 | 0)) {
            k = _jtcoerce2(a, h, j, 0);
            if (0 == (k | 0)) return i = 0, STACKTOP = b, i;
            m = HEAP32[h >> 2];
            n = HEAP32[m + 24 >> 2];
            p = HEAP32[j >> 2];
            q = HEAP32[p + 24 >> 2];
            r = a + 205336;
            s = HEAP32[r >> 2];
            t = 0 == (s | 0);
            if (t & 2 > (n | 0) & 2 > (q | 0)) {
                u = m + 12;
                w = HEAP32[u >> 2];
                v = m + 20;
                x = p + 20;
                z = y = _jtga(a, w, HEAP32[x >> 2] + HEAP32[v >> 2], 1, 0);
                if (0 == (y | 0)) return i = 0, STACKTOP = b, i;
                if (0 != (w & 32 | 0)) {
                    A = 0 == (HEAP32[u >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[m + 4 >> 2] & 14 | 0) | 0;
                    D = 0 == (HEAP32[p + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[p + 4 >> 2] & 14 | 0) | 0;
                    u = 0 == (A | 0) ? D & 255 : 1;
                    0 != u << 24 >> 24 && (HEAP32[y + 4 >> 2] = 8);
                    B = HEAP32[y >>
                        2];
                    G = z + B;
                    C = y & -(u & 255);
                    u = (m & -A) - C;
                    F = HEAP32[v >> 2];
                    if (0 < (F | 0)) {
                        E = (F << 2) + B;
                        B = 0;
                        J = G;
                        for (L = m + HEAP32[m >> 2];;)
                            if (HEAP32[J >> 2] = u + HEAP32[L >> 2], I = B + 1, (I | 0) < (F | 0)) B = I, J += 4, L += 4;
                            else break;
                        H = z + E
                    } else H = G;
                    L = (p & -D) - C;
                    J = HEAP32[x >> 2];
                    if (0 >= (J | 0)) return i = y, STACKTOP = b, i;
                    B = H;
                    F = 0;
                    for (u = p + HEAP32[p >> 2];;)
                        if (HEAP32[B >> 2] = L + HEAP32[u >> 2], I = F + 1, (I | 0) < (J | 0)) B += 4, F = I, u += 4;
                        else {
                            i = y;
                            break
                        }
                    STACKTOP = b;
                    return i
                }
                K = 4 == (w | 0) | 67108864 == (w | 0) | 134217728 == (w | 0) | 4194304 == (w | 0) | 8388608 == (w | 0) ? 4 : 32 == (w | 0) ? 4 : 64 == (w | 0) ? 4 : 128 == (w | 0) ? 8 : 1024 ==
                    (w | 0) | 4096 == (w | 0) | 8192 == (w | 0) | 16384 == (w | 0) | 2048 == (w | 0) | 32768 == (w | 0) ? 16 : 262144 == (w | 0) | 524288 == (w | 0) | 1048576 == (w | 0) ? 44 : 16777216 == (w | 0) ? 12 : 65536 == (w | 0) ? 4 : 268435456 == (w | 0) ? 12 : 536870912 == (w | 0) ? 24 : 1 == (w | 0) | 8 == (w | 0) | 16 == (w | 0) ? w : 2 == (w | 0) | 2097152 == (w | 0) | 33554432 == (w | 0) ? 1 : 131072 == (w | 0) ? 2 : -1;
                u = Math_imul(HEAP32[v >> 2], K) | 0;
                F = HEAP32[y >> 2];
                _memcpy(z + F, m + HEAP32[m >> 2], u) | 0;
                _memcpy(z + (F + u), p + HEAP32[p >> 2], Math_imul(HEAP32[x >> 2], K) | 0) | 0;
                i = y;
                STACKTOP = b;
                return i
            }
            N = t ? n : HEAP32[s >> 2];
            u = n - N;
            F = m + 28;
            S = (B = 0 != (N | 0)) ? HEAP32[m +
                28 + (n - 1 << 2) >> 2] : 1;
            T = t ? q : HEAP32[s + 4 >> 2];
            J = q - T;
            L = p + 28;
            V = (C = 0 != (T | 0)) ? HEAP32[p + 28 + (q - 1 << 2) >> 2] : 1;
            G = T + N;
            0 == (G | 0) ? (Q = 1, c = 196) : (E = (N | 0) > (T | 0) ? N : T, 2 >= (E | 0) && (Q = E, c = 196));
            do
                if (196 == c && 0 != (HEAP32[m + 20 >> 2] | 0) && (0 != (HEAP32[p + 20 >> 2] | 0) && 3 > (G | 0) | (S | 0) == (V | 0)) && !(0 != (HEAP32[m + 12 >> 2] & 32 | 0) && 0 != (HEAP32[m + 4 >> 2] & 14 | 0)) && !(0 != (HEAP32[p + 12 >> 2] & 32 | 0) && 0 != (HEAP32[p + 4 >> 2] & 14 | 0))) {
                    P = 2 > (N | 0) ? S : Math_imul(HEAP32[m + 28 + (n - 2 << 2) >> 2], S) | 0;
                    E = 2 == (T | 0) & (B ^ 1) ? V : P;
                    M = 2 > (T | 0) ? V : Math_imul(HEAP32[p + 28 + (q - 2 << 2) >> 2], V) | 0;
                    I = 2 == (N | 0) & (C ^ 1) ?
                        S : M;
                    R = I + E;
                    aa = (O = (u | 0) <= (J | 0)) ? J : u;
                    Z = O ? L : F;
                    do
                        if (0 < (aa | 0)) {
                            O = 1;
                            for ($ = 0;;)
                                if (ba = O * (HEAP32[Z + ($ << 2) >> 2] | 0), ka = $ + 1, (ka | 0) < (aa | 0)) O = ba, $ = ka;
                                else break;
                            2147483647 >= ba ? (ea = ba, c = 212) : ($ = HEAP32[a + 4408 >> 2], O = HEAP32[$ + (HEAP32[$ >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[O + 20 >> 2], O + HEAP32[O >> 2]), ha = 0)
                        } else ea = 1, c = 212;
                    while (0);
                    212 == c && (ha = ea & -1);
                    O = a + 204545;
                    if (0 != (HEAP8[O] | 0)) return i = 0, STACKTOP = b, i;
                    $ = (ha | 0) * (R | 0);
                    if (2147483647 < $)
                        if (ka = HEAP32[a + 4408 >> 2], da = HEAP32[ka + (HEAP32[ka >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[da + 20 >>
                                2], da + HEAP32[da >> 2]), 0 == (HEAP8[O] | 0)) ga = 0;
                        else return i = 0, STACKTOP = b, i;
                    else ga = $ & -1;
                    $ = _jtga(a, k, ga, Q + aa, Z);
                    if (0 == ($ | 0)) return i = 0, STACKTOP = b, i;
                    O = $;
                    da = HEAP32[$ >> 2];
                    ka = O + da;
                    U = HEAP32[$ + 24 >> 2];
                    ca = $ + 28 + (U - 1 << 2);
                    2 > (Q | 0) ? HEAP32[ca >> 2] = R : (HEAP32[ca >> 2] = B ? S : V, X = 1 < (N | 0) ? HEAP32[m + 28 + (n - 2 << 2) >> 2] : 1, Y = 1 < (T | 0) ? HEAP32[p + 28 + (q - 2 << 2) >> 2] : 1, HEAP32[$ + 28 + (U - 2 << 2) >> 2] = Y + X);
                    ja = 268435456 == (k | 0) ? 12 : 536870912 == (k | 0) ? 24 : 1 == (k | 0) | 8 == (k | 0) | 16 == (k | 0) ? k : 65536 == (k | 0) ? 4 : 2 == (k | 0) | 2097152 == (k | 0) | 33554432 == (k | 0) ? 1 : 131072 == (k | 0) ? 2 :
                        4 == (k | 0) | 67108864 == (k | 0) | 134217728 == (k | 0) | 4194304 == (k | 0) | 8388608 == (k | 0) ? 4 : 32 == (k | 0) ? 4 : 64 == (k | 0) ? 4 : 128 == (k | 0) ? 8 : 1024 == (k | 0) | 4096 == (k | 0) | 8192 == (k | 0) | 16384 == (k | 0) | 2048 == (k | 0) | 32768 == (k | 0) ? 16 : 262144 == (k | 0) | 524288 == (k | 0) | 1048576 == (k | 0) ? 44 : 16777216 == (k | 0) ? 12 : -1;
                    do
                        if (0 < (u | 0)) {
                            U = 1;
                            for (ca = 0;;)
                                if (fa = U * (HEAP32[m + 28 + (ca << 2) >> 2] | 0), ia = ca + 1, (ia | 0) < (u | 0)) U = fa, ca = ia;
                                else break;
                            2147483647 >= fa ? (ra = fa, c = 243) : (ca = HEAP32[a + 4408 >> 2], U = HEAP32[ca + (HEAP32[ca >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[U + 20 >> 2], U + HEAP32[U >> 2]), sa =
                                0)
                        } else ra = 1, c = 243;
                    while (0);
                    243 == c && (sa = ra & -1);
                    _om(ja, ha, sa, R, E, P, n, ka, m + HEAP32[m >> 2]);
                    do
                        if (0 < (J | 0)) {
                            Z = 1;
                            for (aa = 0;;)
                                if (ta = Z * (HEAP32[p + 28 + (aa << 2) >> 2] | 0), U = aa + 1, (U | 0) < (J | 0)) Z = ta, aa = U;
                                else break;
                            2147483647 >= ta ? (wa = ta, c = 248) : (aa = HEAP32[a + 4408 >> 2], Z = HEAP32[aa + (HEAP32[aa >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Z + 20 >> 2], Z + HEAP32[Z >> 2]), za = 0)
                        } else wa = 1, c = 248;
                    while (0);
                    248 == c && (za = wa & -1);
                    ka = O + ((Math_imul(ja, E) | 0) + da);
                    _om(ja, ha, za, R, I, M, q, ka, p + HEAP32[p >> 2]);
                    i = $;
                    STACKTOP = b;
                    return i
                }
            while (0);
            HEAP32[r >> 2] = 0;
            i = _jtrank2ex(a,
                m, p, 0, N, T, 2190);
            STACKTOP = b;
            return i
        }
    while (0);
    T = f + 24;
    N = HEAP32[T >> 2];
    M = a + 205336;
    za = HEAP32[M >> 2];
    0 == (za | 0) ? (Ba = ha = HEAP32[d + 24 >> 2], ua = N, ya = ha) : (Ba = HEAP32[za + 4 >> 2], ua = HEAP32[za >> 2], ya = HEAP32[d + 24 >> 2]);
    za = HEAP32[d + 12 >> 2];
    HEAP32[M >> 2] = 0;
    if (0 == (N | 0)) return i = _jtovs0(a, 0, Ba, f, d), STACKTOP = b, i;
    if (0 == (ya | 0)) return i = _jtovs0(a, 1, ua, d, f), STACKTOP = b, i;
    if ((N | 0) > (ua | 0) | (ya | 0) > (Ba | 0)) return i = _jtsprank2(a, f, d, 0, ua, Ba, 774), STACKTOP = b, i;
    ua = (Ba = (N | 0) > (ya | 0)) ? N : ya;
    do
        if ((ua | 0) > (N | 0)) {
            ha = ua - N;
            ja = _jtga(a, 4, ha, 1, 0);
            do
                if (0 ==
                    (ja | 0)) xa = 0;
                else if (0 >= (ha | 0)) xa = ja;
            else {
                wa = ja + HEAP32[ja >> 2];
                for (ta = 0;;)
                    if (HEAP32[wa >> 2] = 1, P = ta + 1, (P | 0) < (ha | 0)) wa += 4, ta = P;
                    else {
                        xa = ja;
                        break
                    }
            }
            while (0);
            ja = HEAP32[T >> 2];
            ha = _jtga(a, 4, ja, 1, 0);
            0 == (ha | 0) ? oa = 0 : (_memcpy(ha + HEAP32[ha >> 2], f + 28, ja << 2) | 0, oa = ha);
            ha = _jtreshape(a, _jtover(a, xa, oa), f);
            if (0 == (ha | 0)) return i = 0, STACKTOP = b, i;
            pa = ha
        } else pa = f;
    while (0);
    f = pa + 28;
    do
        if (Ba) {
            oa = ua - ya;
            xa = _jtga(a, 4, oa, 1, 0);
            do
                if (0 == (xa | 0)) la = 0;
                else if (0 >= (oa | 0)) la = xa;
            else {
                T = xa + HEAP32[xa >> 2];
                for (N = 0;;)
                    if (HEAP32[T >> 2] = 1, ha = N + 1, (ha |
                            0) < (oa | 0)) T += 4, N = ha;
                    else {
                        la = xa;
                        break
                    }
            }
            while (0);
            xa = HEAP32[d + 24 >> 2];
            oa = _jtga(a, 4, xa, 1, 0);
            0 == (oa | 0) ? qa = 0 : (_memcpy(oa + HEAP32[oa >> 2], d + 28, xa << 2) | 0, qa = oa);
            oa = _jtreshape(a, _jtover(a, la, qa), d);
            if (0 == (oa | 0)) return i = 0, STACKTOP = b, i;
            Da = oa
        } else Da = d;
    while (0);
    d = Da + 28;
    if ((HEAP32[f >> 2] | 0) >= (2147483647 - HEAP32[d >> 2] | 0)) return qa = HEAP32[a + 4408 >> 2], la = HEAP32[qa + (HEAP32[qa >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[la + 20 >> 2], la + HEAP32[la >> 2]), i = 0, STACKTOP = b, i;
    if (l) {
        la = Da;
        qa = HEAP32[Da >> 2];
        ya = _jtsparseit(a, pa, la + (HEAP32[la + qa >>
            2] + qa), la + (HEAP32[qa + (la + 4) >> 2] + qa));
        if (0 == (ya | 0)) return i = 0, STACKTOP = b, i;
        Aa = ya
    } else Aa = pa;
    ya = l = Aa;
    if (0 == (za & 64512 | 0)) {
        qa = HEAP32[ya >> 2];
        la = _jtsparseit(a, Da, l + (HEAP32[l + qa >> 2] + qa), l + (HEAP32[qa + (l + 4) >> 2] + qa));
        if (0 == (la | 0)) return i = 0, STACKTOP = b, i;
        Ea = la
    } else Ea = Da;
    za = HEAP32[ya >> 2];
    ya = HEAP32[l + za >> 2] + za;
    la = _jtga(a, 1, ua, 1, 0);
    if (0 == (la | 0)) return i = 0, STACKTOP = b, i;
    qa = la;
    Ba = HEAP32[la >> 2];
    la = qa + Ba;
    _memset(la, 0, ua) | 0;
    oa = l + (ya + HEAP32[l + ya >> 2]);
    xa = HEAP32[ya + (l + 20) >> 2];
    do
        if (0 < (xa | 0))
            for (ya = 0;;)
                if (HEAP8[qa + (HEAP32[oa +
                        (ya << 2) >> 2] + Ba)] = 1, N = ya + 1, (N | 0) < (xa | 0)) ya = N;
                else break;
    else
    if (0 == (la | 0)) return i = 0, STACKTOP = b, i;
    while (0);
    la = HEAP32[za + (l + 4) >> 2] + za;
    za = l + la;
    xa = HEAP32[la + (l + 12) >> 2];
    l = Ea;
    la = HEAP32[Ea >> 2];
    oa = HEAP32[l + la >> 2] + la;
    ya = _jtga(a, 1, ua, 1, 0);
    if (0 == (ya | 0)) return i = 0, STACKTOP = b, i;
    N = ya;
    T = HEAP32[ya >> 2];
    ya = N + T;
    _memset(ya, 0, ua) | 0;
    ha = l + (oa + HEAP32[l + oa >> 2]);
    ja = HEAP32[oa + (l + 20) >> 2];
    do
        if (0 < (ja | 0))
            for (oa = 0;;)
                if (HEAP8[N + (HEAP32[ha + (oa << 2) >> 2] + T)] = 1, p = oa + 1, (p | 0) < (ja | 0)) oa = p;
                else break;
    else
    if (0 == (ya | 0)) return i = 0, STACKTOP =
        b, i;
    while (0);
    ya = HEAP32[la + (l + 4) >> 2] + la;
    la = l + ya;
    ja = HEAP32[ya + (l + 12) >> 2];
    if (0 == _jtequ(a, za, la) << 24 >> 24) return l = HEAP32[a + 4408 >> 2], ya = HEAP32[l + (HEAP32[l >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[ya + 20 >> 2], ya + HEAP32[ya >> 2]), i = 0, STACKTOP = b, i;
    ya = _jtga(a, 1, ua, 1, 0);
    if (0 == (ya | 0)) return i = 0, STACKTOP = b, i;
    l = ya;
    ha = HEAP32[ya >> 2];
    ya = l + ha;
    if (oa = 0 < (ua | 0))
        for (p = 0;;)
            if (Sa = 0 == (HEAP8[qa + (Ba + p)] | 0) ? 0 != (HEAP8[N + (T + p)] | 0) | 0 : 1, HEAP8[l + (p + ha)] = Sa, m = p + 1, (m | 0) < (ua | 0)) p = m;
            else break;
    p = _jtifb(a, ua, ya);
    if (0 == (p | 0)) return i = 0, STACKTOP =
        b, i;
    Sa = HEAP32[p + 20 >> 2];
    m = _jtga(a, 4, ua, 1, 0);
    if (0 == (m | 0)) return i = 0, STACKTOP = b, i;
    r = m + HEAP32[m >> 2];
    a: do
        if (oa) {
            for (ta = 0;;)
                if (wa = HEAP32[pa + 28 + (ta << 2) >> 2], $ = HEAP32[Da + 28 + (ta << 2) >> 2], HEAP32[r + (ta << 2) >> 2] = (wa | 0) > ($ | 0) ? wa : $, $ = ta + 1, ($ | 0) < (ua | 0)) ta = $;
                else {
                    Oa = 0;
                    break
                }
            for (;;) {
                ta = Oa + 1;
                if ((HEAP8[l + (Oa + ha)] | 0) > (HEAP8[qa + (Ba + Oa)] | 0)) {
                    c = 56;
                    break
                }
                if ((ta | 0) < (ua | 0)) Oa = ta;
                else {
                    Ha = Aa;
                    break
                }
            }
            if (56 == c) {
                ta = _jtreaxis(a, p, Aa);
                if (0 == (ta | 0)) return i = 0, STACKTOP = b, i;
                Ha = ta
            }
            for (ta = 0;;) {
                $ = ta + 1;
                if ((HEAP8[l + (ta + ha)] | 0) > (HEAP8[N + (T +
                        ta)] | 0)) {
                    c = 60;
                    break
                }
                if (($ | 0) < (ua | 0)) ta = $;
                else {
                    Ga = Ea;
                    break
                }
            }
            if (60 == c) {
                ta = _jtreaxis(a, p, Ea);
                if (0 == (ta | 0)) return i = 0, STACKTOP = b, i;
                Ga = ta
            }
            ta = HEAP32[f >> 2];
            HEAP32[r >> 2] = ta;
            $ = 0;
            for (wa = ta;;) {
                ta = $ + 1;
                if ((wa | 0) > (HEAP32[pa + 28 + ($ << 2) >> 2] | 0)) {
                    c = 65;
                    break
                }
                if ((ta | 0) >= (ua | 0)) {
                    Ma = Ha;
                    break
                }
                $ = ta;
                wa = HEAP32[r + (ta << 2) >> 2]
            }
            if (65 == c) {
                wa = _jttake(a, m, Ha);
                if (0 == (wa | 0)) return i = 0, STACKTOP = b, i;
                Ma = wa
            }
            wa = HEAP32[d >> 2];
            HEAP32[r >> 2] = wa;
            $ = 0;
            for (ta = wa;;) {
                wa = $ + 1;
                if ((ta | 0) > (HEAP32[Da + 28 + ($ << 2) >> 2] | 0)) break;
                if ((wa | 0) >= (ua | 0)) {
                    Ia = Ga;
                    db = Ma;
                    break a
                }
                $ = wa;
                ta = HEAP32[r + (wa << 2) >> 2]
            }
            ta = _jttake(a, m, Ga);
            if (0 == (ta | 0)) return i = 0, STACKTOP = b, i;
            Ia = ta;
            db = Ma
        } else HEAP32[r >> 2] = HEAP32[f >> 2], HEAP32[r >> 2] = HEAP32[d >> 2], Ia = Ea, db = Aa;
    while (0);
    HEAP32[r >> 2] = HEAP32[d >> 2] + HEAP32[f >> 2];
    d = _jtmaxtype(a, xa, ja);
    ja = db;
    Aa = HEAP32[db >> 2];
    db = HEAP32[Aa + (ja + 8) >> 2] + Aa;
    Ma = Ea = ja + db;
    Ga = ja + (HEAP32[Aa + (ja + 12) >> 2] + Aa);
    if (Aa = (d | 0) != (xa | 0)) {
        m = HEAP32[M >> 2];
        HEAP32[M >> 2] = 0;
        Da = _jtccvt(a, d, Ga, g);
        HEAP32[M >> 2] = m;
        if (0 == Da << 24 >> 24) return Da = HEAP32[a + 4408 >> 2], m = HEAP32[Da + (HEAP32[Da >> 2] + 12) >>
            2], _jtjsigstr(a, 3, HEAP32[m + 20 >> 2], m + HEAP32[m >> 2]), i = 0, STACKTOP = b, i;
        m = HEAP32[g >> 2];
        if (0 == (m | 0)) return i = 0, STACKTOP = b, i;
        W = m
    } else W = Ga;
    Ga = Ia;
    g = HEAP32[Ia >> 2];
    Ia = HEAP32[g + (Ga + 8) >> 2] + g;
    Da = m = Ga + Ia;
    Ha = Ga + (HEAP32[g + (Ga + 12) >> 2] + g);
    if (Aa) {
        g = HEAP32[M >> 2];
        HEAP32[M >> 2] = 0;
        pa = _jtccvt(a, d, Ha, e);
        HEAP32[M >> 2] = g;
        if (0 == pa << 24 >> 24) return pa = HEAP32[a + 4408 >> 2], g = HEAP32[pa + (HEAP32[pa >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), i = 0, STACKTOP = b, i;
        g = HEAP32[e >> 2];
        if (0 == (g | 0)) return i = 0, STACKTOP = b, i;
        Xa = g
    } else Xa =
        Ha;
    Ta = 0 == (d & 1 | 0) ? 0 != (d & 4 | 0) ? 4096 : 0 != (d & 8 | 0) ? 8192 : 0 != (d & 16 | 0) ? 16384 : 0 != (d & 2 | 0) ? 2048 : d << 10 & 32768 : 1024;
    Ha = _jtga(a, Ta, 1, ua, r);
    if (0 == (Ha | 0)) return i = 0, STACKTOP = b, i;
    ua = Ha;
    Ta = HEAP32[Ha >> 2];
    M = e = ua + Ta;
    Aa = p - M;
    HEAP32[e >> 2] = Aa;
    if (0 == (ua + (Aa + Ta) | 0)) return i = 0, STACKTOP = b, i;
    la = Aa = _jtca(a, (d | 0) == (xa | 0) ? za : la);
    za = Aa - M;
    HEAP32[Ta + (ua + 4) >> 2] = za;
    if (0 == (ua + (za + Ta) | 0)) return i = 0, STACKTOP = b, i;
    do
        if (0 == (HEAP8[ya] | 0)) {
            fb = 1 == (d | 0) | 8 == (d | 0) | 16 == (d | 0) ? d : 2 == (d | 0) | 2097152 == (d | 0) | 33554432 == (d | 0) ? 1 : 131072 == (d | 0) ? 2 : 4 == (d | 0) | 67108864 ==
                (d | 0) | 134217728 == (d | 0) | 4194304 == (d | 0) | 8388608 == (d | 0) ? 4 : 32 == (d | 0) ? 4 : 64 == (d | 0) ? 4 : 128 == (d | 0) ? 8 : 1024 == (d | 0) | 4096 == (d | 0) | 8192 == (d | 0) | 16384 == (d | 0) | 2048 == (d | 0) | 32768 == (d | 0) ? 16 : 262144 == (d | 0) | 524288 == (d | 0) | 1048576 == (d | 0) ? 44 : 16777216 == (d | 0) ? 12 : 65536 == (d | 0) ? 4 : 268435456 == (d | 0) ? 12 : 536870912 == (d | 0) ? 24 : -1;
            za = db + (ja + 28);
            xa = HEAP32[za >> 2];
            e = ja + (HEAP32[Ea >> 2] + db);
            p = W + HEAP32[W >> 2];
            g = W + 24;
            pa = HEAP32[g >> 2];
            0 == (pa | 0) ? (mb = 1, c = 111) : (T = HEAP32[W + 28 >> 2], 0 == (T | 0) ? c = 113 : (mb = T, c = 111));
            111 == c && (0 != (HEAP32[W + 12 >> 2] & 64512 | 0) ? c = 113 :
                ma = (HEAP32[W + 20 >> 2] | 0) / (mb | 0) & -1);
            a: do
                if (113 == c) {
                    T = pa - 1;
                    do
                        if (0 < (T | 0)) {
                            N = 1;
                            for (ha = 0;;)
                                if (l = ha + 1, ab = N * (HEAP32[W + 28 + (l << 2) >> 2] | 0), (l | 0) < (T | 0)) N = ab, ha = l;
                                else break;
                            if (2147483647 >= ab) Na = ab;
                            else {
                                ha = HEAP32[a + 4408 >> 2];
                                N = HEAP32[ha + (HEAP32[ha >> 2] + 40) >> 2];
                                _jtjsigstr(a, 10, HEAP32[N + 20 >> 2], N + HEAP32[N >> 2]);
                                ma = 0;
                                break a
                            }
                        } else Na = 1;
                    while (0);
                    ma = Na & -1
                }
            while (0);
            pa = Math_imul(ma, fb) | 0;
            T = HEAP32[Ia + (Ga + 28) >> 2];
            N = Ga + (HEAP32[m >> 2] + Ia);
            ha = Xa + HEAP32[Xa >> 2];
            l = HEAP32[Xa + 24 >> 2];
            0 == (l | 0) ? ($a = 1, c = 120) : (Oa = HEAP32[Xa + 28 >> 2], 0 == (Oa |
                0) ? c = 122 : ($a = Oa, c = 120));
            120 == c && (0 != (HEAP32[Xa + 12 >> 2] & 64512 | 0) ? c = 122 : Ua = (HEAP32[Xa + 20 >> 2] | 0) / ($a | 0) & -1);
            a: do
                if (122 == c) {
                    Oa = l - 1;
                    do
                        if (0 < (Oa | 0)) {
                            Ba = 1;
                            for (qa = 0;;)
                                if (oa = qa + 1, Pa = Ba * (HEAP32[Xa + 28 + (oa << 2) >> 2] | 0), (oa | 0) < (Oa | 0)) Ba = Pa, qa = oa;
                                else break;
                            if (2147483647 >= Pa) bb = Pa;
                            else {
                                qa = HEAP32[a + 4408 >> 2];
                                Ba = HEAP32[qa + (HEAP32[qa >> 2] + 40) >> 2];
                                _jtjsigstr(a, 10, HEAP32[Ba + 20 >> 2], Ba + HEAP32[Ba >> 2]);
                                Ua = 0;
                                break a
                            }
                        } else bb = 1;
                    while (0);
                    Ua = bb & -1
                }
            while (0);
            l = Math_imul(Ua, fb) | 0;
            Oa = T + xa;
            Ba = Ua + ma;
            qa = Math_imul(Ba, fb) | 0;
            oa = _jtga(a,
                4, Math_imul(Oa, Sa) | 0, 2, za);
            if (0 == (oa | 0)) return i = 0, STACKTOP = b, i;
            ta = HEAP32[oa >> 2];
            HEAP32[oa + 28 >> 2] = Oa;
            $ = Math_imul(Ba, Oa) | 0;
            Ba = _jtga(a, d, $, HEAP32[g >> 2], W + 28);
            if (0 == (Ba | 0)) return i = 0, STACKTOP = b, i;
            $ = Ba;
            wa = HEAP32[Ba >> 2];
            I = $ + wa;
            HEAP32[Ba + 28 >> 2] = Oa;
            HEAP32[Ba + 32 >> 2] = HEAP32[r >> 2];
            R = Math_imul(HEAP32[Ba + 20 >> 2], fb) | 0;
            da = (fb | 0) < (R | 0);
            _memcpy(I, la + HEAP32[Aa >> 2], da ? fb : R) | 0;
            if (da)
                for (da = fb;;)
                    if (E = R - da, _memcpy($ + (wa + da), I, (da | 0) < (E | 0) ? da : E) | 0, E = da << 1, (E | 0) < (R | 0)) da = E;
                    else break;
            do
                if (0 < (xa | 0) | 0 < (T | 0)) {
                    da = Sa << 2;
                    R =
                        0 < (Sa | 0);
                    wa = N;
                    $ = p;
                    g = ha;
                    za = I;
                    P = O = E = 0;
                    sa = e;
                    for (ra = oa + ta;;) {
                        a: do
                            if ((E | 0) == (xa | 0)) La = sa, Ja = P, Qa = xa, Ya = $, c = 141;
                            else {
                                b: do
                                    if ((O | 0) != (T | 0)) {
                                        c: do
                                            if (R) {
                                                for (fa = 0;;) {
                                                    lb = HEAP32[sa + (fa << 2) >> 2];
                                                    Ca = HEAP32[wa + (fa << 2) >> 2];
                                                    X = fa + 1;
                                                    if ((lb | 0) != (Ca | 0)) break;
                                                    if ((X | 0) < (Sa | 0)) fa = X;
                                                    else break c
                                                }
                                                if ((lb | 0) < (Ca | 0)) break b;
                                                else {
                                                    La = sa;
                                                    Ja = P;
                                                    Qa = E;
                                                    Ya = $;
                                                    c = 141;
                                                    break a
                                                }
                                            }while (0);_memcpy(ra, sa, da) | 0;_memcpy(za, $, pa) | 0;La = sa + (Sa << 2);Ja = P + 1;Qa = E + 1;Ya = $ + pa;c = 141;
                                        break a
                                    }while (0);_memcpy(ra, sa, da) | 0;_memcpy(za, $, pa) | 0;gb = sa + (Sa << 2);Fa =
                                P;Za = O;qb = E + 1;ib = g;ub = $ + pa;eb = wa
                            }while (0);141 == c && (c = 0, _memcpy(ra, wa, da) | 0, _memcpy(za + pa, g, l) | 0, gb = La, Fa = Ja, Za = O + 1, qb = Qa, ib = g + l, ub = Ya, eb = wa + (Sa << 2));
                        if ((qb | 0) < (xa | 0) | (Za | 0) < (T | 0)) wa = eb,
                        $ = ub,
                        g = ib,
                        za += qa,
                        E = qb,
                        O = Za,
                        P = Fa,
                        sa = gb,
                        ra += Sa << 2;
                        else break
                    }
                    0 == (Fa | 0) ? (rb = oa, Ka = wb = 0) : (ra = _jtga(a, 4, 1, 0, 0), 0 == (ra | 0) ? Va = 0 : (HEAP32[ra + HEAP32[ra >> 2] >> 2] = Oa - Fa, Va = ra), rb = _jttake(a, Va, oa), wb = Fa, Ka = 1)
                } else rb = oa, Ka = wb = 0;
            while (0);
            oa = rb - M;
            HEAP32[Ta + (ua + 8) >> 2] = oa;
            if (0 == (ua + (oa + Ta) | 0)) return i = 0, STACKTOP = b, i;
            Ka ? (oa = _jtga(a, 4,
                1, 0, 0), 0 == (oa | 0) ? nb = 0 : (HEAP32[oa + HEAP32[oa >> 2] >> 2] = Oa - wb, nb = oa), ob = _jttake(a, nb, Ba)) : ob = Ba;
            oa = ob - M;
            HEAP32[Ta + (ua + 12) >> 2] = oa;
            if (0 == (ua + (oa + Ta) | 0)) return i = 0, STACKTOP = b, i
        } else {
            oa = _jtover(a, W, Xa) - M;
            HEAP32[Ta + (ua + 12) >> 2] = oa;
            if (0 == (ua + (oa + Ta) | 0)) return i = 0, STACKTOP = b, i;
            oa = _jtover(a, Ma, Da);
            qa = oa - M;
            HEAP32[Ta + (ua + 8) >> 2] = qa;
            if (0 == (ua + (qa + Ta) | 0)) return i = 0, STACKTOP = b, i;
            qa = HEAP32[f >> 2];
            T = HEAP32[Ia + (Ga + 28) >> 2];
            if (!(0 >= (T | 0))) {
                xa = oa + HEAP32[oa >> 2] + (HEAP32[db + (ja + 20) >> 2] << 2);
                for (oa = 0;;)
                    if (HEAP32[xa >> 2] += qa, l = oa +
                        1, (l | 0) < (T | 0)) xa += Sa << 2, oa = l;
                    else break
            }
        }
    while (0);
    i = Ha;
    STACKTOP = b;
    return i
}
function _jtparse(a, f) {
    var d, c, b, e, g, h, j, i, l;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 20 >> 2];
    c = f + HEAP32[f >> 2];
    e = b = _jtga(a, 32, d + 5, 1, 0);
    if (0 == (b | 0)) return 0;
    g = HEAP32[b >> 2];
    h = _jtga(a, 2, 52, 1, 0);
    if (0 == (h | 0)) return 0;
    j = h;
    i = HEAP32[h >> 2];
    h = j + i;
    _memset(h, 0, 52) | 0;
    HEAP8[i + (j + 48)] = 1;
    l = a + 205600;
    HEAP32[h >> 2] = HEAP32[l >> 2];
    HEAP32[l >> 2] = h;
    HEAP32[i + (j + 16) >> 2] = f;
    if (0 == (h | 0)) return 0;
    h = g + (e + 4);
    HEAP32[e + g >> 2] = HEAP32[31134];
    if (0 < (d | 0)) {
        f = e + (g + (d << 2) + 4);
        g = c;
        c = h;
        for (e = 0;;)
            if (HEAP32[c >> 2] = HEAP32[g >> 2], j = e + 1, (j | 0) < (d | 0)) g += 4, c += 4,
                e = j;
            else break;
        d = f
    } else d = h;
    HEAP32[d >> 2] = HEAP32[31134];
    HEAP32[d + 4 >> 2] = HEAP32[31134];
    HEAP32[d + 8 >> 2] = HEAP32[31134];
    HEAP32[d + 12 >> 2] = HEAP32[31134];
    d = _jtparsea(a, b);
    HEAP32[l >> 2] = HEAP32[HEAP32[l >> 2] >> 2];
    return d
}
function _jtparsea(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G;
    d = 0;
    c = a + 205260;
    b = HEAP32[c >> 2];
    if (0 == (f | 0)) return 0;
    e = f + 20;
    g = HEAP32[e >> 2] - 4;
    h = f + HEAP32[f >> 2];
    f = a + 8;
    HEAP8[f] = 0;
    j = a + 205292;
    HEAP32[j >> 2] += 1;
    if (2 > (g | 0)) return d = HEAP32[31134];
    j = HEAP32[e >> 2];
    e = j - 1;
    i = _jtga(a, 4, j, 1, 0);
    if (0 == (i | 0)) return 0;
    k = l = i;
    i = HEAP32[k >> 2];
    if (0 == (j | 0)) m = i;
    else {
        j = -1;
        for (n = l + i; !(i = j + 1, HEAP32[n >> 2] = i, (i | 0) == (e | 0));) j = i, n += 4;
        m = HEAP32[k >> 2]
    }
    k = l + m;
    m = a + 205600;
    l = a + 205757;
    n = a + 205244;
    j = a + 205248;
    e = a + 205252;
    i = a + 205256;
    p = a + 1168;
    q = a + 4408;
    for (s = r = g;;) {
        g = HEAP32[h + (r << 2) >> 2] + 12;
        t = HEAP32[g >> 2];
        u = h + (r + 1 << 2);
        w = h + (r + 2 << 2);
        v = h + (r + 3 << 2);
        x = 0;
        a: for (;;) {
            do
                if (0 != (t & HEAP32[113704 + (36 * x & -1) >> 2] | 0) && 0 != (HEAP32[HEAP32[u >> 2] + 12 >> 2] & HEAP32[113708 + (36 * x & -1) >> 2] | 0) && 0 != (HEAP32[HEAP32[w >> 2] + 12 >> 2] & HEAP32[113712 + (36 * x & -1) >> 2] | 0) && 0 != (HEAP32[HEAP32[v >> 2] + 12 >> 2] & HEAP32[113716 + (36 * x & -1) >> 2] | 0)) {
                    d = 16;
                    break a
                }
            while (0);
            y = x + 1;
            if (9 > (y | 0)) x = y;
            else {
                d = 18;
                break
            }
        }
        do
            if (16 == d) {
                d = 0;
                v = HEAP32[113728 + (36 * x & -1) >> 2];
                w = v + r;
                u = HEAP32[113732 + (36 * x & -1) >> 2] + r;
                t = HEAP32[k + (HEAP32[113736 + (36 * x & -1) >> 2] + r << 2) >> 2];
                HEAP32[k + (u << 2) >> 2] = t;
                HEAP32[HEAP32[m >> 2] + 28 >> 2] = t;
                t = HEAP32[113720 + (36 * x & -1) >> 2];
                HEAP8[f] = 7 == (x | 0) | 0;
                y = getFUNCTION_TABLE(t)(a, w, u, h);
                HEAP32[h + (u << 2) >> 2] = y;
                if (1 < x - 7 >>> 0) {
                    t = u;
                    for (z = 0; !(w -= 1, t -= 1, HEAP32[h + (t << 2) >> 2] = HEAP32[h + (w << 2) >> 2], HEAP32[k + (t << 2) >> 2] = HEAP32[k + (w << 2) >> 2], z += 1, !((z | 0) < (v | 0))););
                    A = y;
                    D = u - v
                } else A = y, D = u;
                z = s
            } else if (18 == d) {
            d = 0;
            z = s - 1;
            t = HEAP32[k + ((1 > (s | 0) ? 0 : z) << 2) >> 2];
            w = r - 1;
            HEAP32[k + ((1 > (r | 0) ? 0 : w) << 2) >> 2] = t;
            HEAP32[HEAP32[m >> 2] + 28 >> 2] = t;
            t = HEAP32[h +
                ((0 > (z | 0) ? 0 : z) << 2) >> 2];
            a: do
                if (0 == (HEAP32[t + 12 >> 2] & 33554432 | 0)) u = t;
                else
            if (0 != (HEAP32[g >> 2] & 2097152 | 0)) u = t;
            else {
                do
                    if (0 == (HEAP8[l] | 0)) d = 26;
                    else if (0 == (HEAP8[t + (HEAP32[t >> 2] + 13)] & 4)) d = 26;
                else {
                    if (0 == (t | 0)) {
                        u = 0;
                        break a
                    }
                    v = _jtsyrd(a, t, 0);
                    if (0 == (v | 0)) {
                        HEAP32[p >> 2] = t;
                        v = HEAP32[q >> 2];
                        u = HEAP32[v + (HEAP32[v >> 2] + 84) >> 2];
                        _jtjsigstr(a, 21, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]);
                        u = 0;
                        break a
                    } else B = HEAP32[v + 4 >> 2]
                }
                while (0);
                26 == d && (d = 0, B = _jtnameref(a, t));
                if (0 == (B | 0)) u = 0;
                else {
                    v = HEAP32[c >> 2];
                    u = HEAP32[n >> 2];
                    if ((v | 0) == (HEAP32[u +
                            20 >> 2] | 0)) {
                        v = _jtext(a, 1, u);
                        HEAP32[n >> 2] = v;
                        if (0 == (v | 0)) {
                            u = 0;
                            break
                        }
                        HEAP32[j >> 2] = v + HEAP32[v >> 2];
                        u = HEAP32[e >> 2];
                        if ((HEAP32[u + 20 >> 2] | 0) < (HEAP32[v + 20 >> 2] | 0))
                            for (v = u;;) {
                                u = _jtext(a, 1, v);
                                HEAP32[e >> 2] = u;
                                if (0 == (u | 0)) {
                                    u = 0;
                                    break a
                                }
                                if ((HEAP32[u + 20 >> 2] | 0) < (HEAP32[HEAP32[n >> 2] + 20 >> 2] | 0)) v = u;
                                else {
                                    G = u;
                                    break
                                }
                            } else G = u;
                        HEAP32[i >> 2] = G + HEAP32[G >> 2];
                        v = HEAP32[c >> 2]
                    }
                    HEAP32[HEAP32[j >> 2] + (v << 2) >> 2] = B;
                    HEAP8[HEAP32[i >> 2] + v] = 1;
                    HEAP32[c >> 2] += 1;
                    u = B
                }
            }
            while (0);
            A = HEAP32[h + (w << 2) >> 2] = u;
            D = r - (0 < (s | 0) | 0)
        } while (0);
        x = 0 != (A | 0);
        if (x & -1 < (z |
                0)) r = D, s = z;
        else break
    }
    z = HEAP32[c >> 2] - b;
    if (0 < (z | 0)) {
        s = a + 1056;
        r = HEAP32[i >> 2] + b;
        i = 0;
        for (A = HEAP32[j >> 2] + (b << 2);;)
            if (j = r + 1, 0 == (HEAP8[r] | 0) && (u = HEAP32[A >> 2], 0 != (u | 0) && (_jttraverse(a, u, 1910), B = u + 16, v = HEAP32[B >> 2] - 1, HEAP32[B >> 2] = v, 0 == (v | 0) && (v = u - 32 + 24, u = HEAP16[v + 4 >> 1], B = u << 16 >> 16, G = HEAP32[124360 + (B << 2) >> 2], HEAP32[s >> 2] -= G, 10 < u << 16 >> 16 ? _free(v) : (u = a + 204588 + (B << 2), HEAP32[v >> 2] = HEAP32[u >> 2], HEAP32[u >> 2] = v, v = a + 204712 + (B << 2), HEAP32[v >> 2] += G)))), G = i + 1, (G | 0) < (z | 0)) r = j, i = G, A += 4;
            else break
    }
    HEAP32[c >> 2] = b;
    if (!x) return 0;
    x = HEAP32[h + (D + 1 << 2) >> 2];
    if (0 != (HEAP32[x + 12 >> 2] & 811597311 | 0) && 0 != (HEAP32[HEAP32[h + (D + 2 << 2) >> 2] + 12 >> 2] & 4194304 | 0)) return x;
    x = HEAP32[q >> 2];
    q = HEAP32[x + (HEAP32[x >> 2] + 76) >> 2];
    _jtjsigstr(a, 19, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]);
    return 0
}
function _jtparseas(a, f, d) {
    var c, b, e, g, h, j, i;
    c = HEAP32[d + 20 >> 2];
    b = HEAP32[d >> 2];
    g = e = _jtga(a, 32, c + 5, 1, 0);
    if (0 == (e | 0)) return 0;
    h = HEAP32[e >> 2];
    j = h + (g + 4);
    HEAP32[g + h >> 2] = HEAP32[31134];
    if (0 < (c | 0)) {
        i = g + (h + (c << 2) + 4);
        h = d + b;
        b = j;
        for (d = 0;;)
            if (HEAP32[b >> 2] = HEAP32[h >> 2], g = d + 1, (g | 0) < (c | 0)) h += 4, b += 4, d = g;
            else break;
        d = i
    } else d = j;
    HEAP32[d >> 2] = HEAP32[31134];
    HEAP32[d + 4 >> 2] = HEAP32[31134];
    HEAP32[d + 8 >> 2] = HEAP32[31134];
    HEAP32[d + 12 >> 2] = HEAP32[31134];
    d = _jtparsea(a, e);
    if (0 == f << 24 >> 24 | 0 == (d | 0) || 0 != (HEAP32[d + 12 >> 2] & 805567999 | 0) &&
        (f = _jtva2(a, HEAP32[31058], d, 61), 0 != (f | 0) && 0 == (_memchr(f + HEAP32[f >> 2], 0, HEAP32[f + 20 >> 2]) | 0))) return d;
    d = HEAP32[a + 4408 >> 2];
    f = HEAP32[d + (HEAP32[d >> 2] + 48) >> 2];
    _jtjsigstr(a, 12, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]);
    return 0
}
function _jtparsex(a, f, d, c, b) {
    var e, g, h, j, i, l;
    e = a + 205600;
    g = HEAP32[e >> 2];
    if (0 == (f | 0)) return 0;
    h = HEAP32[a >> 2];
    if (0 != (HEAP8[h] | 0) && 0 == (HEAP8[a + 1040] | 0)) return HEAP8[h] = 0, j = HEAP32[a + 4408 >> 2], i = HEAP32[j + (HEAP32[j >> 2] + 4) >> 2], _jtjsigstr(a, 1, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), 0;
    h = 25 == (HEAP8[c + 10] | 0) | 0;
    if (0 != d << 24 >> 24) return a = _jtparseas(a, h, f);
    d = _jtga(a, 2, 52, 1, 0);
    if (0 == (d | 0)) return 0;
    i = d;
    j = HEAP32[d >> 2];
    d = i + j;
    
    _memset(d, 0, 52) | 0;
    HEAP8[j + (i + 48)] = 1;
    HEAP32[d >> 2] = HEAP32[e >> 2];
    HEAP32[e >> 2] = d;
    HEAP32[j + (i + 16) >> 2] = f;
    if (0 ==
        (d | 0)) return 0;
    do
        if (0 == (b | 0)) d = _jtparseas(a, h, f);
        else {
            if (0 == _jtdbstop(a, b, HEAPU16[c + 8 >> 1]) << 24 >> 24) {
                d = _jtparseas(a, h, f);
                if (0 != (d | 0)) break;
                if (3 == (HEAP32[a + 1176 >> 2] | 0)) {
                    d = 0;
                    break
                }
            } else d = HEAP32[a + 4408 >> 2], l = HEAP32[d + (HEAP32[d >> 2] + 72) >> 2], _jtjsigstr(a, 18, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
            l = HEAP8[a + 204545] | 0;
            HEAP32[j + (i + 32) >> 2] = l;
            d = g + 32;
            HEAP32[d >> 2] = l;
            l = _jtdebug(a);
            HEAP32[d >> 2] = 0;
            d = l
        }
    while (0);
    HEAP32[e >> 2] = HEAP32[HEAP32[e >> 2] >> 2];
    return d
}
function _jtpinit(a) {
    var f, d, c, b, e;
    f = 0;
    d = STACKTOP;
    _memcpy(122648, 113216, 256) | 0;
    HEAP8[122726] = 3;
    HEAP8[122714] = 4;
    c = _jtga(a, 2, 256, 1, 0);
    HEAP32[40246] = c;
    if (0 != (c | 0)) {
        b = c + HEAP32[c >> 2];
        for (e = 0;;)
            if (HEAP8[b] = e, e += 1, 256 > (e | 0)) b += 1;
            else break;
        HEAP32[30984] = c;
        HEAP32[c + 16 >> 2] = 1073741823;
        c = HEAP32[31086];
        e = _jtga(a, 32, 1, 0, 0);
        0 == (e | 0) ? c = 0 : (HEAP32[e + HEAP32[e >> 2] >> 2] = c, c = e);
        HEAP32[40250] = c;
        HEAP32[30986] = c;
        HEAP32[c + 16 >> 2] = 1073741823;
        c = _jtga(a, 67108864, 1, 0, 0);
        0 == (c | 0) ? b = 0 : (HEAP32[c + HEAP32[c >> 2] >> 2] = 0, b = c);
        HEAP32[30838] =
            b;
        HEAP32[b + 16 >> 2] = 1073741823;
        b = _jtga(a, 134217728, 1, 0, 0);
        0 == (b | 0) ? e = 0 : (HEAP32[b + HEAP32[b >> 2] >> 2] = 0, e = b);
        HEAP32[30839] = e;
        HEAP32[e + 16 >> 2] = 1073741823;
        e = _jtga(a, 2097152, 1, 0, 0);
        0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, HEAP8[e + HEAP32[e >> 2]] = -128, HEAP32[30926] = e, e = _jtga(a, 2097152, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, HEAP8[e + HEAP32[e >> 2]] = -127, HEAP32[30927] = e, e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 368, HEAP32[c + (b + 4) >> 2] = 2202, HEAP32[c + (b + 24) >> 2] =
                2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 61, HEAP32[30859] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2972, HEAP32[c + (b + 4) >> 2] = 1054, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 60, HEAP32[30858] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 464, HEAP32[c + (b + 4) >> 2] = 1640, HEAP32[c +
                (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -126, HEAP32[30928] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1470, HEAP32[c + (b + 4) >> 2] = 1058, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -125, HEAP32[30929] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2684, HEAP32[c + (b + 4) >> 2] = 1740, HEAP32[c +
                (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 62, HEAP32[30860] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2496, HEAP32[c + (b + 4) >> 2] = 446, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -124, HEAP32[30930] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2168, HEAP32[c + (b + 4) >> 2] = 1746, HEAP32[c + (b +
                24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -123, HEAP32[30931] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1600, HEAP32[c + (b + 4) >> 2] = 530, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 43, HEAP32[30841] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2914, HEAP32[c + (b + 4) >> 2] = 1020, HEAP32[c + (b + 24) >>
                2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -120, HEAP32[30934] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1958, HEAP32[c + (b + 4) >> 2] = 3244, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -119, HEAP32[30935] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1698, HEAP32[c + (b + 4) >> 2] = 2518, HEAP32[c + (b + 24) >>
                2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 42, HEAP32[30840] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1306, HEAP32[c + (b + 4) >> 2] = 2730, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -118, HEAP32[30936] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1386, HEAP32[c + (b + 4) >> 2] = 1012, HEAP32[c + (b + 24) >> 2] =
                0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -117, HEAP32[30937] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2404, HEAP32[c + (b + 4) >> 2] = 1420, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 45, HEAP32[30843] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3242, HEAP32[c + (b + 4) >> 2] = 462, HEAP32[c + (b + 24) >> 2] = 0,
                HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -116, HEAP32[30938] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 634, HEAP32[c + (b + 4) >> 2] = 2902, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -115, HEAP32[30939] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1642, HEAP32[c + (b +
                4) >> 2] = 1914, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 37, HEAP32[30835] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2516, HEAP32[c + (b + 4) >> 2] = 362, HEAP32[c + (b + 24) >> 2] = 2, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -114, HEAP32[30940] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 458, HEAP32[c +
                (b + 4) >> 2] = 1894, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -113, HEAP32[30941] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2050, HEAP32[c + (b + 4) >> 2] = 378, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 94, HEAP32[30892] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1046, HEAP32[c + (b +
                4) >> 2] = 1048, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -112, HEAP32[30942] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 644, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -111, HEAP32[30943] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3028, HEAP32[c + (b +
                4) >> 2] = 1546, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 36, HEAP32[30834] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1222, HEAP32[c + (b + 4) >> 2] = 1224, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -110, HEAP32[30944] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >>
                2], HEAP32[b + c >> 2] = 1442, HEAP32[c + (b + 4) >> 2] = 1446, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -109, HEAP32[30945] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 502, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 126, HEAP32[30924] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823,
                b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1486, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -108, HEAP32[30946] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1582, HEAP32[c + (b + 4) >> 2] = 626, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -107, HEAP32[30947] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e +
                16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2812, HEAP32[c + (b + 4) >> 2] = 2924, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 124, HEAP32[30922] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3006, HEAP32[c + (b + 4) >> 2] = 1392, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -106, HEAP32[30948] = e), e = _jtga(a, 262144, 1, 0, 0), 0 !=
            (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1260, HEAP32[c + (b + 4) >> 2] = 1262, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -105, HEAP32[30949] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2406, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 46, HEAP32[30844] = e), e = _jtga(a,
                1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1990, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -104, HEAP32[30950] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2240, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -103, HEAP32[30951] = e), e = _jtga(a,
                1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2224, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 58, HEAP32[30856] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 874, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -102, HEAP32[30952] = e), e = _jtga(a,
                1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1736, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -101, HEAP32[30953] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2582, HEAP32[c + (b + 4) >> 2] = 774, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 44, HEAP32[30842] =
                e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1606, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -16, HEAP32[31038] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2350, HEAP32[c + (b + 4) >> 2] = 948, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >>
                2] = 1, HEAP8[c + (b + 40)] = -100, HEAP32[30954] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1032, HEAP32[c + (b + 4) >> 2] = 1034, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -99, HEAP32[30955] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2756, HEAP32[c + (b + 4) >> 2] = 3002, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647,
                HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 59, HEAP32[30857] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2068, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -98, HEAP32[30956] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2722, HEAP32[c + (b + 4) >> 2] = 2038, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >>
                2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -97, HEAP32[30957] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1538, HEAP32[c + (b + 4) >> 2] = 1350, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 35, HEAP32[30833] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3048, HEAP32[c + (b + 4) >> 2] = 3046, HEAP32[c +
                (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 1, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -96, HEAP32[30958] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1008, HEAP32[c + (b + 4) >> 2] = 1004, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -95, HEAP32[30959] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2248, HEAP32[c + (b + 4) >> 2] = 562, HEAP32[c +
                (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 33, HEAP32[30831] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1090, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -94, HEAP32[30960] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2100, HEAP32[c +
                (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -93, HEAP32[30961] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1130, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 47, HEAP32[30845] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2612, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b +
                24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -92, HEAP32[30962] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1614, HEAP32[c + (b + 4) >> 2] = 1378, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -91, HEAP32[30963] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 940, HEAP32[c + (b +
                4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 92, HEAP32[30890] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1248, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -90, HEAP32[30964] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1228, HEAP32[c + (b + 4) >>
                2] = 1226, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -89, HEAP32[30965] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2690, HEAP32[c + (b + 4) >> 2] = 886, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 91, HEAP32[30889] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e,
                c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -87, HEAP32[30967] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2690, HEAP32[c + (b + 4) >> 2] = 2688, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 93, HEAP32[30891] = e), e = _jtga(a, 262144,
                1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 788, HEAP32[c + (b + 4) >> 2] = 2062, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 123, HEAP32[30921] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 476, HEAP32[c + (b + 4) >> 2] = 2984, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -84, HEAP32[30970] =
                e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2554, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -83, HEAP32[30971] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1078, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 125, HEAP32[30923] =
                e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2412, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -23, HEAP32[31031] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1290, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c +
                (b + 40)] = -22, HEAP32[31032] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 966, HEAP32[c + (b + 4) >> 2] = 656, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -82, HEAP32[30972] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1158, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c +
                (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -81, HEAP32[30973] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 938, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 34, HEAP32[30832] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1762, HEAP32[c + (b + 4) >> 2] = 1758, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647,
                HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -80, HEAP32[30974] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1250, HEAP32[c + (b + 4) >> 2] = 1254, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -79, HEAP32[30975] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1460, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c +
                (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 96, HEAP32[30894] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 580, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -77, HEAP32[30977] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1284, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b +
                32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 64, HEAP32[30862] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2868, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -76, HEAP32[30978] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 360, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >>
                2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -75, HEAP32[30979] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 1890, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 38, HEAP32[30836] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 534, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] =
                0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -74, HEAP32[30980] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2792, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -73, HEAP32[30981] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1230, HEAP32[c + (b + 4) >> 2] = 2290, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] =
                0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = 63, HEAP32[30861] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 8, HEAP32[c + (b + 4) >> 2] = 3004, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -72, HEAP32[30982] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2808, HEAP32[c + (b + 4) >> 2] = 732, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c +
                (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -21, HEAP32[31033] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3074, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -19, HEAP32[31035] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2480, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0,
                HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -18, HEAP32[31036] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2780, HEAP32[c + (b + 4) >> 2] = 2782, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -69, HEAP32[30985] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 606, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >>
                2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -67, HEAP32[30987] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3108, HEAP32[c + (b + 4) >> 2] = 3106, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -64, HEAP32[30990] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 456, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c +
                (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -63, HEAP32[30991] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 784, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -62, HEAP32[30992] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2968, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c +
                (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -61, HEAP32[30993] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2986, HEAP32[c + (b + 4) >> 2] = 1812, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -60, HEAP32[30994] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2828, HEAP32[c +
                (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -59, HEAP32[30995] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1098, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -58, HEAP32[30996] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >>
                2] = 1156, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -56, HEAP32[30998] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2318, HEAP32[c + (b + 4) >> 2] = 1316, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -55, HEAP32[30999] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1686,
                HEAP32[c + (b + 4) >> 2] = 2450, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -54, HEAP32[31E3] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2512, HEAP32[c + (b + 4) >> 2] = 1484, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -53, HEAP32[31001] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c =
                HEAP32[e >> 2], HEAP32[b + c >> 2] = 688, HEAP32[c + (b + 4) >> 2] = 604, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -51, HEAP32[31003] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1542, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -50, HEAP32[31004] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823,
                b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 234, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -49, HEAP32[31005] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1804, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -47, HEAP32[31007] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b =
                e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 838, HEAP32[c + (b + 4) >> 2] = 2822, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -45, HEAP32[31009] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2304, HEAP32[c + (b + 4) >> 2] = 2308, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 1, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -44, HEAP32[31010] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e,
                c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 86, HEAP32[c + (b + 4) >> 2] = 88, HEAP32[c + (b + 24) >> 2] = 1, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 1, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -17, HEAP32[31037] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 3096, HEAP32[c + (b + 4) >> 2] = 48, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -43, HEAP32[31011] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823,
                b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2656, HEAP32[c + (b + 4) >> 2] = 2030, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -41, HEAP32[31013] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1656, HEAP32[c + (b + 4) >> 2] = 1654, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -40, HEAP32[31014] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b =
                e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 992, HEAP32[c + (b + 4) >> 2] = 994, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -39, HEAP32[31015] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 770, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -38, HEAP32[31016] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e +
                16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 314, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -37, HEAP32[31017] = e), e = _jtga(a, 524288, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2096, HEAP32[c + (b + 4) >> 2] = 1980, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -36, HEAP32[31018] = e), e = _jtga(a, 1048576, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >>
                2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 1982, HEAP32[c + (b + 4) >> 2] = 2184, HEAP32[c + (b + 24) >> 2] = 0, HEAP32[c + (b + 28) >> 2] = 0, HEAP32[c + (b + 32) >> 2] = 0, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -35, HEAP32[31019] = e), e = _jtga(a, 262144, 1, 0, 0), 0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2034, HEAP32[c + (b + 4) >> 2] = 2032, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -33, HEAP32[31021] = e), e = _jtga(a, 262144, 1, 0, 0),
            0 != (e | 0) && (HEAP32[e + 16 >> 2] = 1073741823, b = e, c = HEAP32[e >> 2], HEAP32[b + c >> 2] = 2796, HEAP32[c + (b + 4) >> 2] = 412, HEAP32[c + (b + 24) >> 2] = 2147483647, HEAP32[c + (b + 28) >> 2] = 2147483647, HEAP32[c + (b + 32) >> 2] = 2147483647, HEAP32[c + (b + 36) >> 2] = 1, HEAP8[c + (b + 40)] = -30, HEAP32[31024] = e), e = HEAP8[a + 204545], 0 != e << 24 >> 24 && (_printf(117920, (f = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[f >> 2] = e << 24 >> 24, f)), STACKTOP = f)))
    }
    STACKTOP = d
}
function _jtplus(a, f, d) {
    return _jtva2(a, f, d, 43)
}
function _jtnegate(a, f) {
    return _jtva2(a, HEAP32[30648], f, 45)
} 
function _jtpowop(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = f + 12;
    e = d + 12;
    g = HEAP32[e >> 2];
    h = (g >>> 18 & 1 | HEAP32[b >> 2] >>> 17 & 2) ^ 3;
    if (0 == (h | 0)) {
        j = f;
        c = HEAP32[f >> 2];
        i = HEAP8[c + (j + 40)];
        64 == i << 24 >> 24 | -75 == i << 24 >> 24 ? (e = HEAP32[c + (j + 12) >> 2], h = 0 == (e | 0) ? 3148 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? 3148 : 93 == (HEAP8[e + (HEAP32[e >> 2] + 40)] | 0) ? 490 : 3148) : h = 3148;
        if (0 != (HEAP8[a + 204545] | 0)) return 0;
        j = _jtga(a, 262144, 1, 0, 0);
        if (0 == (j | 0)) return 0;
        c = j;
        i = HEAP32[j >> 2];
        HEAP32[c + i >> 2] = 3150;
        HEAP32[i + (c + 4) >> 2] = h;
        HEAP32[i +
            (c + 8) >> 2] = f;
        HEAP32[i + (c + 12) >> 2] = d;
        HEAP32[i + (c + 16) >> 2] = 0;
        HEAP32[i + (c + 20) >> 2] = 0;
        HEAP32[i + (c + 24) >> 2] = 2147483647;
        HEAP32[i + (c + 28) >> 2] = 2147483647;
        HEAP32[i + (c + 32) >> 2] = 2147483647;
        HEAP32[i + (c + 36) >> 2] = 0;
        HEAP8[i + (c + 40)] = -111;
        a = j
    } else if (2 == (h | 0)) j = HEAP32[a + 4408 >> 2], c = HEAP32[j + (HEAP32[j >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), a = 0;
    else if (1 == (h | 0)) {
        if (0 == (g & 32 | 0)) {
            g = _jtvib(a, d);
            if (0 == (g | 0)) return 0;
            if (0 == (HEAP32[g + 20 >> 2] | 0)) l = 2824;
            else {
                c = HEAP32[g + HEAP32[g >> 2] >> 2];
                j = 0 < (HEAP32[g + 24 >> 2] | 0);
                if (-1 ==
                    (c | 0) & (j ^ 1)) {
                    if (0 != (HEAP8[a + 204545] | 0)) return 0;
                    i = _jtga(a, 262144, 1, 0, 0);
                    if (0 == (i | 0)) return 0;
                    h = i;
                    e = HEAP32[i >> 2];
                    HEAP32[h + e >> 2] = 2906;
                    HEAP32[e + (h + 4) >> 2] = 2908;
                    HEAP32[e + (h + 8) >> 2] = f;
                    HEAP32[e + (h + 12) >> 2] = d;
                    HEAP32[e + (h + 16) >> 2] = 0;
                    HEAP32[e + (h + 20) >> 2] = 0;
                    HEAP32[e + (h + 24) >> 2] = 2147483647;
                    HEAP32[e + (h + 28) >> 2] = 2147483647;
                    HEAP32[e + (h + 32) >> 2] = 2147483647;
                    HEAP32[e + (h + 36) >> 2] = 0;
                    HEAP8[e + (h + 40)] = -111;
                    return i
                }
                if (0 == (HEAP32[e >> 2] & 24 | 0)) e = 0;
                else if (i = HEAP32[40248], h = HEAPF64[14141], e = _jtga(a, 8, 1, 0, 0), 0 == (e | 0) ? h = 0 : (HEAPF64[e +
                        HEAP32[e >> 2] >> 3] = h, h = e), e = _jteps(a, d, _jtover(a, i, h)), k = 0 == (e | 0) ? 1 : 0 != (_memchr(e + HEAP32[e >> 2], 1, HEAP32[e + 20 >> 2]) | 0) | 0, 0 == (HEAP8[a + 204545] | 0)) e = k;
                else return 0;
                e = 0 != e << 24 >> 24;
                l = e | j ? e ? 2824 : 222 : -1 < (c | 0) ? 2850 : 222
            }
            if (0 != (HEAP8[a + 204545] | 0)) return 0;
            e = _jtga(a, 262144, 1, 0, 0);
            if (0 == (e | 0)) return 0;
            k = e;
            h = HEAP32[e >> 2];
            HEAP32[k + h >> 2] = l;
            HEAP32[h + (k + 4) >> 2] = 2830;
            HEAP32[h + (k + 8) >> 2] = f;
            HEAP32[h + (k + 12) >> 2] = d;
            HEAP32[h + (k + 16) >> 2] = g;
            HEAP32[h + (k + 20) >> 2] = 0;
            HEAP32[h + (k + 24) >> 2] = 2147483647;
            HEAP32[h + (k + 28) >> 2] = 2147483647;
            HEAP32[h +
                (k + 32) >> 2] = 2147483647;
            HEAP32[h + (k + 36) >> 2] = 0;
            HEAP8[h + (k + 40)] = -111;
            return e
        }
        if (0 != (HEAP32[d + 4 >> 2] & 14 | 0)) {
            e = _jtcar(a, d);
            if (0 == (e | 0)) return 0;
            d = e
        }
        a: do
            if (0 == (HEAP32[d + 24 >> 2] | 0)) {
                e = HEAP32[d + HEAP32[d >> 2] >> 2];
                k = HEAP32[e + 24 >> 2];
                do
                    if (1 == (k | 0)) {
                        if (0 != (HEAP32[e + 20 >> 2] | 0)) break a;
                        m = f;
                        n = HEAP32[f >> 2];
                        c = 26
                    } else if (0 == (k | 0)) {
                    h = HEAP32[e + 12 >> 2];
                    if (0 == (h & 805336541 | 0)) break a;
                    g = f;
                    l = HEAP32[f >> 2];
                    0 == (HEAP32[e + 20 >> 2] | 0) ? (m = g, n = l, c = 26) : 0 == (h & 8 | 0) ? (j = 864, p = g, q = l) : HEAPF64[14142] == HEAPF64[e + HEAP32[e >> 2] >> 3] ? (m = g, n = l, c = 26) :
                        (j = 864, p = g, q = l)
                } else break a;
                while (0);
                26 == c && (38 != (HEAP8[n + (m + 40)] | 0) ? j = 864 : (e = HEAP32[n + (m + 8) >> 2], 0 == (e | 0) ? j = 864 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? j = 864 : 123 != (HEAP8[e + (HEAP32[e >> 2] + 40)] | 0) ? j = 864 : (e = HEAP32[n + (m + 12) >> 2], j = 0 == (HEAP32[e + 12 >> 2] & 4 | 0) ? 864 : 1 != (HEAP32[e + 24 >> 2] | 0) ? 864 : 810)), p = m, q = n);
                126 == (HEAP8[q + (p + 40)] | 0) ? (e = HEAP32[q + (p + 8) >> 2], g = 0 == (e | 0) ? 2830 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? 2830 : 123 != (HEAP8[e + (HEAP32[e >> 2] + 40)] | 0) ? 2830 : 814) : g = 2830;
                if (0 != (HEAP8[a + 204545] | 0)) return a = 0;
                e = _jtga(a, 262144, 1, 0, 0);
                if (0 == (e | 0)) return a = 0;
                k = e;
                c = HEAP32[e >> 2];
                HEAP32[k + c >> 2] = j;
                HEAP32[c + (k + 4) >> 2] = g;
                HEAP32[c + (k + 8) >> 2] = f;
                HEAP32[c + (k + 12) >> 2] = d;
                HEAP32[c + (k + 16) >> 2] = 0;
                HEAP32[c + (k + 20) >> 2] = 0;
                HEAP32[c + (k + 24) >> 2] = 2147483647;
                HEAP32[c + (k + 28) >> 2] = 2147483647;
                HEAP32[c + (k + 32) >> 2] = 2147483647;
                HEAP32[c + (k + 36) >> 2] = 0;
                HEAP8[c + (k + 40)] = -111;
                return a = e
            }
        while (0);
        if (0 == (d | 0)) return 0;
        g = HEAP32[b >> 2];
        0 == (g & 262144 | 0) ? c = 45 : 0 == (HEAP32[d + 12 >> 2] & 32 | 0) ? c = 45 : i = g & 32;
        if (45 == c)
            if (b = g & 32, 0 != (b | 0) && 0 != (HEAP32[d + 12 >> 2] & 262144 | 0)) i = b;
            else return b = HEAP32[a +
                4408 >> 2], j = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), 0;
        c = (g = 0 != (i | 0)) ? f : d;
        j = HEAP32[c + 20 >> 2];
        if (2 <= (HEAP32[c + 24 >> 2] | 0)) return b = HEAP32[a + 4408 >> 2], p = HEAP32[b + (HEAP32[b >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), 0;
        if (2 != (j & -2 | 0)) return p = HEAP32[a + 4408 >> 2], b = HEAP32[p + (HEAP32[p >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), 0;
        if (0 == (HEAP32[c + 12 >> 2] & 32 | 0)) return b = HEAP32[a + 4408 >> 2], p = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[p +
            20 >> 2], p + HEAP32[p >> 2]), 0;
        3 == (j | 0) ? e = c : (j = _jtga(a, 2, 1, 0, 0), 0 == (j | 0) ? h = 0 : (HEAP8[j + HEAP32[j >> 2]] = 91, h = j), e = _jtlink(a, h, c));
        c = _jtevery(a, e, 0, 1906);
        if (0 == (c | 0) || 0 != (HEAP8[a + 204545] | 0)) return 0;
        e = _jtga(a, 262144, 1, 0, 0);
        if (0 == (e | 0)) return 0;
        h = e;
        j = HEAP32[e >> 2];
        HEAP32[h + j >> 2] = g ? 1170 : 750;
        HEAP32[j + (h + 4) >> 2] = g ? 1172 : 748;
        HEAP32[j + (h + 8) >> 2] = f;
        HEAP32[j + (h + 12) >> 2] = d;
        HEAP32[j + (h + 16) >> 2] = c;
        HEAP32[j + (h + 20) >> 2] = (i << 3 ^ 256) + 256;
        HEAP32[j + (h + 24) >> 2] = 2147483647;
        HEAP32[j + (h + 28) >> 2] = 2147483647;
        HEAP32[j + (h + 32) >> 2] = 2147483647;
        HEAP32[j + (h + 36) >> 2] = 0;
        HEAP8[j + (h + 40)] = -111;
        a = e
    } else 3 == (h | 0) ? -1 == (_jti0(a, d) | 0) ? a = _jtvger2(a, -111, f, d) : (d = HEAP32[a + 4408 >> 2], f = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), a = 0) : (f = HEAP32[a + 4408 >> 2], d = HEAP32[f + (HEAP32[f >> 2] + 80) >> 2], _jtjsigstr(a, 20, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), _jtwri(a, 4, 161016, 5, 122216), a = 0);
    return a
}
function _jtpowv1(a, f, d) {
    var c, b, e, g, h;
    c = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = HEAP32[d >> 2];
    e = HEAP32[b + (d + 8) >> 2];
    g = HEAP32[b + (d + 12) >> 2];
    h = 0 == (g | 0) ? 0 : HEAP32[g + HEAP32[g >> 2] >> 2];
    b = HEAP32[b + (d + 24) >> 2];
    if (0 == (f | 0)) return 0;
    if ((b | 0) < (HEAP32[f + 24 >> 2] | 0)) return a = _jtrank1ex(a, f, d, b, 3150);
    b = _jtpowop(a, e, getFUNCTION_TABLE(h)(a, f, g));
    0 == (b | 0) ? f = 0 : (g = getFUNCTION_TABLE(HEAP32[b + HEAP32[b >> 2] >> 2])(a, f, b), 0 == (g | 0) ? f = 0 : (_jttraverse(a, g, 654), h = g + 16, HEAP32[h >> 2] += 1, f = g));
    _jttpop(a, c);
    return a = _jttpush(a, f)
}
function _jtpreparse(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb,
        $b, na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf,
        Sf, Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei,
        Nk, jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn,
        Pm, Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    if (0 == (f | 0)) return g = 0, STACKTOP = e, g;
    h = HEAP32[f + 20 >> 2];
    j = f + HEAP32[f >> 2];
    if (!(65535 > (h | 0))) return i = a + 4408, l = HEAP32[i >> 2], k = HEAP32[l >> 2], m = k + 40, n = l + m, p = HEAP32[n >> 2], q = p + 20, r = HEAP32[q >> 2], s = HEAP32[p >> 2], t = p + s, _jtjsigstr(a, 10, r, t), g = 0, STACKTOP = e, g;
    u = _jtga(a,
        16777216, 3 * h & -1, 1, 0);
    if (0 == (u | 0)) return g = 0, STACKTOP = e, g;
    w = (HEAP32[u + 8 >> 2] | 0) / 12 & -1;
    HEAP32[u + 28 >> 2] = w;
    HEAP32[u + 20 >> 2] = w;
    _memset(u + HEAP32[u >> 2], 0, 12 * w & -1) | 0;
    v = HEAP32[u >> 2];
    x = _jtga(a, 32, 5 * h & -1, 1, 0);
    if (0 == (x | 0)) return g = 0, STACKTOP = e, g;
    y = (HEAP32[x + 8 >> 2] | 0) / 4 & -1;
    HEAP32[x + 28 >> 2] = y;
    HEAP32[x + 20 >> 2] = y;
    _memset(x + HEAP32[x >> 2], 0, y << 2) | 0;
    z = u + v;
    A = x + HEAP32[x >> 2];
    D = 0 < (h | 0);
    a: do
        if (D) {
            F = C = G = B = 0;
            E = z;
            L = J = 0;
            I = A;
            H = x;
            K = u;
            b: for (;;) {
                N = j + (B << 2);
                S = HEAP32[N >> 2];
                T = _jtwordil(a, S);
                if (V = 0 == (T | 0)) {
                    g = 0;
                    b = 197;
                    break
                }
                P = Q = T;
                M = HEAP32[P >>
                    2];
                O = R = Q + M;
                aa = M + 4;
                $ = Z = Q + aa;
                ba = HEAP32[O >> 2];
                ka = ba << 1;
                ea = 0 > (ba | 0);
                ha = -2 - ka;
                da = ea ? ha : ka;
                ga = (da | 0) / 2 & -1;
                U = _jtga(a, 32, ga, 1, 0);
                if (ca = 0 == (U | 0)) {
                    g = 0;
                    b = 197;
                    break
                }
                Y = X = U;
                ja = HEAP32[Y >> 2];
                ia = fa = X + ja;
                sa = ra = S;
                ta = HEAP32[sa >> 2];
                wa = 0 < (da | 0);
                do
                    if (wa) {
                        za = ia;
                        Ba = 0;
                        for (ua = -1;;) {
                            ya = $ + (Ba << 2);
                            xa = HEAP32[ya >> 2];
                            oa = Ba | 1;
                            pa = $ + (oa << 2);
                            la = HEAP32[pa >> 2];
                            Da = (qa = 0 > (ua | 0)) ? xa : ua;
                            Aa = xa + ta;
                            Ea = ra + Aa;
                            Sa = _jtconword(a, la, Ea);
                            if (Oa = 0 == (Sa | 0)) Ha = Da, Ga = za;
                            else {
                                if (Ma = (Da | 0) < (xa | 0)) {
                                    Ia = xa - Da;
                                    db = _jtga(a, 2, Ia, 1, 0);
                                    if (W = 0 == (db | 0)) {
                                        b = 13;
                                        break b
                                    }
                                    Xa =
                                        Da + ta;
                                    Ta = ra + Xa;
                                    mb = fb = db;
                                    ma = HEAP32[mb >> 2];
                                    ab = fb + ma;
                                    _memcpy(ab, Ta, Ia) | 0;
                                    Na = za + 4;
                                    HEAP32[za >> 2] = db;
                                    $a = Na
                                } else $a = za;
                                Ua = _jtga(a, 2, la, 1, 0);
                                if (Pa = 0 == (Ua | 0)) {
                                    b = 16;
                                    break b
                                }
                                La = bb = Ua;
                                Ja = HEAP32[La >> 2];
                                Qa = bb + Ja;
                                _memcpy(Qa, Ea, la) | 0;
                                HEAP32[$a >> 2] = Ua;
                                Ya = $a + 4;
                                Ha = -1;
                                Ga = Ya
                            }
                            lb = Ba + 2;
                            if (Ca = (lb | 0) < (da | 0)) za = Ga, Ba = lb, ua = Ha;
                            else break
                        }
                        if (gb = -1 < (Ha | 0)) {
                            Za = la + xa;
                            qb = Za - Ha;
                            ib = _jtga(a, 2, qb, 1, 0);
                            if (ub = 0 == (ib | 0)) {
                                b = 21;
                                break b
                            }
                            eb = Ha + ta;
                            rb = ra + eb;
                            Ka = wb = ib;
                            Va = HEAP32[Ka >> 2];
                            nb = wb + Va;
                            _memcpy(nb, rb, qb) | 0;
                            ob = Ga + 4;
                            HEAP32[Ga >> 2] = ib;
                            Fa = ob
                        } else Fa =
                            Ga
                    } else Fa = ia;
                while (0);
                cb = Fa;
                Wa = fa;
                yb = cb - Wa;
                Cb = yb >> 2;
                Pb = _jtga(a, 32, Cb, 1, 0);
                if (zb = 0 == (Pb | 0)) {
                    g = 0;
                    b = 197;
                    break
                }
                ac = Zb = Pb;
                Hb = HEAP32[ac >> 2];
                Ib = Zb + Hb;
                _memcpy(Ib, fa, yb) | 0;
                Qb = Pb + 20;
                Rb = HEAP32[Qb >> 2];
                Ob = HEAP32[ac >> 2];
                xb = Bb = Zb + Ob;
                if (dc = 0 < (Rb | 0)) {
                    tb = B & 65535;
                    oc = 0;
                    Mb = G;
                    Tb = C;
                    Ra = F;
                    Nb = E;
                    sb = J;
                    Ab = L;
                    Eb = I;
                    Lb = H;
                    for (vb = K;;) {
                        wc = vb + 20;
                        Ec = HEAP32[wc >> 2];
                        if (yc = (Ra | 0) == (Ec | 0)) {
                            Db = _jtext(a, 0, vb);
                            if (bc = 0 == (Db | 0)) {
                                g = 0;
                                b = 197;
                                break b
                            }
                            Fb = pb = Db;
                            jb = HEAP32[Fb >> 2];
                            ic = gc = pb + jb;
                            vc = Db;
                            hc = ic
                        } else vc = vb, hc = Nb;
                        uc = xb + (oc << 2);
                        Ac = HEAP32[uc >> 2];
                        xc = _jtwordil(a, Ac);
                        if (cd = 0 == (xc | 0)) {
                            g = 0;
                            b = 197;
                            break b
                        }
                        Tc = jc = Ac;
                        Fc = HEAP32[Tc >> 2];
                        Bc = jc + Fc;
                        Xb = ec = xc;
                        sc = HEAP32[Xb >> 2];
                        nc = sc + 8;
                        Ub = tc = ec + nc;
                        $c = HEAP32[Ub >> 2];
                        ad = _jtconword(a, $c, Bc);
                        Uc = (qc = 10 == (ad | 0)) ? 1 : sb;
                        rc = 25 == (ad | 0);
                        do
                            if (rc)
                                if (kb = 0 == (Mb | 0)) Jb = 1, b = 38;
                                else {
                                    b = 32;
                                    break b
                                } else {
                            $b = 1 == (Mb | 0);
                            na = 0 == (ad | 0);
                            if ($b) {
                                if (!na) {
                                    b = 35;
                                    break b
                                }
                                Vb = Ra - 1;
                                kc = 2;
                                va = Vb
                            } else if (na) kc = Mb, va = Ra;
                            else {
                                Jb = Mb;
                                b = 38;
                                break
                            }
                            fc = Yb = (Wc = 2 == (kc | 0)) ? 25 : 1;
                            Kb = kc;
                            Gb = va;
                            gd = 0
                        } while (0);
                        38 == b && (b = 0, fc = mc = ad & 255, Kb = Jb, Gb = Ra, gd = 1);
                        Gc = hc + (12 * Gb & -1) +
                            10;
                        HEAP8[Gc] = fc;
                        dd = hc + (12 * Gb & -1) + 8;
                        HEAP16[dd >> 1] = tb;
                        26 == (ad | 0) | 13 == (ad | 0) | 12 == (ad | 0) | 0 == (ad | 0) ? kd = -1 : (Fd = 16 == (ad | 0)) ? kd = -2 : (Vc = Gb + 1, kd = Hd = Vc & 65535);
                        bd = hc + (12 * Gb & -1) + 6;
                        HEAP16[bd >> 1] = kd;
                        cc = 15 == (ad | 0);
                        Ic = cc & 1;
                        fd = Ic | Ab;
                        do
                            if (gd) {
                                xd = ad & -2;
                                (Xc = 14 == (xd | 0)) ? b = 50: (Wd = 17 == (ad | 0)) ? (Sb = Ac + 20, pc = HEAP32[Sb >> 2], (zc = 4 < (pc | 0)) ? b = 50 : Wb = 0) : Wb = 0;
                                if (50 == b)
                                    if (b = 0, hd = 0 != (Ac | 0), Yc = hd & 1, Ad = 0 == (Ac | 0)) Wb = Yc;
                                    else {
                                        Gd = Yc;
                                        hb = Ac;
                                        b = 52;
                                        break
                                    }
                                ld = Wb + Tb;
                                ed = Wb & 65535;
                                Jc = Lb;
                                Oc = Eb;
                                Pc = ld;
                                ke = ed
                            } else {
                                Ed = _jtenqueue(a, xc, Ac);
                                if (pd = 0 == (Ed | 0)) {
                                    g =
                                        0;
                                    b = 197;
                                    break b
                                }
                                id = Ed + 20;
                                Cc = HEAP32[id >> 2];
                                if (Qc = 65535 > (Cc | 0)) Gd = Cc, hb = Ed, b = 52;
                                else {
                                    b = 49;
                                    break b
                                }
                            }
                        while (0);
                        do
                            if (52 == b) {
                                b = 0;
                                Zc = Lb + 20;
                                vd = HEAP32[Zc >> 2];
                                $d = Gd + Tb;
                                if (je = (vd | 0) < ($d | 0)) {
                                    for (Kc = Lb;;) {
                                        Bd = _jtext(a, 0, Kc);
                                        if (od = 0 == (Bd | 0)) {
                                            g = 0;
                                            b = 197;
                                            break b
                                        }
                                        Vd = Bd + 20;
                                        Zd = HEAP32[Vd >> 2];
                                        if (Jd = (Zd | 0) < ($d | 0)) Kc = Bd;
                                        else break
                                    }
                                    Md = Bd;
                                    Cd = HEAP32[Md >> 2];
                                    fe = Bd;
                                    Od = qd = Xd = fe + Cd;
                                    Mc = Bd
                                } else Od = Eb, Mc = Lb;
                                Dd = Od + (Tb << 2);
                                gd ? (HEAP32[Dd >> 2] = hb, Td = Gd & 65535, Jc = Mc, Oc = Od, Pc = $d, ke = Td) : (le = Dd, wd = me = hb, Ie = HEAP32[wd >> 2], xe = me + Ie, ye = Gd << 2, _memcpy(le,
                                    xe, ye) | 0, Fe = Gd & 65535, Jc = Mc, Oc = Od, Pc = $d, ke = Fe)
                            }
                        while (0);
                        nf = hc + (12 * Gb & -1);
                        HEAP32[nf >> 2] = Tb;
                        Je = hc + (12 * Gb & -1) + 4;
                        HEAP16[Je >> 1] = ke;
                        Qe = (Id = 2 == (Kb | 0)) ? 0 : Kb;
                        sd = Gb + 1;
                        ge = oc + 1;
                        if (ud = (ge | 0) < (Rb | 0)) oc = ge, Mb = Qe, Tb = Pc, Ra = sd, Nb = hc, sb = Uc, Ab = fd, Eb = Oc, Lb = Jc, vb = vc;
                        else {
                            md = Qe;
                            de = Pc;
                            ae = sd;
                            Dc = hc;
                            Nc = Uc;
                            yd = fd;
                            jd = Oc;
                            Sc = Jc;
                            lc = vc;
                            break
                        }
                    }
                } else md = G, de = C, ae = F, Dc = E, Nc = J, yd = L, jd = I, Sc = H, lc = K;
                nd = B + 1;
                if (Rc = (nd | 0) < (h | 0)) B = nd, G = md, C = de, F = ae, E = Dc, J = Nc, L = yd, I = jd, H = Sc, K = lc;
                else {
                    Hc = md;
                    Kd = de;
                    Rd = ae;
                    Nd = Dc;
                    be = Nc;
                    zd = yd;
                    we = jd;
                    Lc = Sc;
                    rd = lc;
                    break a
                }
            }
            if (13 ==
                b) return g = HEAP32[za >> 2] = 0, STACKTOP = e, g;
            if (16 == b) return g = HEAP32[$a >> 2] = 0, STACKTOP = e, g;
            if (21 == b) return g = HEAP32[Ga >> 2] = 0, STACKTOP = e, g;
            if (32 == b) return se = HEAP32[N >> 2], _jtjsignal3(a, 23, se, B), g = 0, STACKTOP = e, g;
            if (35 == b) return Ud = B - 1, Cf = j + (Ud << 2), td = HEAP32[Cf >> 2], _jtjsignal3(a, 23, td, Ud), g = 0, STACKTOP = e, g;
            if (49 == b) return Te = a + 4408, Me = Pd = pe = HEAP32[Te >> 2], Sd = HEAP32[Me >> 2], $e = Sd + 40, Ce = qe = Pd + $e, cf = HEAP32[Ce >> 2], sf = cf + 20, Ue = HEAP32[sf >> 2], Re = kf = cf, ce = HEAP32[Re >> 2], De = kf + ce, _jtjsigstr(a, 10, Ue, De), g = 0, STACKTOP =
                e, g;
            if (197 == b) return STACKTOP = e, g
        } else Rd = Kd = Hc = 0, Nd = z, zd = be = 0, we = A, Lc = x, rd = u;
    while (0);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return g = 0, STACKTOP = e, g;
    if (0 != (Hc | 0)) return Ge = h - 1, He = j + (Ge << 2), We = HEAP32[He >> 2], _jtjsignal3(a, 23, We, Ge), g = 0, STACKTOP = e, g;
    Yd = 0 == zd << 24 >> 24;
    a: do
        if (!Yd) {
            Ne = Rd << 1;
            Se = _jtga(a, 4, Ne, 2, 0);
            if (Ee = 0 == (Se | 0)) Ld = 0;
            else {
                he = Se + 28;
                HEAP32[he >> 2] = Rd;
                Qd = Se + 32;
                HEAP32[Qd >> 2] = 2;
                Ke = re = Se;
                Ae = HEAP32[Ke >> 2];
                ie = te = re + Ae;
                if (ff = 0 < (Rd | 0)) ue = Nd, ze = ne = Oe = 0, vf = ie;
                else break;
                for (;;) {
                    lf = vf + 4;
                    HEAP32[vf >> 2] = -1;
                    Xe = vf +
                        8;
                    HEAP32[lf >> 2] = -1;
                    Be = ue + 10;
                    hf = HEAP8[Be];
                    af = hf << 24 >> 24;
                    b: do switch (af | 0) {
                            case 6:
                                zf = ie + (ze << 2);
                                HEAP32[zf >> 2] = Oe;
                                uf = 0 < (ze | 0);
                                ve = 0 < (Oe | 0);
                                if (If = uf & ve) Df = ze;
                                else {
                                    Ef = ze;
                                    Gf = ne;
                                    break b
                                }
                                for (;;) {
                                    of = Df - 2;
                                    Lf = 0 < (of | 0);
                                    if (!Lf) {
                                        Ef = of;
                                        Gf = ne;
                                        break b
                                    }
                                    pf = ie + (of << 2);
                                    bf = HEAP32[pf >> 2];
                                    if (Bf = 0 < (bf | 0)) Df = of;
                                    else {
                                        Ef = of;
                                        Gf = ne;
                                        break
                                    }
                                }
                                break;
                            case 17:
                            case 4:
                            case 20:
                            case 10:
                            case 7:
                            case 8:
                                b = 72;
                                break;
                            case 21:
                            case 11:
                            case 3:
                            case 5:
                            case 9:
                            case 22:
                                Pf = ie + (ze << 2);
                                HEAP32[Pf >> 2] = Oe;
                                b = 72;
                                break;
                            default:
                                Ef = ze, Gf = ne
                        }
                        while (0);
                        72 == b && (b = 0, Ye =
                            ie + (ne << 2), HEAP32[Ye >> 2] = Oe, Hf = ne + 1, jf = ne + 2, Ef = Hf, Gf = jf);
                    mf = Oe + 1;
                    Le = ue + 12;
                    if (Ve = (mf | 0) < (Rd | 0)) ue = Le, Oe = mf, ne = Gf, ze = Ef, vf = Xe;
                    else break
                }
                df = Nd - 12;
                wf = Nd;
                Yf = 0;
                b: for (;;) {
                    Jf = wf + 10;
                    Qf = HEAP8[Jf];
                    Sf = 15 == Qf << 24 >> 24;
                    do
                        if (Sf) {
                            Mf = wf;
                            ee = HEAP32[Mf >> 2];
                            oe = we + (ee << 2);
                            xf = Ff = rf = HEAP32[oe >> 2];
                            Pe = HEAP32[xf >> 2];
                            qf = Pe + 5;
                            for (yf = 0; !(Nf = yf + qf, Zf = Ff + Nf, tg = HEAP8[Zf], Ze = 46 == tg << 24 >> 24, gf = yf + 1, Ze);) yf = gf;
                            ef = Ff + qf;
                            Kf = 0 == (gf | 0);
                            bg = df;
                            lg = 0;
                            c: for (;;) {
                                Rf = bg + 12;
                                Ug = bg + 22;
                                Vf = HEAP8[Ug];
                                Jg = 14 == Vf << 24 >> 24;
                                d: do
                                    if (Jg) {
                                        hg = Rf;
                                        Lg = HEAP32[hg >>
                                            2];
                                        $f = we + (Lg << 2);
                                        ah = HEAP32[$f >> 2];
                                        if (Kf) break c;
                                        nh = ah;
                                        dh = HEAP32[nh >> 2];
                                        mg = dh + 6;
                                        yh = ah;
                                        Bg = yh + mg;
                                        ig = gf;
                                        ng = ef;
                                        for (Ng = Bg;;) {
                                            Ch = HEAP8[ng];
                                            Dg = HEAP8[Ng];
                                            Vg = Ch << 24 >> 24 == Dg << 24 >> 24;
                                            if (!Vg) break d;
                                            pg = ig - 1;
                                            zg = ng + 1;
                                            Pg = Ng + 1;
                                            if (cg = 0 == (pg | 0)) break c;
                                            else ig = pg, ng = zg, Ng = Pg
                                        }
                                    }
                                while (0);
                                dg = lg + 1;
                                if (qg = (dg | 0) < (Rd | 0)) bg = Rf, lg = dg;
                                else {
                                    vg = Yf;
                                    break b
                                }
                            }
                            bh = lg + 1;
                            Zg = bh & 65535;
                            Eg = wf + 6;
                            HEAP16[Eg >> 1] = Zg;
                            wg = -2 < (lg | 0);
                            if (!wg) {
                                vg = Yf;
                                break b
                            }
                            if (vh = (bh | 0) < (Rd | 0)) {
                                $g = Kh = Nd + (12 * lg & -1);
                                for (Ag = bh;;) {
                                    Lh = $g + 12;
                                    xg = $g + 22;
                                    Mg = HEAP8[xg];
                                    rg = 14 == Mg <<
                                        24 >> 24;
                                    c: do
                                        if (rg) {
                                            Sg = Lh;
                                            jg = HEAP32[Sg >> 2];
                                            Uh = we + (jg << 2);
                                            Of = HEAP32[Uh >> 2];
                                            if (Kf) {
                                                vg = Ag;
                                                break b
                                            }
                                            Tg = Of;
                                            qi = HEAP32[Tg >> 2];
                                            eg = qi + 6;
                                            gi = Of;
                                            kg = gi + eg;
                                            Qg = gf;
                                            Wg = ef;
                                            for (wi = kg;;) {
                                                zh = HEAP8[Wg];
                                                Wf = HEAP8[wi];
                                                di = zh << 24 >> 24 == Wf << 24 >> 24;
                                                if (!di) break c;
                                                ch = Qg - 1;
                                                Mh = Wg + 1;
                                                Fg = wi + 1;
                                                if (Rg = 0 == (ch | 0)) {
                                                    vg = Ag;
                                                    break b
                                                } else Qg = ch, Wg = Mh, wi = Fg
                                            }
                                        }
                                    while (0);
                                    Vh = Ag + 1;
                                    if (Gg = (Vh | 0) < (Rd | 0)) $g = Lh, Ag = Vh;
                                    else break
                                }
                            }
                            eh = HEAP32[he >> 2];
                            if (kh = 0 < (eh | 0)) {
                                fh = HEAP32[Ke >> 2];
                                qh = Wh = re + fh;
                                og = 0;
                                for (Og = qh;;) {
                                    Kg = HEAP32[Og >> 2];
                                    Ih = (Kg | 0) > (lg | 0);
                                    do
                                        if (!Ih && (ai =
                                                Og + 4, wh = HEAP32[ai >> 2], Xh = (wh | 0) < (lg | 0), !Xh && (Nh = (Kg | 0) > (Yf | 0), Jh = (wh | 0) < (Yf | 0), lj = Nh | Jh))) {
                                            vg = Yf;
                                            break b
                                        }
                                    while (0);
                                    gh = og + 1;
                                    rh = Og + 8;
                                    if (Ph = (gh | 0) < (eh | 0)) og = gh, Og = rh;
                                    else break
                                }
                            }
                        }
                    while (0);
                    hi = Yf + 1;
                    sh = wf + 12;
                    if (fg = (hi | 0) < (Rd | 0)) wf = sh, Yf = hi;
                    else break a
                }
                if (Yi = 0 > (vg | 0)) break;
                else Ld = vg
            }
            mj = Nd + (12 * Ld & -1) + 8;
            xi = HEAP16[mj >> 1];
            Hi = xi & 65535;
            Ii = j + (Hi << 2);
            lh = HEAP32[Ii >> 2];
            _jtjsignal3(a, 23, lh, Hi);
            g = 0;
            STACKTOP = e;
            return g
        }
    while (0);
    yg = _jtga(a, 4, Rd, 1, 0);
    vj = 0 == (yg | 0);
    a: do
        if (vj) Ji = 0;
        else {
            yi = Xj = yg;
            hh = HEAP32[yi >> 2];
            ih = Aj = Xj +
                hh;
            Hj = 0 < (Rd | 0);
            do
                if (Hj) {
                    zi = e;
                    bi = Hg = oh = th = Ah = Cg = ti = ni = 0;
                    b: for (;;) {
                        ui = Cg + 1;
                        gj = Nd + (12 * Cg & -1);
                        rj = Nd + (12 * Cg & -1) + 10;
                        Ki = HEAP8[rj];
                        Pj = Ki << 24 >> 24;
                        (Zi = 0 < (Hg | 0)) ? (ii = Hg - 1, mh = ih + (ii << 2), ji = HEAP32[mh >> 2], vi = Nd + (12 * ji & -1), Qh = Nd + (12 * ji & -1) + 10, Ij = HEAP8[Qh], ik = Ij << 24 >> 24, (hj = 1 < (Hg | 0)) ? (ek = Hg - 2, ki = ih + (ek << 2), ci = HEAP32[ki >> 2], Rh = Nd + (12 * ci & -1), Bj = Nd + (12 * ci & -1) + 10, wj = HEAP8[Bj], Xg = Cj = wj << 24 >> 24, Li = ci, ph = Rh) : (Xg = 0, Li = th, ph = ti), al = vi, oi = ji, Yh = ik) : (Xg = 0, Li = th, ph = ti, al = ni, oi = Ah, Yh = 0);
                        c: do switch (Pj | 0) {
                                case 3:
                                    Qi = Yh + 122936;
                                    Ri = HEAP8[Qi];
                                    if (Qj = 0 == Ri << 24 >> 24) {
                                        Dh = Cg;
                                        break b
                                    }
                                    21 == (Yh | 0) ? (Vk = 23, b = 123) : 17 == (Yh | 0) ? Sh = 18 : (Vk = xj = (Dj = 22 == (Yh | 0)) ? 23 : 3, b = 123);
                                    123 == b && (b = 0, Sh = Vk);
                                    HEAP8[rj] = Sh;
                                    Eh = Hg + 1;
                                    Rj = ih + (Hg << 2);
                                    HEAP32[Rj >> 2] = Cg;
                                    Ai = oh - 1;
                                    Vi = bi;
                                    Yg = Eh;
                                    ri = Ai;
                                    break;
                                case 1:
                                    if (Fh = 0 == (oh | 0)) {
                                        Vi = bi;
                                        Yg = Hg;
                                        ri = 0;
                                        break c
                                    }
                                    HEAP8[rj] = 2;
                                    Vi = bi;
                                    Yg = Hg;
                                    ri = oh;
                                    break;
                                case 14:
                                    fk = ui & 65535;
                                    Ei = Nd + (12 * Cg & -1) + 6;
                                    HEAP16[Ei >> 1] = fk;
                                    Vi = bi;
                                    Yg = Hg;
                                    ri = oh;
                                    break;
                                case 9:
                                    Nk = 3 == (Yh | 0);
                                    if (!Nk) {
                                        Dh = Cg;
                                        break b
                                    }
                                    jk = ui & 65535;
                                    qk = al + 6;
                                    HEAP16[qk >> 1] = jk;
                                    if (nj = 9 == (Xg | 0)) pi = Cg & 65535,
                                        yj = ph + 6, HEAP16[yj >> 1] = pi;
                                    Ig = Hg - 2;
                                    Th = Hg - 1;
                                    ij = ih + (Ig << 2);
                                    HEAP32[ij >> 2] = Cg;
                                    Ej = oh + 1;
                                    Vi = bi;
                                    Yg = Th;
                                    ri = Ej;
                                    break;
                                case 5:
                                    Yj = 4 == (Xg | 0);
                                    $i = 3 == (Yh | 0);
                                    Ik = Yj & $i;
                                    if (!Ik) {
                                        Dh = Cg;
                                        break b
                                    }
                                    zk = ui & 65535;
                                    sj = al + 6;
                                    HEAP16[sj >> 1] = zk;
                                    Fj = Hg - 1;
                                    Jj = ih + (Fj << 2);
                                    Wk = HEAP32[Jj >> 2];
                                    Fi = Hg - 2;
                                    jj = ih + (Fi << 2);
                                    HEAP32[jj >> 2] = Wk;
                                    HEAP32[Jj >> 2] = Cg;
                                    Vi = bi;
                                    Yg = Hg;
                                    ri = oh;
                                    break;
                                case 13:
                                case 12:
                                    if (Ak = 0 == (bi | 0)) {
                                        Dh = Cg;
                                        break b
                                    } else Vi = bi, Yg = Hg, ri = oh;
                                    break;
                                case 17:
                                case 7:
                                case 8:
                                    Wi = jl = bi + 1;
                                    b = 117;
                                    break;
                                case 20:
                                case 4:
                                    Wi = bi;
                                    b = 117;
                                    break;
                                case 6:
                                    if (11 == (Yh | 0) | 27 ==
                                        (Yh | 0) | 28 == (Yh | 0)) {
                                        if (!Zi) {
                                            Dh = Cg;
                                            break b
                                        }
                                        HEAP32[zi >> 2] = Cg;
                                        tk = Hg;
                                        ei = 0;
                                        Bk = 1;
                                        zj = 0;
                                        Ck = Bi = kj = -1;
                                        d: for (;;) {
                                            ol = tk;
                                            Ci = ei;
                                            Sj = Bk;
                                            Kj = zj;
                                            Zj = kj;
                                            Tj = Bi;
                                            e: for (;;) {
                                                bl = ol;
                                                Jk = Ci;
                                                Ui = Sj;
                                                fi = Kj;
                                                xh = Zj;
                                                f: for (;;) {
                                                    oj = bl;
                                                    Dk = Jk;
                                                    for (gk = fi;;) {
                                                        cl = 0 == (oj | 0);
                                                        uk = 10 == (Dk | 0);
                                                        if (sg = cl | uk) break d;
                                                        Lj = oj - 1;
                                                        ul = ih + (Lj << 2);
                                                        pj = HEAP32[ul >> 2];
                                                        tf = Nd + (12 * pj & -1) + 10;
                                                        Xi = HEAP8[tf];
                                                        $j = Xi << 24 >> 24;
                                                        if (11 == ($j | 0)) break f;
                                                        else if (27 == ($j | 0)) break e;
                                                        else if (28 == ($j | 0)) break;
                                                        else if (10 == ($j | 0)) oj = Lj, Dk = 10, gk = pj;
                                                        else {
                                                            Dh = Cg;
                                                            break b
                                                        }
                                                    }
                                                    Si = 0 > (xh | 0);
                                                    if (!Si) {
                                                        Dh = Cg;
                                                        break b
                                                    }
                                                    gg = Ui + 1;
                                                    Kk = e + (Ui << 2);
                                                    HEAP32[Kk >> 2] = pj;
                                                    bl = Lj;
                                                    Jk = 28;
                                                    Ui = gg;
                                                    xh = fi = pj
                                                }
                                                Gh = 0 > (Tj | 0);
                                                if (!Gh) {
                                                    Dh = Cg;
                                                    break b
                                                }
                                                ag = Ui + 1;
                                                jh = e + (Ui << 2);
                                                HEAP32[jh >> 2] = pj;
                                                ol = Lj;
                                                Ci = 11;
                                                Sj = ag;
                                                Kj = pj;
                                                Zj = xh;
                                                Tj = pj
                                            }
                                            Hh = 0 > (Ck | 0);
                                            if (!Hh) {
                                                Dh = Cg;
                                                break b
                                            }
                                            Af = Ui + 1;
                                            Mi = e + (Ui << 2);
                                            HEAP32[Mi >> 2] = pj;
                                            tk = Lj;
                                            ei = 27;
                                            Bk = Af;
                                            zj = pj;
                                            kj = xh;
                                            Bi = Tj;
                                            Ck = pj
                                        }
                                        kl = 1 < (Ui | 0);
                                        si = uk & kl;
                                        if (!si) {
                                            Dh = Cg;
                                            break b
                                        }
                                        Ok = Ui - 1;
                                        Zh = e + (Ok << 2);
                                        dl = HEAP32[Zh >> 2];
                                        Lk = dl & 65535;
                                        li = Nd + (12 * gk & -1);
                                        Uj = Nd + (12 * gk & -1) + 6;
                                        HEAP16[Uj >> 1] = Lk;
                                        if (fm = 0 < (Ok | 0)) {
                                            Di = Ui;
                                            Mk = 0;
                                            for (qj = dl;;)
                                                if (Pk = Di - 1, vl = Di - 2, Mj =
                                                    e + (vl << 2), ak = HEAP32[Mj >> 2], mi = ak & 65535, Jl = Nd + (12 * qj & -1) + 6, HEAP16[Jl >> 1] = mi, Gi = Mk + 1, Nj = (Gi | 0) < (Ok | 0)) Di = Pk, Mk = Gi, qj = ak;
                                                else break
                                        }
                                        Oh = ui & 65535;
                                        fl = Nd + (12 * Cg & -1) + 6;
                                        HEAP16[fl >> 1] = Oh;
                                        ll = -1 < (Tj | 0);
                                        do
                                            if (ll) {
                                                if (vk = Tj + 1, bk = vk & 65535, Vj = ~gk, ck = dl + Vj, ml = 0 < (ck | 0)) {
                                                    rk = li;
                                                    for (pl = 0;;) {
                                                        Kl = rk + 12;
                                                        Qk = rk + 18;
                                                        wl = HEAP16[Qk >> 1];
                                                        if (Ek = -1 == wl << 16 >> 16) sk = rk + 22, Bl = HEAP8[sk], (aj = 12 == Bl << 24 >> 24) || (HEAP16[Qk >> 1] = bk);
                                                        kk = pl + 1;
                                                        if (Ni = (kk | 0) < (ck | 0)) rk = Kl, pl = kk;
                                                        else break
                                                    }
                                                }
                                            } else if (Oi = -1 < (Ck | 0))
                                            if (lk = Ck + 1, mk = lk & 65535, nk = ~gk, Fl = dl + nk,
                                                Xk = 0 < (Fl | 0)) {
                                                bj = li;
                                                for (Ll = 0;;) {
                                                    $h = bj + 12;
                                                    gl = bj + 18;
                                                    Bh = HEAP16[gl >> 1];
                                                    if (cj = -1 == Bh << 16 >> 16) Fk = bj + 22, Rk = HEAP8[Fk], (dj = 12 == Rk << 24 >> 24) || (HEAP16[gl >> 1] = mk);
                                                    ql = Ll + 1;
                                                    if (Sk = (ql | 0) < (Fl | 0)) bj = $h, Ll = ql;
                                                    else break
                                                }
                                            }
                                        while (0);
                                        if (ej = -1 < (oj | 0)) {
                                            Vi = bi;
                                            Yg = oj;
                                            ri = oh;
                                            break c
                                        } else {
                                            Dh = Cg;
                                            break b
                                        }
                                    } else if (23 == (Yh | 0)) {
                                        xl = Cg - 1;
                                        dk = Cg & 65535;
                                        Gl = Hg - 2;
                                        hk = Hg;
                                        nl = xl;
                                        Yk = 0;
                                        d: for (;;) {
                                            ok = Yk + 1;
                                            Wj = ok & 65535;
                                            Rl = Nd + (12 * Yk & -1) + 6;
                                            pk = hk;
                                            for (Vl = nl;;) {
                                                rl = pk - 1;
                                                Zk = ih + (rl << 2);
                                                Gj = HEAP32[Zk >> 2];
                                                Cl = Nd + (12 * Gj & -1) + 10;
                                                Gk = HEAP8[Cl];
                                                if (23 == Gk << 24 >> 24) break;
                                                else if (20 == Gk << 24 >> 24) break d;
                                                gm = Nd + (12 * Gj & -1) + 6;
                                                HEAP16[gm >> 1] = dk;
                                                hl = Gj + 1;
                                                (sl = (Yk | 0) == (hl | 0)) && (HEAP16[Rl >> 1] = Wj);
                                                Xf = 22 != Gk << 24 >> 24;
                                                mm = (pk | 0) > (Gl | 0);
                                                $k = Xf | mm;
                                                $k || (Dl = pk + 2, tl = ih + (Dl << 2), bm = HEAP32[tl >> 2], Ti = bm + 1, ug = Ti & 65535, Tf = pk + 1, uh = ih + (Tf << 2), Uf = HEAP32[uh >> 2], tj = Nd + (12 * Uf & -1) + 6, HEAP16[tj >> 1] = ug);
                                                pk = rl;
                                                Vl = Gj
                                            }
                                            uj = Vl + 1;
                                            Sl = uj & 65535;
                                            il = Nd + (12 * Gj & -1) + 6;
                                            HEAP16[il >> 1] = Sl;
                                            hk = rl;
                                            nl = Vl;
                                            Yk = Gj
                                        }
                                        Wl = Vl + 1;
                                        yn = Wl & 65535;
                                        im = Nd + (12 * Vl & -1) + 6;
                                        HEAP16[im >> 1] = yn;
                                        Im = 0 < (pk | 0);
                                        if (!Im) {
                                            Dh = Cg;
                                            break b
                                        }
                                        HEAP8[rj] = 24;
                                        Vi = bi;
                                        Yg = rl;
                                        ri =
                                            oh;
                                        break c
                                    } else {
                                        zl = Hg - 2;
                                        Xl = Xg - 7;
                                        vm = 2 > Xl >>> 0;
                                        Tl = 17 == (Xg | 0);
                                        Ml = vm | Tl;
                                        kn = Ml << 31 >> 31;
                                        nm = kn + bi;
                                        if (Fn = 0 == (al | 0)) {
                                            Dh = Cg;
                                            break b
                                        }
                                        Nl = ui & 65535;
                                        Gn = al + 6;
                                        HEAP16[Gn >> 1] = Nl;
                                        Pm = Yh << 8;
                                        Hl = Xg + Pm;
                                        switch (Hl | 0) {
                                            case 1283:
                                            case 772:
                                                Vi = nm;
                                                Yg = zl;
                                                ri = oh;
                                                break c;
                                            case 777:
                                                if (Op = 0 == (ph | 0)) {
                                                    Dh = Cg;
                                                    break b
                                                }
                                                Hn = ph + 6;
                                                HEAP16[Hn >> 1] = Nl;
                                                Vi = nm;
                                                Yg = zl;
                                                ri = oh;
                                                break c;
                                            case 776:
                                                if (uo = 0 == (ph | 0)) {
                                                    Dh = Cg;
                                                    break b
                                                }
                                                Ol = oi + 1;
                                                Do = Ol & 65535;
                                                Xn = ph + 6;
                                                HEAP16[Xn >> 1] = Do;
                                                break;
                                            case 775:
                                                break;
                                            case 4625:
                                                io = 0 == (gj | 0);
                                                ln = 0 == (ph | 0);
                                                if (qm = io | ln) {
                                                    Dh = Cg;
                                                    break b
                                                }
                                                el = oi & 65535;
                                                Il = Nd + (12 * Cg & -1) + 6;
                                                HEAP16[Il >> 1] = el;
                                                mn = Cg - 1;
                                                $m = mn - Li;
                                                if (Jm = 0 < ($m | 0)) om = ph, zm = 0;
                                                else {
                                                    Vi = nm;
                                                    Yg = zl;
                                                    ri = oh;
                                                    break c
                                                }
                                                for (;;) {
                                                    Am = om + 12;
                                                    Eo = om + 22;
                                                    jo = om + 18;
                                                    hm = HEAP16[jo >> 1];
                                                    if (Fo = -1 == hm << 16 >> 16) ko = HEAP8[Eo], 12 == ko << 24 >> 24 ? (HEAP8[Eo] = 19, pm = Nl) : pm = 13 == ko << 24 >> 24 ? el : -1, HEAP16[jo >> 1] = pm;
                                                    Bm = zm + 1;
                                                    if (Km = (Bm | 0) < ($m | 0)) om = Am, zm = Bm;
                                                    else {
                                                        Vi = nm;
                                                        Yg = zl;
                                                        ri = oh;
                                                        break c
                                                    }
                                                }
                                                break;
                                            default:
                                                Dh = Cg;
                                                break b
                                        }
                                        Cm = 0 == (gj | 0);
                                        rm = 0 == (ph | 0);
                                        if (Lm = Cm | rm) {
                                            Dh = Cg;
                                            break b
                                        }
                                        Tm = Li + 1;
                                        Qm = Tm & 65535;
                                        an = Nd + (12 * Cg & -1) + 6;
                                        HEAP16[an >> 1] = Qm;
                                        wk = Cg - 1;
                                        Go = wk - Li;
                                        if (nn =
                                            0 < (Go | 0)) on = 0, cm = ph;
                                        else {
                                            Vi = nm;
                                            Yg = zl;
                                            ri = oh;
                                            break c
                                        }
                                        for (;;) {
                                            In = cm + 12;
                                            bp = cm + 22;
                                            Dp = HEAP8[bp];
                                            lo = cm + 18;
                                            bn = HEAP16[lo >> 1];
                                            if (cn = -1 == bn << 16 >> 16) Ro = (Um = 12 == Dp << 24 >> 24) ? Nl : Yl = (Yn = 13 == Dp << 24 >> 24) ? Qm : -1, HEAP16[lo >> 1] = Ro;
                                            pn = on + 1;
                                            if (Hk = (pn | 0) < (Go | 0)) on = pn, cm = In;
                                            else {
                                                Vi = nm;
                                                Yg = zl;
                                                ri = oh;
                                                break
                                            }
                                        }
                                    }
                                    break;
                                case 21:
                                case 22:
                                    vo = 23 == (Yh | 0);
                                    if (!(23 == (Yh | 0) | 20 == (Yh | 0))) {
                                        Dh = Cg;
                                        break b
                                    }
                                    Ho = Hg + 1;
                                    Pp = ih + (Hg << 2);
                                    HEAP32[Pp >> 2] = Cg;
                                    vp = vo & 1;
                                    mo = vp + oh;
                                    Vi = bi;
                                    Yg = Ho;
                                    ri = mo;
                                    break;
                                case 10:
                                case 11:
                                case 27:
                                case 28:
                                    Io = Hg + 1;
                                    hp = ih + (Hg << 2);
                                    HEAP32[hp >>
                                        2] = Cg;
                                    Vi = bi;
                                    Yg = Io;
                                    ri = oh;
                                    break;
                                default:
                                    Vi = bi, Yg = Hg, ri = oh
                            }
                            while (0);
                            117 == b && (b = 0, Vm = Hg + 1, sm = ih + (Hg << 2), HEAP32[sm >> 2] = Cg, Zn = oh + 1, Vi = Wi, Yg = Vm, ri = Zn);
                        if (Oj = (ui | 0) < (Rd | 0)) ni = al, ti = ph, Cg = ui, Ah = oi, th = Li, oh = ri, Hg = Yg, bi = Vi;
                        else {
                            b = 192;
                            break
                        }
                    }
                    if (192 == b) {
                        if (Mm = 0 == (Yg | 0)) break;
                        Yp = Yg - 1;
                        Tq = ih + (Yp << 2);
                        Dh = Dm = HEAP32[Tq >> 2]
                    }
                    Zl = 0 > (Dh | 0);
                    if (!Zl) {
                        Ji = Dh;
                        break a
                    }
                }
            while (0);
            dn = Lc + 28;
            HEAP32[dn >> 2] = Kd;
            Nm = Lc + 20;
            HEAP32[Nm >> 2] = Kd;
            HEAP32[d >> 2] = Lc;
            Rm = rd + 28;
            HEAP32[Rm >> 2] = Rd;
            jm = rd + 20;
            HEAP32[jm >> 2] = Rd;
            HEAP32[c >> 2] = rd;
            g = be;
            STACKTOP = e;
            return g
        }
    while (0);
    Ep = HEAP16[Nd + (12 * Ji & -1) + 8 >> 1] & 65535;
    _jtjsignal3(a, 23, HEAP32[j + (Ep << 2) >> 2], Ep);
    g = 0;
    STACKTOP = e;
    return g
}
function _jtprobe(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = f;
    e = HEAP32[f >> 2];
    f = HEAP8[e + (b + 12)];
    g = f & 255;
    h = e + (b + 14);
    j = (HEAP32[b + e >> 2] >>> 0) % (HEAP32[d + 20 >> 2] >>> 0) & -1;
    e = HEAP32[d + HEAP32[d >> 2] + ((0 != (j | 0) ? j : 1) << 2) >> 2];
    if (0 == (e | 0)) return HEAP32[a + 1172 >> 2] = 0;
    j = HEAP32[a + 205688 >> 2];
    d = 0 == f << 24 >> 24;
    b = e;
    a: for (;;) {
        i = j + (24 * b & -1);
        l = e = HEAP32[i >> 2];
        k = HEAP32[e >> 2];
        b: do
            if (f << 24 >> 24 == (HEAP8[k + (l + 12)] | 0)) {
                if (d) {
                    c = 10;
                    break a
                }
                e = g;
                m = h;
                for (n = k + (l + 14);;) {
                    if ((HEAP8[m] | 0) != (HEAP8[n] | 0)) break b;
                    e -= 1;
                    if (0 == (e | 0)) {
                        c = 10;
                        break a
                    } else m += 1, n += 1
                }
            }
        while (0);
        l = HEAP32[j + (24 * b & -1) + 16 >> 2];
        if (0 == (l | 0)) {
            c = 12;
            break
        } else b = l
    }
    if (10 == c) return HEAP32[a + 1172 >> 2] = i;
    if (12 == c) return HEAP32[a + 1172 >> 2] = 0
}
function _jtqq(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    b = _jtga(a, 4, 3, 1, 0);
    if (0 == (b | 0)) return 0;
    e = b;
    g = HEAP32[b >> 2];
    h = e + g;
    if (0 == (HEAP32[d + 12 >> 2] & 262144 | 0)) {
        j = HEAP32[d + 20 >> 2];
        if (2 <= (HEAP32[d + 24 >> 2] | 0)) return i = HEAP32[a + 4408 >> 2], l = HEAP32[i + (HEAP32[i >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]), 0;
        l = j - 1;
        if (3 <= l >>> 0) return i = HEAP32[a + 4408 >> 2], k = HEAP32[i + (HEAP32[i >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), 0;
        k = _jtvib(a, d);
        if (0 == (k | 0)) return 0;
        i = k + HEAP32[k >> 2];
        k = HEAP32[i + ((2 == (j | 0)) << 2) >> 2];
        HEAP32[h >> 2] = k;
        m = HEAP32[i + ((3 == (j | 0)) << 2) >> 2];
        HEAP32[g + (e + 4) >> 2] = m;
        j = HEAP32[i + (l << 2) >> 2];
        HEAP32[g + (e + 8) >> 2] = j;
        k = 0 > (k | 0) ? 2147483647 : k;
        m = 0 > (m | 0) ? 2147483647 : m;
        n = 0 > (j | 0) ? 2147483647 : j;
        p = d
    } else {
        j = _jtga(a, 8, 3, 1, 0);
        if (0 == (j | 0)) return 0;
        m = j;
        k = HEAP32[j >> 2];
        q = i = d;
        n = HEAP32[i + (HEAP32[q >> 2] + 24) >> 2];
        HEAP32[h >> 2] = n;
        r = -2147483646 > (n | 0) ? -0 - HEAPF64[14142] : 2147483647 == (n | 0) ? HEAPF64[14142] : n | 0;
        HEAPF64[m + k >> 3] = r;
        p = HEAP32[i + (HEAP32[q >> 2] + 28) >> 2];
        HEAP32[g + (e + 4) >> 2] = p;
        l = -2147483646 >
            (p | 0) ? -0 - HEAPF64[14142] : 2147483647 == (p | 0) ? HEAPF64[14142] : p | 0;
        HEAPF64[k + (m + 8) >> 3] = l;
        l = HEAP32[i + (HEAP32[q >> 2] + 32) >> 2];
        HEAP32[g + (e + 8) >> 2] = l;
        s = -2147483646 > (l | 0) ? -0 - HEAPF64[14142] : 2147483647 == (l | 0) ? HEAPF64[14142] : l | 0;
        HEAPF64[k + (m + 16) >> 3] = s;
        k = n;
        m = p;
        n = l;
        p = j
    }
    if (0 == (HEAP32[f + 12 >> 2] & 805567999 | 0)) {
        s = f;
        e = HEAP32[f >> 2];
        g = s + e;
        l = HEAP8[e + (s + 40)];
        r = l << 24 >> 24;
        d = (h = 0 == (_strchr(11648, r) | 0)) ? 0 : 2048;
        i = (q = 0 == (_strchr(11608, r) | 0)) ? d : d | 4096;
        h = h ? 0 == (HEAP32[e + (s + 20) >> 2] & 2048 | 0) | 34 == l << 24 >> 24 ? i : i + 2048 : i;
        i = 0 == (h & 4096 | 0) ? 0 == (HEAP32[e +
            (s + 20) >> 2] & 4096 | 0) | 34 == l << 24 >> 24 ? h : h + 4096 : h;
        do
            if (0 == (i | 0))
                if (h = HEAP32[e + (s + 8) >> 2], 0 == (h | 0) ? d = q = 0 : (l = HEAP32[h + 12 >> 2], 0 == (l & 262144 | 0) ? d = q = 0 : (q = j = 0 == (l & 1835008 | 0) ? 0 : HEAP8[h + (HEAP32[h >> 2] + 40)], d = 0 != (_strchr(11608, j << 24 >> 24) | 0) | 0)), j = HEAP32[e + (s + 12) >> 2], 0 == (j | 0) ? l = 0 : (l = HEAP32[j + 12 >> 2], 0 == (l & 262144 | 0) ? l = 0 : (l = 0 == (l & 1835008 | 0) ? 0 : HEAP8[j + (HEAP32[j >> 2] + 40)] | 0, l = 0 != (_strchr(11608, l) | 0) | 0)), 126 == (r | 0)) j = 0 == d << 24 >> 24 ? 0 : 6144;
                else if (-94 == (r | 0)) l = 0 == d << 24 >> 24 | 94 == q << 24 >> 24 ? 0 : 4096, j = -107 == q << 24 >> 24 ? l | 2048 : l;
        else if (38 ==
            (r | 0)) {
            0 == d << 24 >> 24 ? c = 48 : 0 == (HEAP32[j + 12 >> 2] & 805567999 | 0) && (c = 48);
            if (48 == c) {
                if (0 == (l | 0)) {
                    j = 0;
                    break
                }
                if (0 == (HEAP32[h + 12 >> 2] & 805567999 | 0)) {
                    j = 0;
                    break
                }
            }
            j = 2048
        } else j = 51 == (r | 0) ? 1334 == (HEAP32[g >> 2] | 0) ? 2048 : 0 : 0;
        else j = i;
        while (0);
        c = 0 == (_strchr(11672, r) | 0) ? 0 != (j & 2048 | 0) ? 2664 : 3050 : HEAP32[g >> 2];
        e = j;
        g = 0 != (j & 4096 | 0) ? 2334 : 3052;
        s = c
    } else e = 0, g = 2848, s = 2854;
    if (0 != (HEAP8[a + 204545] | 0)) return 0;
    c = _jtga(a, 262144, 1, 0, 0);
    if (0 == (c | 0)) return 0;
    a = c;
    j = HEAP32[c >> 2];
    HEAP32[a + j >> 2] = 0 == (s | 0) ? 1982 : s;
    HEAP32[j + (a + 4) >> 2] = g;
    HEAP32[j +
        (a + 8) >> 2] = f;
    HEAP32[j + (a + 12) >> 2] = p;
    HEAP32[j + (a + 16) >> 2] = b;
    HEAP32[j + (a + 20) >> 2] = e;
    HEAP32[j + (a + 24) >> 2] = k;
    HEAP32[j + (a + 28) >> 2] = m;
    HEAP32[j + (a + 32) >> 2] = n;
    HEAP32[j + (a + 36) >> 2] = 0;
    HEAP8[j + (a + 40)] = 34;
    return c
}
function _jtra(a, f) {
    if (0 == (f | 0)) return 0;
    _jttraverse(a, f, 654);
    a = f + 16;
    HEAP32[a >> 2] += 1;
    return f
}
function _jtrank2ex(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb;
    h = 0;
    j = a + 205692;
    i = a + 205752;
    l = HEAP32[i >> 2] + HEAP32[j >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return k = 0;
    m = f + 12;
    n = HEAP32[m >> 2];
    p = d + 12;
    q = HEAP32[p >> 2];
    do
        if (0 ==
            (n & 64512 | 0) && 0 == (q & 64512 | 0)) {
            r = HEAP32[f + 24 >> 2];
            s = f + 28;
            0 > (b | 0) ? (t = r + b, u = 0 > (t | 0) ? 0 : t) : u = (r | 0) > (b | 0) ? b : r;
            t = r - u;
            w = 0 == (n & 32 | 0) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) | 0;
            v = HEAP32[d + 24 >> 2];
            x = d + 28;
            0 > (e | 0) ? (y = v + e, z = 0 > (y | 0) ? 0 : y) : z = (v | 0) > (e | 0) ? e : v;
            y = v - z;
            A = 0 == (q & 32 | 0) ? 0 : 0 != (HEAP32[d + 4 >> 2] & 14 | 0) | 0;
            if ((r | 0) == (u | 0) & (v | 0) == (z | 0)) return k = getFUNCTION_TABLE(g)(a, f, d, c);
            v = f + 28 + (t << 2);
            do
                if (0 < (u | 0)) {
                    r = 1;
                    for (D = 0;;)
                        if (B = r * (HEAP32[f + 28 + (t + D << 2) >> 2] | 0), G = D + 1, (G | 0) < (u | 0)) r = B, D = G;
                        else break;
                    2147483647 >= B ? (C = B, h = 21) : (D = HEAP32[a + 4408 >> 2], r =
                        HEAP32[D + (HEAP32[D >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), F = 0)
                } else C = 1, h = 21;
            while (0);
            21 == h && (F = C & -1);
            r = a + 204545;
            if (0 != (HEAP8[r] | 0)) return k = 0;
            E = 4 == (n | 0) | 67108864 == (n | 0) | 134217728 == (n | 0) | 4194304 == (n | 0) | 8388608 == (n | 0) ? 4 : 32 == (n | 0) ? 4 : 64 == (n | 0) ? 4 : 128 == (n | 0) ? 8 : 1024 == (n | 0) | 4096 == (n | 0) | 8192 == (n | 0) | 16384 == (n | 0) | 2048 == (n | 0) | 32768 == (n | 0) ? 16 : 262144 == (n | 0) | 524288 == (n | 0) | 1048576 == (n | 0) ? 44 : 16777216 == (n | 0) ? 12 : 65536 == (n | 0) ? 4 : 268435456 == (n | 0) ? 12 : 536870912 == (n | 0) ? 24 : 1 == (n | 0) | 8 == (n | 0) | 16 == (n | 0) ?
                n : 2 == (n | 0) | 2097152 == (n | 0) | 33554432 == (n | 0) ? 1 : 131072 == (n | 0) ? 2 : -1;
            D = Math_imul(E, F) | 0;
            G = f;
            J = HEAP32[f >> 2];
            L = G + (J - D);
            I = _jtga(a, n, F, u, v);
            if (0 == (I | 0)) return k = 0;
            K = H = I;
            N = H + HEAP32[K >> 2];
            S = d + 28 + (y << 2);
            do
                if (0 < (z | 0)) {
                    T = 1;
                    for (V = 0;;)
                        if (Q = T * (HEAP32[d + 28 + (y + V << 2) >> 2] | 0), P = V + 1, (P | 0) < (z | 0)) T = Q, V = P;
                        else break;
                    2147483647 >= Q ? (M = Q, h = 42) : (V = HEAP32[a + 4408 >> 2], T = HEAP32[V + (HEAP32[V >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[T + 20 >> 2], T + HEAP32[T >> 2]), R = 0)
                } else M = 1, h = 42;
            while (0);
            42 == h && (R = M & -1);
            if (0 != (HEAP8[r] | 0)) return k = 0;
            O = 262144 ==
                (q | 0) | 524288 == (q | 0) | 1048576 == (q | 0) ? 44 : 536870912 == (q | 0) ? 24 : 16777216 == (q | 0) ? 12 : 268435456 == (q | 0) ? 12 : 2 == (q | 0) | 2097152 == (q | 0) | 33554432 == (q | 0) ? 1 : 131072 == (q | 0) ? 2 : 4 == (q | 0) | 67108864 == (q | 0) | 134217728 == (q | 0) | 4194304 == (q | 0) | 8388608 == (q | 0) ? 4 : 32 == (q | 0) ? 4 : 64 == (q | 0) ? 4 : 128 == (q | 0) ? 8 : 1024 == (q | 0) | 4096 == (q | 0) | 8192 == (q | 0) | 16384 == (q | 0) | 2048 == (q | 0) | 32768 == (q | 0) ? 16 : 65536 == (q | 0) ? 4 : 1 == (q | 0) | 8 == (q | 0) | 16 == (q | 0) ? q : -1;
            T = Math_imul(O, R) | 0;
            V = d;
            P = HEAP32[d >> 2];
            aa = V + (P - T);
            Z = _jtga(a, q, R, z, S);
            if (0 == (Z | 0)) return k = 0;
            ba = $ = Z;
            ka = $ + HEAP32[ba >>
                2];
            ha = (ea = (t | 0) <= (y | 0)) ? y : t;
            da = ea ? t : y;
            ga = ea ? x : s;
            do
                if (0 < (ha | 0)) {
                    U = 1;
                    for (ca = 0;;)
                        if (X = U * (HEAP32[ga + (ca << 2) >> 2] | 0), Y = ca + 1, (Y | 0) < (ha | 0)) U = X, ca = Y;
                        else break;
                    2147483647 >= X ? (ja = X, h = 63) : (ca = HEAP32[a + 4408 >> 2], U = HEAP32[ca + (HEAP32[ca >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[U + 20 >> 2], U + HEAP32[U >> 2]), fa = 0)
                } else ja = 1, h = 63;
            while (0);
            63 == h && (fa = ja & -1);
            if (0 != (HEAP8[r] | 0)) return k = 0;
            y = ha - da;
            do
                if (0 < (y | 0)) {
                    t = 1;
                    for (U = 0;;)
                        if (ia = t * (HEAP32[ga + (da + U << 2) >> 2] | 0), ca = U + 1, (ca | 0) < (y | 0)) t = ia, U = ca;
                        else break;
                    if (2147483647 >= ia) ra = ia, h =
                        68;
                    else if (U = HEAP32[a + 4408 >> 2], t = HEAP32[U + (HEAP32[U >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), 0 == (HEAP8[r] | 0)) sa = 0;
                    else return k = 0
                } else ra = 1, h = 68;
            while (0);
            68 == h && (sa = ra & -1);
            a: do
                if (0 != (da | 0)) {
                    y = da << 2;
                    t = s;
                    for (U = x;
                        (HEAP8[t] | 0) == (HEAP8[U] | 0);)
                        if (ca = y - 1, 0 == (ca | 0)) break a;
                        else y = ca, t += 1, U += 1;
                    U = HEAP32[a + 4408 >> 2];
                    t = HEAP32[U + (HEAP32[U >> 2] + 36) >> 2];
                    _jtjsigstr(a, 9, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]);
                    return k = 0
                }
            while (0);
            do
                if (0 == (HEAP32[f + 20 >> 2] | 0)) {
                    x = _jtga(a, 4, u, 1, 0);
                    0 == (x | 0) ? ta = 0 : (_memcpy(x + HEAP32[x >>
                        2], v, u << 2) | 0, ta = x);
                    x = _jtga(a, HEAP32[m >> 2], 1, 0, 0);
                    0 == (x | 0) ? wa = 0 : (_fillv(HEAP32[m >> 2], 1, x + HEAP32[x >> 2]), wa = x);
                    x = _jtreshape(a, ta, wa);
                    if (0 == (x | 0)) return k = 0;
                    za = x;
                    Ba = L
                } else if (x = G + J, _memcpy(N, x, D) | 0, 0 == w << 24 >> 24) za = I, Ba = x;
            else if (s = f - I, da = I + 4, HEAP32[da >> 2] |= 8, da = H + HEAP32[K >> 2], t = HEAP32[I + 20 >> 2], 0 < (t | 0))
                for (ua = 0;;)
                    if (U = da + (ua << 2), HEAP32[U >> 2] += s, U = ua + 1, (U | 0) < (t | 0)) ua = U;
                    else {
                        za = I;
                        Ba = x;
                        break
                    } else za = I, Ba = x;
            while (0);
            do
                if (0 == (HEAP32[d + 20 >> 2] | 0)) {
                    I = _jtga(a, 4, z, 1, 0);
                    0 == (I | 0) ? ya = 0 : (_memcpy(I + HEAP32[I >> 2], S, z <<
                        2) | 0, ya = I);
                    I = _jtga(a, HEAP32[p >> 2], 1, 0, 0);
                    0 == (I | 0) ? xa = 0 : (_fillv(HEAP32[p >> 2], 1, I + HEAP32[I >> 2]), xa = I);
                    I = _jtreshape(a, ya, xa);
                    if (0 == (I | 0)) return k = 0;
                    oa = I;
                    pa = aa
                } else if (I = V + P, _memcpy(ka, I, T) | 0, 0 == A << 24 >> 24) oa = Z, pa = I;
            else if (K = d - Z, H = Z + 4, HEAP32[H >> 2] |= 8, H = $ + HEAP32[ba >> 2], J = HEAP32[Z + 20 >> 2], 0 < (J | 0))
                for (la = 0;;)
                    if (G = H + (la << 2), HEAP32[G >> 2] += K, G = la + 1, (G | 0) < (J | 0)) la = G;
                    else {
                        oa = Z;
                        pa = I;
                        break
                    } else oa = Z, pa = I;
            while (0);
            if (Z = 0 != (fa | 0)) {
                ba = getFUNCTION_TABLE(g)(a, za, oa, c);
                if (0 == (ba | 0)) return k = 0;
                Da = qa = ba
            } else ba = a + 1176, $ = HEAP32[ba >>
                                             2], HEAP32[ba >> 2] = 0, P = getFUNCTION_TABLE(g)(a, za, oa, c), HEAP32[ba >> 2] = $, 0 != (HEAP8[r] | 0) && (P = HEAP32[30648], HEAP8[r] = 0, HEAP32[a + 4400 >> 2] = 0), qa = P, Da = 0;
            P = HEAP32[qa + 12 >> 2];
            $ = HEAP32[qa + 24 >> 2];
            ba = qa + 28;
            V = HEAP32[qa + 20 >> 2];
            Aa = 2 == (P | 0) | 2097152 == (P | 0) | 33554432 == (P | 0) ? 1 : 131072 == (P | 0) ? 2 : 64 == (P | 0) ? 4 : 128 == (P | 0) ? 8 : 1 == (P | 0) | 8 == (P | 0) | 16 == (P | 0) ? P : 268435456 == (P | 0) ? 12 : 536870912 == (P | 0) ? 24 : 4 == (P | 0) | 67108864 == (P | 0) | 134217728 == (P | 0) | 4194304 == (P | 0) | 8388608 == (P | 0) ? 4 : 32 == (P | 0) ? 4 : 16777216 == (P | 0) ? 12 : 65536 == (P | 0) ? 4 : 1024 == (P | 0) | 4096 ==
                (P | 0) | 8192 == (P | 0) | 16384 == (P | 0) | 2048 == (P | 0) | 32768 == (P | 0) ? 16 : 262144 == (P | 0) | 524288 == (P | 0) | 1048576 == (P | 0) ? 44 : -1;
            aa = Math_imul(Aa, V) | 0;
            Z ? 0 == (P & 196895 | 0) ? (Ea = qa, Sa = za, Oa = oa, Ha = 0, Ga = Ba, Ma = 0, Ia = N, db = pa, W = ka) : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) ? (Ea = qa, Sa = za, Oa = oa, Ha = 0, Ga = Ba, Ma = 0, Ia = N, db = pa, W = ka) : 0 == (HEAP32[d + 4 >> 2] & 14 | 0) ? h = 115 : (Ea = qa, Sa = za, Oa = oa, Ha = 0, Ga = Ba, Ma = 0, Ia = N, db = pa, W = ka) : h = 115;
            a: do
                if (115 == h) {
                    if (1 < (HEAP32[za + 16 >> 2] | 0)) {
                        I = _jtca(a, za);
                        if (0 == (I | 0)) return k = 0;
                        Xa = I;
                        Ta = I + HEAP32[I >> 2]
                    } else Xa = za, Ta = N;
                    if (1 < (HEAP32[oa + 16 >>
                            2] | 0)) {
                        I = _jtca(a, oa);
                        if (0 == (I | 0)) return k = 0;
                        fb = I;
                        mb = I + HEAP32[I >> 2]
                    } else fb = oa, mb = ka;
                    I = (fa | 0) * (V | 0);
                    2147483647 < I ? (J = HEAP32[a + 4408 >> 2], K = HEAP32[J + (HEAP32[J >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[K + 20 >> 2], K + HEAP32[K >> 2]), ma = 0) : ma = I & -1;
                    if (0 != (HEAP8[r] | 0)) return k = 0;
                    I = _jtga(a, P, ma, $ + ha, 0);
                    if (0 == (I | 0)) return k = 0;
                    _memcpy(I + 28, ga, ha << 2) | 0;
                    K = ba;
                    J = $ << 2;
                    _memcpy(I + 28 + (ha << 2), K, J) | 0;
                    if (Z)
                        if (H = I + HEAP32[I >> 2], _memcpy(H, qa + HEAP32[qa >> 2], aa) | 0, G = HEAP32[i >> 2] + HEAP32[j >> 2], 1 >= (fa | 0)) Ea = qa, Sa = Xa, Oa = fb, Ha = I, Ga = Ba, Ma = 1, Ia =
                            Ta, db = pa, W = mb;
                        else {
                            L = ea ^ 1;
                            x = 0 == w << 24 >> 24;
                            t = f;
                            s = 0 == A << 24 >> 24;
                            da = d;
                            U = g;
                            y = 0 == ($ | 0);
                            ca = mb;
                            Y = pa;
                            ab = Ta;
                            Na = 1;
                            $a = H;
                            Ua = H = 1;
                            Pa = Ba;
                            bb = fb;
                            La = Xa;
                            b: for (;;) {
                                Ja = (Ua | 0) == (sa | 0);
                                do
                                    if (Ja | L) {
                                        if (1 < (HEAP32[La + 16 >> 2] | 0)) {
                                            Qa = _jtga(a, n, F, u, v);
                                            if (0 == (Qa | 0)) {
                                                k = 0;
                                                h = 187;
                                                break b
                                            }
                                            Ya = Qa;
                                            lb = Qa + HEAP32[Qa >> 2]
                                        } else Ya = La, lb = ab;
                                        Qa = Pa + D;
                                        _memcpy(lb, Qa, D) | 0;
                                        if (x) Ca = Ya, gb = Qa, Fa = lb;
                                        else {
                                            Za = t - Ya;
                                            if (0 == (Ya | 0)) {
                                                k = 0;
                                                h = 187;
                                                break b
                                            }
                                            qb = Ya + 4;
                                            HEAP32[qb >> 2] |= 8;
                                            qb = Ya + HEAP32[Ya >> 2];
                                            ib = HEAP32[Ya + 20 >> 2];
                                            if (0 < (ib | 0))
                                                for (ub = 0;;)
                                                    if (eb = qb + (ub << 2), HEAP32[eb >>
                                                            2] += Za, eb = ub + 1, (eb | 0) < (ib | 0)) ub = eb;
                                                    else {
                                                        Ca = Ya;
                                                        gb = Qa;
                                                        Fa = lb;
                                                        break
                                                    } else Ca = Ya, gb = Qa, Fa = lb
                                        }
                                    } else Ca = La, gb = Pa, Fa = ab;
                                while (0);
                                do
                                    if (ea | Ja) {
                                        if (1 < (HEAP32[bb + 16 >> 2] | 0)) {
                                            Qa = _jtga(a, q, R, z, S);
                                            if (0 == (Qa | 0)) {
                                                k = 0;
                                                h = 187;
                                                break b
                                            }
                                            rb = Qa;
                                            wb = Qa + HEAP32[Qa >> 2]
                                        } else rb = bb, wb = ca;
                                        Qa = Y + T;
                                        _memcpy(wb, Qa, T) | 0;
                                        if (s) Ka = rb, Va = Qa, nb = wb;
                                        else {
                                            ib = da - rb;
                                            if (0 == (rb | 0)) {
                                                k = 0;
                                                h = 187;
                                                break b
                                            }
                                            Za = rb + 4;
                                            HEAP32[Za >> 2] |= 8;
                                            Za = rb + HEAP32[rb >> 2];
                                            qb = HEAP32[rb + 20 >> 2];
                                            if (0 < (qb | 0))
                                                for (ob = 0;;)
                                                    if (eb = Za + (ob << 2), HEAP32[eb >> 2] += ib, eb = ob + 1, (eb | 0) < (qb | 0)) ob = eb;
                                                    else {
                                                        Ka = rb;
                                                        Va = Qa;
                                                        nb = wb;
                                                        break
                                                    } else Ka = rb, Va = Qa, nb = wb
                                        }
                                    } else Ka = bb, Va = Y, nb = ca;
                                while (0);
                                Qa = getFUNCTION_TABLE(U)(a, Ca, Ka, c);
                                if (0 == (Qa | 0)) {
                                    k = 0;
                                    h = 187;
                                    break
                                }
                                if ((P | 0) != (HEAP32[Qa + 12 >> 2] | 0)) {
                                    Ea = Qa;
                                    Sa = Ca;
                                    Oa = Ka;
                                    Ha = I;
                                    Ga = gb;
                                    Ma = H;
                                    Ia = Fa;
                                    db = Va;
                                    W = nb;
                                    break a
                                }
                                if (($ | 0) != (HEAP32[Qa + 24 >> 2] | 0)) {
                                    Ea = Qa;
                                    Sa = Ca;
                                    Oa = Ka;
                                    Ha = I;
                                    Ga = gb;
                                    Ma = H;
                                    Ia = Fa;
                                    db = Va;
                                    W = nb;
                                    break a
                                }
                                if (!y) {
                                    qb = J;
                                    ib = Qa + 28;
                                    for (Za = K;;) {
                                        if ((HEAP8[ib] | 0) != (HEAP8[Za] | 0)) {
                                            Ea = Qa;
                                            Sa = Ca;
                                            Oa = Ka;
                                            Ha = I;
                                            Ga = gb;
                                            Ma = H;
                                            Ia = Fa;
                                            db = Va;
                                            W = nb;
                                            break a
                                        }
                                        eb = qb - 1;
                                        if (0 == (eb | 0)) break;
                                        else qb = eb, ib += 1, Za +=
                                            1
                                    }
                                }
                                Za = $a + aa;
                                _memcpy(Za, Qa + HEAP32[Qa >> 2], aa) | 0;
                                0 == Na << 24 >> 24 ? cb = 0 : 1 != (HEAP32[Ca + 16 >> 2] | 0) ? cb = 0 : 1 != (HEAP32[Ka + 16 >> 2] | 0) ? cb = 0 : (_jttpop(a, G), cb = Na);
                                ib = H + 1;
                                if ((ib | 0) < (fa | 0)) ca = nb, Y = Va, ab = Fa, Na = cb, $a = Za, H = ib, Ua = Ja ? 1 : Ua + 1, Pa = gb, bb = Ka, La = Ca;
                                else {
                                    Ea = Qa;
                                    Sa = Ca;
                                    Oa = Ka;
                                    Ha = I;
                                    Ga = gb;
                                    Ma = ib;
                                    Ia = Fa;
                                    db = Va;
                                    W = nb;
                                    break a
                                }
                            }
                            if (187 == h) return k
                        } else Ea = qa, Sa = Xa, Oa = fb, Ha = I, Ga = Ba, Ma = 1, Ia = Ta, db = pa, W = mb
                }
            while (0);
            if ((Ma | 0) < (fa | 0)) {
                $ = (Ma | 0) % (sa | 0) & -1;
                P = _jtga(a, 32, fa, ha, ga);
                if (0 == (P | 0)) return k = 0;
                Z = P + HEAP32[P >> 2];
                a: do {
                    if (0 < (Ma | 0)) {
                        ba =
                            Da + 12;
                        r = Da + 20;
                        V = Da + 24;
                        ka = Da + 28;
                        N = Ha + (HEAP32[Ha >> 2] - aa);
                        I = Z;
                        for (La = 0;;) {
                            bb = _jtga(a, HEAP32[ba >> 2], HEAP32[r >> 2], HEAP32[V >> 2], ka);
                            if (0 == (bb | 0)) {
                                k = 0;
                                break
                            }
                            Pa = N + aa;
                            _memcpy(bb + HEAP32[bb >> 2], Pa, aa) | 0;
                            Ua = I + 4;
                            HEAP32[I >> 2] = bb;
                            bb = La + 1;
                            if ((bb | 0) < (Ma | 0)) N = Pa, I = Ua, La = bb;
                            else {
                                Wa = Ua;
                                break a
                            }
                        }
                        return k
                    }
                    Wa = Z
                } while (0);
                HEAP32[Wa >> 2] = Ea;
                Z = fa - 1 - Ma;
                a: do
                    if (0 < (Z | 0)) {
                        aa = ea ^ 1;
                        ga = 0 == w << 24 >> 24;
                        ha = f;
                        La = 0 == A << 24 >> 24;
                        I = d;
                        N = g;
                        ka = W;
                        V = db;
                        r = Ia;
                        ba = $;
                        Ua = Ga;
                        bb = Oa;
                        Pa = Sa;
                        H = 0;
                        $a = Wa;
                        b: for (;;) {
                            Na = $a + 4;
                            ab = ba + 1;
                            Y = (ab | 0) == (sa | 0);
                            do
                                if (Y | aa) {
                                    if (1 <
                                        (HEAP32[Pa + 16 >> 2] | 0)) {
                                        ca = _jtga(a, n, F, u, v);
                                        if (0 == (ca | 0)) {
                                            k = 0;
                                            h = 187;
                                            break b
                                        }
                                        yb = ca;
                                        Cb = ca + HEAP32[ca >> 2]
                                    } else yb = Pa, Cb = r;
                                    ca = Ua + D;
                                    _memcpy(Cb, ca, D) | 0;
                                    if (ga) Pb = yb, zb = ca, Zb = Cb;
                                    else {
                                        G = ha - yb;
                                        if (0 == (yb | 0)) {
                                            k = 0;
                                            h = 187;
                                            break b
                                        }
                                        K = yb + 4;
                                        HEAP32[K >> 2] |= 8;
                                        K = yb + HEAP32[yb >> 2];
                                        J = HEAP32[yb + 20 >> 2];
                                        if (0 < (J | 0))
                                            for (ac = 0;;)
                                                if (y = K + (ac << 2), HEAP32[y >> 2] += G, y = ac + 1, (y | 0) < (J | 0)) ac = y;
                                                else {
                                                    Pb = yb;
                                                    zb = ca;
                                                    Zb = Cb;
                                                    break
                                                } else Pb = yb, zb = ca, Zb = Cb
                                    }
                                } else Pb = Pa, zb = Ua, Zb = r;
                            while (0);
                            do
                                if (ea | Y) {
                                    if (1 < (HEAP32[bb + 16 >> 2] | 0)) {
                                        Qa = _jtga(a, q, R, z, S);
                                        if (0 == (Qa |
                                                0)) {
                                            k = 0;
                                            h = 187;
                                            break b
                                        }
                                        Hb = Qa;
                                        Ib = Qa + HEAP32[Qa >> 2]
                                    } else Hb = bb, Ib = ka;
                                    Qa = V + T;
                                    _memcpy(Ib, Qa, T) | 0;
                                    if (La) Qb = Hb, Rb = Qa, Ob = Ib;
                                    else {
                                        Ja = I - Hb;
                                        if (0 == (Hb | 0)) {
                                            k = 0;
                                            h = 187;
                                            break b
                                        }
                                        Za = Hb + 4;
                                        HEAP32[Za >> 2] |= 8;
                                        Za = Hb + HEAP32[Hb >> 2];
                                        ca = HEAP32[Hb + 20 >> 2];
                                        if (0 < (ca | 0))
                                            for (Bb = 0;;)
                                                if (J = Za + (Bb << 2), HEAP32[J >> 2] += Ja, J = Bb + 1, (J | 0) < (ca | 0)) Bb = J;
                                                else {
                                                    Qb = Hb;
                                                    Rb = Qa;
                                                    Ob = Ib;
                                                    break
                                                } else Qb = Hb, Rb = Qa, Ob = Ib
                                    }
                                } else Qb = bb, Rb = V, Ob = ka;
                            while (0);
                            Qa = getFUNCTION_TABLE(N)(a, Pb, Qb, c);
                            if (0 == (Qa | 0)) {
                                k = 0;
                                h = 187;
                                break
                            }
                            HEAP32[Na >> 2] = Qa;
                            Qa = H + 1;
                            if ((Qa | 0) < (Z | 0)) ka = Ob, V = Rb,
                                r = Zb, ba = Y ? 0 : ab, Ua = zb, bb = Qb, Pa = Pb, H = Qa, $a = Na;
                            else break a
                        }
                        if (187 == h) return k
                    }
                while (0);
                xb = _jtope(a, P)
            } else xb = Ha;
            0 != (xb | 0) && (_jttraverse(a, xb, 654), Z = xb + 16, HEAP32[Z >> 2] += 1);
            _jttpop(a, l);
            return k = _jttpush(a, xb)
        }
    while (0);
    return k = _jtsprank2(a, f, d, c, b, e, g)
}
function _jtravel(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    e = HEAP32[f + 20 >> 2];
    g = f + 28;
    h = f + 12;
    j = HEAP32[h >> 2];
    i = 0 == (j & 64512 | 0);
    l = HEAP32[f + 24 >> 2];
    k = a + 205336;
    m = HEAP32[k >> 2];
    n = 0 == (m | 0) ? l : HEAP32[m + 4 >> 2];
    m = l - n;
    HEAP32[k >> 2] = 0;
    p = 0 < (n | 0);
    do
        if (p) {
            q = 1;
            for (r = 0;;)
                if (s = q * (HEAP32[f + 28 + (m + r << 2) >> 2] | 0), t = r + 1, (t | 0) < (n | 0)) q = s, r = t;
                else break;
            2147483647 >= s ? (u = s, d = 8) : (r = HEAP32[a + 4408 >> 2], q = HEAP32[r + (HEAP32[r >> 2] + 40) >>
                2], _jtjsigstr(a, 10, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), w = 0)
        } else u = 1, d = 8;
    while (0);
    8 == d && (w = u & -1);
    if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = c, 0;
    u = m + 1;
    d = _jtga(a, j, i ? e : 1, u, g);
    if (0 == (d | 0)) return STACKTOP = c, 0;
    HEAP32[d + 28 + (m << 2) >> 2] = w;
    if (i) {
        w = i = d;
        g = i + HEAP32[w >> 2];
        s = f + HEAP32[f >> 2];
        _memcpy(g, s, Math_imul(32 == (j | 0) ? 4 : 64 == (j | 0) ? 4 : 131072 == (j | 0) ? 2 : 1 == (j | 0) | 8 == (j | 0) | 16 == (j | 0) ? j : 262144 == (j | 0) | 524288 == (j | 0) | 1048576 == (j | 0) ? 44 : 2 == (j | 0) | 2097152 == (j | 0) | 33554432 == (j | 0) ? 1 : 536870912 == (j | 0) ? 24 : 268435456 == (j | 0) ? 12 : 4 == (j | 0) | 67108864 ==
            (j | 0) | 134217728 == (j | 0) | 4194304 == (j | 0) | 8388608 == (j | 0) ? 4 : 1024 == (j | 0) | 4096 == (j | 0) | 8192 == (j | 0) | 16384 == (j | 0) | 2048 == (j | 0) | 32768 == (j | 0) ? 16 : 16777216 == (j | 0) ? 12 : 128 == (j | 0) ? 8 : 65536 == (j | 0) ? 4 : -1, e) | 0) | 0;
        if (0 == (HEAP32[h >> 2] & 32 | 0) || 0 == (HEAP32[f + 4 >> 2] & 14 | 0)) return STACKTOP = c, d;
        h = f - d;
        e = d + 4;
        HEAP32[e >> 2] |= 8;
        e = i + HEAP32[w >> 2];
        w = HEAP32[d + 20 >> 2];
        if (0 < (w | 0)) v = 0;
        else return STACKTOP = c, d;
        for (;;)
            if (i = e + (v << 2), HEAP32[i >> 2] += h, i = v + 1, (i | 0) < (w | 0)) v = i;
            else {
                b = d;
                break
            }
        STACKTOP = c;
        return b
    }
    v = f;
    w = HEAP32[f >> 2];
    e = h = v + w;
    i = d;
    b = HEAP32[d >>
        2];
    s = i + b;
    g = h;
    h = HEAP32[g >> 2] + w;
    j = _jtga(a, 1, l, 1, 0);
    if (0 == (j | 0)) return STACKTOP = c, 0;
    q = j;
    r = HEAP32[j >> 2];
    j = q + r;
    _memset(j, 0, l) | 0;
    t = v + (h + HEAP32[v + h >> 2]);
    x = HEAP32[h + (v + 20) >> 2];
    do
        if (0 < (x | 0))
            for (h = 0;;)
                if (HEAP8[q + (HEAP32[t + (h << 2) >> 2] + r)] = 1, y = h + 1, (y | 0) < (x | 0)) h = y;
                else break;
    else
    if (0 == (j | 0)) return b = 0, STACKTOP = c, b;
    while (0);
    x = q + (r + m);
    do
        if (0 == (_memchr(x, 1, n) | 0)) {
            m = _jtca(a, v + (HEAP32[g >> 2] + w));
            if (0 == (m | 0)) return b = 0, STACKTOP = c, b;
            r = HEAP32[w + (v + 12) >> 2] + w;
            t = q = v + r;
            h = HEAP32[k >> 2];
            if (0 == (q | 0)) return b = 0, STACKTOP = c, b;
            q = HEAP32[r + (v + 24) >> 2];
            0 > (n | 0) ? (r = q + n, z = 0 > (r | 0) ? 0 : r) : z = (q | 0) > (n | 0) ? n : q;
            HEAP32[c + 4 >> 2] = z;
            (z | 0) < (q | 0) ? (q = c, HEAP32[q >> 2] = 0, HEAP32[k >> 2] = q, q = _jtravel(a, t), HEAP32[k >> 2] = h, h = q) : h = _jtravel(a, t);
            if (0 == (h | 0)) return b = 0, STACKTOP = c, b;
            t = _jtca(a, v + (HEAP32[w + (v + 8) >> 2] + w));
            if (0 == (t | 0)) return b = 0, STACKTOP = c, b;
            z = m;
            A = e;
            D = h;
            B = t
        } else {
            if (0 == (_memchr(x, 0, n) | 0)) {
                t = _jtca(a, v + (HEAP32[w + (v + 12) >> 2] + w));
                if (0 == (t | 0)) return b = 0, STACKTOP = c, b;
                G = e;
                C = t
            } else {
                _memset(x, 1, n) | 0;
                t = _jtreaxis(a, _jtifb(a, l, j), f);
                if (0 == (t | 0)) return b = 0, STACKTOP =
                    c, b;
                m = t;
                q = HEAP32[t >> 2];
                G = m + q;
                C = m + (HEAP32[q + (m + 12) >> 2] + q)
            }
            q = _jtifb(a, u, j);
            if (0 == (q | 0)) return b = 0, STACKTOP = c, b;
            m = _jtga(a, 4, n, 1, 0);
            if (0 == (m | 0)) return b = 0, STACKTOP = c, b;
            if (p) {
                t = 1;
                h = m + HEAP32[m >> 2] + (n << 2);
                r = l;
                for (y = 0;;)
                    if (F = h - 4, HEAP32[F >> 2] = t, E = r - 1, J = Math_imul(HEAP32[f + 28 + (E << 2) >> 2], t) | 0, L = y + 1, (L | 0) < (n | 0)) t = J, h = F, r = E, y = L;
                    else break
            }
            y = HEAP32[G + 8 >> 2];
            r = G;
            h = r + y;
            t = HEAP32[y + (r + 28) >> 2];
            L = HEAP32[y + (r + 32) >> 2];
            E = L - n;
            F = _jtga(a, 4, 1, 0, 0);
            0 == (F | 0) ? F = 0 : HEAP32[F + HEAP32[F >> 2] >> 2] = E;
            F = _jtpdt(a, _jtirs2(a, F, h, 0, 2147483647,
                1, 656), m);
            if (0 == (F | 0)) return b = 0, STACKTOP = c, b;
            J = 1 - n + L;
            m = _jtga(a, 4, Math_imul(J, t) | 0, 2, 0);
            if (0 == (m | 0)) return b = 0, STACKTOP = c, b;
            HEAP32[m + 28 >> 2] = t;
            HEAP32[m + 32 >> 2] = J;
            if (0 >= (t | 0)) z = q, A = G, D = C, B = m;
            else {
                J = E << 2;
                I = E + 1;
                H = r + (HEAP32[h >> 2] + y);
                y = F + HEAP32[F >> 2];
                F = m + HEAP32[m >> 2];
                for (h = 0;;)
                    if (_memcpy(F, H, J) | 0, HEAP32[F + (E << 2) >> 2] = HEAP32[y >> 2], r = h + 1, (r | 0) < (t | 0)) H += L << 2, y += 4, F += I << 2, h = r;
                    else {
                        z = q;
                        A = G;
                        D = C;
                        B = m;
                        break
                    }
            }
        }
    while (0);
    C = s;
    G = z - C;
    HEAP32[s >> 2] = G;
    if (0 == (i + (G + b) | 0)) return STACKTOP = c, 0;
    G = _jtca(a, A + HEAP32[A + 4 >> 2]) - C;
    HEAP32[b +
        (i + 4) >> 2] = G;
    if (0 == (i + (G + b) | 0)) return STACKTOP = c, 0;
    G = D - C;
    HEAP32[b + (i + 12) >> 2] = G;
    if (0 == (i + (G + b) | 0)) return STACKTOP = c, 0;
    G = B - C;
    HEAP32[b + (i + 8) >> 2] = G;
    b = 0 == (i + (G + b) | 0) ? 0 : d;
    STACKTOP = c;
    return b
}
function _jtraze(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    b = c + 8;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    g = HEAP32[f + 20 >> 2];
    h = f + HEAP32[f >> 2];
    j = f + 12;
    l = (i = 0 == (HEAP32[j >> 2] & 32 | 0)) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) | 0;
    if (0 == (g | 0)) return e = HEAP32[31086], STACKTOP = c, e;
    if (i) return e = _jtravel(a, f), STACKTOP = c, e;
    if (1 == (g | 0)) {
        i = HEAP32[h >> 2];
        k = 0 == l << 24 >> 24 ? i : i + f;
        if (0 == (k | 0)) return STACKTOP = c, 0;
        if (0 != (HEAP32[k +
                24 >> 2] | 0)) return STACKTOP = c, k;
        e = _jtravel(a, k);
        STACKTOP = c;
        return e
    }
    k = 0 < (g | 0);
    do
        if (k) {
            i = 0 == l << 24 >> 24;
            m = f;
            p = n = 0;
            q = l;
            r = 1;
            s = 0;
            a: for (;;) {
                t = HEAP32[h + (n << 2) >> 2];
                u = i ? t : t + m;
                t = HEAP32[u + 20 >> 2];
                w = t + p;
                v = HEAP32[u + 24 >> 2];
                x = (r | 0) > (v | 0) ? r : v;
                do
                    if (0 == (t | 0)) y = s, z = q;
                    else {
                        v = u + 12;
                        A = HEAP32[v >> 2];
                        if (0 == (s | 0)) y = A;
                        else {
                            do
                                if ((s | 0) != (A | 0) && !(0 != (s & 805336541 | 0) && 0 != (A & 805336541 | 0))) {
                                    if (0 == (s & 133122 | 0)) {
                                        d = 25;
                                        break a
                                    }
                                    if (0 == (A & 133122 | 0)) {
                                        d = 25;
                                        break a
                                    }
                                }
                            while (0);
                            y = _jtmaxtype(a, s, A)
                        }
                        z = 0 != q << 24 >> 24 ? 1 : 0 == (HEAP32[v >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[u +
                            4 >> 2] & 14 | 0) | 0
                    }
                while (0);
                t = n + 1;
                if ((t | 0) < (g | 0)) n = t, p = w, q = z, r = x, s = y;
                else break
            }
            if (25 == d) return s = HEAP32[a + 4408 >> 2], r = HEAP32[s + (HEAP32[s >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), e = 0, STACKTOP = c, e;
            if (0 == (y | 0))
                if (i)
                    for (s = r = 0;;)
                        if (q = HEAP32[HEAP32[h + (s << 2) >> 2] + 12 >> 2], p = (r | 0) > (q | 0) ? r : q, q = s + 1, (q | 0) < (g | 0)) r = p, s = q;
                        else {
                            D = p;
                            break
                        } else
                for (r = s = 0;;)
                    if (i = HEAP32[HEAP32[h + (r << 2) >> 2] + m + 12 >> 2], p = (s | 0) > (i | 0) ? s : i, i = r + 1, (i | 0) < (g | 0)) s = p, r = i;
                    else {
                        D = p;
                        break
                    } else D = y;
            n = 16777216 == (D | 0) ? 12 : 64 == (D | 0) ? 4 : 262144 ==
                (D | 0) | 524288 == (D | 0) | 1048576 == (D | 0) ? 44 : 2 == (D | 0) | 2097152 == (D | 0) | 33554432 == (D | 0) ? 1 : 1 == (D | 0) | 8 == (D | 0) | 16 == (D | 0) ? D : 536870912 == (D | 0) ? 24 : 4 == (D | 0) | 67108864 == (D | 0) | 134217728 == (D | 0) | 4194304 == (D | 0) | 8388608 == (D | 0) ? 4 : 268435456 == (D | 0) ? 12 : 65536 == (D | 0) ? 4 : 32 == (D | 0) ? 4 : 1024 == (D | 0) | 4096 == (D | 0) | 8192 == (D | 0) | 16384 == (D | 0) | 2048 == (D | 0) | 32768 == (D | 0) ? 16 : 128 == (D | 0) ? 8 : 131072 == (D | 0) ? 2 : -1;
            if (1 >= (x | 0)) B = w, G = z, C = x, F = D, E = n;
            else {
                u = 8 == (D | 0) ? D : 1 == (D | 0) ? D : 2 == (D | 0) | 2097152 == (D | 0) | 33554432 == (D | 0) ? 1 : 131072 == (D | 0) ? 2 : 4 == (D | 0) | 67108864 == (D |
                    0) | 134217728 == (D | 0) | 4194304 == (D | 0) | 8388608 == (D | 0) ? 4 : 32 == (D | 0) ? 4 : 64 == (D | 0) ? 4 : 128 == (D | 0) ? 8 : 262144 == (D | 0) | 524288 == (D | 0) | 1048576 == (D | 0) ? 44 : 16777216 == (D | 0) ? 12 : 65536 == (D | 0) ? 4 : 268435456 == (D | 0) ? 12 : 536870912 == (D | 0) ? 24 : 16 == (D | 0) | 1024 == (D | 0) | 4096 == (D | 0) | 8192 == (D | 0) | 16384 == (D | 0) | 2048 == (D | 0) | 32768 == (D | 0) ? 16 : -1;
                r = x << 2;
                s = r - 4;
                J = 0 == (HEAP32[j >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) | 0;
                p = _jtga(a, 4, x, 1, 0);
                if (0 == (p | 0)) return e = 0, STACKTOP = c, e;
                i = p;
                q = HEAP32[p >> 2];
                t = n = i + q;
                _memset(n, 0, r) | 0;
                r = 0 == (J | 0);
                for (L = n = 0;;) {
                    I = HEAP32[h + (n <<
                        2) >> 2];
                    H = r ? I : I + m;
                    I = HEAP32[H + 24 >> 2];
                    K = (I | 0) == (x | 0) ? HEAP32[H + 28 >> 2] : 1;
                    K += L;
                    if (-1 >= (K | 0)) {
                        d = 74;
                        break
                    }
                    N = x - I;
                    a: do
                        if (0 != (I | 0)) {
                            if (0 < (N | 0))
                                for (S = 0;;)
                                    if (T = t + (S << 2), V = HEAP32[T >> 2], HEAP32[T >> 2] = 1 > (V | 0) ? 1 : V, V = S + 1, (V | 0) < (N | 0)) S = V;
                                    else break;
                            if (0 < (I | 0)) {
                                L = N;
                                for (T = 0;;) {
                                    S = HEAP32[H + 28 + (T << 2) >> 2];
                                    v = t + (L << 2);
                                    A = HEAP32[v >> 2];
                                    HEAP32[v >> 2] = (S | 0) > (A | 0) ? S : A;
                                    A = T + 1;
                                    if ((A | 0) >= (I | 0)) break a;
                                    L += 1;
                                    T = A
                                }
                            }
                        }
                    while (0);
                    I = n + 1;
                    if ((I | 0) < (g | 0)) n = I, L = K;
                    else break
                }
                if (74 == d) return L = HEAP32[a + 4408 >> 2], n = HEAP32[L + (HEAP32[L >> 2] + 40) >> 2], _jtjsigstr(a,
                    10, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), e = 0, STACKTOP = c, e;
                HEAP32[t >> 2] = K;
                do
                    if (0 < (x | 0)) {
                        L = n = 1;
                        for (r = K;;) {
                            Q = n * (r | 0);
                            if ((L | 0) >= (x | 0)) break;
                            I = HEAP32[t + (L << 2) >> 2];
                            n = Q;
                            L += 1;
                            r = I
                        }
                        2147483647 >= Q ? (P = Q, d = 87) : (r = HEAP32[a + 4408 >> 2], L = HEAP32[r + (HEAP32[r >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[L + 20 >> 2], L + HEAP32[L >> 2]), M = 0)
                    } else P = 1, d = 87;
                while (0);
                87 == d && (M = P & -1);
                H = 0 == (K | 0) ? 0 : (Math_imul(M, u) | 0) / (K | 0) & -1;
                L = _jtga(a, 4, x, 1, 0);
                if (0 == (L | 0)) return e = 0, STACKTOP = c, e;
                r = L + HEAP32[L >> 2];
                n = _jtga(a, D, M, x, t);
                if (0 == (n | 0)) return e = 0, STACKTOP =
                    c, e;
                0 != z << 24 >> 24 && (HEAP32[n + 4 >> 2] = 8);
                I = n + HEAP32[n >> 2];
                N = 0 == (J | 0);
                A = 0 == (D & 32 | 0);
                S = Math_imul(n, z << 24 >> 24) | 0;
                v = (H | 0) / 4 & -1;
                V = 3 < (H | 0);
                T = q + (i + 4);
                i = 1 < (v | 0) ? v : 1;
                J = (q = (u | 0) < (H | 0)) ? u : H;
                R = 0 == (s | 0);
                O = a + 205336;
                aa = 0;
                $ = Z = I;
                a: for (;;) {
                    I = HEAP32[h + (aa << 2) >> 2];
                    ba = N ? I : I + m;
                    if ((HEAP32[ba + 12 >> 2] | 0) == (D | 0)) ka = ba;
                    else {
                        I = HEAP32[O >> 2];
                        HEAP32[O >> 2] = 0;
                        ea = _jtccvt(a, D, ba, c);
                        HEAP32[O >> 2] = I;
                        if (0 == ea << 24 >> 24) {
                            d = 99;
                            break
                        }
                        ea = HEAP32[c >> 2];
                        if (0 == (ea | 0)) {
                            e = 0;
                            d = 152;
                            break
                        } else ka = ea
                    }
                    ea = HEAP32[ka + 24 >> 2];
                    I = ka + 28;
                    do
                        if (0 == (ea | 0))
                            if (ha = ka + HEAP32[ka >>
                                    2], A) {
                                _memcpy(Z, ha, J) | 0;
                                if (q)
                                    for (da = u;;)
                                        if (ga = H - da, _memcpy(Z + da, Z, (da | 0) < (ga | 0) ? da : ga) | 0, ga = da << 1, (ga | 0) < (H | 0)) da = ga;
                                        else break;
                                da = $;
                                ha = Z + H
                            } else {
                                ba = 0 == (HEAP32[ka + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[ka + 4 >> 2] & 14 | 0) | 0;
                                da = HEAP32[ha >> 2] - S + (ka & -ba);
                                if (V) {
                                    U = 0;
                                    for (ba = $;;)
                                        if (HEAP32[ba >> 2] = da, ga = U + 1, (ga | 0) < (v | 0)) U = ga, ba += 4;
                                        else break;
                                    da = $ + (i << 2)
                                } else da = $;
                                ha = Z
                            } else {
                        da = x - ea;
                        if ((ea | 0) == (x | 0)) ba = ka;
                        else {
                            if (0 < (da | 0))
                                for (ha = 0;;)
                                    if (HEAP32[r + (ha << 2) >> 2] = 1, ga = ha + 1, (ga | 0) < (da | 0)) ha = ga;
                                    else break;
                            _memcpy(r + (da << 2), I, ea << 2) | 0;
                            ha = _jtreshape(a, L, ka);
                            if (0 == (ha | 0)) {
                                e = 0;
                                d = 152;
                                break a
                            } else ba = ha
                        }
                        ha = ba + 28;
                        b: do
                            if (R) ga = ba;
                            else {
                                ga = s;
                                U = T;
                                for (ca = ba + 32;
                                    (HEAP8[U] | 0) == (HEAP8[ca] | 0);)
                                    if (da = ga - 1, 0 == (da | 0)) {
                                        ga = ba;
                                        break b
                                    } else ga = da, U += 1, ca += 1;
                                U = 0 == (HEAP32[ba + 24 >> 2] | 0) ? 1 : HEAP32[ha >> 2];
                                HEAP32[t >> 2] = U;
                                ca = _jttake(a, p, ba);
                                if (0 == (ca | 0)) {
                                    e = 0;
                                    d = 152;
                                    break a
                                } else ga = ca
                            }
                        while (0);
                        if (A) ha = Math_imul(HEAP32[ga + 20 >> 2], u) | 0, _memcpy(Z, ga + HEAP32[ga >> 2], ha) | 0, da = $, ha = Z + ha;
                        else {
                            ha = ga + HEAP32[ga >> 2];
                            ca = 0 == (HEAP32[ga + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[ga + 4 >> 2] & 14 | 0) |
                                0;
                            da = (ga & -ca) - S;
                            ca = HEAP32[ga + 20 >> 2];
                            if (0 < (ca | 0)) {
                                ba = $;
                                for (U = 0;;)
                                    if (HEAP32[ba >> 2] = da + HEAP32[ha + (U << 2) >> 2], U += 1, (U | 0) < (ca | 0)) ba += 4;
                                    else break;
                                da = $ + (ca << 2)
                            } else da = $;
                            ha = Z
                        }
                    } while (0);
                    ea = aa + 1;
                    if ((ea | 0) < (g | 0)) aa = ea, Z = ha, $ = da;
                    else {
                        e = n;
                        d = 152;
                        break
                    }
                }
                if (99 == d) return n = HEAP32[a + 4408 >> 2], $ = HEAP32[n + (HEAP32[n >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[$ + 20 >> 2], $ + HEAP32[$ >> 2]), e = 0, STACKTOP = c, e;
                if (152 == d) return STACKTOP = c, e
            }
        } else B = 0, G = l, C = 1, F = 0, E = -1;
    while (0);
    da = _jtga(a, F, B, C, 0);
    if (0 == (da | 0)) return STACKTOP = c, 0;
    C = G << 24 >>
        24;
    0 != G << 24 >> 24 && 0 == (F & 196895 | 0) && (HEAP32[da + 4 >> 2] = 8);
    G = da + HEAP32[da >> 2];
    if (!k) return STACKTOP = c, da;
    k = 0 == l << 24 >> 24;
    l = 0 == (F & 32 | 0);
    B = Math_imul(da, C) | 0;
    C = f;
    f = a + 205336;
    ha = 0;
    ba = U = G;
    a: for (;;) {
        G = HEAP32[h + (ha << 2) >> 2];
        j = k ? G : G + C;
        G = HEAP32[j + 20 >> 2];
        do
            if (0 == (G | 0)) m = ba, w = U;
            else if (l) {
            if ((F | 0) == (HEAP32[j + 12 >> 2] | 0)) m = j, w = G;
            else {
                ga = HEAP32[f >> 2];
                HEAP32[f >> 2] = 0;
                ca = _jtccvt(a, F, j, b);
                HEAP32[f >> 2] = ga;
                if (0 == ca << 24 >> 24) {
                    d = 146;
                    break a
                }
                ca = HEAP32[b >> 2];
                if (0 == (ca | 0)) {
                    e = 0;
                    d = 152;
                    break a
                }
                m = ca;
                w = HEAP32[ca + 20 >> 2]
            }
            ca = Math_imul(w,
                E) | 0;
            _memcpy(U, m + HEAP32[m >> 2], ca) | 0;
            m = ba;
            w = U + ca
        } else {
            ca = j + HEAP32[j >> 2];
            m = 0 == (HEAP32[j + 12 >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[j + 4 >> 2] & 14 | 0) | 0;
            ga = (j & -m) - B;
            if (0 < (G | 0)) {
                m = ba;
                for (w = 0;;)
                    if (HEAP32[m >> 2] = ga + HEAP32[ca + (w << 2) >> 2], u = w + 1, (u | 0) < (G | 0)) m += 4, w = u;
                    else break;
                m = ba + (G << 2)
            } else m = ba;
            w = U
        }
        while (0);
        G = ha + 1;
        if ((G | 0) < (g | 0)) ha = G, U = w, ba = m;
        else {
            e = da;
            d = 152;
            break
        }
    }
    if (146 == d) return da = HEAP32[a + 4408 >> 2], m = HEAP32[da + (HEAP32[da >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[m + 20 >> 2], m + HEAP32[m >> 2]), STACKTOP = c, 0;
    if (152 == d) return STACKTOP = c, e
}
function _jtrbrace(a, f) {
    return _jtamend(a, f, 0)
}
function _jtreshape(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    e = b;
    g = b + 8;
    h = b + 16;
    j = b + 24;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = b, 0;
    l = HEAP32[f + 24 >> 2];
    k = a + 205336;
    m = HEAP32[k >> 2];
    0 == (m | 0) ? (p = n = HEAP32[d + 24 >> 2], q = l, r = n) : (p = HEAP32[m + 4 >> 2], q = HEAP32[m >> 2], r = HEAP32[d + 24 >> 2]);
    m = r - p;
    n = d + 28;
    HEAP32[k >> 2] = 0;
    s = 1 < (q | 0);
    if (s | (q | 0) < (l | 0)) return i = _jtrank2ex(a, f, d, 0, s ? 1 : q, p, 160), STACKTOP =
        b, i;
    if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
        HEAP32[k >> 2] = 0;
        q = _jtccvt(a, 4, f, e);
        HEAP32[k >> 2] = 0;
        if (0 == q << 24 >> 24) return q = HEAP32[a + 4408 >> 2], s = HEAP32[q + (HEAP32[q >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[s + 20 >> 2], s + HEAP32[s >> 2]), STACKTOP = b, 0;
        s = HEAP32[e >> 2];
        if (0 == (s | 0)) return STACKTOP = b, 0;
        t = s
    } else t = f;
    f = HEAP32[t + 20 >> 2];
    e = 0 < (f | 0);
    a: do
        if (e) {
            s = t + HEAP32[t >> 2];
            for (q = 0; !(-1 >= (HEAP32[s >> 2] | 0));)
                if (l = q + 1, (l | 0) < (f | 0)) s += 4, q = l;
                else break a;
            q = HEAP32[a + 4408 >> 2];
            s = HEAP32[q + (HEAP32[q >> 2] + 12) >> 2];
            _jtjsigstr(a, 3, HEAP32[s + 20 >> 2], s + HEAP32[s >>
                2]);
            i = 0;
            STACKTOP = b;
            return i
        }
    while (0);
    if (0 == (t | 0)) return STACKTOP = b, 0;
    s = t + HEAP32[t >> 2];
    if (0 == (HEAP32[d + 12 >> 2] & 64512 | 0)) {
        q = s;
        do
            if (e) {
                l = 1;
                for (g = 0;;)
                    if (u = l * (HEAP32[q + (g << 2) >> 2] | 0), j = g + 1, (j | 0) < (f | 0)) l = u, g = j;
                    else break;
                2147483647 >= u ? (w = u, c = 142) : (g = HEAP32[a + 4408 >> 2], l = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]), v = 0)
            } else w = 1, c = 142;
        while (0);
        142 == c && (v = w & -1);
        w = a + 204545;
        if (0 != (HEAP8[w] | 0)) return STACKTOP = b, 0;
        do
            if (0 < (m | 0)) {
                u = 1;
                for (q = 0;;)
                    if (x = u * (HEAP32[d + 28 + (q << 2) >> 2] | 0),
                        e = q + 1, (e | 0) < (m | 0)) u = x, q = e;
                    else break;
                if (2147483647 >= x) y = x, c = 148;
                else if (q = HEAP32[a + 4408 >> 2], u = HEAP32[q + (HEAP32[q >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), 0 == (HEAP8[w] | 0)) z = 0, c = 150;
                else return i = 0, STACKTOP = b, i
            } else y = 1, c = 148;
        while (0);
        148 == c && (x = y & -1, 0 == (x | 0) ? (z = x, c = 150) : (A = (HEAP32[d + 20 >> 2] | 0) / (x | 0) & -1, D = x));
        a: do
            if (150 == c) {
                do
                    if (0 < (p | 0)) {
                        y = 1;
                        for (x = 0;;)
                            if (B = y * (HEAP32[d + 28 + (m + x << 2) >> 2] | 0), u = x + 1, (u | 0) < (p | 0)) y = B, x = u;
                            else break;
                        if (2147483647 >= B) r = B;
                        else {
                            x = HEAP32[a + 4408 >> 2];
                            y = HEAP32[x +
                                (HEAP32[x >> 2] + 40) >> 2];
                            _jtjsigstr(a, 10, HEAP32[y + 20 >> 2], y + HEAP32[y >> 2]);
                            if (0 == (HEAP8[w] | 0)) {
                                A = 0;
                                D = z;
                                break a
                            } else i = 0;
                            STACKTOP = b;
                            return i
                        }
                    } else r = 1;
                while (0);
                A = r & -1;
                D = z
            }
        while (0);
        z = HEAP32[a + 204448 >> 2];
        if (0 != (v | 0) & 0 == (A | 0) & 0 == (z | 0)) return r = HEAP32[a + 4408 >> 2], B = HEAP32[r + (HEAP32[r >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[B + 20 >> 2], B + HEAP32[B >> 2]), STACKTOP = b, 0;
        if (B = (v | 0) > (A | 0) & 0 != (z | 0)) {
            z = _jtsetfv(a, d, d);
            if (0 == (z | 0)) return STACKTOP = b, 0;
            G = z
        } else G = d;
        z = G + 12;
        r = HEAP32[z >> 2];
        d = 2 == (r | 0) | 2097152 == (r | 0) | 33554432 == (r | 0) ? 1 :
            131072 == (r | 0) ? 2 : 4 == (r | 0) | 67108864 == (r | 0) | 134217728 == (r | 0) | 4194304 == (r | 0) | 8388608 == (r | 0) ? 4 : 32 == (r | 0) ? 4 : 64 == (r | 0) ? 4 : 128 == (r | 0) ? 8 : 1024 == (r | 0) | 4096 == (r | 0) | 8192 == (r | 0) | 16384 == (r | 0) | 2048 == (r | 0) | 32768 == (r | 0) ? 16 : 262144 == (r | 0) | 524288 == (r | 0) | 1048576 == (r | 0) ? 44 : 16777216 == (r | 0) ? 12 : 65536 == (r | 0) ? 4 : 268435456 == (r | 0) ? 12 : 536870912 == (r | 0) ? 24 : 1 == (r | 0) | 8 == (r | 0) | 16 == (r | 0) ? r : -1;
        y = Math_imul(d, v) | 0;
        x = Math_imul(d, A) | 0;
        A = (D | 0) * (v | 0);
        2147483647 < A ? (v = HEAP32[a + 4408 >> 2], u = HEAP32[v + (HEAP32[v >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[u +
            20 >> 2], u + HEAP32[u >> 2]), C = 0) : C = A & -1;
        if (0 != (HEAP8[w] | 0)) return STACKTOP = b, 0;
        w = _jtga(a, r, C, f + m, 0);
        if (0 == (w | 0)) return STACKTOP = b, 0;
        _memcpy(w + 28, n, m << 2) | 0;
        _memcpy(w + 28 + (m << 2), s, f << 2) | 0;
        if (0 == (C | 0)) return STACKTOP = b, w;
        f = C = w;
        s = C + HEAP32[f >> 2];
        n = G + HEAP32[G >> 2];
        r = 0 < (D | 0);
        do
            if (B) {
                if (r) {
                    A = y - x;
                    u = a + 204452;
                    q = (v = (d | 0) < (A | 0)) ? d : A;
                    e = s;
                    l = n;
                    for (g = 0;;) {
                        _memcpy(e, l, x) | 0;
                        j = e + x;
                        _memcpy(j, HEAP32[u >> 2], q) | 0;
                        if (v)
                            for (m = d;;)
                                if (c = A - m, _memcpy(e + (x + m), j, (m | 0) < (c | 0) ? m : c) | 0, c = m << 1, (c | 0) < (A | 0)) m = c;
                                else break;
                        m = g + 1;
                        if ((m | 0) < (D | 0)) e +=
                            y, l += x, g = m;
                        else break
                    }
                }
            } else if (r) {
            l = (g = (x | 0) < (y | 0)) ? x : y;
            e = s;
            A = n;
            for (v = 0;;) {
                _memcpy(e, A, l) | 0;
                if (g)
                    for (q = x;;)
                        if (u = y - q, _memcpy(e + q, e, (q | 0) < (u | 0) ? q : u) | 0, u = q << 1, (u | 0) < (y | 0)) q = u;
                        else break;
                q = v + 1;
                if ((q | 0) < (D | 0)) e += y, A += x, v = q;
                else break
            }
        } while (0);
        if (0 == (HEAP32[z >> 2] & 32 | 0) || 0 == (HEAP32[G + 4 >> 2] & 14 | 0)) return STACKTOP = b, w;
        z = G - w;
        G = w + 4;
        HEAP32[G >> 2] |= 8;
        G = C + HEAP32[f >> 2];
        f = HEAP32[w + 20 >> 2];
        if (0 < (f | 0)) e = 0;
        else return STACKTOP = b, w;
        for (;;)
            if (C = G + (e << 2), HEAP32[C >> 2] += z, C = e + 1, (C | 0) < (f | 0)) e = C;
            else {
                i = w;
                break
            }
        STACKTOP = b;
        return i
    }
    HEAP32[k >>
        2] = 0;
    w = _jtccvt(a, 4, t, h);
    HEAP32[k >> 2] = 0;
    if (0 == w << 24 >> 24) return w = HEAP32[a + 4408 >> 2], t = HEAP32[w + (HEAP32[w >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), STACKTOP = b, 0;
    t = HEAP32[h >> 2];
    if (0 == (t | 0)) return STACKTOP = b, 0;
    h = j + 4;
    w = j;
    j = d;
    d = p;
    for (e = t;;) {
        F = HEAP32[e + 20 >> 2];
        J = E = e + HEAP32[e >> 2];
        t = j + 24;
        L = HEAP32[t >> 2];
        if (0 < (F | 0))
            for (z = f = 0;;)
                if (G = 0 == (HEAP32[J + (f << 2) >> 2] | 0) ? 1 : z, C = f + 1, (C | 0) < (F | 0)) f = C, z = G;
                else {
                    I = G;
                    break
                } else I = 0;
        if (H = 0 < (d | 0)) {
            for (f = z = 0;;)
                if (K = 0 == (HEAP32[j + 28 + (z + m << 2) >> 2] | 0) ? 1 : f, G = z + 1, (G | 0) < (d |
                        0)) z = G, f = K;
                else break;
            if (!(0 != I << 24 >> 24 | 0 == K << 24 >> 24)) {
                c = 27;
                break
            }
        }
        N = j;
        S = HEAP32[j >> 2];
        T = HEAP32[N + S >> 2] + S;
        V = N + T;
        if (0 == (F | 0)) {
            c = 29;
            break
        }
        f = T + (N + 20);
        Q = HEAP32[f >> 2];
        z = _jtga(a, 1, L, 1, 0);
        if (0 == (z | 0)) {
            i = 0;
            c = 194;
            break
        }
        P = z;
        M = HEAP32[z >> 2];
        z = P + M;
        _memset(z, 0, L) | 0;
        R = V;
        G = N + (T + HEAP32[R >> 2]);
        C = HEAP32[f >> 2];
        if (0 < (C | 0))
            for (f = 0;;)
                if (HEAP8[P + (HEAP32[G + (f << 2) >> 2] + M)] = 1, x = f + 1, (x | 0) < (C | 0)) f = x;
                else break;
        else if (0 == (z | 0)) {
            i = 0;
            c = 194;
            break
        }
        O = _jtca(a, N + (HEAP32[S + (N + 4) >> 2] + S));
        if (0 == (O | 0)) {
            i = 0;
            c = 194;
            break
        }
        aa = HEAP32[S + (N + 12) >>
            2];
        Z = HEAP32[S + (N + 8) >> 2];
        f = d - 1;
        C = (F | 0) < (f | 0) ? F : f;
        a: do
            if (0 < (C | 0)) {
                f = 0;
                G = j + 28 + (L << 2);
                for (x = J + (F << 2);;) {
                    y = x - 4;
                    D = G - 4;
                    n = f + 1;
                    if ((HEAP32[y >> 2] | 0) != (HEAP32[D >> 2] | 0)) break a;
                    if ((n | 0) < (C | 0)) f = n, G = D, x = y;
                    else {
                        c = 69;
                        break
                    }
                }
            } else c = 69;
        while (0);
        if (69 == c && (c = 0, (F | 0) >= (d | 0))) {
            c = 80;
            break
        }
        C = HEAP32[k >> 2];
        0 == (j | 0) ? (f = 0, n = C) : (z = HEAP32[t >> 2], 0 > (d | 0) ? (x = z + d, y = 0 > (x | 0) ? 0 : x) : y = (z | 0) > (d | 0) ? d : z, HEAP32[h >> 2] = y, (y | 0) < (z | 0) ? (HEAP32[w >> 2] = 0, HEAP32[k >> 2] = w, z = _jtravel(a, j), HEAP32[k >> 2] = C, f = z, n = C) : (f = z = _jtravel(a, j), n = HEAP32[k >> 2]));
        HEAP32[k >> 2] = 0;
        C = _jtccvt(a, 4, e, g);
        HEAP32[k >> 2] = n;
        if (0 == C << 24 >> 24) {
            c = 78;
            break
        }
        C = HEAP32[g >> 2];
        if (0 == (C | 0)) {
            i = 0;
            c = 194;
            break
        } else j = f, d = 1, e = C
    }
    if (27 == c) return f = HEAP32[a + 4408 >> 2], g = HEAP32[f + (HEAP32[f >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), STACKTOP = b, 0;
    if (29 == c) {
        g = j + 28;
        f = _jtga(a, 1, L, 1, 0);
        if (0 == (f | 0)) return STACKTOP = b, 0;
        n = f;
        k = HEAP32[f >> 2];
        f = n + k;
        _memset(f, 0, L) | 0;
        L = N + (T + HEAP32[V >> 2]);
        V = HEAP32[T + (N + 20) >> 2];
        do
            if (0 < (V | 0))
                for (w = 0;;)
                    if (HEAP8[n + (HEAP32[L + (w << 2) >> 2] + k)] = 1, y = w + 1, (y | 0) < (V | 0)) w =
                        y;
                    else break;
        else
        if (0 == (f | 0)) return i = 0, STACKTOP = b, i;
        while (0);
        V = _jtca(a, N + (HEAP32[S + (N + 4) >> 2] + S));
        if (0 == (V | 0)) return STACKTOP = b, 0;
        L = HEAP32[S + (N + 12) >> 2] + S;
        w = N + L;
        y = HEAP32[S + (N + 8) >> 2] + S;
        K = h = N + y;
        I = HEAP32[y + (N + 28) >> 2];
        C = HEAP32[y + (N + 32) >> 2];
        if (0 < (m | 0))
            for (z = t = 0;;)
                if (x = (0 != (HEAP8[n + (k + t)] | 0) | 0) + z, G = t + 1, (G | 0) < (m | 0)) t = G, z = x;
                else {
                    $ = x;
                    break
                } else $ = 0;
        if ((r | 0) == (p | 0)) {
            a: do
                if (!(0 == (I | 0) | 0 == (C | 0)) && (p = N + (HEAP32[h >> 2] + y), 0 < (C | 0))) {
                    for (G = 0;;) {
                        r = G + 1;
                        if (0 != (HEAP32[p + (G << 2) >> 2] | 0)) {
                            i = V;
                            break
                        }
                        if ((r | 0) < (C | 0)) G = r;
                        else break a
                    }
                    STACKTOP =
                        b;
                    return i
                }while (0);
            if (0 == (HEAP32[L + (N + 20) >> 2] | 0)) return STACKTOP = b, V;i = _jtreshape(a, HEAP32[31086], w);STACKTOP = b;
            return i
        }
        L = _jtga(a, HEAP32[j + 12 >> 2], 1, m, g);
        if (0 == (L | 0)) return STACKTOP = b, 0;
        g = L;
        G = HEAP32[L >> 2];
        r = p = g + G;
        z = V - r;
        HEAP32[G + (g + 4) >> 2] = z;
        if (0 == (g + (z + G) | 0)) return STACKTOP = b, 0;
        z = _jtifb(a, m, f) - r;
        HEAP32[p >> 2] = z;
        if (0 == (g + (z + G) | 0)) return STACKTOP = b, 0;
        z = _jtga(a, 1, I, 1, 0);
        if (0 == (z | 0)) return STACKTOP = b, 0;
        p = z + HEAP32[z >> 2];
        do
            if (0 < (I | 0))
                if (f = C - $, 0 >= (f | 0)) _memset(p, 1, I) | 0;
                else {
                    V = N + (HEAP32[h >> 2] + y);
                    t = 0;
                    for (k =
                        p;;) {
                        HEAP8[k] = 1;
                        for (n = 0;;) {
                            x = n + 1;
                            if (0 != (HEAP32[V + (n + $ << 2) >> 2] | 0)) {
                                c = 53;
                                break
                            }
                            if ((x | 0) < (f | 0)) n = x;
                            else break
                        }
                        53 == c && (c = 0, HEAP8[k] = 0);
                        n = t + 1;
                        if ((n | 0) < (I | 0)) V += C << 2, t = n, k += 1;
                        else break
                    }
                }
        while (0);
        I = _jtga(a, 4, 1, 0, 0);
        0 == (I | 0) ? i = 0 : (HEAP32[I + HEAP32[I >> 2] >> 2] = $, i = I);
        I = _jtrepeat(a, z, _jtirs2(a, i, K, 0, 2147483647, 1, 2984)) - r;
        HEAP32[G + (g + 8) >> 2] = I;
        if (0 == (g + (I + G) | 0)) return STACKTOP = b, 0;
        I = HEAP32[31086];
        K = _jtirs2(a, I, _jtrepeat(a, z, w), 0, 1, d - C + $, 160) - r;
        HEAP32[G + (g + 12) >> 2] = K;
        STACKTOP = b;
        return 0 == (g + (K + G) | 0) ? 0 : L
    }
    if (78 == c) return L =
        HEAP32[a + 4408 >> 2], G = HEAP32[L + (HEAP32[L >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), STACKTOP = b, 0;
    if (80 == c) {
        G = F - d;
        L = N + (aa + S);
        aa = Z + S;
        Z = S = N + aa;
        if (0 != (HEAP32[a + 204448 >> 2] | 0)) return K = HEAP32[a + 4408 >> 2], g = HEAP32[K + (HEAP32[K >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), STACKTOP = b, 0;
        g = _jtga(a, HEAP32[j + 12 >> 2], 1, F + m, j + 28);
        if (0 == (g | 0)) return STACKTOP = b, 0;
        _memcpy(g + 28 + (m << 2), E, F << 2) | 0;
        K = g;
        r = HEAP32[g >> 2];
        C = $ = K + r;
        w = O - C;
        HEAP32[r + (K + 4) >> 2] = w;
        if (0 == (K + (w + r) | 0)) return STACKTOP = b, 0;
        w = P + (M +
            m);
        O = _jtga(a, 4, (Math_imul(HEAP8[w] | 0, G) | 0) + Q, 1, 0);
        if (0 == (O | 0)) return STACKTOP = b, 0;
        z = O + HEAP32[O >> 2];
        if (0 < (m | 0)) {
            I = 0;
            for (i = z;;)
                if (0 == (HEAP8[P + (M + I)] | 0) ? f = i : (HEAP32[i >> 2] = I, f = i + 4), p = I + 1, (p | 0) < (m | 0)) I = p, i = f;
                else {
                    ba = f;
                    break
                }
        } else ba = z;
        if (0 != (HEAP8[w] | 0) & 0 < (G | 0)) {
            z = ba;
            for (f = 0;;)
                if (HEAP32[z >> 2] = f + m, i = f + 1, (i | 0) < (G | 0)) z += 4, f = i;
                else break;
            p = ba + (G << 2)
        } else p = ba;
        a: do
            if (H) {
                ba = p;
                f = 1;
                for (z = m;;) {
                    0 == (HEAP8[P + (M + z)] | 0) ? x = ba : (HEAP32[ba >> 2] = z + G, x = ba + 4);
                    if ((f | 0) >= (d | 0)) break a;
                    ba = x;
                    f += 1;
                    z += 1
                }
            }
        while (0);
        x = O - C;
        HEAP32[$ >>
            2] = x;
        if (0 == (K + (x + r) | 0)) return STACKTOP = b, 0;
        do
            if (0 == (HEAP8[w] | 0)) {
                x = _jtga(a, 4, F, 1, 0);
                if (0 == (x | 0)) return i = 0, STACKTOP = b, i;
                x = $ = x + HEAP32[x >> 2];
                _memcpy($, E, G << 2) | 0;
                if (H) {
                    O = G;
                    p = m;
                    for (z = 0;;)
                        if (0 == (HEAP8[P + (M + p)] | 0) ? (HEAP32[x + (O << 2) >> 2] = HEAP32[J + (z + G << 2) >> 2], I = O + 1) : I = O, f = z + 1, (f | 0) < (d | 0)) O = I, p += 1, z = f;
                        else {
                            ka = I;
                            break
                        }
                } else ka = G;
                z = _jtca(a, Z) - C;
                HEAP32[r + (K + 8) >> 2] = z;
                if (0 == (K + (z + r) | 0)) return i = 0, STACKTOP = b, i;
                z = _jtga(a, 4, ka, 1, 0);
                0 == (z | 0) ? z = 0 : _memcpy(z + HEAP32[z >> 2], $, ka << 2) | 0;
                z = _jtirs2(a, z, L, 0, 1, d - F + ka, 160) - C;
                HEAP32[r +
                    (K + 12) >> 2] = z;
                if (0 == (K + (z + r) | 0)) return i = 0, STACKTOP = b, i
            } else {
                if ((HEAP32[N + (HEAP32[R >> 2] + T) >> 2] | 0) != (m | 0)) return i = _jtrank2ex(a, e, j, 0, 1, d, 160), STACKTOP = b, i;
                z = G + 1;
                do
                    if (-1 < (G | 0)) {
                        p = 1;
                        for (O = 0;;)
                            if (ea = p * (HEAP32[J + (O << 2) >> 2] | 0), x = O + 1, (x | 0) < (z | 0)) p = ea, O = x;
                            else break;
                        2147483647 >= ea ? (ha = ea, c = 105) : (O = HEAP32[a + 4408 >> 2], p = HEAP32[O + (HEAP32[O >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), da = 0)
                    } else ha = 1, c = 105;
                while (0);
                105 == c && (da = ha & -1);
                if (0 != (HEAP8[a + 204545] | 0)) return i = 0, STACKTOP = b, i;
                0 == (HEAP32[aa +
                    (N + 24) >> 2] | 0) ? ($ = j + 28 + (m << 2), p = HEAP32[$ >> 2], ga = 1, U = $, ca = (da | 0) / (p | 0) & -1, X = p, Y = S, c = 110) : (p = HEAP32[aa + (N + 28) >> 2], $ = j + 28 + (m << 2), O = HEAP32[$ >> 2], x = Math_imul((da | 0) / (O | 0) & -1, p) | 0, f = S, 0 < (p | 0) ? (ga = p, U = $, ca = x, X = O, Y = f, c = 110) : (ja = x, fa = p, ia = $, ra = f));
                a: do
                    if (110 == c) {
                        f = (da | 0) % (X | 0) & -1;
                        $ = N + (HEAP32[Y >> 2] + aa);
                        p = ca;
                        for (x = 0;;) {
                            if ((f | 0) <= (HEAP32[$ >> 2] | 0)) {
                                ja = p;
                                fa = ga;
                                ia = U;
                                ra = Y;
                                break a
                            }
                            O = p + 1;
                            ba = x + 1;
                            if ((ba | 0) < (ga | 0)) $ += Q << 2, p = O, x = ba;
                            else {
                                ja = O;
                                fa = ga;
                                ia = U;
                                ra = Y;
                                break
                            }
                        }
                    }
                while (0);
                x = _jtga(a, 4, ja, 1, 0);
                if (0 == (x | 0)) return i = 0, STACKTOP =
                    b, i;
                p = x + HEAP32[x >> 2];
                $ = N + (HEAP32[ra >> 2] + aa);
                if (0 < (ja | 0)) {
                    f = $;
                    for (i = ba = O = 0;;)
                        if (HEAP32[p + (i << 2) >> 2] = HEAP32[f >> 2] + O, I = ba + 1, (I | 0) == (fa | 0) ? (ba = 0, O = HEAP32[ia >> 2] + O, f = $) : (ba = I, f += Q << 2), I = i + 1, (I | 0) < (ja | 0)) i = I;
                        else break
                }
                i = _jtga(a, 4, z, 1, 0);
                0 == (i | 0) ? z = 0 : (_memcpy(i + HEAP32[i >> 2], E, z << 2) | 0, z = i);
                i = _jtabase2(a, z, x);
                ba = _jtga(a, 4, 1, 0, 0);
                0 == (ba | 0) ? z = 0 : (HEAP32[ba + HEAP32[ba >> 2] >> 2] = ja, z = ba);
                ba = _jtga(a, 4, 1, 0, 0);
                0 == (ba | 0) ? $ = 0 : (HEAP32[ba + HEAP32[ba >> 2] >> 2] = 1, $ = ba);
                ba = _jtstitch(a, i, _jtreitem(a, z, _jtirs2(a, $, Z, 0, 2147483647,
                    1, 656))) - C;
                HEAP32[r + (K + 8) >> 2] = ba;
                if (0 == (K + (ba + r) | 0)) return i = 0, STACKTOP = b, i;
                ba = _jtga(a, 4, 1, 0, 0);
                0 == (ba | 0) ? z = 0 : (HEAP32[ba + HEAP32[ba >> 2] >> 2] = ja, z = ba);
                ba = _jtreitem(a, z, L) - C;
                HEAP32[r + (K + 12) >> 2] = ba;
                if (0 == (K + (ba + r) | 0)) return i = 0, STACKTOP = b, i
            }
        while (0);
        STACKTOP = b;
        return g
    }
    if (194 == c) return STACKTOP = b, i
}
function _jtrngselects(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb,
        Jb, $b, na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf,
        Qf, Sf, Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf;
    d = _jti0(a, f);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return c = 0;
    if (!(5 > d >>> 0)) return b = a + 4408, e = HEAP32[b >> 2], g = HEAP32[e >> 2], h = g + 12, j = e + h, i = HEAP32[j >> 2], l = i + 20, k = HEAP32[l >> 2], m = HEAP32[i >> 2], n = i + m, _jtjsigstr(a, 3, k, n), c = 0;
    p = a + 205432;
    q = HEAP32[p >> 2];
    r = a + 205360;
    HEAP32[a + 205392 + (HEAP32[r >> 2] << 2) >> 2] = q;
    HEAP32[r >> 2] = d;
    a: do switch (d | 0) {
            case 0:
                s = a + 205524;
                HEAP32[s >> 2] = 32;
                t = a + 205504;
                u = HEAP32[t >> 2];
                if (w = 0 == (u | 0)) {
                    v = _jtga(a, 4, 56, 1, 0);
                    if (x = 0 == (v | 0)) return c = 0;
                    _jttraverse(a,
                        v, 654);
                    y = v + 16;
                    z = HEAP32[y >> 2];
                    A = z + 1;
                    HEAP32[y >> 2] = A;
                    B = D = v;
                    G = HEAP32[B >> 2];
                    F = C = D + G;
                    E = a + 205520;
                    HEAP32[E >> 2] = F;
                    HEAP32[t >> 2] = F;
                    J = a + 205460;
                    L = HEAP32[J >> 2];
                    _jtgb_init(a, L);
                    I = HEAP32[p >> 2];
                    H = a + 205396;
                    HEAP32[H >> 2] = I
                } else K = a + 205520, HEAP32[K >> 2] = u, N = a + 205396, S = HEAP32[N >> 2], HEAP32[p >> 2] = S;
                T = a + 205508;
                V = HEAP32[T >> 2];
                if (Q = 0 == (V | 0)) {
                    P = _jtga(a, 4, 624, 1, 0);
                    if (M = 0 == (P | 0)) return c = 0;
                    _jttraverse(a, P, 654);
                    R = P + 16;
                    O = HEAP32[R >> 2];
                    aa = O + 1;
                    HEAP32[R >> 2] = aa;
                    $ = Z = P;
                    ba = HEAP32[$ >> 2];
                    ea = ka = Z + ba;
                    ha = a + 205520;
                    HEAP32[ha >> 2] = ea;
                    HEAP32[T >> 2] =
                        ea;
                    da = a + 205464;
                    ga = HEAP32[da >> 2];
                    HEAP32[ea >> 2] = ga;
                    U = 1;
                    for (ca = ga;;)
                        if (X = ca >>> 30, Y = X ^ ca, ja = Math_imul(Y, 1812433253) | 0, fa = ja + U, ia = ea + (U << 2), HEAP32[ia >> 2] = fa, ra = U + 1, sa = 624 > (ra | 0)) U = ra, ca = fa;
                        else break;
                    HEAP32[p >> 2] = 624;
                    ta = a + 205400;
                    HEAP32[ta >> 2] = 624
                } else wa = a + 205520, HEAP32[wa >> 2] = V, za = a + 205400, Ba = HEAP32[za >> 2], HEAP32[p >> 2] = Ba;
                ua = a + 205512;
                ya = HEAP32[ua >> 2];
                if (xa = 0 == (ya | 0)) {
                    oa = _jtga(a, 4, 1597, 1, 0);
                    if (pa = 0 == (oa | 0)) return c = 0;
                    _jttraverse(a, oa, 654);
                    la = oa + 16;
                    qa = HEAP32[la >> 2];
                    Da = qa + 1;
                    HEAP32[la >> 2] = Da;
                    Ea = Aa = oa;
                    Sa =
                        HEAP32[Ea >> 2];
                    Ha = Oa = Aa + Sa;
                    Ga = a + 205520;
                    HEAP32[Ga >> 2] = Ha;
                    HEAP32[ua >> 2] = Ha;
                    Ma = a + 205468;
                    Ia = HEAP32[Ma >> 2];
                    W = db = Ia | 0;
                    Xa = 0;
                    for (Ta = Ha;;)
                        if (fb = 16807 * W, mb = fb / 2147483647, ma = mb & -1, ab = ma | 0, Na = 2147483647 * ab, $a = fb - Na, Ua = $a & -1, Pa = Ta + 4, HEAP32[Ta >> 2] = Ua, bb = Xa + 1, La = 1597 > (bb | 0)) W = $a, Xa = bb, Ta = Pa;
                        else break;
                    HEAP32[p >> 2] = 0;
                    Ja = a + 205404;
                    HEAP32[Ja >> 2] = 0
                } else Qa = a + 205520, HEAP32[Qa >> 2] = ya, Ya = a + 205404, lb = HEAP32[Ya >> 2], HEAP32[p >> 2] = lb;
                Ca = a + 205516;
                gb = HEAP32[Ca >> 2];
                Fa = 0 == (gb | 0);
                if (!Fa) {
                    Za = a + 205520;
                    HEAP32[Za >> 2] = gb;
                    qb = a + 205408;
                    ib =
                        HEAP32[qb >> 2];
                    HEAP32[p >> 2] = ib;
                    break a
                }
                ub = _jtga(a, 8, 6, 1, 0);
                if (eb = 0 == (ub | 0)) return c = 0;
                _jttraverse(a, ub, 654);
                rb = ub + 16;
                wb = HEAP32[rb >> 2];
                Ka = wb + 1;
                HEAP32[rb >> 2] = Ka;
                nb = Va = ub;
                ob = HEAP32[nb >> 2];
                Wa = cb = Va + ob;
                yb = a + 205520;
                HEAP32[yb >> 2] = Wa;
                HEAP32[Ca >> 2] = Wa;
                Cb = a + 205472;
                Pb = HEAP32[Cb >> 2];
                zb = Pb | 0;
                Zb = 16807 * zb;
                ac = Zb / 2147483647;
                Hb = ac & -1;
                Ib = Hb | 0;
                Qb = 2147483647 * Ib;
                Rb = Zb - Qb;
                Ob = Rb & -1;
                Bb = 16807 * Rb;
                xb = Bb / 2147483647;
                dc = xb & -1;
                tb = dc | 0;
                oc = 2147483647 * tb;
                Mb = Bb - oc;
                Tb = Mb & -1;
                Ra = 16807 * Mb;
                Nb = Ra / 2147483647;
                sb = Nb & -1;
                Ab = sb | 0;
                Eb = 2147483647 *
                    Ab;
                Lb = Ra - Eb;
                vb = Lb & -1;
                wc = 16807 * Lb;
                Ec = wc / 2147483647;
                yc = Ec & -1;
                Db = yc | 0;
                bc = 2147483647 * Db;
                pb = wc - bc;
                Fb = pb & -1;
                jb = 16807 * pb;
                gc = jb / 2147483647;
                ic = gc & -1;
                vc = ic | 0;
                hc = 2147483647 * vc;
                uc = jb - hc;
                Ac = uc & -1;
                xc = 16807 * uc;
                cd = xc / 2147483647;
                jc = cd & -1;
                Tc = jc | 0;
                Fc = 2147483647 * Tc;
                Bc = xc - Fc;
                ec = Bc & -1;
                Xb = cb;
                sc = Ob | 0;
                nc = ob + 8;
                Ub = tc = Va + nc;
                HEAPF64[Xb >> 3] = sc;
                $c = Tb | 0;
                ad = ob + 16;
                Uc = qc = Va + ad;
                HEAPF64[Ub >> 3] = $c;
                rc = vb | 0;
                kb = ob + 24;
                $b = Jb = Va + kb;
                HEAPF64[Uc >> 3] = rc;
                na = Fb | 0;
                Vb = ob + 32;
                va = kc = Va + Vb;
                HEAPF64[$b >> 3] = na;
                Wc = Ac | 0;
                Yb = ob + 40;
                Kb = fc = Va + Yb;
                HEAPF64[va >> 3] =
                    Wc;
                Gb = ec | 0;
                HEAPF64[Kb >> 3] = Gb;
                HEAP32[p >> 2] = 0;
                gd = a + 205408;
                HEAP32[gd >> 2] = 0;
                break a;
            case 3:
                mc = a + 205492;
                Gc = HEAP32[mc >> 2];
                if (dd = 0 == (Gc | 0)) {
                    kd = _jtga(a, 4, 1597, 1, 0);
                    if (Fd = 0 == (kd | 0)) return c = 0;
                    _jttraverse(a, kd, 654);
                    Vc = kd + 16;
                    Hd = HEAP32[Vc >> 2];
                    bd = Hd + 1;
                    HEAP32[Vc >> 2] = bd;
                    Ic = cc = kd;
                    fd = HEAP32[Ic >> 2];
                    Xc = xd = cc + fd;
                    Wd = a + 205520;
                    HEAP32[Wd >> 2] = Xc;
                    HEAP32[mc >> 2] = Xc;
                    Wb = a + 205468;
                    Sb = HEAP32[Wb >> 2];
                    zc = pc = Sb | 0;
                    hd = 0;
                    for (Yc = Xc;;)
                        if (Ad = 16807 * zc, Gd = Ad / 2147483647, hb = Gd & -1, ld = hb | 0, ed = 2147483647 * ld, Jc = Ad - ed, Oc = Jc & -1, Pc = Yc + 4, HEAP32[Yc >> 2] =
                            Oc, ke = hd + 1, Ed = 1597 > (ke | 0)) zc = Jc, hd = ke, Yc = Pc;
                        else break;
                    HEAP32[p >> 2] = 0;
                    pd = a + 205404;
                    HEAP32[pd >> 2] = 0
                } else id = a + 205520, HEAP32[id >> 2] = Gc, Cc = a + 205404, Qc = HEAP32[Cc >> 2], HEAP32[p >> 2] = Qc;
                Zc = a + 205524;
                HEAP32[Zc >> 2] = 30;
                break;
            case 4:
                vd = a + 205496;
                $d = HEAP32[vd >> 2];
                if (je = 0 == ($d | 0)) {
                    Kc = _jtga(a, 8, 6, 1, 0);
                    if (Bd = 0 == (Kc | 0)) return c = 0;
                    _jttraverse(a, Kc, 654);
                    od = Kc + 16;
                    Vd = HEAP32[od >> 2];
                    Zd = Vd + 1;
                    HEAP32[od >> 2] = Zd;
                    Md = Jd = Kc;
                    Cd = HEAP32[Md >> 2];
                    Xd = fe = Jd + Cd;
                    qd = a + 205520;
                    HEAP32[qd >> 2] = Xd;
                    HEAP32[vd >> 2] = Xd;
                    Od = a + 205472;
                    Mc = HEAP32[Od >> 2];
                    Dd =
                        Mc | 0;
                    Td = 16807 * Dd;
                    le = Td / 2147483647;
                    me = le & -1;
                    wd = me | 0;
                    Ie = 2147483647 * wd;
                    xe = Td - Ie;
                    ye = xe & -1;
                    Fe = 16807 * xe;
                    nf = Fe / 2147483647;
                    Je = nf & -1;
                    Id = Je | 0;
                    Qe = 2147483647 * Id;
                    sd = Fe - Qe;
                    ge = sd & -1;
                    ud = 16807 * sd;
                    md = ud / 2147483647;
                    de = md & -1;
                    ae = de | 0;
                    Dc = 2147483647 * ae;
                    Nc = ud - Dc;
                    yd = Nc & -1;
                    jd = 16807 * Nc;
                    Sc = jd / 2147483647;
                    lc = Sc & -1;
                    nd = lc | 0;
                    Rc = 2147483647 * nd;
                    Hc = jd - Rc;
                    Kd = Hc & -1;
                    Rd = 16807 * Hc;
                    Nd = Rd / 2147483647;
                    be = Nd & -1;
                    zd = be | 0;
                    we = 2147483647 * zd;
                    Lc = Rd - we;
                    rd = Lc & -1;
                    se = 16807 * Lc;
                    Ud = se / 2147483647;
                    Cf = Ud & -1;
                    td = Cf | 0;
                    Te = 2147483647 * td;
                    pe = se - Te;
                    Pd = pe & -1;
                    Me = fe;
                    Sd = ye |
                        0;
                    $e = Cd + 8;
                    Ce = qe = Jd + $e;
                    HEAPF64[Me >> 3] = Sd;
                    cf = ge | 0;
                    sf = Cd + 16;
                    kf = Ue = Jd + sf;
                    HEAPF64[Ce >> 3] = cf;
                    Re = yd | 0;
                    ce = Cd + 24;
                    Ge = De = Jd + ce;
                    HEAPF64[kf >> 3] = Re;
                    He = Kd | 0;
                    We = Cd + 32;
                    Ne = Yd = Jd + We;
                    HEAPF64[Ge >> 3] = He;
                    Se = rd | 0;
                    Ee = Cd + 40;
                    he = Ld = Jd + Ee;
                    HEAPF64[Ne >> 3] = Se;
                    Qd = Pd | 0;
                    HEAPF64[he >> 3] = Qd;
                    HEAP32[p >> 2] = 0;
                    re = a + 205408;
                    HEAP32[re >> 2] = 0
                } else Ke = a + 205520, HEAP32[Ke >> 2] = $d, Ae = a + 205408, te = HEAP32[Ae >> 2], HEAP32[p >> 2] = te;
                ie = a + 205524;
                HEAP32[ie >> 2] = 31;
                break;
            case 2:
                ff = a + 205488;
                ue = HEAP32[ff >> 2];
                if (Oe = 0 == (ue | 0)) {
                    ne = _jtga(a, 4, 624, 1, 0);
                    if (ze = 0 == (ne | 0)) return c =
                        0;
                    _jttraverse(a, ne, 654);
                    vf = ne + 16;
                    lf = HEAP32[vf >> 2];
                    Xe = lf + 1;
                    HEAP32[vf >> 2] = Xe;
                    hf = Be = ne;
                    af = HEAP32[hf >> 2];
                    uf = zf = Be + af;
                    ve = a + 205520;
                    HEAP32[ve >> 2] = uf;
                    HEAP32[ff >> 2] = uf;
                    If = a + 205464;
                    Df = HEAP32[If >> 2];
                    HEAP32[uf >> 2] = Df;
                    Ef = 1;
                    for (Gf = Df;;)
                        if (of = Gf >>> 30, Lf = of ^ Gf, pf = Math_imul(Lf, 1812433253) | 0, bf = pf + Ef, Bf = uf + (Ef << 2), HEAP32[Bf >> 2] = bf, Pf = Ef + 1, Ye = 624 > (Pf | 0)) Ef = Pf, Gf = bf;
                        else break;
                    HEAP32[p >> 2] = 624;
                    Hf = a + 205400;
                    HEAP32[Hf >> 2] = 624
                } else jf = a + 205520, HEAP32[jf >> 2] = ue, mf = a + 205400, Le = HEAP32[mf >> 2], HEAP32[p >> 2] = Le;
                Ve = a + 205524;
                HEAP32[Ve >>
                    2] = 32;
                break;
            case 1:
                df = a + 205484;
                wf = HEAP32[df >> 2];
                if (Yf = 0 == (wf | 0)) {
                    Jf = _jtga(a, 4, 56, 1, 0);
                    if (Qf = 0 == (Jf | 0)) return c = 0;
                    _jttraverse(a, Jf, 654);
                    Sf = Jf + 16;
                    Mf = HEAP32[Sf >> 2];
                    ee = Mf + 1;
                    HEAP32[Sf >> 2] = ee;
                    rf = oe = Jf;
                    Ff = HEAP32[rf >> 2];
                    Pe = xf = oe + Ff;
                    qf = a + 205520;
                    HEAP32[qf >> 2] = Pe;
                    HEAP32[df >> 2] = Pe;
                    yf = a + 205460;
                    Nf = HEAP32[yf >> 2];
                    _jtgb_init(a, Nf);
                    Zf = HEAP32[p >> 2];
                    tg = a + 205396;
                    HEAP32[tg >> 2] = Zf
                } else Ze = a + 205520, HEAP32[Ze >> 2] = wf, gf = a + 205396, ef = HEAP32[gf >> 2], HEAP32[p >> 2] = ef;
                Kf = a + 205524;
                HEAP32[Kf >> 2] = 31
        }
        while (0);
        HEAP32[a + 205388 >> 2] = HEAP32[a +
            205364 + (HEAP32[r >> 2] << 2) >> 2];
    return c = HEAP32[31086]
}
function _jtrsh0(a, f) {
    var d, c, b, e, g, h;
    d = HEAP32[f + 24 >> 2];
    c = a + 205336;
    b = HEAP32[c >> 2];
    e = 0 == (b | 0) ? d : HEAP32[b + 4 >> 2];
    b = d - e;
    HEAP32[c >> 2] = 0;
    c = d - 1;
    d = _jtga(a, 4, c, 1, 0);
    if (0 == (d | 0)) return 0;
    h = g = d;
    _memcpy(g + HEAP32[h >> 2], f + 28, c << 2) | 0;
    _memcpy(g + HEAP32[h >> 2] + (b << 2), f + 28 + (b + 1 << 2), (e << 2) - 4) | 0;
    e = _jtsetfv(a, f, f);
    if (0 == (e | 0)) return 0;
    f = e + 12;
    e = _jtga(a, HEAP32[f >> 2], 1, 0, 0);
    if (0 == (e | 0)) return 0;
    b = e + HEAP32[e >> 2];
    h = HEAP32[a + 204452 >> 2];
    g = HEAP32[f >> 2];
    _memcpy(b, h, 2 == (g | 0) | 2097152 == (g | 0) | 33554432 == (g | 0) ? 1 : 1 == (g | 0) | 8 == (g | 0) | 16 ==
        (g | 0) ? g : 1024 == (g | 0) | 4096 == (g | 0) | 8192 == (g | 0) | 16384 == (g | 0) | 2048 == (g | 0) | 32768 == (g | 0) ? 16 : 64 == (g | 0) ? 4 : 131072 == (g | 0) ? 2 : 262144 == (g | 0) | 524288 == (g | 0) | 1048576 == (g | 0) ? 44 : 32 == (g | 0) ? 4 : 268435456 == (g | 0) ? 12 : 65536 == (g | 0) ? 4 : 4 == (g | 0) | 67108864 == (g | 0) | 134217728 == (g | 0) | 4194304 == (g | 0) | 8388608 == (g | 0) ? 4 : 16777216 == (g | 0) ? 12 : 536870912 == (g | 0) ? 24 : 128 == (g | 0) ? 8 : -1) | 0;
    return d = _jtreshape(a, d, e)
}
function _jtscm10(a, f) {
    var d, c;
    if (0 == (f | 0)) return 0;
    d = 0 != (HEAP32[f + 12 >> 2] & 131074 | 0);
    c = d & 1;
    return (c | 0) < (HEAP32[f + 24 >> 2] | 0) ? d = _jtrank1ex(a, f, 0, c, 1028) : d = d ? _jtline(a, f, -1, 1, 0) : _jtlinf(a, HEAP32[31134], f, 1, 0)
}
function _jtsignum(a, f) {
    return _jtva1(a, f, 42)
}
function _jtspfree(a) {
    var f, d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u;
    f = 0;
    d = HEAP32[a + 204736 >> 2];
    (HEAP32[a + 204860 >> 2] | 0) > (d | 0) ? c = 0: (b = (d | 0) / 64 & -1, c = 0 > (b | 0) ? 0 : b);
    b = HEAP32[a + 204740 >> 2];
    (HEAP32[a + 204864 >> 2] | 0) > (b | 0) ? e = c: (d = (b | 0) / 128 & -1, e = (c | 0) > (d | 0) ? c : d);
    d = HEAP32[a + 204744 >> 2];
    (HEAP32[a + 204868 >> 2] | 0) > (d | 0) ? g = e: (c = (d | 0) / 256 & -1, g = (e | 0) > (c | 0) ? e : c);
    c = HEAP32[a + 204748 >> 2];
    (HEAP32[a + 204872 >> 2] | 0) > (c | 0) ? h = g: (e = (c | 0) / 512 & -1, h = (g | 0) > (e | 0) ? g : e);
    e = HEAP32[a + 204752 >> 2];
    (HEAP32[a + 204876 >> 2] | 0) > (e | 0) ? j = h: (g = (e | 0) / 1024 & -1, j =
        (h | 0) > (g | 0) ? h : g);
    if (0 != (j | 0) && (g = _jtga(a, 4, j + 1, 1, 0), 0 != (g | 0))) {
        g = j = g + HEAP32[g >> 2];
        for (h = 6;;) {
            e = a + 204836 + (h << 2);
            c = a + 204712 + (h << 2);
            if ((HEAP32[e >> 2] | 0) <= (HEAP32[c >> 2] | 0)) {
                d = a + 204588 + (h << 2);
                b = HEAP32[d >> 2];
                if (0 == (b | 0)) i = 0;
                else {
                    l = 0;
                    for (k = b;;)
                        if (b = l + 1, HEAP32[g + (l << 2) >> 2] = k, m = HEAP32[k >> 2], 0 == (m | 0)) {
                            i = b;
                            break
                        } else l = b, k = m
                }
                _qsort(j, i, 4, 708);
                k = HEAP32[124360 + (h << 2) >> 2];
                l = 65536 / (k | 0) & -1;
                a: do
                    if (0 < (i | 0))
                        for (b = m = 0;;) {
                            for (;;) {
                                p = n = HEAP32[g + (m << 2) >> 2];
                                if (0 == (HEAP8[p + 6] & 1)) break;
                                q = m + l;
                                if ((i | 0) < (q | 0)) break;
                                if (65536 !=
                                    (k - n + HEAP32[g + (q - 1 << 2) >> 2] | 0)) break;
                                _free(n);
                                r = HEAP32[c >> 2] - 65536;
                                HEAP32[c >> 2] = r;
                                if ((i | 0) > (q | 0)) m = q;
                                else {
                                    s = b;
                                    t = r;
                                    break a
                                }
                            }
                            HEAP32[p >> 2] = b;
                            r = n;
                            q = m + 1;
                            if ((i | 0) > (q | 0)) m = q, b = r;
                            else {
                                u = r;
                                f = 24;
                                break
                            }
                        } else u = 0, f = 24;
                while (0);
                24 == f && (f = 0, s = u, t = HEAP32[c >> 2]);
                HEAP32[d >> 2] = s;
                HEAP32[e >> 2] = t + 1048576
            }
            k = h + 1;
            if (11 > (k | 0)) h = k;
            else break
        }
    }
}
function _jtstcreate(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m, n, p, q, r, s, t, u;
    g = e = 0;
    h = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    j = h;
    i = _jtga(a, 8388608, HEAP32[12544 + (d << 2) >> 2], 1, 0);
    if (0 == (i | 0)) return STACKTOP = h, 0;
    d = i;
    m = k = d + HEAP32[i >> 2];
    for (n = a + 205688;;) {
        p = HEAP32[n >> 2];
        q = p + 16;
        r = HEAP32[q >> 2];
        if (0 != (r | 0)) break;
        if (0 == _jtsymext(a, 1) << 24 >> 24) {
            l = 0;
            e = 36;
            break
        }
    }
    if (36 == e) return STACKTOP = h, l;
    l = p + (24 * r & -1) + 16;
    HEAP32[q >> 2] = HEAP32[l >> 2];
    q = HEAP32[m >> 2];
    HEAP32[l >> 2] = q;
    0 != (q | 0) && (q = HEAP32[m >> 2], HEAP32[p + (24 * q & -1) + 20 >> 2] = r, l = p + (24 * q & -1) +
        8, HEAP32[l >> 2] ^= 2);
    HEAP32[p + (24 * r & -1) + 20 >> 2] = k;
    k = p + (24 * r & -1) + 8;
    HEAP32[k >> 2] = 2;
    HEAP32[m >> 2] = r;
    if (0 == (p + (24 * r & -1) | 0)) return STACKTOP = h, 0;
    HEAP32[k >> 2] |= 4;
    k = a + 205680;
    m = HEAP32[k >> 2];
    HEAP32[k >> 2] = m + 1;
    HEAP32[p + (24 * r & -1) + 12 >> 2] = m;
    m = f << 24 >> 24;
    if (1 == (m | 0)) {
        f = a + 205656;
        if (-1 >= (HEAP32[f >> 2] | 0)) return r = HEAP32[a + 4408 >> 2], p = HEAP32[r + (HEAP32[r >> 2] + 120) >> 2], _jtjsigstr(a, 30, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), STACKTOP = h, 0;
        p = j;
        _sprintf(p, 120296, (g = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[g >> 2] = c, g));
        STACKTOP = g;
        g = _jtnfs(a,
            _strlen(p), p);
        if (0 == (g | 0)) return STACKTOP = h, 0;
        p = HEAP32[d + HEAP32[i >> 2] >> 2];
        HEAP32[HEAP32[n >> 2] + (24 * p & -1) >> 2] = g;
        g = HEAP32[30640];
        0 == (g | 0) ? (e = 0, d = p) : (_jttraverse(a, g, 654), p = g + 16, HEAP32[p >> 2] += 1, e = g, d = HEAP32[d + HEAP32[i >> 2] >> 2]);
        HEAP32[HEAP32[n >> 2] + (24 * d & -1) + 4 >> 2] = e;
        e = a + 205672;
        d = HEAP32[e >> 2] + 1;
        HEAP32[e >> 2] = d;
        e = a + 205660;
        g = HEAP32[e >> 2];
        p = HEAP32[g + 20 >> 2];
        do
            if ((p | 0) < (d | 0)) {
                j = _jtext(a, 1, g);
                r = a + 205664;
                k = _jtext(a, 1, HEAP32[r >> 2]);
                if (0 == (j | 0) | 0 == (k | 0)) return l = 0, STACKTOP = h, l;
                HEAP32[e >> 2] = j;
                HEAP32[r >> 2] = k;
                l = HEAP32[j +
                    20 >> 2];
                q = l - p;
                if (0 >= (q | 0)) j = l;
                else {
                    l = j + HEAP32[j >> 2] + (p << 2);
                    j = 0;
                    for (n = k + HEAP32[k >> 2] + (p << 2);;)
                        if (HEAP32[l >> 2] = -1, HEAP32[n >> 2] = 0, k = j + 1, (k | 0) < (q | 0)) l += 4, j = k, n += 4;
                        else break;
                    j = HEAP32[HEAP32[e >> 2] + 20 >> 2]
                }
                k = r
            } else j = p, k = a + 205664;
        while (0);
        p = HEAP32[k >> 2];
        k = p + HEAP32[p >> 2];
        a: do
            if (0 < (j | 0)) {
                for (p = 0;;) {
                    s = k + (p << 2);
                    g = p + 1;
                    if (0 == (HEAP32[s >> 2] | 0)) break;
                    if ((g | 0) < (j | 0)) p = g;
                    else break a
                }
                _jttraverse(a, i, 654);
                r = i + 16;
                HEAP32[r >> 2] += 1;
                HEAP32[s >> 2] = i;
                r = HEAP32[e >> 2];
                HEAP32[r + HEAP32[r >> 2] + (p << 2) >> 2] = c
            }
        while (0);
        2147483647 == (c |
            0) ? c = -1 : (e = HEAP32[f >> 2], s = c + 1, c = (e | 0) > (s | 0) ? e : s);
        HEAP32[f >> 2] = c
    } else if (0 == (m | 0)) {
        m = _jtnfs(a, c, b);
        if (0 == (m | 0)) return STACKTOP = h, 0;
        HEAP32[HEAP32[n >> 2] + (24 * HEAP32[d + HEAP32[i >> 2] >> 2] & -1) >> 2] = m;
        1 == (c | 0) ? 122 != (HEAP8[b] | 0) ? e = 14 : (c = _jtma(a, 32), 0 == (c | 0) ? t = 0 : (_memset(c, 0, 32) | 0, HEAP32[c + 16 >> 2] = 1, HEAP32[c + 20 >> 2] = 0, HEAP32[c + 24 >> 2] = 1, HEAP32[c + 4 >> 2] = 0, HEAP32[c >> 2] = 32, HEAP32[c + 8 >> 2] = HEAP32[124360 + (HEAP16[c - 32 + 28 >> 1] << 2) >> 2] - 40, f = c + 12, HEAP32[f >> 2] = 0, _jttpush(a, c), HEAP32[f >> 2] = 32, HEAP32[c + 28 >> 2] = 0, u = c, e = 15)) : e = 14;
        14 == e && (b = HEAP32[30640], 0 == (b | 0) ? t = 0 : (u = b, e = 15));
        15 == e && (_jttraverse(a, u, 654), e = u + 16, HEAP32[e >> 2] += 1, t = u);
        HEAP32[HEAP32[n >> 2] + (24 * HEAP32[d + HEAP32[i >> 2] >> 2] & -1) + 4 >> 2] = t;
        _jtsymbis(a, m, i, HEAP32[a + 205652 >> 2])
    }
    STACKTOP = h;
    return i
}
function _jtstdnm(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    if (2 <= (HEAP32[f + 24 >> 2] | 0)) return b = HEAP32[a + 4408 >> 2], e = HEAP32[b + (HEAP32[b >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = d, 0;
    0 == (HEAP32[f + 12 >> 2] & 2 | 0) ? (e = a + 205336, b = HEAP32[e >> 2], HEAP32[e >> 2] = 0, g = _jtccvt(a, 2, f, c), HEAP32[e >> 2] = b, 0 == g << 24 >> 24 ? (g = HEAP32[a + 4408 >> 2], b = HEAP32[g + (HEAP32[g >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), h = 0) : h = HEAP32[c >> 2]) :
        h = f;
    if (0 == (h | 0)) return STACKTOP = d, 0;
    f = HEAP32[h + 20 >> 2];
    c = h;
    b = HEAP32[h >> 2];
    if (0 == (f | 0)) return STACKTOP = d, 0;
    if (0 < (f | 0)) {
        for (h = 0;;)
            if (j = h + 1, 32 == (HEAP8[c + (h + b)] | 0) & (j | 0) < (f | 0)) h = j;
            else break;
        g = f - 1;
        for (e = 0;;)
            if (i = g - 1, e += 1, 32 == (HEAP8[c + (g + b)] | 0) & (e | 0) < (f | 0)) g = i;
            else {
                l = i;
                k = j;
                m = h;
                break
            }
    } else l = f - 1, k = 0, m = -1;
    f = 1 - k + 2 + l;
    l = c + (m + b);
    if (0 == _jtvnm(a, f, l) << 24 >> 24) return STACKTOP = d, 0;
    c = _jtnfs(a, f, l);
    STACKTOP = d;
    return c
}
function _jtstfind(a, f, d, c) {
    var b, e;
    e = (b = 0 == (d | 0)) ? 121248 : c;
    c = b ? 4 : d;
    if (58 <= (HEAP8[e] | 0)) return d = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2], b = _jtnfs(a, c, e), b = _jtprobe(a, b, HEAP32[a + 205652 >> 2]), _jttpop(a, d), 0 != (b | 0) ? a = HEAP32[b + 4 >> 2] : 0 == f << 24 >> 24 ? 0 : a = _jtstcreate(a, 0, HEAP32[a + 204568 >> 2], c, e);
    c = _strtol(e, 0, 10);
    e = a + 205660;
    b = HEAP32[e >> 2];
    d = _jtga(a, 4, 1, 0, 0);
    0 == (d | 0) ? d = 0 : HEAP32[d + HEAP32[d >> 2] >> 2] = c;
    d = _jtindexofsub(a, 0, b, d);
    if (0 == (d | 0)) return 0;
    d = HEAP32[d + HEAP32[d >> 2] >> 2];
    if ((d | 0) < (HEAP32[HEAP32[e >> 2] + 20 >> 2] |
            0)) return e = HEAP32[a + 205664 >> 2], a = HEAP32[e + HEAP32[e >> 2] + (d << 2) >> 2];
    if (0 == f << 24 >> 24) return 0;
    (HEAP32[a + 205656 >> 2] | 0) > (c | 0) ? (f = HEAP32[a + 4408 >> 2], d = HEAP32[f + (HEAP32[f >> 2] + 120) >> 2], _jtjsigstr(a, 30, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), a = 0) : a = _jtstcreate(a, 1, HEAP32[a + 204572 >> 2], c, 0);
    return a
}
function _jtswap(a, f) {
    var d, c, b, e, g, h;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    b = HEAP32[f + 12 >> 2];
    if (0 != (b & 262144 | 0)) {
        b = f;
        e = HEAP32[f >> 2];
        c = HEAP32[e + (b + 32) >> 2];
        g = HEAP32[e + (b + 28) >> 2];
        if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = d, 0;
        b = _jtga(a, 262144, 1, 0, 0);
        if (0 == (b | 0)) return STACKTOP = d, 0;
        e = b;
        h = HEAP32[b >> 2];
        HEAP32[e + h >> 2] = 1808;
        HEAP32[h + (e + 4) >> 2] = 1810;
        HEAP32[h + (e + 8) >> 2] = f;
        HEAP32[h + (e + 12) >> 2] = 0;
        HEAP32[h + (e + 16) >> 2] = 0;
        HEAP32[h + (e + 20) >> 2] = 0;
        HEAP32[h + (e + 24) >> 2] = 2147483647;
        HEAP32[h + (e +
            28) >> 2] = c;
        HEAP32[h + (e + 32) >> 2] = g;
        HEAP32[h + (e + 36) >> 2] = 0;
        HEAP8[h + (e + 40)] = 126;
        STACKTOP = d;
        return b
    }
    if (0 == (b & 131072 | 0))
        if (0 != (b & 2 | 0)) b = f;
        else return b = HEAP32[a + 4408 >> 2], e = HEAP32[b + (HEAP32[b >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = d, 0;
    else {
        e = a + 205336;
        b = HEAP32[e >> 2];
        HEAP32[e >> 2] = 0;
        h = _jtccvt(a, 2, f, c);
        HEAP32[e >> 2] = b;
        if (0 == h << 24 >> 24) return h = HEAP32[a + 4408 >> 2], b = HEAP32[h + (HEAP32[h >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), STACKTOP = d, 0;
        b = HEAP32[c >> 2];
        if (0 == (b | 0)) return STACKTOP =
            d, 0
    }
    if (2 <= (HEAP32[b + 24 >> 2] | 0)) return c = HEAP32[a + 4408 >> 2], f = HEAP32[c + (HEAP32[c >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), STACKTOP = d, 0;
    f = HEAP32[b + 20 >> 2];
    c = b + HEAP32[b >> 2];
    if (0 == _jtvnm(a, f, c) << 24 >> 24) return b = HEAP32[a + 4408 >> 2], b = HEAP32[b + (HEAP32[b >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), STACKTOP = d, 0;
    b = _jtnfs(a, f, c);
    if (0 == (b | 0)) return STACKTOP = d, 0;
    b = _jtnameref(a, b);
    STACKTOP = d;
    return b
}
function _jtsymbis(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E;
    b = 0;
    if (0 == (f | 0) | 0 == (d | 0) | 0 == (c | 0)) return 0;
    g = HEAP32[f + 20 >> 2];
    j = h = f;
    i = HEAP32[j >> 2];
    l = HEAP8[i + (h + 12)];
    k = l & 255;
    do
        if ((g | 0) == (k | 0))
            if (m = HEAP32[a + 204564 >> 2], 0 == (m | 0)) n = c, p = i;
            else if ((HEAP32[a + 204520 >> 2] | 0) != (c | 0)) n = c, p = i;
    else if (q = i + (h + 14), r = (HEAP32[h + i >> 2] >>> 0) % (HEAP32[m + 20 >> 2] >>> 0) & -1, s = HEAP32[m + HEAP32[m >> 2] + ((0 != (r | 0) ? r : 1) << 2) >> 2], 0 == (s | 0)) HEAP32[a + 1172 >> 2] = 0, n = c, p = i;
    else {
        r = HEAP32[a + 205688 >> 2];
        m = 0 == (g | 0);
        t = s;
        a: for (;;) {
            u =
                r + (24 * t & -1);
            w = s = HEAP32[u >> 2];
            v = HEAP32[s >> 2];
            b: do
                if (l << 24 >> 24 == (HEAP8[v + (w + 12)] | 0)) {
                    if (m) break a;
                    s = g;
                    p = q;
                    for (x = v + (w + 14);;) {
                        if ((HEAP8[p] | 0) != (HEAP8[x] | 0)) break b;
                        s -= 1;
                        if (0 == (s | 0)) break a;
                        else p += 1, x += 1
                    }
                }
            while (0);
            w = HEAP32[r + (24 * t & -1) + 16 >> 2];
            if (0 == (w | 0)) {
                b = 14;
                break
            } else t = w
        }
        if (14 == b) HEAP32[a + 1172 >> 2] = 0, n = c, p = i;
        else if (HEAP32[a + 1172 >> 2] = u, 0 == (u | 0)) n = c, p = i;
        else return t = HEAP32[a + 4408 >> 2], r = HEAP32[t + (HEAP32[t >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), e = 0
    } else {
        r = k + i;
        t = g - k - 2;
        s = 0 == (HEAP8[i +
            (h + 13)] & 2) ? _jtstfind(a, 1, t, r + (h + 15)) : _jtlocindirect(a, t, r + (h + 16));
        if (0 == (s | 0)) return e = 0;
        n = s;
        p = HEAP32[j >> 2]
    }
    while (0);
    j = HEAP8[p + (h + 12)];
    s = j & 255;
    i = p + (h + 14);
    c = (HEAP32[h + p >> 2] >>> 0) % (HEAP32[n + 20 >> 2] >>> 0) & -1;
    p = n + HEAP32[n >> 2] + ((0 != (c | 0) ? c : 1) << 2);
    c = HEAP32[p >> 2];
    h = a + 205688;
    a: do
        if (0 == (c | 0)) b = 30;
        else {
            u = HEAP32[h >> 2];
            l = 0 == j << 24 >> 24;
            r = c;
            b: for (;;) {
                y = u + (24 * r & -1);
                q = t = HEAP32[y >> 2];
                m = HEAP32[t >> 2];
                c: do
                    if (j << 24 >> 24 == (HEAP8[m + (q + 12)] | 0)) {
                        if (l) break b;
                        t = s;
                        w = i;
                        for (v = m + (q + 14);;) {
                            if ((HEAP8[w] | 0) != (HEAP8[v] | 0)) break c;
                            x =
                                t - 1;
                            if (0 == (x | 0)) break b;
                            else t = x, w += 1, v += 1
                        }
                    }
                while (0);
                q = HEAP32[u + (24 * r & -1) + 16 >> 2];
                if (0 == (q | 0)) {
                    b = 30;
                    break a
                } else r = q
            }
            HEAP32[a + 1172 >> 2] = y;
            if (0 == (y | 0)) return e = 0;
            z = y
        }
    while (0);
    do
        if (30 == b) {
            for (;;) {
                b = 0;
                A = HEAP32[h >> 2];
                D = A + 16;
                B = HEAP32[D >> 2];
                if (0 != (B | 0)) break;
                if (0 == _jtsymext(a, 1) << 24 >> 24) {
                    e = 0;
                    b = 109;
                    break
                } else b = 30
            }
            if (109 == b) return e;
            y = A + (24 * B & -1) + 16;
            HEAP32[D >> 2] = HEAP32[y >> 2];
            i = A + (24 * B & -1);
            s = HEAP32[p >> 2];
            HEAP32[y >> 2] = s;
            0 != (s | 0) && (s = HEAP32[p >> 2], HEAP32[A + (24 * s & -1) + 20 >> 2] = B, y = A + (24 * s & -1) + 8, HEAP32[y >> 2] ^= 2);
            HEAP32[A + (24 * B & -1) + 20 >> 2] = p;
            HEAP32[A + (24 * B & -1) + 8 >> 2] = 2;
            HEAP32[p >> 2] = B;
            if (0 == (i | 0)) return e = 0;
            _jttraverse(a, f, 654);
            y = f + 16;
            HEAP32[y >> 2] += 1;
            HEAP32[i >> 2] = f;
            z = HEAP32[a + 1172 >> 2] = i
        }
    while (0);
    if (0 != (HEAP32[a + 1176 >> 2] | 0) && 0 == _jtredef(a, d, z) << 24 >> 24) return 0;
    f = d + 12;
    B = HEAP32[f >> 2];
    0 != (B & 1835008 | 0) && (p = d, A = HEAP32[d >> 2], 0 != (HEAP32[A + (p + 8) >> 2] | 0) && (58 == (HEAP8[A + (p + 40)] | 0) && (D = A + (p + 20), HEAP32[D >> 2] |= 131072), 0 != (HEAP32[a + 204524 >> 2] | 0) && (D = A + (p + 20), HEAP32[D >> 2] |= 65536)));
    D = z + 4;
    p = HEAP32[D >> 2];
    A = 0 == (p | 0);
    a: do
        if (A) b =
            49;
        else {
            h = HEAP32[p + 4 >> 2];
            if (0 != (h & 1 | 0)) return i = HEAP32[a + 4408 >> 2], y = HEAP32[i + (HEAP32[i >> 2] + 124) >> 2], _jtjsigstr(a, 31, HEAP32[y + 20 >> 2], y + HEAP32[y >> 2]), e = 0;
            if (0 == (h & 2 | 0)) b = 49;
            else if ((p | 0) == (d | 0)) G = k;
            else {
                h = HEAP32[d + 20 >> 2];
                y = HEAP32[d + 24 >> 2];
                if (0 == (B & 32 | 0)) {
                    1 == (B | 0) | 8 == (B | 0) | 16 == (B | 0) ? (C = B, b = 98) : 1024 == (B | 0) | 4096 == (B | 0) | 8192 == (B | 0) | 16384 == (B | 0) | 2048 == (B | 0) | 32768 == (B | 0) ? (C = 16, b = 98) : 262144 == (B | 0) | 524288 == (B | 0) | 1048576 == (B | 0) ? (C = 44, b = 98) : 2 == (B | 0) | 2097152 == (B | 0) | 33554432 == (B | 0) ? (C = 1, b = 98) : 4 == (B | 0) | 67108864 ==
                        (B | 0) | 134217728 == (B | 0) | 4194304 == (B | 0) | 8388608 == (B | 0) ? (C = 4, b = 98) : 131072 == (B | 0) | 32 == (B | 0) | 64 == (B | 0) | 128 == (B | 0) | 16777216 == (B | 0) | 65536 == (B | 0) | 268435456 == (B | 0) | 536870912 == (B | 0) || (C = -1, b = 98);
                    do
                        if (98 == b && (i = Math_imul(C, h) | 0, 0 != (B & 31 | 0))) {
                            if ((HEAP32[p + 8 >> 2] | 0) >= (i | 0)) {
                                HEAP32[p + 12 >> 2] = B;
                                HEAP32[p + 20 >> 2] = h;
                                HEAP32[p + 24 >> 2] = y;
                                _memcpy(p + 28, d + 28, y << 2) | 0;
                                _memcpy(p + HEAP32[p >> 2], d + HEAP32[d >> 2], i) | 0;
                                G = i;
                                break a
                            }
                            i = HEAP32[a + 4408 >> 2];
                            s = HEAP32[i + (HEAP32[i >> 2] + 128) >> 2];
                            _jtjsigstr(a, 32, HEAP32[s + 20 >> 2], s + HEAP32[s >> 2]);
                            return e =
                                0
                        }
                    while (0);
                    s = HEAP32[a + 4408 >> 2];
                    i = HEAP32[s + (HEAP32[s >> 2] + 12) >> 2];
                    _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
                    return e = 0
                }
                if (0 == _jtsmmin(p, d) << 24 >> 24) e = d;
                else {
                    i = _jtcpa(a, 1, d);
                    if (0 == (i | 0)) return e = 0;
                    e = i
                }
                i = p;
                HEAP32[i >> 2] = 284;
                s = e + 12;
                j = p + 12;
                HEAP32[j >> 2] = HEAP32[s >> 2];
                c = p + 20;
                HEAP32[c >> 2] = h;
                r = p + 24;
                HEAP32[r >> 2] = y;
                u = ((HEAP32[p + 8 >> 2] | 0) / 8 & -1) << 3;
                l = -408 - (h << 2) + u - (((h + 102 | 0) % 2 & -1) << 2);
                if (0 >= (l | 0)) return q = HEAP32[a + 4408 >> 2], m = HEAP32[q + (HEAP32[q >> 2] + 128) >> 2], _jtjsigstr(a, 32, HEAP32[m + 20 >> 2], m + HEAP32[m >> 2]), HEAP32[j >>
                    2] = 2, HEAP32[c >> 2] = 0, HEAP32[r >> 2] = 1, e = HEAP32[p + 28 >> 2] = 0;
                m = p;
                u = q = m - 124 + u;
                _memset(q, 0, 124) | 0;
                q = l >> 6;
                if (0 != (q | 0)) {
                    l = 64;
                    v = 6;
                    w = q;
                    for (q = m + 288 + (HEAP32[c >> 2] << 2) & -8; !(0 != (w & 1 | 0) && (HEAP16[q + 4 >> 1] = (v & 255) << 24 >> 24, HEAP32[q >> 2] = 0, HEAP32[u + (v << 2) >> 2] = q - m, q += l), t = w >> 1, 0 == (t | 0));) l <<= 1, v += 1, w = t
                }
                q = p + HEAP32[i >> 2];
                w = e + HEAP32[e >> 2];
                i = 0 == (HEAP32[s >> 2] & 32 | 0) ? 0 : 0 != (HEAP32[e + 4 >> 2] & 14 | 0) | 0;
                v = e & -i;
                b: do
                    if (0 < (h | 0)) {
                        c: do
                            if (0 == (v | 0))
                                for (l = 0;;) {
                                    u = _jtsmmcar(a, p, HEAP32[w + (l << 2) >> 2]);
                                    if (0 == (u | 0)) break c;
                                    HEAP32[q + (l << 2) >> 2] = u - m;
                                    u = l + 1;
                                    if ((u | 0) < (h | 0)) l = u;
                                    else break b
                                } else
                                    for (l = 0;;) {
                                        u = _jtsmmcar(a, p, HEAP32[w + (l << 2) >> 2] + v);
                                        if (0 == (u | 0)) break c;
                                        HEAP32[q + (l << 2) >> 2] = u - m;
                                        u = l + 1;
                                        if ((u | 0) < (h | 0)) l = u;
                                        else break b
                                    }
                            while (0);HEAP32[j >> 2] = 2;HEAP32[c >> 2] = 0;HEAP32[r >> 2] = 1;
                        return e = HEAP32[p + 28 >> 2] = 0
                    }
                while (0);
                _memcpy(p + 28, e + 28, y << 2) | 0;
                return e = p
            }
        }
    while (0);
    if (49 == b) {
        e = HEAP32[d + 4 >> 2];
        0 == (e & 2 | 0) ? 0 == (HEAP32[f >> 2] & 32 | 0) ? (F = 0 == (e & 4 | 0) ? d : _jtca(a, d), b = 55) : 0 == _leafrel(d) << 24 >> 24 ? E = d : (F = _jtcpa(a, 0, d), b = 55) : (F = d, b = 55);
        if (55 == b) {
            if (0 == (F | 0)) return 0;
            E = F
        }
        _jttraverse(a,
            E, 654);
        F = E + 16;
        HEAP32[F >> 2] += 1;
        if (0 == (E | 0)) return 0;
        F = HEAP32[a + 205256 >> 2];
        b = HEAP32[a + 205260 >> 2];
        a: do
            if (0 < (b | 0)) {
                d = 0;
                for (e = HEAP32[a + 205248 >> 2];
                    (HEAP32[e >> 2] | 0) != (p | 0);)
                    if (f = d + 1, (f | 0) < (b | 0)) d = f, e += 4;
                    else break a;
                e = F + d;
                0 != (HEAP8[e] | 0) && (A || (_jttraverse(a, p, 654), y = p + 16, HEAP32[y >> 2] += 1), HEAP8[e] = 0)
            }
        while (0);
        A || (_jttraverse(a, p, 1910), F = p + 16, b = HEAP32[F >> 2] - 1, HEAP32[F >> 2] = b, 0 == (b | 0) && (b = p - 32 + 24, F = HEAP16[b + 4 >> 1], e = F << 16 >> 16, y = HEAP32[124360 + (e << 2) >> 2], f = a + 1056, HEAP32[f >> 2] -= y, 10 < F << 16 >> 16 ? _free(b) : (F = a + 204588 +
            (e << 2), HEAP32[b >> 2] = HEAP32[F >> 2], HEAP32[F >> 2] = b, b = a + 204712 + (e << 2), HEAP32[b >> 2] += y)));
        HEAP32[D >> 2] = E;
        G = k
    }
    HEAP32[z + 12 >> 2] = HEAP32[a + 205608 >> 2];
    do
        if (0 != (HEAP8[a + 205648] | 0)) {
            if ((G | 0) >= (g | 0)) {
                if ((HEAP32[a + 204564 >> 2] | 0) == (n | 0)) break;
                if ((HEAP32[a + 205652 >> 2] | 0) == (n | 0)) break
            }
            k = z + 8;
            HEAP32[k >> 2] |= 1
        }
    while (0);
    return e = HEAP32[31134]
}
function _jtsymext(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    (b = 0 != f << 24 >> 24) ? (f = HEAP32[a + 205684 >> 2], e = HEAP32[f + 20 >> 2], g = f, h = (HEAP16[f - 32 + 28 >> 1] | 0) + 1, j = HEAP32[f + 28 >> 2]) : (g = e = 0, h = 13, j = 1);
    f = (HEAP32[124360 + (h << 2) >> 2] - 44 | 0) / 24 & -1;
    h = c;
    HEAP32[h >> 2] = f;
    HEAP32[c + 4 >> 2] = 6;
    c = 6 * f & -1;
    h = i = _jtga(a, 4, c, 2, h);
    if (0 == (i | 0)) return STACKTOP = d, 0;
    l = i;
    k = HEAP32[l >> 2];
    m = h + k;
    b && _memcpy(m, g + HEAP32[g >> 2], e << 2) | 0;
    _memset(m + (e << 2), 0, c - e << 2) | 0;
    e = m + (24 * j & -1);
    m = f + ~j;
    if (0 < (m | 0)) {
        c = h + (k + (24 * f & -1) - 24);
        f = e;
        e =
            0;
        for (n = j;;)
            if (n += 1, HEAP32[f + 16 >> 2] = n, e += 1, (e | 0) < (m | 0)) f += 24;
            else break
    } else c = e;
    e = a + 205688;
    b ? (HEAP32[c + 16 >> 2] = HEAP32[HEAP32[e >> 2] + 16 >> 2], b = 1) : b = 0;
    HEAP32[k + (h + 16) >> 2] = j;
    _jttraverse(a, i, 654);
    j = i + 16;
    HEAP32[j >> 2] += 1;
    HEAP32[a + 205684 >> 2] = i;
    HEAP32[e >> 2] = h + HEAP32[l >> 2];
    if (b ^ 1 | 0 == (g | 0)) return STACKTOP = d, 1;
    _jttraverse(a, g, 1910);
    b = g + 16;
    l = HEAP32[b >> 2] - 1;
    HEAP32[b >> 2] = l;
    if (0 != (l | 0)) return STACKTOP = d, 1;
    l = g - 32 + 24;
    g = HEAP16[l + 4 >> 1];
    b = g << 16 >> 16;
    h = HEAP32[124360 + (b << 2) >> 2];
    e = a + 1056;
    HEAP32[e >> 2] -= h;
    10 < g << 16 >> 16 ? _free(l) :
        (g = a + 204588 + (b << 2), HEAP32[l >> 2] = HEAP32[g >> 2], HEAP32[g >> 2] = l, l = a + 204712 + (b << 2), HEAP32[l >> 2] += h);
    STACKTOP = d;
    return 1
}
function _jtsymfreeh(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    c = 0;
    e = b = f;
    g = b + HEAP32[e >> 2];
    h = HEAP32[g >> 2];
    if (0 == (h | 0)) return j = HEAP32[a + 4408 >> 2], i = HEAP32[j + (HEAP32[j >> 2] + 80) >> 2], _jtjsigstr(a, 20, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), _jtwri(a, 4, 161016, 8, 121224), 0;
    i = a + 205688;
    _jtsymfree(a, HEAP32[i >> 2] + (24 * h & -1));
    h = f + 20;
    j = HEAP32[h >> 2];
    k = b + (HEAP32[e >> 2] + 4);
    e = HEAP32[k >> 2];
    b = _jtga(a, 1, 100, 1, 0);
    if (0 == (b | 0)) return 0;
    do
        if (1 < (j | 0)) {
            m = 1;
            n = k;
            p = e;
            q = 0;
            r = b;
            a: for (;;) {
                s = r;
                t = q;
                q = p;
                b: for (;;) {
                    for (p = q;;) {
                        if (0 == (p | 0)) break b;
                        u = HEAP32[i >> 2];
                        w = u + (24 * p & -1);
                        u = HEAP32[u + (24 * p & -1) + 16 >> 2];
                        if (0 == (HEAP32[w >> 2] | 0)) p = u;
                        else break
                    }
                    if ((t | 0) == (HEAP32[s + 28 >> 2] | 0))
                        if (p = _jtext(a, 0, s), 0 == (p | 0)) {
                            l = 0;
                            c = 22;
                            break a
                        } else s = p;
                    _jtsymfree(a, w);
                    t += 1;
                    q = u
                }
                q = m + 1;
                p = n + 4;
                if ((q | 0) < (j | 0)) m = q, n = p, p = HEAP32[p >> 2], q = t, r = s;
                else break
            }
            if (22 == c) return l;
            HEAP32[s + 20 >> 2] = t;
            HEAP32[s + 28 >> 2] = t;
            if (0 == (s | 0)) return l = 0
        } else HEAP32[b + 20 >> 2] = 0, HEAP32[b + 28 >> 2] = 0;
    while (0);
    _memset(g, 0, HEAP32[h >> 2] << 2) | 0;
    0 != (f | 0) && (_jttraverse(a, f, 1910), h = f + 16, g = HEAP32[h >> 2] - 1, HEAP32[h >> 2] =
        g, 0 == (g | 0) && (g = f - 32 + 24, h = HEAP16[g + 4 >> 1], b = h << 16 >> 16, s = HEAP32[124360 + (b << 2) >> 2], t = a + 1056, HEAP32[t >> 2] -= s, 10 < h << 16 >> 16 ? _free(g) : (h = a + 204588 + (b << 2), HEAP32[g >> 2] = HEAP32[h >> 2], HEAP32[h >> 2] = g, g = a + 204712 + (b << 2), HEAP32[g >> 2] += s)));
    if (0 == (d | 0)) return 1;
    HEAP32[d + 4 >> 2] = 0;
    _jtsymfree(a, d);
    return 1
}
function _jtsyrd(a, f, d) {
    var c, b, e, g, h;
    if (0 == (f | 0)) return 0;
    c = HEAP32[a + 204520 >> 2];
    b = HEAP32[f + 20 >> 2];
    e = HEAP32[f >> 2];
    g = HEAPU8[e + (f + 12)];
    if ((b | 0) > (g | 0)) {
        if (c = b - g - 2, h = g + e, e = 0 == (HEAP8[e + (f + 13)] & 2) ? _jtstfind(a, 1, c, h + (f + 15)) : _jtlocindirect(a, c, h + (f + 16)), 0 == (e | 0)) return 0
    } else e = c;
    0 != (d | 0) && (HEAP32[d >> 2] = e);
    return a = _jtsyrd1(a, f, e, (b | 0) == (g | 0) | 0)
}
function _jtthorn1(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs, ss,
        cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu, Qr,
        iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz, HC,
        ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG, PC, HB, UD, jC, rD, ZA, ZF, kC, MG, IL, lC, NG, sD, $F, dI, jF, OG, eI, tD, uD, VD, CE, WD,
        mC, IB, kF, JB, xH, DE, vD, XD, zy, KB, BA, lF, mF, nC, $A, wJ, aG, JI, EE, nF, aB, yH, wD, bG, cG, YD, FE, oC, pC, dG, ZD, zH, PG, fI, QG, eG, gI, nz, xD, xJ, KI, LI, AH, fG, oF, BH, pF, yJ, RG, CA, GE, QC, zJ, qC, $D, oy, MI, rC, bB, sB, gG, NI, qF, sC, LB, rF, CH, yD, hG, sF, cB, py, tB, Ow, SG, hI, TG, OI, MB, aE, tF, UG, NB, PI, QI, zD, bE, Uy, uF, tC, cK, cE, dE, RC, iI, DA, EA, dB, AD, uC, AJ, dK, iG, SC, HE, jG, vF, BD, fx, DH, IE, kG, TC, VG, JE, lG, WG, JL, CD, Ay, XG, wF, eE, mG, xF, KE, eA, vC, yF, LE, UC, RI, eB, OK, nG, DD, wC, FA, OB, PB, QB, fB, zF, oG, fE, YG, RB, GA, ME, ED, jI, ZG, NE, gE, xC, SB, PK, EH, OE, PE, pG, AF, BF, yC, FH, $G, hE,
        aH, QE, RE, bH, SI, eK, SE, CF, GH, FD, zC, Fz, HA, oz, fK, TB, qG, iE, HH, fA, UB, IH, cH, jE, DF, VB, VC, TE, kE, EF, gA, hA, uB, UE, WC, gB, BJ, IA, FF, XC, rG, GD, sG, vB, WB, lE, XB, dH, GF, gK, eH, JH, mE, VE, WE, TI, kI, lI, KH, By, gx, ux, HF, fH, mI, tG, YC, ZC, hK, nE, JA, LH, YB, hx, uG, oE, $C, IF, UI, AC, MH, XE, QK, wB, gH, hB, YE, JF, ZB, aD, KF, VI, iA, bD, iB, jB, KA, LF;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    if (0 == (f | 0)) return e = 0, STACKTOP = c, e;
    g = HEAP32[f + 20 >> 2];
    h = 0 == (g | 0);
    a: do
        if (h) {
            j = f + 24;
            i = HEAP32[j >> 2];
            l = f + 28;
            k = _jtga(a, 2, 0, i, l);
            if (m =
                0 == (k | 0)) return e = 0, STACKTOP = c, e;
            n = k;
            d = 312
        } else {
            p = f + 12;
            q = HEAP32[p >> 2];
            b: do
                if (32 == (q | 0)) {
                    r = _jtevery(a, f, 0, 1726);
                    s = 0 == (r | 0);
                    c: do
                        if (s) u = t = 0;
                        else
                    if (w = r + 24, v = HEAP32[w >> 2], y = x = r, z = HEAP32[y >> 2], D = A = x + z, (B = 1 < (v | 0)) ? (G = v - 2, C = r + 28 + (G << 2), E = F = HEAP32[C >> 2]) : E = 1, J = E + 1, L = _jtga(a, 4, J, 1, 0), I = 0 == (L | 0)) u = t = 0;
                    else {
                        K = H = L;
                        N = HEAP32[K >> 2];
                        if (S = -1 < (E | 0)) {
                            Q = V = T = H + N;
                            for (P = 0;;)
                                if (M = Q + 4, HEAP32[Q >> 2] = 0, R = P + 1, O = (R | 0) < (J | 0)) Q = M, P = R;
                                else break;
                            Z = aa = HEAP32[K >> 2]
                        } else Z = N;
                        ba = $ = H + Z;
                        (ka = 0 == (v | 0)) ? ea = 1: (ha = v - 1, da = r + 28 + (ha << 2), ea =
                            ga = HEAP32[da >> 2]);
                        U = ea + 1;
                        ca = _jtga(a, 4, U, 1, 0);
                        if (X = 0 == (ca | 0)) t = 0;
                        else {
                            ja = Y = ca;
                            fa = HEAP32[ja >> 2];
                            if (ia = -1 < (ea | 0)) {
                                ta = sa = ra = Y + fa;
                                for (wa = 0;;)
                                    if (za = ta + 4, HEAP32[ta >> 2] = 0, Ba = wa + 1, ua = (Ba | 0) < (U | 0)) ta = za, wa = Ba;
                                    else break;
                                xa = ya = HEAP32[ja >> 2]
                            } else xa = fa;
                            pa = oa = Y + xa;
                            la = r + 20;
                            qa = HEAP32[la >> 2];
                            if (Da = 0 < (qa | 0)) {
                                Aa = 0;
                                for (Ea = D;;)
                                    if (Sa = Ea + 4, Oa = HEAP32[Ea >> 2], Ha = Oa + 28, Ga = (Aa | 0) / (ea | 0) & -1, Ma = (Ga | 0) % (E | 0) & -1, Ia = (Aa | 0) % (ea | 0) & -1, db = ba + (Ma << 2), W = HEAP32[db >> 2], Xa = HEAP32[Ha >> 2], fb = (Ta = (W | 0) > (Xa | 0)) ? W : Xa, HEAP32[db >> 2] = fb, mb = pa +
                                        (Ia << 2), ma = HEAP32[mb >> 2], ab = Oa + 32, Na = HEAP32[ab >> 2], Ua = ($a = (ma | 0) > (Na | 0)) ? ma : Na, HEAP32[mb >> 2] = Ua, Pa = Aa + 1, bb = (Pa | 0) < (qa | 0)) Aa = Pa, Ea = Sa;
                                    else break
                            }
                            La = 0 < (E | 0);
                            d: do
                                if (La) {
                                    for (Ja = 0;;) {
                                        Qa = ba + (Ja << 2);
                                        Ya = HEAP32[Qa >> 2];
                                        if (lb = 2147483647 == (Ya | 0)) break;
                                        Ca = Ya + 1;
                                        HEAP32[Qa >> 2] = Ca;
                                        gb = Ja + 1;
                                        if (Fa = (gb | 0) < (E | 0)) Ja = gb;
                                        else break d
                                    }
                                    Za = a + 4408;
                                    ub = ib = qb = HEAP32[Za >> 2];
                                    eb = HEAP32[ub >> 2];
                                    rb = eb + 40;
                                    Ka = wb = ib + rb;
                                    Va = HEAP32[Ka >> 2];
                                    nb = Va + 20;
                                    ob = HEAP32[nb >> 2];
                                    Wa = cb = Va;
                                    yb = HEAP32[Wa >> 2];
                                    Cb = cb + yb;
                                    _jtjsigstr(a, 10, ob, Cb);
                                    t = ca;
                                    u = L;
                                    break c
                                }
                            while (0);
                            if (Pb = 0 < (ea | 0)) {
                                for (zb = 0;;) {
                                    Zb = pa + (zb << 2);
                                    ac = HEAP32[Zb >> 2];
                                    if (Hb = 2147483647 == (ac | 0)) break;
                                    Ib = ac + 1;
                                    HEAP32[Zb >> 2] = Ib;
                                    Qb = zb + 1;
                                    if (Rb = (Qb | 0) < (ea | 0)) zb = Qb;
                                    else {
                                        t = ca;
                                        u = L;
                                        break c
                                    }
                                }
                                Ob = a + 4408;
                                dc = xb = Bb = HEAP32[Ob >> 2];
                                tb = HEAP32[dc >> 2];
                                oc = tb + 40;
                                Tb = Mb = xb + oc;
                                Ra = HEAP32[Tb >> 2];
                                Nb = Ra + 20;
                                sb = HEAP32[Nb >> 2];
                                Eb = Ab = Ra;
                                Lb = HEAP32[Eb >> 2];
                                vb = Ab + Lb;
                                _jtjsigstr(a, 10, sb, vb)
                            }
                            t = ca
                        }
                        u = L
                    }
                    while (0);
                    wc = a + 204545;
                    Ec = HEAP8[wc];
                    yc = 0 == Ec << 24 >> 24;
                    if (!yc) {
                        Db = 0;
                        break a
                    }
                    bc = r + 20;
                    pb = HEAP32[bc >> 2];
                    Fb = r + 24;
                    jb = HEAP32[Fb >> 2];
                    ic = (gc = 2 > (jb | 0)) ? 2 : jb;
                    vc = u +
                        20;
                    hc = HEAP32[vc >> 2];
                    uc = hc - 1;
                    xc = Ac = u;
                    cd = HEAP32[xc >> 2];
                    Tc = jc = Ac + cd;
                    Fc = 0 < (uc | 0);
                    c: do
                        if (Fc) {
                            Bc = 0;
                            for (ec = 1;;) {
                                Xb = Tc + (Bc << 2);
                                sc = HEAP32[Xb >> 2];
                                nc = sc + ec;
                                tc = 0 < (nc | 0);
                                Ub = Bc + 1;
                                if (!tc) break;
                                if ($c = (Ub | 0) < (uc | 0)) Bc = Ub, ec = nc;
                                else {
                                    ad = nc;
                                    break c
                                }
                            }
                            qc = a + 4408;
                            kb = rc = Uc = HEAP32[qc >> 2];
                            Jb = HEAP32[kb >> 2];
                            $b = Jb + 40;
                            Vb = na = rc + $b;
                            kc = HEAP32[Vb >> 2];
                            va = kc + 20;
                            Wc = HEAP32[va >> 2];
                            fc = Yb = kc;
                            Kb = HEAP32[fc >> 2];
                            Gb = Yb + Kb;
                            _jtjsigstr(a, 10, Wc, Gb);
                            Db = 0;
                            break a
                        } else ad = 1;
                    while (0);
                    gd = t + 20;
                    mc = HEAP32[gd >> 2];
                    Gc = mc - 1;
                    kd = dd = t;
                    Fd = HEAP32[kd >> 2];
                    Hd = Vc = dd +
                        Fd;
                    bd = 0 < (Gc | 0);
                    do
                        if (bd) {
                            cc = 1;
                            for (Ic = 0;;) {
                                fd = Hd + (Ic << 2);
                                xd = HEAP32[fd >> 2];
                                Xc = xd + cc;
                                Wd = 0 < (Xc | 0);
                                Wb = Ic + 1;
                                if (!Wd) {
                                    d = 68;
                                    break
                                }
                                if (Sb = (Wb | 0) < (Gc | 0)) cc = Xc, Ic = Wb;
                                else {
                                    d = 69;
                                    break
                                }
                            }
                            if (68 == d) {
                                pc = a + 4408;
                                Yc = hd = zc = HEAP32[pc >> 2];
                                Ad = HEAP32[Yc >> 2];
                                Gd = Ad + 40;
                                ld = hb = hd + Gd;
                                ed = HEAP32[ld >> 2];
                                Jc = ed + 20;
                                Oc = HEAP32[Jc >> 2];
                                ke = Pc = ed;
                                Ed = HEAP32[ke >> 2];
                                pd = Pc + Ed;
                                _jtjsigstr(a, 10, Oc, pd);
                                Db = 0;
                                break a
                            } else 69 == d && (id = -Xc, Cc = Xc, Qc = id)
                        } else Cc = 1, Qc = -1;
                    while (0);
                    Zc = ad | 0;
                    vd = Cc | 0;
                    $d = Zc * vd;
                    if (je = 2147483647 < $d)
                        if (Kc = a + 4408, Vd = od = Bd = HEAP32[Kc >>
                                2], Zd = HEAP32[Vd >> 2], Jd = Zd + 40, Cd = Md = od + Jd, fe = HEAP32[Cd >> 2], Xd = fe + 20, qd = HEAP32[Xd >> 2], Mc = Od = fe, Dd = HEAP32[Mc >> 2], Td = Od + Dd, _jtjsigstr(a, 10, qd, Td), le = HEAP8[wc], me = 0 == le << 24 >> 24) wd = 0;
                        else {
                            Db = 0;
                            break a
                        } else wd = Ie = $d & -1;
                    xe = Math_imul(Gc, uc) | 0;
                    Fe = (ye = 1 > (xe | 0)) ? 1 : xe;
                    nf = (pb | 0) / (Fe | 0) & -1;
                    Je = nf | 0;
                    Id = wd | 0;
                    Qe = Je * Id;
                    if (sd = 2147483647 < Qe)
                        if (ge = a + 4408, de = md = ud = HEAP32[ge >> 2], ae = HEAP32[de >> 2], Dc = ae + 40, yd = Nc = md + Dc, jd = HEAP32[yd >> 2], Sc = jd + 20, lc = HEAP32[Sc >> 2], Rc = nd = jd, Hc = HEAP32[Rc >> 2], Kd = nd + Hc, _jtjsigstr(a, 10, lc, Kd), Rd = HEAP8[wc],
                            Nd = 0 == Rd << 24 >> 24) be = 0;
                        else {
                            Db = 0;
                            break a
                        } else be = zd = Qe & -1;
                    we = r + 28;
                    Lc = _jtga(a, 2, be, ic, we);
                    if (rd = 0 == (Lc | 0)) {
                        Db = 0;
                        break a
                    }
                    se = ic - 2;
                    Ud = Lc + 28 + (se << 2);
                    HEAP32[Ud >> 2] = ad;
                    Cf = ic - 1;
                    td = Lc + 28 + (Cf << 2);
                    HEAP32[td >> 2] = Cc;
                    Te = 0 == (pb | 0);
                    Pd = pe = Lc;
                    do
                        if (!Te) {
                            Me = HEAP32[Pd >> 2];
                            Sd = pe + Me;
                            $e = Math_imul(Cc, ad) | 0;
                            qe = HEAP32[vc >> 2];
                            Ce = HEAP32[xc >> 2];
                            sf = cf = Ac + Ce;
                            Ue = HEAP32[gd >> 2];
                            kf = Ue - 1;
                            Re = HEAP32[kd >> 2];
                            De = ce = dd + Re;
                            Ge = a + 1048;
                            He = HEAP32[Ge >> 2];
                            We = He + 9;
                            Yd = HEAP8[We];
                            HEAP8[Sd] = Yd;
                            if (Ne = 0 < (kf | 0)) {
                                Se = 0;
                                for (Ee = Sd;;)
                                    if (Ld = Ee + 1, he = De + (Se << 2),
                                        Qd = HEAP32[he >> 2], re = Qd - 1, _memset(Ld, 32, re) | 0, Ke = HEAP32[he >> 2], Ae = Ee + Ke, HEAP8[Ae] = Yd, te = Se + 1, ie = (te | 0) < (kf | 0)) Se = te, Ee = Ae;
                                    else {
                                        ff = Ae;
                                        break
                                    }
                            } else ff = Sd;
                            HEAP8[ff] = Yd;
                            ue = ad - 2;
                            if (Oe = 0 < (ue | 0)) {
                                ne = 0;
                                for (ze = Sd;;)
                                    if (vf = ze + Cc, _memcpy(vf, Sd, Cc) | 0, lf = ne + 1, Xe = (lf | 0) < (ue | 0)) ne = lf, ze = vf;
                                    else break
                            }
                            Be = HEAP32[sf >> 2];
                            hf = Math_imul(Be, Cc) | 0;
                            af = hf + Me;
                            zf = pe + af;
                            uf = HEAP32[Ge >> 2];
                            ve = uf + 3;
                            If = HEAP8[ve];
                            Df = uf + 10;
                            Ef = HEAP8[Df];
                            Gf = uf + 4;
                            of = HEAP8[Gf];
                            Lf = uf + 5;
                            pf = HEAP8[Lf];
                            HEAP8[zf] = If;
                            if (Ne) {
                                bf = 0;
                                for (Bf = zf;;)
                                    if (Pf = Bf + 1, Ye = De + (bf <<
                                            2), Hf = HEAP32[Ye >> 2], jf = Hf - 1, _memset(Pf, Ef, jf) | 0, mf = HEAP32[Ye >> 2], Le = Bf + mf, HEAP8[Le] = of, Ve = bf + 1, df = (Ve | 0) < (kf | 0)) bf = Ve, Bf = Le;
                                    else {
                                        wf = Le;
                                        break
                                    }
                            } else wf = zf;
                            HEAP8[wf] = pf;
                            Yf = qe - 2;
                            if (Jf = 0 < (Yf | 0)) {
                                Qf = 0;
                                for (Sf = zf;;)
                                    if (Mf = Qf + 1, ee = sf + (Mf << 2), oe = HEAP32[ee >> 2], rf = Math_imul(oe, Cc) | 0, Ff = Sf + rf, _memcpy(Ff, zf, Cc) | 0, xf = (Mf | 0) < (Yf | 0)) Qf = Mf, Sf = Ff;
                                    else break
                            }
                            Pe = HEAP32[Ge >> 2];
                            qf = HEAP8[Pe];
                            yf = Pe + 10;
                            Nf = HEAP8[yf];
                            Zf = Pe + 1;
                            tg = HEAP8[Zf];
                            Ze = Pe + 2;
                            gf = HEAP8[Ze];
                            HEAP8[Sd] = qf;
                            if (Ne) {
                                ef = 0;
                                for (Kf = Sd;;)
                                    if (bg = Kf + 1, lg = De + (ef << 2), Rf = HEAP32[lg >>
                                            2], Ug = Rf - 1, _memset(bg, Nf, Ug) | 0, Vf = HEAP32[lg >> 2], Jg = Kf + Vf, HEAP8[Jg] = tg, hg = ef + 1, Lg = (hg | 0) < (kf | 0)) ef = hg, Kf = Jg;
                                    else {
                                        $f = Jg;
                                        break
                                    }
                            } else $f = Sd;
                            HEAP8[$f] = gf;
                            ah = $e + Qc;
                            nh = ah + Me;
                            dh = pe + nh;
                            mg = HEAP32[Ge >> 2];
                            yh = mg + 6;
                            Bg = HEAP8[yh];
                            ig = mg + 10;
                            ng = HEAP8[ig];
                            Ng = mg + 7;
                            Ch = HEAP8[Ng];
                            Dg = mg + 8;
                            Vg = HEAP8[Dg];
                            HEAP8[dh] = Bg;
                            if (Ne) {
                                pg = 0;
                                for (zg = dh;;)
                                    if (Pg = zg + 1, cg = De + (pg << 2), dg = HEAP32[cg >> 2], qg = dg - 1, _memset(Pg, ng, qg) | 0, vg = HEAP32[cg >> 2], bh = zg + vg, HEAP8[bh] = Ch, Zg = pg + 1, Eg = (Zg | 0) < (kf | 0)) pg = Zg, zg = bh;
                                    else {
                                        wg = bh;
                                        break
                                    }
                            } else wg = dh;
                            HEAP8[wg] = Vg;
                            vh = nf - 1;
                            if (Kh = 0 < (vh | 0)) {
                                $g = 0;
                                for (Ag = Sd;;)
                                    if (Lh = Ag + $e, _memcpy(Lh, Sd, $e) | 0, xg = $g + 1, Mg = (xg | 0) < (vh | 0)) $g = xg, Ag = Lh;
                                    else break
                            }
                            rg = a + 205316;
                            Sg = HEAP32[rg >> 2];
                            jg = a + 205320;
                            Uh = HEAP32[jg >> 2];
                            Of = HEAP32[bc >> 2];
                            qi = Tg = r;
                            eg = HEAP32[qi >> 2];
                            kg = gi = Tg + eg;
                            Qg = HEAP32[vc >> 2];
                            Wg = Qg - 1;
                            wi = HEAP32[xc >> 2];
                            Wf = zh = Ac + wi;
                            if (di = 0 < (Qg | 0)) {
                                ch = 1;
                                for (Mh = 0;;)
                                    if (Fg = Wf + (Mh << 2), Rg = HEAP32[Fg >> 2], HEAP32[Fg >> 2] = ch, Vh = Rg + ch, Gg = Mh + 1, eh = (Gg | 0) < (Qg | 0)) ch = Vh, Mh = Gg;
                                    else break
                            }
                            kh = HEAP32[gd >> 2];
                            fh = kh - 1;
                            Wh = HEAP32[kd >> 2];
                            og = qh = dd + Wh;
                            if (Og = 0 < (kh | 0)) {
                                Kg = 1;
                                for (Ih = 0;;)
                                    if (ai = og + (Ih << 2), wh = HEAP32[ai >> 2], HEAP32[ai >> 2] = Kg, Xh = wh + Kg, Nh = Ih + 1, Jh = (Nh | 0) < (kh | 0)) Kg = Xh, Ih = Nh;
                                    else break
                            }
                            if (lj = 0 < (Of | 0)) {
                                gh = 0 == (Sg | 0);
                                rh = 0 == (Uh | 0);
                                Ph = 3 - Uh;
                                hi = 3 - Sg;
                                sh = Me + Qc;
                                for (fg = 0;;) {
                                    Yi = (fg | 0) / (fh | 0) & -1;
                                    mj = (Yi | 0) % (Wg | 0) & -1;
                                    xi = (fg | 0) % (fh | 0) & -1;
                                    Hi = (fg | 0) / (Fe | 0) & -1;
                                    Ii = Math_imul(Hi, wd) | 0;
                                    lh = Wf + (mj << 2);
                                    yg = HEAP32[lh >> 2];
                                    vj = Math_imul(yg, Cc) | 0;
                                    Ji = vj + Ii;
                                    Xj = og + (xi << 2);
                                    yi = HEAP32[Xj >> 2];
                                    hh = Ji + yi;
                                    Aj = kg + (fg << 2);
                                    ih = HEAP32[Aj >> 2];
                                    Hj = ih + 28;
                                    zi = HEAP32[Hj >> 2];
                                    ni = ih + 32;
                                    ti = HEAP32[ni >> 2];
                                    gh ? Cg = hh : (Ah = mj +
                                        1, th = Wf + (Ah << 2), oh = HEAP32[th >> 2], Hg = ~yg, bi = Hg - zi, ui = bi + oh, gj = (ui | 0) / (hi | 0) & -1, rj = Math_imul(gj, Cc) | 0, Cg = Ki = rj + hh);
                                    rh ? Pj = Cg : (Zi = xi + 1, ii = og + (Zi << 2), mh = HEAP32[ii >> 2], ji = ~ti, vi = ji - yi, Qh = vi + mh, Ij = (Qh | 0) / (Ph | 0) & -1, Pj = ik = Ij + Cg);
                                    if (hj = 0 < (zi | 0)) {
                                        Xg = ih;
                                        Li = HEAP32[Xg >> 2];
                                        ph = Li - ti;
                                        al = ih;
                                        oi = al + ph;
                                        Yh = sh + Pj;
                                        ek = pe + Yh;
                                        ki = oi;
                                        ci = 0;
                                        for (Rh = ek;;)
                                            if (Bj = Rh + Cc, wj = ki + ti, _memcpy(Bj, wj, ti) | 0, Cj = ci + 1, Qi = (Cj | 0) < (zi | 0)) ki = wj, ci = Cj, Rh = Bj;
                                            else break
                                    }
                                    Ri = fg + 1;
                                    if (Qj = (Ri | 0) < (Of | 0)) fg = Ri;
                                    else break
                                }
                            }
                        }
                    while (0);
                    Dh = HEAP32[Pd >> 2];
                    Vk = Lc + 20;
                    Sh = HEAP32[Vk >> 2];
                    if (Dj = 0 < (Sh | 0))
                        for (xj = 0;;) {
                            Rj = xj + Dh;
                            Ai = pe + Rj;
                            Vi = HEAP8[Ai];
                            if (Yg = 14 > (Vi & 255)) ri = Vi & 255, Fh = ri + 112880, fk = HEAP8[Fh], HEAP8[Ai] = fk;
                            Ei = xj + 1;
                            if (Nk = (Ei | 0) < (Sh | 0)) xj = Ei;
                            else {
                                Eh = Lc;
                                break
                            }
                        } else Eh = Lc
                } else
            if (64 == (q | 0) | 128 == (q | 0) | 268435456 == (q | 0) | 536870912 == (q | 0)) Eh = jk = _jtthxqe(a, f);
            else if (131072 == (q | 0)) Eh = qk = _jtrank1ex(a, f, 0, 1, 2198);
            else if (256 == (q | 0)) {
                nj = f + 24;
                pi = HEAP32[nj >> 2];
                yj = f + 28;
                (Ig = 0 != (pi | 0)) ? (Th = pi - 1, ij = f + 28 + (Th << 2), Yj = Ej = HEAP32[ij >> 2]) : Yj = 1;
                $i = (g | 0) / (Yj | 0) & -1;
                Ik = Yj << 1;
                zk = Ik - 1;
                sj = Math_imul(zk,
                    $i) | 0;
                Fj = Ig & 1;
                Jj = Fj ^ 1;
                Wk = Jj + pi;
                Fi = _jtga(a, 2, sj, Wk, yj);
                if (jj = 0 == (Fi | 0)) {
                    Db = 0;
                    break a
                }
                Ak = Fi + 24;
                jl = HEAP32[Ak >> 2];
                Wi = jl - 1;
                tk = Fi + 28 + (Wi << 2);
                HEAP32[tk >> 2] = zk;
                Bk = ei = f;
                zj = HEAP32[Bk >> 2];
                kj = ei + zj;
                Ck = Bi = Fi;
                ol = HEAP32[Ck >> 2];
                Ci = Bi + ol;
                Sj = (Yj | 0) / 8 & -1;
                Kj = (Yj | 0) % 8 & -1;
                Zj = (Yj | 0) % 32 & -1;
                (Tj = 0 == (Zj | 0)) ? bl = 1: (Jk = 32 - Zj, Ui = (Jk | 0) / 8 & -1, bl = fi = Ui + 1);
                if (xh = 0 < ($i | 0)) {
                    oj = 0 != (Kj | 0);
                    Dk = oj & 1;
                    gk = Dk ^ 1;
                    cl = Sj - gk;
                    uk = 0 < (cl | 0);
                    sg = Kj << 1;
                    Lj = sg - 1;
                    if (!uk) {
                        ul = 0;
                        pj = Ci;
                        for (tf = kj;;)
                            if (Xi = HEAP8[tf], $j = Xi & 255, Si = $j << 4, gg = Si + 156624, oj ? (_memcpy(pj,
                                    gg, Lj) | 0, Gh = Kk = pj + Lj) : (_memcpy(pj, gg, 15) | 0, Gh = ag = pj + 15), jh = tf + bl, Hh = ul + 1, Af = (Hh | 0) < ($i | 0)) ul = Hh, pj = Gh, tf = jh;
                            else {
                                Eh = Fi;
                                break b
                            }
                    }
                    Mi = Sj << 4;
                    kl = gk << 4;
                    si = Mi - kl;
                    Ok = si + Lj;
                    Zh = bl + cl;
                    dl = si | 15;
                    Lk = 0;
                    li = Ci;
                    for (Uj = kj;;) {
                        fm = HEAP8[Uj];
                        Di = fm & 255;
                        Mk = Di << 4;
                        qj = Mk + 156624;
                        Pk = li;
                        vl = Uj;
                        Mj = 0;
                        for (ak = qj;;)
                            if (_memcpy(Pk, ak, 16) | 0, mi = vl + 1, Jl = Pk + 16, Gi = Mj + 1, Nj = (Gi | 0) < (cl | 0), Oh = HEAP8[mi], fl = Oh & 255, ll = fl << 4, vk = ll + 156624, Nj) Pk = Jl, vl = mi, Mj = Gi, ak = vk;
                            else break;
                        bk = li + si;
                        oj ? (_memcpy(bk, vk, Lj) | 0, Vj = Ok) : (_memcpy(bk, vk, 15) | 0, Vj = dl);
                        ck = li +
                            Vj;
                        ml = Uj + Zh;
                        rk = Lk + 1;
                        if (pl = (rk | 0) < ($i | 0)) Lk = rk, li = ck, Uj = ml;
                        else {
                            Eh = Fi;
                            break
                        }
                    }
                } else Eh = Fi
            } else if (2 == (q | 0)) Eh = Kl = _jtca(a, f);
            else if (1 == (q | 0)) {
                Qk = f + 24;
                wl = HEAP32[Qk >> 2];
                Ek = f + 28;
                (sk = 0 != (wl | 0)) ? (Bl = wl - 1, aj = f + 28 + (Bl << 2), Ni = kk = HEAP32[aj >> 2]) : Ni = 1;
                Oi = (g | 0) / (Ni | 0) & -1;
                lk = Ni << 1;
                mk = lk - 1;
                nk = Math_imul(mk, Oi) | 0;
                Fl = sk & 1;
                Xk = Fl ^ 1;
                bj = Xk + wl;
                Ll = _jtga(a, 2, nk, bj, Ek);
                if ($h = 0 == (Ll | 0)) {
                    Db = 0;
                    break a
                }
                gl = Ll + 24;
                Bh = HEAP32[gl >> 2];
                cj = Bh - 1;
                Fk = Ll + 28 + (cj << 2);
                HEAP32[Fk >> 2] = mk;
                dj = Rk = f;
                ql = HEAP32[dj >> 2];
                Sk = Rk + ql;
                xl = ej = Ll;
                dk = HEAP32[xl >> 2];
                Gl = ej + dk;
                hk = 0 < (Oi | 0);
                if (!hk) {
                    n = Ll;
                    d = 312;
                    break a
                }
                nl = Ni - 1;
                if (Yk = 0 < (nl | 0)) ok = Gl, Wj = 0, Rl = Sk;
                else {
                    pk = Gl;
                    Vl = 0;
                    for (rl = Sk;;)
                        if (Zk = rl + 1, Gj = HEAP8[rl], Gk = (Cl = 0 != Gj << 24 >> 24) ? 49 : 48, gm = pk + 1, HEAP8[pk] = Gk, hl = Vl + 1, sl = (hl | 0) < (Oi | 0)) pk = gm, Vl = hl, rl = Zk;
                        else {
                            Eh = Ll;
                            break b
                        }
                }
                for (;;) {
                    Xf = HEAP8[Rl];
                    $k = (mm = 0 != Xf << 24 >> 24) ? 49 : 48;
                    Dl = ok + 1;
                    HEAP8[ok] = $k;
                    tl = ok;
                    bm = 0;
                    Ti = Rl;
                    for (ug = Dl;;)
                        if (Tf = Ti + 1, uh = tl + 2, HEAP8[ug] = 32, Uf = bm + 1, tj = (Uf | 0) < (nl | 0), uj = HEAP8[Tf], il = (Sl = 0 != uj << 24 >> 24) ? 49 : 48, Wl = tl + 3, HEAP8[uh] = il, tj) tl = uh, bm = Uf, Ti = Tf, ug = Wl;
                        else break;
                    yn = ok + mk;
                    im = Rl + Ni;
                    Im = Wj + 1;
                    if (zl = (Im | 0) < (Oi | 0)) ok = yn, Wj = Im, Rl = im;
                    else {
                        Eh = Ll;
                        break
                    }
                }
            } else if (33554432 == (q | 0)) {
                Xl = f;
                vm = HEAP32[Xl >> 2];
                Tl = _jtga(a, 2, g, 1, 0);
                if (Ml = 0 == (Tl | 0)) {
                    Db = 0;
                    break a
                }
                kn = vm + 14;
                nm = f;
                Fn = nm + kn;
                Gn = Nl = Tl;
                Pm = HEAP32[Gn >> 2];
                Hl = Nl + Pm;
                _memcpy(Hl, Fn, g) | 0;
                n = Tl;
                d = 312;
                break a
            } else if (2097152 == (q | 0)) Hn = Op = f, uo = HEAP32[Hn >> 2], Ol = Op + uo, Do = HEAP8[Ol], Xn = c, _spellit(Do, Xn), io = c + 2, ln = HEAP8[io], (qm = 0 == ln << 24 >> 24) ? (el = c + 1, Il = HEAP8[el], Jm = $m = (mn = 0 != Il << 24 >> 24) ? 2 : 1) : Jm = 3, om = _jtga(a, 2, Jm, 1, 0), (zm = 0 == (om | 0)) ? Eh =
                0 : (Eo = Am = om, jo = HEAP32[Eo >> 2], hm = Am + jo, _memcpy(hm, Xn, Jm) | 0, Eh = om);
            else if (4 == (q | 0) | 8 == (q | 0) | 16 == (q | 0)) {
                Fo = f + 24;
                ko = HEAP32[Fo >> 2];
                pm = f + 28;
                8 == (q | 0) ? (Bm = 2620, Km = 29) : 16 == (q | 0) ? (Bm = 2638, Km = 58) : (Bm = 2622, Km = 12);
                Cm = g + 1;
                rm = Math_imul(Km, Cm) | 0;
                Lm = _jtga(a, 2, rm, 1, 0);
                if (Tm = 0 == (Lm | 0)) {
                    Db = 0;
                    break a
                }
                an = Qm = Lm;
                wk = HEAP32[an >> 2];
                Go = Qm + wk;
                if (nn = 2 > (ko | 0))
                    if (on = Lm + 20, cm = HEAP32[on >> 2], In = _jtthv(a, f, cm, Go), bp = 0 == (In | 0)) {
                        Dp = a + 4408;
                        cn = bn = lo = HEAP32[Dp >> 2];
                        Um = HEAP32[cn >> 2];
                        Ro = Um + 80;
                        Yl = Yn = bn + Ro;
                        pn = HEAP32[Yl >> 2];
                        Hk = pn + 20;
                        vo = HEAP32[Hk >>
                            2];
                        Pp = Ho = pn;
                        vp = HEAP32[Pp >> 2];
                        mo = Ho + vp;
                        _jtjsigstr(a, 20, vo, mo);
                        _jtwri(a, 4, 161016, 3, 119064);
                        Db = 0;
                        break a
                    } else {
                        Io = Lm + 28;
                        HEAP32[Io >> 2] = In;
                        HEAP32[on >> 2] = In;
                        Eh = Lm;
                        break
                    }
                hp = ko - 1;
                Vm = f + 28 + (hp << 2);
                sm = HEAP32[Vm >> 2];
                Zn = (g | 0) / (sm | 0) & -1;
                Oj = HEAP32[p >> 2];
                Mm = 2 == (Oj | 0) | 2097152 == (Oj | 0) | 33554432 == (Oj | 0) ? 1 : 131072 == (Oj | 0) ? 2 : 4 == (Oj | 0) | 67108864 == (Oj | 0) | 134217728 == (Oj | 0) | 4194304 == (Oj | 0) | 8388608 == (Oj | 0) ? 4 : 32 == (Oj | 0) ? 4 : 64 == (Oj | 0) ? 4 : 128 == (Oj | 0) ? 8 : 1024 == (Oj | 0) | 4096 == (Oj | 0) | 8192 == (Oj | 0) | 16384 == (Oj | 0) | 2048 == (Oj | 0) | 32768 == (Oj | 0) ?
                    16 : 262144 == (Oj | 0) | 524288 == (Oj | 0) | 1048576 == (Oj | 0) ? 44 : 16777216 == (Oj | 0) ? 12 : 65536 == (Oj | 0) ? 4 : 268435456 == (Oj | 0) ? 12 : 536870912 == (Oj | 0) ? 24 : 1 == (Oj | 0) | 8 == (Oj | 0) | 16 == (Oj | 0) ? Oj : -1;
                Yp = f;
                Tq = HEAP32[Yp >> 2];
                Dm = _jtga(a, 4, sm, 1, 0);
                if (Zl = 0 == (Dm | 0)) {
                    Db = 0;
                    break a
                }
                Nm = dn = Dm;
                Rm = HEAP32[Nm >> 2];
                if (jm = 0 < (sm | 0)) {
                    So = cp = Ep = dn + Rm;
                    for (Jo = 0;;)
                        if (Jn = So + 4, HEAP32[So >> 2] = 1, Ko = Jo + 1, $n = (Ko | 0) < (sm | 0)) So = Jn, Jo = Ko;
                        else break;
                    dm = Em = HEAP32[Nm >> 2]
                } else dm = Rm;
                Kn = To = dn + dm;
                if (El = 0 < (Zn | 0)) {
                    rq = wk - Km;
                    Zp = Tq - Mm;
                    Bq = f;
                    zn = Qm + rq;
                    wp = Bq + Zp;
                    no = Bm;
                    ip = Math_imul(Mm,
                        sm) | 0;
                    Er = Math_imul(sm, Km) | 0;
                    Lo = 0;
                    sq = zn;
                    for (An = wp;;) {
                        if (jm) {
                            jp = 0;
                            Mo = sq;
                            for (Ln = An;;)
                                if (kp = Mo + Km, en = Ln + Mm, getFUNCTION_TABLE(no)(a, kp, en), Bn = _strlen(kp), Mn = Kn + (jp << 2), gq = HEAP32[Mn >> 2], Hq = (Nn = (gq | 0) > (Bn | 0)) ? gq : Bn, HEAP32[Mn >> 2] = Hq, dp = jp + 1, wo = (dp | 0) < (sm | 0)) jp = dp, Mo = kp, Ln = en;
                                else break;
                            Fp = An + ip;
                            On = fn = sq + Er;
                            ao = Fp
                        } else On = sq, ao = An;
                        Qp = Lo + 1;
                        if (gn = (Qp | 0) < (Zn | 0)) Lo = Qp, sq = On, An = ao;
                        else break
                    }
                }
                tm = sm - 1;
                um = Kn + (tm << 2);
                xo = HEAP32[um >> 2];
                No = xo - 1;
                HEAP32[um >> 2] = No;
                if (jm)
                    for ($l = Gp = 0;;)
                        if (lp = Kn + ($l << 2), km = HEAP32[lp >> 2], am = km +
                            1, HEAP32[lp >> 2] = am, mp = am + Gp, Fm = $l + 1, Ar = (Fm | 0) < (sm | 0)) Gp = mp, $l = Fm;
                        else {
                            hq = mp;
                            break
                        } else hq = 0;
                iq = Math_imul(hq, Zn) | 0;
                Hp = 0 == (ko | 0);
                hn = Hp & 1;
                Pn = hn + ko;
                yo = _jtga(a, 2, iq, Pn, pm);
                if (np = 0 == (yo | 0)) {
                    Db = 0;
                    break a
                }
                qn = yo + 24;
                tq = HEAP32[qn >> 2];
                rn = tq - 1;
                $p = yo + 28 + (rn << 2);
                HEAP32[$p >> 2] = hq;
                Rp = Uq = yo;
                Cq = HEAP32[Rp >> 2];
                sn = Uq + Cq;
                Qn = yo + 20;
                uq = HEAP32[Qn >> 2];
                _memset(sn, 32, uq) | 0;
                if (!El) {
                    n = yo;
                    d = 312;
                    break a
                }
                Iq = Math_imul(sm, Km) | 0;
                Uo = sn;
                Rn = Go;
                for (Vo = 0;;) {
                    if (jm) {
                        Sn = Uo;
                        Ip = Rn;
                        for (ep = 0;;)
                            if (Cn = Kn + (ep << 2), Pi = HEAP32[Cn >> 2], xk = Sn + Pi, Tk = _strlen(Ip),
                                yl = ep + 1, yk = (sm | 0) > (yl | 0), tn = yk << 31 >> 31, lm = Pi + tn, Tn = lm - Tk, vq = Sn + Tn, _memcpy(vq, Ip, Tk) | 0, Dn = Ip + Km, yk) Sn = xk, Ip = Dn, ep = yl;
                            else break;
                        oo = Rn + Iq;
                        Wo = xk;
                        wm = oo
                    } else Wo = Uo, wm = Rn;
                    Pl = Vo + 1;
                    if (Sp = (Pl | 0) < (Zn | 0)) Uo = Wo, Rn = wm, Vo = Pl;
                    else {
                        Eh = yo;
                        break
                    }
                }
            } else if (65536 == (q | 0)) {
                Vq = f + 24;
                Tp = HEAP32[Vq >> 2];
                Oo = f + 28;
                jq = fp = f;
                un = HEAP32[jq >> 2];
                op = Ul = fp + un;
                if (rr = 2 > (Tp | 0)) {
                    Up = g << 1;
                    bo = Up - 1;
                    if (Po = 0 < (g | 0)) {
                        Un = a + 205568;
                        Jq = HEAP32[Un >> 2];
                        aq = 0;
                        xp = op;
                        for (Gm = bo;;)
                            if (kq = xp + 4, co = HEAP32[xp >> 2], pp = Jq + (44 * co & -1) + 4, En = HEAP32[pp >> 2], Kq = En + Gm, eo = aq + 1,
                                dr = (eo | 0) < (g | 0)) aq = eo, xp = kq, Gm = Kq;
                            else {
                                Ql = Kq;
                                break
                            }
                    } else Ql = bo;
                    Wq = _jtga(a, 2, Ql, 1, 0);
                    if (kr = 0 == (Wq | 0)) {
                        Db = 0;
                        break a
                    }
                    yp = Xo = Wq;
                    Jp = HEAP32[yp >> 2];
                    qp = Xo + Jp;
                    Yo = Wq + 20;
                    Wm = HEAP32[Yo >> 2];
                    _memset(qp, 32, Wm) | 0;
                    if (!Po) {
                        n = Wq;
                        d = 312;
                        break a
                    }
                    Vn = a + 205568;
                    Vp = a + 205556;
                    Zo = op;
                    lq = 0;
                    for (Kp = qp;;)
                        if (sr = HEAP32[Vn >> 2], Lp = Zo + 4, mq = HEAP32[Zo >> 2], HEAP8[Kp] = 96, zo = Kp + 1, fo = HEAP32[Vp >> 2], Br = sr + (44 * mq & -1), rp = HEAP32[Br >> 2], nq = fo + rp, Xq = sr + (44 * mq & -1) + 4, Yr = HEAP32[Xq >> 2], _memcpy(zo, nq, Yr) | 0, Dq = HEAP32[Xq >> 2], Cr = Dq + 2, lr = Kp + Cr, tr = lq + 1, wq = (tr | 0) <
                            (g | 0)) Zo = Lp, lq = tr, Kp = lr;
                        else {
                            Eh = Wq;
                            break b
                        }
                }
                Lq = Tp - 1;
                oq = f + 28 + (Lq << 2);
                er = HEAP32[oq >> 2];
                bq = (g | 0) / (er | 0) & -1;
                mr = _jtga(a, 4, er, 1, 0);
                if (Yq = 0 == (mr | 0)) {
                    Db = 0;
                    break a
                }
                qo = po = mr;
                fr = HEAP32[qo >> 2];
                if ($o = 0 < (er | 0)) {
                    go = gp = Xm = po + fr;
                    for (Ym = 0;;)
                        if (ro = go + 4, HEAP32[go >> 2] = 0, ap = Ym + 1, ho = (ap | 0) < (er | 0)) go = ro, Ym = ap;
                        else break;
                    Ao = Zm = HEAP32[qo >> 2]
                } else Ao = fr;
                so = Wn = po + Ao;
                if (fj = 0 < (bq | 0)) {
                    Mq = a + 205568;
                    sp = op;
                    for (tp = 0;;) {
                        if ($o) {
                            Zq = HEAP32[Mq >> 2];
                            Uk = sp;
                            for (zp = 0;;)
                                if (em = Uk + 4, to = HEAP32[Uk >> 2], vn = Zq + (44 * to & -1) + 4, Hm = HEAP32[vn >> 2], xm = so + (zp <<
                                        2), wn = HEAP32[xm >> 2], ym = (Ap = (wn | 0) > (Hm | 0)) ? wn : Hm, HEAP32[xm >> 2] = ym, jn = zp + 1, Om = (jn | 0) < (er | 0)) Uk = em, zp = jn;
                                else break;
                            xn = Mp = sp + (er << 2)
                        } else xn = sp;
                        Bo = tp + 1;
                        if (Zr = (Bo | 0) < (bq | 0)) sp = xn, tp = Bo;
                        else break
                    }
                }
                if ($o) {
                    Ur = -1;
                    for (Qo = 0;;)
                        if (Wp = so + (Qo << 2), xq = HEAP32[Wp >> 2], Fr = xq + 2, HEAP32[Wp >> 2] = Fr, Eq = Fr + Ur, yq = Qo + 1, qs = (yq | 0) < (er | 0)) Ur = Eq, Qo = yq;
                        else {
                            Lr = Eq;
                            break
                        }
                } else Lr = -1;
                ur = er - 1;
                cq = so + (ur << 2);
                is = HEAP32[cq >> 2];
                Fq = is - 1;
                HEAP32[cq >> 2] = Fq;
                nr = Math_imul(Lr, bq) | 0;
                Bp = 0 == (Tp | 0);
                Gr = Bp & 1;
                Gq = Gr + Tp;
                pq = _jtga(a, 2, nr, Gq, Oo);
                if (Mr = 0 == (pq |
                        0)) {
                    Db = 0;
                    break a
                }
                vr = $q = pq;
                Nq = HEAP32[vr >> 2];
                js = $q + Nq;
                Hr = pq + 20;
                Np = HEAP32[Hr >> 2];
                _memset(js, 32, Np) | 0;
                qq = pq + 24;
                Oq = HEAP32[qq >> 2];
                ar = Oq - 1;
                zq = pq + 28 + (ar << 2);
                HEAP32[zq >> 2] = Lr;
                if (!fj) {
                    n = pq;
                    d = 312;
                    break a
                }
                wr = a + 205568;
                br = a + 205556;
                Al = op;
                Co = js;
                for (dq = 0;;) {
                    if ($o) {
                        Aq = Al;
                        Vr = Co;
                        for (eq = 0;;)
                            if (Xp = HEAP32[wr >> 2], fq = Aq + 4, $r = HEAP32[Aq >> 2], HEAP8[Vr] = 96, Ir = Vr + 1, Nr = HEAP32[br >> 2], Rr = Xp + (44 * $r & -1), Pq = HEAP32[Rr >> 2], Or = Nr + Pq, Es = Xp + (44 * $r & -1) + 4, ks = HEAP32[Es >> 2], _memcpy(Ir, Or, ks) | 0, gr = so + (eq << 2), ls = HEAP32[gr >> 2], dt = Vr + ls, ms = eq + 1,
                                Qq = (ms | 0) < (er | 0)) Aq = fq, Vr = dt, eq = ms;
                            else break;
                        Jr = as = Al + (er << 2);
                        Wr = dt
                    } else Jr = Al, Wr = Co;
                    bs = dq + 1;
                    if (nt = (bs | 0) < (bq | 0)) Al = Jr, Co = Wr, dq = bs;
                    else {
                        Eh = pq;
                        break
                    }
                }
            } else if (1024 == (q | 0) | 4096 == (q | 0) | 8192 == (q | 0) | 16384 == (q | 0) | 2048 == (q | 0) | 32768 == (q | 0)) {
                Rq = f + 24;
                or = HEAP32[Rq >> 2];
                hr = q & 805503487;
                Dr = 0 == (hr | 0);
                c: do
                    if (Dr) {
                        if (Fs = 0 == (or | 0)) {
                            Kr = a + 4408;
                            ir = Gs = As = HEAP32[Kr >> 2];
                            pr = HEAP32[ir >> 2];
                            Xr = pr + 80;
                            Bs = Vs = Gs + Xr;
                            Ws = HEAP32[Bs >> 2];
                            rs = Ws + 20;
                            Js = HEAP32[rs >> 2];
                            Sr = Cp = Ws;
                            cs = HEAP32[Sr >> 2];
                            ss = Cp + cs;
                            _jtjsigstr(a, 20, Js, ss);
                            _jtwri(a, 4, 161016,
                                11, 122184);
                            Db = 0;
                            break a
                        }
                        cr = 0 < (or | 0);
                        d: do
                            if (cr) {
                                for (jr = 0;;) {
                                    et = f + 28 + (jr << 2);
                                    Wt = HEAP32[et >> 2];
                                    ku = -1 < (Wt | 0);
                                    Xt = jr + 1;
                                    if (!ku) break;
                                    if (ft = (Xt | 0) < (or | 0)) jr = Xt;
                                    else break d
                                }
                                Ps = a + 4408;
                                Dt = Cs = Xs = HEAP32[Ps >> 2];
                                vt = HEAP32[Dt >> 2];
                                ot = vt + 80;
                                Ks = ns = Cs + ot;
                                Ds = HEAP32[Ks >> 2];
                                Tr = Ds + 20;
                                Ys = HEAP32[Tr >> 2];
                                Yt = lu = Ds;
                                Nt = HEAP32[Yt >> 2];
                                xt = lu + Nt;
                                _jtjsigstr(a, 20, Ys, xt);
                                _jtwri(a, 4, 161016, 12, 120320);
                                Db = 0;
                                break a
                            }
                        while (0);
                        qr = xr = f;
                        Zs = HEAP32[qr >> 2];
                        Ku = Et = xr + Zs;
                        gt = HEAP32[Ku >> 2];
                        Qs = gt + Zs;
                        pt = xs = xr + Qs;
                        $s = Zs + 4;
                        qt = Zt = xr + $s;
                        ds = HEAP32[qt >> 2];
                        yt = ds + Zs;
                        ys = Zs + 8;
                        us = Lu = xr + ys;
                        at = HEAP32[us >> 2];
                        zs = at + Zs;
                        Pr = Rs = xr + zs;
                        os = Zs + 12;
                        Ls = $t = xr + os;
                        Ss = HEAP32[Ls >> 2];
                        ht = Ss + Zs;
                        wt = xr + ht;
                        if (yu = 0 == (xs | 0)) {
                            kv = a + 4408;
                            au = uv = Ft = HEAP32[kv >> 2];
                            rt = HEAP32[au >> 2];
                            mu = rt + 80;
                            wv = vv = uv + mu;
                            Mu = HEAP32[wv >> 2];
                            Sm = Mu + 20;
                            es = HEAP32[Sm >> 2];
                            bu = vs = Mu;
                            it = HEAP32[bu >> 2];
                            Ot = vs + it;
                            _jtjsigstr(a, 20, es, Ot);
                            _jtwri(a, 4, 161016, 16, 119144);
                            Db = 0;
                            break a
                        }
                        qw = xr + yt;
                        if (zu = 0 == (qw | 0)) {
                            zt = a + 4408;
                            cu = jt = Gt = HEAP32[zt >> 2];
                            nu = HEAP32[cu >> 2];
                            Zu = nu + 80;
                            kt = st = jt + Zu;
                            ws = HEAP32[kt >> 2];
                            lt = ws + 20;
                            xv = HEAP32[lt >> 2];
                            Pv = qy = ws;
                            Nu = HEAP32[Pv >> 2];
                            Pt = qy + Nu;
                            _jtjsigstr(a, 20, xv, Pt);
                            _jtwri(a, 4, 161016, 16, 118552);
                            Db = 0;
                            break a
                        }
                        if (cw = 0 == (Rs | 0)) {
                            ou = a + 4408;
                            Qv = Ou = dw = HEAP32[ou >> 2];
                            At = HEAP32[Qv >> 2];
                            yv = At + 80;
                            lv = zv = Ou + yv;
                            Pu = HEAP32[lv >> 2];
                            $u = Pu + 20;
                            Av = HEAP32[$u >> 2];
                            rw = Ms = Pu;
                            Hs = HEAP32[rw >> 2];
                            du = Ms + Hs;
                            _jtjsigstr(a, 20, Av, du);
                            _jtwri(a, 4, 161016, 16, 118184);
                            Db = 0;
                            break a
                        }
                        if (mt = 0 == (wt | 0)) {
                            Au = a + 4408;
                            Bv = mv = Bu = HEAP32[Au >> 2];
                            sw = HEAP32[Bv >> 2];
                            av = sw + 80;
                            Qt = Rv = mv + av;
                            pu = HEAP32[Qt >> 2];
                            Ew = pu + 20;
                            bt = HEAP32[Ew >> 2];
                            Rt = yr = pu;
                            Cv = HEAP32[Rt >> 2];
                            Ht = yr + Cv;
                            _jtjsigstr(a,
                                20, bt, Ht);
                            _jtwri(a, 4, 161016, 16, 118024);
                            Db = 0;
                            break a
                        }
                        qu = Qs + 24;
                        Fw = ix = xr + qu;
                        ct = HEAP32[Fw >> 2];
                        Sv = 1 == (ct | 0);
                        if (!Sv) {
                            Dv = a + 4408;
                            Bt = Ru = Qu = HEAP32[Dv >> 2];
                            Is = HEAP32[Bt >> 2];
                            Tv = Is + 80;
                            bv = Ev = Ru + Tv;
                            It = HEAP32[bv >> 2];
                            Jt = It + 20;
                            gs = HEAP32[Jt >> 2];
                            Ts = Cu = It;
                            vx = HEAP32[Ts >> 2];
                            Fv = Cu + vx;
                            _jtjsigstr(a, 20, gs, Fv);
                            _jtwri(a, 4, 161016, 13, 117768);
                            Db = 0;
                            break a
                        }
                        Su = or - 1;
                        Tu = _jtga(a, 4, or, 1, 0);
                        if (Du = 0 == (Tu | 0)) Pw = 0;
                        else {
                            ru = Tu;
                            Qw = HEAP32[ru >> 2];
                            Kt = Tu;
                            hs = wx = Kt + Qw;
                            up = -1;
                            for (tw = hs;;)
                                if (Ix = up + 1, Us = tw + 4, HEAP32[tw >> 2] = Ix, ts = (Ix | 0) == (Su | 0)) {
                                    Pw = Tu;
                                    break
                                } else up =
                                    Ix, tw = Us
                        }
                        Sq = _jteps(a, pt, Pw);
                        xx = 0 == (Sq | 0);
                        do
                            if (!xx && (vw = uw = Sq, eu = HEAP32[vw >> 2], Uv = uw + eu, ew = Sq + 20, fw = HEAP32[ew >> 2], Jx = _memchr(Uv, 0, fw), Uu = 0 == (Jx | 0))) {
                                Vv = _jtnub(a, pt);
                                su = _jtequ(a, pt, Vv);
                                if (nv = 0 == su << 24 >> 24) {
                                    gw = a + 4408;
                                    Gv = fu = hw = HEAP32[gw >> 2];
                                    gu = HEAP32[Gv >> 2];
                                    Qr = gu + 80;
                                    cv = iw = fu + Qr;
                                    Hv = HEAP32[cv >> 2];
                                    tu = Hv + 20;
                                    Vu = HEAP32[tu >> 2];
                                    Ns = ww = Hv;
                                    uu = HEAP32[Ns >> 2];
                                    Lt = ww + uu;
                                    _jtjsigstr(a, 20, Vu, Lt);
                                    _jtwri(a, 4, 161016, 15, 117544);
                                    Db = 0;
                                    break a
                                }
                                St = yt + 24;
                                hu = Kx = xr + St;
                                Rw = HEAP32[hu >> 2];
                                Wv = 0 == (Rw | 0);
                                if (!Wv) {
                                    Lx = a + 4408;
                                    iu = Xv = Iz = HEAP32[Lx >>
                                        2];
                                    ov = HEAP32[iu >> 2];
                                    Iv = ov + 80;
                                    Os = pv = Xv + Iv;
                                    tt = HEAP32[Os >> 2];
                                    Tt = tt + 20;
                                    Sw = HEAP32[Tt >> 2];
                                    yx = jx = tt;
                                    Mx = HEAP32[yx >> 2];
                                    Wu = jx + Mx;
                                    _jtjsigstr(a, 20, Sw, Wu);
                                    _jtwri(a, 4, 161016, 13, 122496);
                                    Db = 0;
                                    break a
                                }
                                jw = yt + 12;
                                ut = Tw = xr + jw;
                                Dy = HEAP32[ut >> 2];
                                xw = q & 1024;
                                (kx = 0 == (xw | 0)) ? (Ey = q & 4096, (vu = 0 == (Ey | 0)) ? (Gw = q & 8192, (dy = 0 == (Gw | 0)) ? (kA = q & 16384, (Eu = 0 == (kA | 0)) ? (Vy = q & 2048, (Wy = 0 == (Vy | 0)) ? (zx = q >>> 10, Jv = Xy = zx & 32) : Jv = 2) : Jv = 16) : Jv = 8) : Jv = 4) : Jv = 1;
                                Yy = (Dy | 0) == (Jv | 0);
                                if (!Yy) {
                                    Uw = a + 4408;
                                    ey = kw = Nx = HEAP32[Uw >> 2];
                                    Fy = HEAP32[ey >> 2];
                                    fy = Fy + 80;
                                    Yv = yw = kw + fy;
                                    Kv = HEAP32[Yv >> 2];
                                    Zy = Kv + 20;
                                    Lv = HEAP32[Zy >> 2];
                                    Xu = Hw = Kv;
                                    Ox = HEAP32[Xu >> 2];
                                    Zv = Hw + Ox;
                                    _jtjsigstr(a, 20, Lv, Zv);
                                    _jtwri(a, 4, 161016, 13, 122320);
                                    Db = 0;
                                    break a
                                }
                                Ut = ht + 12;
                                Vw = Fu = xr + Ut;
                                Px = HEAP32[Vw >> 2];
                                Qx = (Dy | 0) == (Px | 0);
                                if (!Qx) {
                                    Rx = a + 4408;
                                    zr = Ax = ry = HEAP32[Rx >> 2];
                                    qv = HEAP32[zr >> 2];
                                    lx = qv + 80;
                                    Tx = Sx = Ax + lx;
                                    Jz = HEAP32[Tx >> 2];
                                    sy = Jz + 20;
                                    gy = HEAP32[sy >> 2];
                                    Ww = Iw = Jz;
                                    dv = HEAP32[Ww >> 2];
                                    zw = Iw + dv;
                                    _jtjsigstr(a, 20, gy, zw);
                                    _jtwri(a, 4, 161016, 15, 122008);
                                    Db = 0;
                                    break a
                                }
                                Mt = zs + 24;
                                MA = Ux = xr + Mt;
                                mx = HEAP32[MA >> 2];
                                Bx = 2 == (mx | 0);
                                if (!Bx) {
                                    Gy = a + 4408;
                                    Cx = rv = Vx = HEAP32[Gy >>
                                        2];
                                    Hy = HEAP32[Cx >> 2];
                                    lw = Hy + 80;
                                    Gu = NA = rv + lw;
                                    nx = HEAP32[Gu >> 2];
                                    ty = nx + 20;
                                    ox = HEAP32[ty >> 2];
                                    Jw = Iy = nx;
                                    Aw = HEAP32[Jw >> 2];
                                    ev = Iy + Aw;
                                    _jtjsigstr(a, 20, ox, ev);
                                    _jtwri(a, 4, 161016, 13, 121760);
                                    Db = 0;
                                    break a
                                }
                                Wx = zs + 12;
                                Xw = Xx = xr + Wx;
                                uy = HEAP32[Xw >> 2];
                                hy = uy & 4;
                                if (qz = 0 == (hy | 0)) {
                                    sv = a + 4408;
                                    px = vy = lA = HEAP32[sv >> 2];
                                    wy = HEAP32[px >> 2];
                                    fv = wy + 80;
                                    Dx = xy = vy + fv;
                                    mw = HEAP32[Dx >> 2];
                                    Ex = mw + 20;
                                    qx = HEAP32[Ex >> 2];
                                    Kz = gv = mw;
                                    Ct = HEAP32[Kz >> 2];
                                    Hu = gv + Ct;
                                    _jtjsigstr(a, 20, qx, Hu);
                                    _jtwri(a, 4, 161016, 13, 121584);
                                    Db = 0;
                                    break a
                                }
                                mA = zs + 28;
                                nA = $y = xr + mA;
                                Lz = HEAP32[nA >> 2];
                                az =
                                    ht + 24;
                                bz = OA = xr + az;
                                rz = HEAP32[bz >> 2];
                                (Jy = 0 == (rz | 0)) ? Mz = 1: (rx = ht + 28, nw = Yw = xr + rx, Mz = Iu = HEAP32[nw >> 2]);
                                oA = (Lz | 0) == (Mz | 0);
                                if (!oA) {
                                    Ky = a + 4408;
                                    Zx = Nz = Yx = HEAP32[Ky >> 2];
                                    Ly = HEAP32[Zx >> 2];
                                    pA = Ly + 80;
                                    Yu = PA = Nz + pA;
                                    Zw = HEAP32[Yu >> 2];
                                    Mv = Zw + 20;
                                    QA = HEAP32[Mv >> 2];
                                    sz = $v = Zw;
                                    Kw = HEAP32[sz >> 2];
                                    My = $v + Kw;
                                    _jtjsigstr(a, 20, QA, My);
                                    _jtwri(a, 4, 161016, 16, 121360);
                                    Db = 0;
                                    break a
                                }
                                $x = zs + 32;
                                Fx = qA = xr + $x;
                                tz = HEAP32[Fx >> 2];
                                iy = HEAP32[Fw >> 2];
                                (ow = 0 == (iy | 0)) ? $w = 1: (RA = Qs + 28, ND = kB = xr + RA, $w = cz = HEAP32[ND >> 2]);
                                dz = (tz | 0) == ($w | 0);
                                if (!dz) {
                                    Oz = a + 4408;
                                    SA = ez = HC =
                                        HEAP32[Oz >> 2];
                                    pw = HEAP32[SA >> 2];
                                    rA = pw + 80;
                                    Bw = hv = ez + rA;
                                    iv = HEAP32[Bw >> 2];
                                    fz = iv + 20;
                                    Pz = HEAP32[fz >> 2];
                                    iD = ax = iv;
                                    Qz = HEAP32[iD >> 2];
                                    bx = ax + Qz;
                                    _jtjsigstr(a, 20, Pz, bx);
                                    _jtwri(a, 4, 161016, 17, 121112);
                                    Db = 0;
                                    break a
                                }
                                uz = _jtnub(a, Pr);
                                OD = _jtequ(a, Pr, uz);
                                if (vz = 0 == OD << 24 >> 24) {
                                    lB = a + 4408;
                                    gz = jy = cx = HEAP32[lB >> 2];
                                    Ny = HEAP32[gz >> 2];
                                    BB = Ny + 80;
                                    jD = IC = jy + BB;
                                    JC = HEAP32[jD >> 2];
                                    PD = JC + 20;
                                    eC = HEAP32[PD >> 2];
                                    Rz = ky = JC;
                                    Sz = HEAP32[Rz >> 2];
                                    ly = ky + Sz;
                                    _jtjsigstr(a, 20, eC, ly);
                                    _jtwri(a, 4, 161016, 15, 120936);
                                    Db = 0;
                                    break a
                                }
                                ay = HEAP32[30648];
                                kD = _jtva2(a, ay, Pr, -125);
                                Oy = 0 == (kD | 0);
                                do
                                    if (!Oy && (Tz = AE = kD, by = HEAP32[Tz >> 2], Vt = AE + by, wz = kD + 20, hz = HEAP32[wz >> 2], Py = _memchr(Vt, 0, hz), Cw = 0 == (Py | 0))) {
                                        Qy = HEAP32[Rq >> 2];
                                        Dw = _jtga(a, 4, Qy, 1, 0);
                                        (iz = 0 == (Dw | 0)) ? cy = 0: (fC = mB = f + 28, lD = Uz = Dw, gC = HEAP32[lD >> 2], xz = Uz + gC, hC = Qy << 2, _memcpy(xz, fC, hC) | 0, cy = Dw);
                                        iC = _jtfrom(a, pt, cy);
                                        yz = _jtirs2(a, Pr, iC, 0, 1, 1, 1054);
                                        nB = 0 == (yz | 0);
                                        do
                                            if (!nB && (QD = CB = yz, dx = HEAP32[QD >> 2], aw = CB + dx, oB = yz + 20, Ry = HEAP32[oB >> 2], sA = _memchr(aw, 0, Ry), jz = 0 == (sA | 0))) {
                                                DB = a + 1096;
                                                my = HEAP32[DB >> 2];
                                                iF = a + 1104;
                                                pB = HEAP32[iF >> 2];
                                                HEAP32[DB >> 2] =
                                                    1;
                                                HEAP32[iF >> 2] = -1;
                                                tA = HEAP32[Xw >> 2];
                                                TA = tA & 64512;
                                                UA = (Gx = 0 == (TA | 0)) ? Sy = _jtgr1(a, Pr) : Ju = _jtgrd1sp(a, Pr);
                                                HEAP32[DB >> 2] = my;
                                                HEAP32[iF >> 2] = pB;
                                                KC = HEAP32[nA >> 2];
                                                LC = KC - 1;
                                                EB = _jtga(a, 4, KC, 1, 0);
                                                MC = 0 == (EB | 0);
                                                do
                                                    if (MC) uA = 0;
                                                    else if (RD = 0 == (KC | 0)) uA = EB;
                                                else {
                                                    VA = EB;
                                                    NC = HEAP32[VA >> 2];
                                                    mD = EB;
                                                    vA = zz = mD + NC;
                                                    cI = -1;
                                                    for (Vz = vA;;)
                                                        if (Wz = cI + 1, Ty = Vz + 4, HEAP32[Vz >> 2] = Wz, Xz = (Wz | 0) == (LC | 0)) {
                                                            uA = EB;
                                                            break
                                                        } else cI = Wz, Vz = Ty
                                                }
                                                while (0);
                                                BE = _jtequ(a, UA, uA);
                                                if (nD = 0 == BE << 24 >> 24) {
                                                    Az = a + 4408;
                                                    OC = oD = wA = HEAP32[Az >> 2];
                                                    ex = HEAP32[OC >> 2];
                                                    bw = ex + 80;
                                                    jv = Lw = oD + bw;
                                                    wu = HEAP32[jv >> 2];
                                                    Yz = wu + 20;
                                                    sx = HEAP32[Yz >> 2];
                                                    Bz = Zz = wu;
                                                    $z = HEAP32[Bz >> 2];
                                                    Nv = Zz + $z;
                                                    _jtjsigstr(a, 20, sx, Nv);
                                                    _jtwri(a, 4, 161016, 15, 120512);
                                                    Db = 0;
                                                    break a
                                                }
                                                kz = HEAP32[bz >> 2];
                                                xA = or + 1;
                                                II = Qs + 20;
                                                Cz = yA = xr + II;
                                                lz = HEAP32[Cz >> 2];
                                                wH = xA - lz;
                                                XF = (kz | 0) == (wH | 0);
                                                if (!XF) {
                                                    YF = a + 4408;
                                                    tv = SD = zA = HEAP32[YF >> 2];
                                                    FB = HEAP32[tv >> 2];
                                                    AA = FB + 80;
                                                    ny = Dz = SD + AA;
                                                    yy = HEAP32[ny >> 2];
                                                    Mw = yy + 20;
                                                    ju = HEAP32[Mw >> 2];
                                                    WA = Nw = yy;
                                                    GB = HEAP32[WA >> 2];
                                                    pD = Nw + GB;
                                                    _jtjsigstr(a, 20, ju, pD);
                                                    _jtwri(a, 4, 161016, 13, 120384);
                                                    Db = 0;
                                                    break a
                                                }
                                                aA = _jtga(a, 4, kz, 1, 0);
                                                (qB = 0 == (aA | 0)) ? mz = 0: (tx = ht +
                                                    28, bA = xr + tx, XA = Ez = aA, YA = HEAP32[XA >> 2], cA = Ez + YA, qD = kz << 2, _memcpy(cA, bA, qD) | 0, mz = aA);
                                                TD = HEAP32[31058];
                                                rB = _jtdrop(a, TD, mz);
                                                dA = _jtga(a, 4, or, 1, 0);
                                                if (LG = 0 == (dA | 0)) PC = 0;
                                                else {
                                                    HB = dA;
                                                    UD = HEAP32[HB >> 2];
                                                    jC = dA;
                                                    ZA = rD = jC + UD;
                                                    ZF = -1;
                                                    for (kC = ZA;;)
                                                        if (MG = ZF + 1, IL = kC + 4, HEAP32[kC >> 2] = MG, lC = (MG | 0) == (Su | 0)) {
                                                            PC = dA;
                                                            break
                                                        } else ZF = MG, kC = IL
                                                }
                                                NG = _jtless(a, PC, pt);
                                                sD = HEAP32[Rq >> 2];
                                                $F = _jtga(a, 4, sD, 1, 0);
                                                (dI = 0 == ($F | 0)) ? jF = 0: (eI = OG = f + 28, uD = tD = $F, VD = HEAP32[uD >> 2], CE = tD + VD, WD = sD << 2, _memcpy(CE, eI, WD) | 0, jF = $F);
                                                mC = _jtfrom(a, NG, jF);
                                                IB = _jtequ(a,
                                                    rB, mC);
                                                kF = 0 == IB << 24 >> 24;
                                                if (!kF) {
                                                    JB = xr;
                                                    xH = qr;
                                                    break c
                                                }
                                                DE = a + 4408;
                                                zy = XD = vD = HEAP32[DE >> 2];
                                                KB = HEAP32[zy >> 2];
                                                BA = KB + 80;
                                                mF = lF = XD + BA;
                                                nC = HEAP32[mF >> 2];
                                                $A = nC + 20;
                                                wJ = HEAP32[$A >> 2];
                                                JI = aG = nC;
                                                EE = HEAP32[JI >> 2];
                                                nF = aG + EE;
                                                _jtjsigstr(a, 20, wJ, nF);
                                                _jtwri(a, 4, 161016, 14, 120184);
                                                Db = 0;
                                                break a
                                            }
                                        while (0);
                                        aB = a + 4408;
                                        bG = wD = yH = HEAP32[aB >> 2];
                                        cG = HEAP32[bG >> 2];
                                        YD = cG + 80;
                                        oC = FE = wD + YD;
                                        pC = HEAP32[oC >> 2];
                                        dG = pC + 20;
                                        ZD = HEAP32[dG >> 2];
                                        PG = zH = pC;
                                        fI = HEAP32[PG >> 2];
                                        QG = zH + fI;
                                        _jtjsigstr(a, 20, ZD, QG);
                                        _jtwri(a, 4, 161016, 14, 120648);
                                        Db = 0;
                                        break a
                                    }
                                while (0);
                                eG =
                                    a + 4408;
                                xD = nz = gI = HEAP32[eG >> 2];
                                xJ = HEAP32[xD >> 2];
                                KI = xJ + 80;
                                AH = LI = nz + KI;
                                fG = HEAP32[AH >> 2];
                                oF = fG + 20;
                                BH = HEAP32[oF >> 2];
                                yJ = pF = fG;
                                RG = HEAP32[yJ >> 2];
                                CA = pF + RG;
                                _jtjsigstr(a, 20, BH, CA);
                                _jtwri(a, 4, 161016, 17, 120808);
                                Db = 0;
                                break a
                            }
                        while (0);
                        GE = a + 4408;
                        qC = zJ = QC = HEAP32[GE >> 2];
                        $D = HEAP32[qC >> 2];
                        oy = $D + 80;
                        rC = MI = zJ + oy;
                        bB = HEAP32[rC >> 2];
                        sB = bB + 20;
                        gG = HEAP32[sB >> 2];
                        qF = NI = bB;
                        sC = HEAP32[qF >> 2];
                        LB = NI + sC;
                        _jtjsigstr(a, 20, gG, LB);
                        _jtwri(a, 4, 161016, 14, 117656);
                        Db = 0;
                        break a
                    } else xH = JB = CH = rF = f;
                while (0);
                yD = HEAP32[xH >> 2];
                hG = yD + 8;
                cB = sF = JB + hG;
                py =
                    HEAP32[cB >> 2];
                tB = py + yD;
                SG = Ow = JB + tB;
                hI = yD + 12;
                OI = TG = JB + hI;
                MB = HEAP32[OI >> 2];
                aE = MB + yD;
                UG = tF = JB + aE;
                NB = _jtthorn1(a, SG);
                if (PI = 0 == (NB | 0)) {
                    Db = 0;
                    break a
                }
                QI = NB + 28;
                zD = HEAP32[QI >> 2];
                bE = NB + 32;
                Uy = HEAP32[bE >> 2];
                uF = aE + 24;
                cK = tC = JB + uF;
                cE = HEAP32[cK >> 2];
                RC = (dE = 1 < (cE | 0)) ? UG : iI = _jttable(a, UG);
                DA = _jtthorn1(a, RC);
                if (EA = 0 == (DA | 0)) {
                    Db = 0;
                    break a
                }
                dB = DA + 24;
                AD = HEAP32[dB >> 2];
                uC = _jtga(a, 4, AD, 1, 0);
                if (AJ = 0 == (uC | 0)) {
                    Db = 0;
                    break a
                }
                iG = dK = DA + 28;
                HE = SC = uC;
                jG = HEAP32[HE >> 2];
                vF = SC + jG;
                BD = AD << 2;
                _memcpy(vF, iG, BD) | 0;
                fx = HEAP32[HE >> 2];
                IE = DH = SC + fx;
                kG = uC + 20;
                TC = HEAP32[kG >> 2];
                VG = TC - 1;
                JE = IE + (VG << 2);
                lG = HEAP32[JE >> 2];
                WG = lG + 3;
                JL = WG + Uy;
                CD = -JL;
                HEAP32[JE >> 2] = CD;
                Ay = _jttake(a, uC, DA);
                if (XG = 0 == (Ay | 0)) {
                    Db = 0;
                    break a
                }
                wF = NB;
                eE = HEAP32[wF >> 2];
                mG = Ay + 24;
                xF = HEAP32[mG >> 2];
                (KE = 0 == (xF | 0)) ? (eA = 1, d = 275) : (vC = Ay + 28, yF = HEAP32[vC >> 2], (LE = 0 == (yF | 0)) ? d = 277 : (eA = yF, d = 275));
                275 == d && (UC = Ay + 12, RI = HEAP32[UC >> 2], eB = RI & 64512, (OK = 0 == (eB | 0)) ? (nG = Ay + 20, DD = HEAP32[nG >> 2], FA = wC = (DD | 0) / (eA | 0) & -1) : d = 277);
                c: do
                    if (277 == d) {
                        OB = xF - 1;
                        PB = 0 < (OB | 0);
                        do
                            if (PB) {
                                QB = 1;
                                for (fB = 0;;)
                                    if (zF = fB + 1, oG = Ay + 28 + (zF <<
                                            2), fE = HEAP32[oG >> 2], YG = fE | 0, RB = QB * YG, GA = (zF | 0) < (OB | 0)) QB = RB, fB = zF;
                                    else break;
                                if (ME = 2147483647 < RB) {
                                    jI = a + 4408;
                                    gE = NE = ZG = HEAP32[jI >> 2];
                                    xC = HEAP32[gE >> 2];
                                    SB = xC + 40;
                                    EH = PK = NE + SB;
                                    OE = HEAP32[EH >> 2];
                                    PE = OE + 20;
                                    pG = HEAP32[PE >> 2];
                                    BF = AF = OE;
                                    yC = HEAP32[BF >> 2];
                                    FH = AF + yC;
                                    _jtjsigstr(a, 10, pG, FH);
                                    FA = 0;
                                    break c
                                } else ED = RB
                            } else ED = 1;
                        while (0);
                        FA = $G = ED & -1
                    }
                while (0);
                if (hE = 0 < (zD | 0)) {
                    aH = Ay;
                    QE = HEAP32[aH >> 2];
                    RE = QE - FA;
                    bH = Ay;
                    SI = eE - Uy;
                    eK = NB;
                    SE = bH + RE;
                    GH = CF = eK + SI;
                    FD = SE;
                    for (zC = 0;;)
                        if (Fz = FD + FA, HA = GH + Uy, _memcpy(Fz, HA, Uy) | 0, oz = zC + 1, fK = (oz | 0) < (zD |
                                0)) GH = HA, FD = Fz, zC = oz;
                        else break
                }
                TB = HEAP32[mG >> 2];
                if (qG = 2 < (TB | 0))
                    if (iE = _jtthorn1(a, Ay), HH = _jtmat(a, iE), fA = 0 == (HH | 0)) {
                        Db = 0;
                        break a
                    } else UB = HH;
                else UB = Ay;
                IH = UB + 28;
                cH = UB + 32;
                jE = HEAP32[cH >> 2];
                DF = a + 1048;
                VB = HEAP32[DF >> 2];
                VC = VB + 9;
                TE = HEAP8[VC];
                kE = HEAP32[IH >> 2];
                if (EF = 0 < (kE | 0)) {
                    gA = UB;
                    hA = HEAP32[gA >> 2];
                    uB = hA + 1;
                    UE = UB;
                    gB = WC = UE + uB;
                    for (BJ = 0;;)
                        if (IA = gB + Uy, HEAP8[IA] = TE, FF = gB + jE, XC = BJ + 1, rG = (XC | 0) < (kE | 0)) gB = FF, BJ = XC;
                        else {
                            Eh = UB;
                            break
                        }
                } else Eh = UB
            } else if (262144 == (q | 0) | 524288 == (q | 0) | 1048576 == (q | 0)) switch (GD = a + 2360, sG = HEAP32[GD >>
                2], sG | 0) {
                case 1:
                    vB = _jtaro(a, f);
                    WB = _jtbox(a, vB);
                    Eh = lE = _jtthorn1(a, WB);
                    break b;
                case 2:
                    XB = _jtdrr(a, f);
                    (dH = 0 == (XB | 0)) ? d = 294: (GF = XB + 12, gK = HEAP32[GF >> 2], eH = gK & 32, (JH = 0 == (eH | 0)) ? d = 294 : mE = XB);
                    294 == d && (VE = _jtbox(a, XB), mE = WE = _jtravel(a, VE));
                    Eh = TI = _jtthorn1(a, mE);
                    break b;
                case 4:
                    kI = _jttrep(a, f);
                    Eh = lI = _jtthorn1(a, kI);
                    break b;
                case 5:
                    KH = a + 204580;
                    HEAP32[KH >> 2] = 0;
                    By = a + 204552;
                    HEAP32[By >> 2] = 716;
                    gx = a + 204584;
                    HEAP32[gx >> 2] = 2468;
                    ux = _jtlrr(a, f);
                    HF = a + 204545;
                    fH = HEAP8[HF];
                    (mI = 0 == fH << 24 >> 24) ? (tG = HEAP32[KH >> 2], ZC = (YC = 0 == (tG |
                        0)) ? ux : hK = _jtover(a, ux, tG), HEAP32[KH >> 2] = 0, nE = 0 == (ZC | 0), nE || (_jttraverse(a, ZC, 654), JA = ZC + 16, LH = HEAP32[JA >> 2], YB = LH + 1, HEAP32[JA >> 2] = YB), _jttpop(a, b), uG = hx = _jttpush(a, ZC)) : uG = 0;
                    Eh = oE = _jtthorn1(a, uG);
                    break b;
                case 6:
                    $C = a + 204580;
                    HEAP32[$C >> 2] = 0;
                    IF = a + 204552;
                    HEAP32[IF >> 2] = 718;
                    UI = a + 204584;
                    HEAP32[UI >> 2] = 2472;
                    AC = _jtlrr(a, f);
                    MH = a + 204545;
                    XE = HEAP8[MH];
                    (QK = 0 == XE << 24 >> 24) ? (wB = HEAP32[$C >> 2], hB = (gH = 0 == (wB | 0)) ? AC : YE = _jtover(a, AC, wB), HEAP32[$C >> 2] = 0, JF = 0 == (hB | 0), JF || (_jttraverse(a, hB, 654), ZB = hB + 16, aD = HEAP32[ZB >> 2],
                        KF = aD + 1, HEAP32[ZB >> 2] = KF), _jttpop(a, b), iA = VI = _jttpush(a, hB)) : iA = 0;
                    Eh = bD = _jtthorn1(a, iA);
                    break b;
                default:
                    n = 0;
                    d = 312;
                    break a
            } else return e = 0, STACKTOP = c, e;
            while (0);
            (iB = 0 == (Eh | 0)) ? Db = 0: (n = Eh, d = 312)
        }
    while (0);
    312 == d && (_jttraverse(a, n, 654), jB = n + 16, KA = HEAP32[jB >> 2], LF = KA + 1, HEAP32[jB >> 2] = LF, Db = n);
    _jttpop(a, b);
    e = _jttpush(a, Db);
    STACKTOP = c;
    return e
}
function _jtthv(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G;
    e = 0;
    g = STACKTOP;
    STACKTOP = STACKTOP + 64 | 0;
    h = d - 4;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = g, 0;
    j = HEAP32[f + 20 >> 2];
    i = HEAP32[f + 12 >> 2];
    l = f + HEAP32[f >> 2];
    do
        if (16777216 == (i | 0)) k = 12, m = 2622, n = 12, b = 28;
        else if (65536 == (i | 0)) k = 4, m = 2622, n = 12, b = 28;
    else if (67108864 == (i | 0) | 134217728 == (i | 0) | 4194304 == (i | 0) | 8388608 == (i | 0)) k = 4, m = 2622, n = 12, b = 28;
    else if (16 == (i | 0)) k = 16, m = 2638, n = 58, b = 28;
    else if (64 == (i | 0) | 128 == (i | 0)) {
        p = _jtthxqe(a, f);
        if (0 == (p | 0)) return c =
            0, STACKTOP = g, c;
        q = HEAP32[p + 20 >> 2];
        s = (r = (q | 0) > (d | 0)) ? h : q;
        _memcpy(c, p + HEAP32[p >> 2], s) | 0;
        q = r & 1;
        t = c + s;
        b = 41
    } else if (32 == (i | 0)) k = 4, m = 2622, n = 12, b = 28;
    else if (131072 == (i | 0)) k = 2, m = 2622, n = 12, b = 28;
    else if (8 == (i | 0)) k = 8, m = 2620, n = 29, b = 28;
    else if (1 == (i | 0)) {
        s = (j << 1 | 0) > (d | 0);
        r = s & 1;
        b = s ? (h | 0) / 2 & -1 : j;
        if (0 >= (b | 0)) q = r, t = c;
        else {
            s = b << 1;
            p = 0;
            q = c;
            for (t = l;;)
                if (HEAP8[q] = 0 != (HEAP8[t] | 0) ? 49 : 48, HEAP8[q + 1] = 32, u = p + 1, (u | 0) < (b | 0)) p = u, q += 2, t += 1;
                else break;
            q = r;
            t = c + s
        }
        b = 41
    } else if (2 == (i | 0) | 2097152 == (i | 0) | 33554432 == (i | 0)) k = 1, m = 2622, n = 12, b =
        28;
    else if (268435456 == (i | 0)) k = 12, m = 2622, n = 12, b = 28;
    else if (536870912 == (i | 0)) k = 24, m = 2622, n = 12, b = 28;
    else if (4 == (i | 0))
        if (0 >= (j | 0)) b = 38;
        else {
            q = t = c;
            p = 0;
            for (u = l;;) {
                _sprintf(g, 120080, (e = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[e >> 2] = HEAP32[u >> 2], e));
                STACKTOP = e;
                45 == (HEAP8[g] | 0) && (HEAP8[g] = 95);
                b = q + _strlen(g);
                if (w = (h | 0) < (b - t | 0)) {
                    v = q;
                    break
                }
                _strcpy(q, g);
                p += 1;
                if ((p | 0) < (j | 0)) q = b, u += 4;
                else {
                    v = b;
                    break
                }
            }
            q = w & 1;
            t = v;
            b = 41
        } else k = 1024 == (i | 0) | 4096 == (i | 0) | 8192 == (i | 0) | 16384 == (i | 0) | 2048 == (i | 0) | 32768 == (i | 0) ? 16 : 524288 == (i | 0) | 1048576 ==
        (i | 0) | 262144 == (i | 0) ? 44 : -1, m = 2622, n = 12, b = 28;
    while (0);
    do
        if (28 == b)
            if ((Math_imul(n, j) | 0) <= (d | 0)) {
                if (0 < (j | 0)) {
                    i = m;
                    v = c;
                    w = l;
                    for (e = 0;;)
                        if (getFUNCTION_TABLE(i)(a, v, w), b = _strlen(v), f = b + (v + 1), HEAP8[v + b] = 32, b = e + 1, (b | 0) < (j | 0)) v = f, w += k, e = b;
                        else {
                            x = f;
                            break
                        }
                } else x = c;
                e = x - 1;
                y = x;
                z = e;
                A = 32 == (HEAP8[e] | 0);
                b = 45
            } else if (e = m, 0 >= (j | 0)) b = 38;
    else {
        v = w = c;
        i = l;
        for (f = 0;;) {
            getFUNCTION_TABLE(e)(a, g, i);
            b = _strlen(g);
            u = b + (v + 1);
            if (D = (h | 0) < (u - w | 0)) {
                B = v;
                break
            }
            _strcpy(v, g);
            HEAP8[v + b] = 32;
            b = f + 1;
            if ((b | 0) < (j | 0)) v = u, i += k, f = b;
            else {
                B = u;
                break
            }
        }
        q = D & 1;
        t =
            B;
        b = 41
    }
    while (0);
    38 == b ? (B = c - 1, y = c, z = B, A = 32 == (HEAP8[B] | 0), b = 45) : 41 == b && (B = t - 1, D = 32 == (HEAP8[B] | 0), 0 == q << 24 >> 24 ? (y = t, z = B, A = D, b = 45) : (D ? a = t : (HEAP8[t] = 32, a = t + 1), HEAP8[a] = 46, HEAP8[a + 1 | 0] = 46, HEAP8[a + 2 | 0] = 46, G = a + 3));
    45 == b && (G = A ? z : y);
    HEAP8[G] = 0;
    STACKTOP = g;
    return G - c
}

function _plusinsO(a, f, d, c, b, e) {
    var g, h, j, i, l, k, m, n, p, q, r, s, t, a = (d | 0) / (c | 0) & -1;
    g = e + (Math_imul(d, f) << 2);
    d = b + (Math_imul(a, f) << 3);
    if (1 == (a | 0)) {
        if (!(0 >= (f | 0))) {
            b = c - 1;
            e = 0 < (b | 0);
            h = -c;
            j = 0;
            i = g;
            for (l = d;;) {
                g = i - 4;
                k = HEAP32[g >> 2] | 0;
                if (e) {
                    a = 0;
                    for (m = k;;)
                        if (d = g - 4, n = m + (HEAP32[d >> 2] | 0), a += 1, (a | 0) < (b | 0)) m = n, g = d;
                        else break;
                    m = n;
                    p = i + (h << 2)
                } else m = k, p = g;
                g = l - 8;
                HEAPF64[g >> 3] = m;
                m = j + 1;
                if ((m | 0) < (f | 0)) j = m, i = p, l = g;
                else break
            }
        }
    } else if (1 == (c | 0)) {
        if (0 < (a | 0)) {
            q = 0;
            r = g;
            for (s = d;;)
                if (l = r - 4, p = s - 8, HEAPF64[p >> 3] = HEAP32[l >> 2] | 0, i = q + 1, (i |
                        0) < (a | 0)) q = i, r = l, s = p;
                else break
        }
    } else if (!(0 >= (f | 0))) {
        s = -a;
        r = 0 < (a | 0);
        q = c - 2;
        c = 0 < (q | 0);
        p = -2 * a & -1;
        l = d;
        d = 0;
        for (i = g;;) {
            g = i + (s << 2);
            if (r) {
                j = i;
                m = 0;
                h = g;
                for (n = l;;)
                    if (b = n - 8, e = h - 4, g = j - 4, HEAPF64[b >> 3] = (HEAP32[e >> 2] | 0) + (HEAP32[g >> 2] | 0), m += 1, (m | 0) < (a | 0)) j = g, h = e, n = b;
                    else break;
                b = i + (p << 2)
            } else b = g;
            if (c) {
                n = 0;
                for (h = b;;) {
                    if (r) {
                        m = h;
                        j = 0;
                        for (g = l;;)
                            if (k = g - 8, b = m - 4, HEAPF64[k >> 3] = (HEAP32[b >> 2] | 0) + HEAPF64[k >> 3], e = j + 1, (e | 0) < (a | 0)) m = b, j = e, g = k;
                            else break;
                        b = h + (s << 2)
                    } else b = h;
                    g = n + 1;
                    if ((g | 0) < (q | 0)) n = g, h = b;
                    else {
                        t = b;
                        break
                    }
                }
            } else t =
                b;
            h = d + 1;
            if ((h | 0) < (f | 0)) l += s << 3, d = h, i = t;
            else break
        }
    }
}
function abort(a) {
    a && (Module.print(a), Module.printErr(a));
    ABORT = !0;
    EXITSTATUS = 1;
    throw "abort() at " + stackTrace();
}


function _jtfmtD(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n;
    b = c = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    g = d;
    h = 8;
    j = g;
    for (i = 113136;;) {
        if ((HEAP8[j] | 0) != (HEAP8[i] | 0)) {
            l = 8;
            k = g;
            m = 113128;
            break
        }
        h -= 1;
        if (0 == (h | 0)) {
            c = 4;
            break
        } else j += 1, i += 1
    }
    if (4 == c) i = f, tempBigInt = 95, HEAP8[i] = tempBigInt, tempBigInt >>= 8, HEAP8[i + 1 | 0] = tempBigInt;
    else {
        for (;
            (HEAP8[k] | 0) == (HEAP8[m] | 0);)
            if (i = l - 1, 0 == (i | 0)) {
                c = 7;
                break
            } else l = i, k += 1, m += 1;
        if (7 == c) HEAP8[f] = HEAP8[118104], HEAP8[f + 1 | 0] = HEAP8[118105], HEAP8[f + 2 | 0] = HEAP8[118106];
        else if (c = HEAPF64[d >> 3], m = HEAP32[d +
                4 >> 2] & 2147483647, k = 2146435072, m >>> 0 > k >>> 0 | m >>> 0 == k >>> 0 & 0 < (HEAP32[d >> 2] & -1) >>> 0) HEAP8[f] = HEAP8[117616], HEAP8[f + 1 | 0] = HEAP8[117617], HEAP8[f + 2 | 0] = HEAP8[117618];
        else if (d = e, _sprintf(d, a + 205324, (b = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[b >> 3] = c == HEAPF64[15565] ? 0 : c, b)), STACKTOP = b, b = HEAP8[d], 45 == b << 24 >> 24 ? (HEAP8[f] = 95, a = 1, d = f + 1) : (a = 43 == b << 24 >> 24 | 0, d = f), f = e + a, 46 == (HEAP8[f] | 0) && (HEAP8[d] = 48, d += 1), _memcpy(d, f, 30 - a) | 0, a = _strchr(d, 101), 0 != (a | 0)) {
            d = a + 1;
            45 == (HEAP8[d] | 0) ? (HEAP8[d] = 95, f = a + 2) : f = d;
            for (d = 0;;) {
                n = HEAP8[f +
                    d];
                if (!(48 == n << 24 >> 24 | 43 == n << 24 >> 24)) break;
                d += 1
            }
            if (0 != (d | 0)) {
                a = d + 1;
                d = f;
                for (f = n;;) {
                    HEAP8[d] = f;
                    if (0 == f << 24 >> 24) break;
                    n = HEAP8[d + a];
                    d += 1;
                    f = n
                }
            }
        }
    }
    STACKTOP = e
}

function _jttie(a, f, d) {
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    f = 0 == (HEAP32[f + 12 >> 2] & 262144 | 0) ? f : _jtbox(a, _jtaro(a, f));
    d = 0 == (HEAP32[d + 12 >> 2] & 262144 | 0) ? d : _jtbox(a, _jtaro(a, d));
    return a = _jtover(a, f, d)
}
function _jttk(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P;
    c = 0;
    b = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    e = HEAP32[f + 20 >> 2];
    h = g = f + HEAP32[f >> 2];
    j = d + 24;
    i = HEAP32[j >> 2];
    l = d + 12;
    k = HEAP32[l >> 2];
    if (0 != (k & 64512 | 0)) {
        m = d + 28;
        n = _jtga(a, k, 1, i, m);
        if (0 == (n | 0)) return 0;
        if (0 < (e | 0))
            for (k = 0;;)
                if (p = HEAP32[h + (k << 2) >> 2], HEAP32[n + 28 + (k << 2) >> 2] = -1 < (p | 0) ? p : -p, p = k + 1, (p | 0) < (e | 0)) k = p;
                else break;
        k = n;
        p = HEAP32[n >> 2];
        q = k + p;
        r = d;
        s = HEAP32[d >> 2];
        t = r + s;
        if ((e | 0) > (i | 0)) u = f;
        else {
            w = _jtga(a, 4,
                i, 1, 0);
            if (0 == (w | 0)) return 0;
            l = v = w;
            _memcpy(v + HEAP32[l >> 2], m, i << 2) | 0;
            _memcpy(v + HEAP32[l >> 2], g, e << 2) | 0;
            u = w
        }
        g = t;
        t = HEAP32[g >> 2] + s;
        f = _jtpaxis(a, i, r + t);
        if (0 == (f | 0)) return 0;
        w = HEAP32[t + (r + 20) >> 2];
        t = _jtfrom(a, f, u);
        if (0 == (t | 0)) return 0;
        u = t + HEAP32[t >> 2];
        0 == (d | 0) ? x = 0 : (t = HEAP32[j >> 2], l = _jtga(a, 4, t, 1, 0), 0 == (l | 0) ? x = 0 : (_memcpy(l + HEAP32[l >> 2], m, t << 2) | 0, x = l));
        m = _jtfrom(a, f, x);
        if (0 == (m | 0)) return 0;
        x = m + HEAP32[m >> 2];
        m = i - w;
        if (0 < (m | 0)) {
            for (f = 0;;)
                if (j = f + w, y = (HEAP32[u + (j << 2) >> 2] | 0) != (HEAP32[x + (j << 2) >> 2] | 0), j = f + 1, (j | 0) < (m |
                        0) & (y ^ 1)) f = j;
                else break;
            h = y & 1
        } else h = 0;
        if (y = 0 < (w | 0)) {
            for (f = 0;;)
                if (z = (HEAP32[u + (f << 2) >> 2] | 0) != (HEAP32[x + (f << 2) >> 2] | 0), j = f + 1, (j | 0) < (w | 0) & (z ^ 1)) f = j;
                else break;
            e = z & 1
        } else e = 0;
        if (z = 0 == h << 24 >> 24) d = r + (HEAP32[s + (r + 12) >> 2] + s);
        else {
            h = a + 204448;
            HEAP32[h >> 2] = r + (HEAP32[s + (r + 4) >> 2] + s);
            f = _jtga(a, 4, m, 1, 0);
            0 == (f | 0) ? v = 0 : (_memcpy(f + HEAP32[f >> 2], u + (w << 2), m << 2) | 0, v = f);
            f = _jtirs2(a, v, r + (HEAP32[s + (r + 12) >> 2] + s), 0, 1, -1, 2984);
            HEAP32[h >> 2] = 0;
            if (0 == (f | 0)) return 0;
            d = f
        }
        do
            if (0 == e << 24 >> 24) {
                v = q;
                m = _jtca(a, r + (HEAP32[s + (r + 8) >> 2] + s)) -
                    v;
                HEAP32[p + (k + 8) >> 2] = m;
                if (0 == (k + (m + p) | 0)) return m = 0;
                t = z ? _jtca(a, d) : d;
                m = t - v;
                HEAP32[p + (k + 12) >> 2] = m;
                if (0 == (k + (m + p) | 0)) return m = 0
            } else {
                m = HEAP32[d + 12 >> 2];
                A = 64 == (m | 0) ? 4 : 128 == (m | 0) ? 8 : 4 == (m | 0) | 67108864 == (m | 0) | 134217728 == (m | 0) | 4194304 == (m | 0) | 8388608 == (m | 0) ? 4 : 1 == (m | 0) | 8 == (m | 0) | 16 == (m | 0) ? m : 65536 == (m | 0) ? 4 : 268435456 == (m | 0) ? 12 : 32 == (m | 0) ? 4 : 1024 == (m | 0) | 4096 == (m | 0) | 8192 == (m | 0) | 16384 == (m | 0) | 2048 == (m | 0) | 32768 == (m | 0) ? 16 : 536870912 == (m | 0) ? 24 : 262144 == (m | 0) | 524288 == (m | 0) | 1048576 == (m | 0) ? 44 : 131072 == (m | 0) ? 2 : 2 == (m | 0) | 2097152 ==
                    (m | 0) | 33554432 == (m | 0) ? 1 : 16777216 == (m | 0) ? 12 : -1;
                v = d + 24;
                f = HEAP32[v >> 2];
                0 == (f | 0) ? (D = 1, c = 43) : (h = HEAP32[d + 28 >> 2], 0 == (h | 0) ? c = 45 : (D = h, c = 43));
                43 == c && (0 != (m & 64512 | 0) ? c = 45 : B = (HEAP32[d + 20 >> 2] | 0) / (D | 0) & -1);
                a: do
                    if (45 == c) {
                        h = f - 1;
                        do
                            if (0 < (h | 0)) {
                                j = 1;
                                for (l = 0;;)
                                    if (t = l + 1, G = j * (HEAP32[d + 28 + (t << 2) >> 2] | 0), (t | 0) < (h | 0)) j = G, l = t;
                                    else break;
                                if (2147483647 >= G) B = G;
                                else {
                                    l = HEAP32[a + 4408 >> 2];
                                    j = HEAP32[l + (HEAP32[l >> 2] + 40) >> 2];
                                    _jtjsigstr(a, 10, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]);
                                    B = 0;
                                    break a
                                }
                            } else B = 1;
                        while (0);
                        B &= -1
                    }
                while (0);
                f = Math_imul(B,
                    A) | 0;
                h = HEAP32[s + (r + 8) >> 2] + s;
                j = HEAP32[h + (r + 24) >> 2];
                l = h + (r + 28);
                A = 0 == (j | 0) ? 1 : HEAP32[l >> 2];
                t = _jtga(a, 4, HEAP32[h + (r + 20) >> 2], j, l);
                if (0 == (t | 0)) return m = 0;
                l = HEAP32[t >> 2];
                j = HEAP32[r + h >> 2];
                v = _jtga(a, m, HEAP32[d + 20 >> 2], HEAP32[v >> 2], d + 28);
                if (0 == (v | 0)) return m = 0;
                if (0 < (A | 0)) {
                    i = d + HEAP32[d >> 2];
                    m = v + HEAP32[v >> 2];
                    F = C = 0;
                    c = r + (j + h);
                    for (h = t + l;;) {
                        do
                            if (y) {
                                for (l = 0;;) {
                                    j = HEAP32[u + (l << 2) >> 2];
                                    E = HEAP32[c + (l << 2) >> 2];
                                    if (0 > (j | 0))
                                        if (J = (E | 0) < (HEAP32[x + (l << 2) >> 2] + j | 0), L = J & 1, J) {
                                            I = L;
                                            break
                                        } else E = L;
                                    else if (L = (E | 0) >= (j | 0), j = L & 1, L) {
                                        I = j;
                                        break
                                    } else E =
                                        j;
                                    j = l + 1;
                                    if ((j | 0) < (w | 0)) l = j;
                                    else {
                                        I = E;
                                        break
                                    }
                                }
                                if (0 != I << 24 >> 24) L = h, H = C, j = m;
                                else {
                                    l = C + 1;
                                    _memcpy(m, i, f) | 0;
                                    j = m + f;
                                    L = h;
                                    for (E = 0;;)
                                        if (J = HEAP32[u + (E << 2) >> 2], H = HEAP32[c + (E << 2) >> 2], J = 0 > (J | 0) ? H - J - HEAP32[x + (E << 2) >> 2] : H, HEAP32[L >> 2] = J, H = E + 1, (H | 0) < (w | 0)) L += 4, E = H;
                                        else break;
                                    L = h + (w << 2);
                                    H = l
                                }
                            } else _memcpy(m, i, f) | 0, L = h, H = C + 1, j = m + f;
                        while (0);
                        E = F + 1;
                        if ((E | 0) < (A | 0)) i += f, m = j, C = H, F = E, c += w << 2, h = L;
                        else {
                            K = H;
                            break
                        }
                    }
                } else K = 0;
                if (h = (K | 0) < (A | 0)) c = _jtga(a, 4, 1, 0, 0), 0 == (c | 0) ? N = 0 : (HEAP32[c + HEAP32[c >> 2] >> 2] = K, N = c), t = _jttake(a, N, t);
                c = q;
                F = t -
                    c;
                HEAP32[p + (k + 8) >> 2] = F;
                if (0 == (k + (F + p) | 0)) return m = 0;
                h ? (h = _jtga(a, 4, 1, 0, 0), 0 == (h | 0) ? f = 0 : (HEAP32[h + HEAP32[h >> 2] >> 2] = K, f = h), S = _jttake(a, f, v)) : S = v;
                h = S - c;
                HEAP32[p + (k + 12) >> 2] = h;
                if (0 == (k + (h + p) | 0)) return m = 0
            }
        while (0);
        S = q;
        f = _jtca(a, r + (HEAP32[g >> 2] + s)) - S;
        HEAP32[q >> 2] = f;
        if (0 == (k + (f + p) | 0)) return 0;
        f = _jtca(a, r + (HEAP32[s + (r + 4) >> 2] + s)) - S;
        HEAP32[p + (k + 4) >> 2] = f;
        if (0 == (k + (f + p) | 0)) return 0;
        _jttraverse(a, n, 654);
        p = n + 16;
        HEAP32[p >> 2] += 1;
        _jttpop(a, b);
        return m = _jttpush(a, n)
    }
    n = 0 < (e | 0);
    a: do
        if (n)
            for (p = 0;;) {
                f = p + 1;
                if (0 == (HEAP32[h +
                        (p << 2) >> 2] | 0)) {
                    v = 0;
                    t = k;
                    break a
                }
                if ((f | 0) < (e | 0)) p = f;
                else {
                    c = 88;
                    break
                }
            } else c = 88;
    while (0);
    a: do
        if (88 == c) {
            p = i - e;
            if (v = 0 < (p | 0))
                for (t = 0;;) {
                    f = t + 1;
                    if (0 == (HEAP32[d + 28 + (t + e << 2) >> 2] | 0)) {
                        v = 0;
                        t = k;
                        break a
                    }
                    if ((f | 0) < (p | 0)) t = f;
                    else break
                }
            if (0 == (HEAP32[d + 20 >> 2] | 0)) {
                do
                    if (n) {
                        t = 1;
                        for (f = 0;;)
                            if (s = t * (HEAP32[h + (f << 2) >> 2] | 0), k = f + 1, (k | 0) < (e | 0)) t = s, f = k;
                            else break;
                        2147483647 >= s ? (x = s, c = 96) : (f = HEAP32[a + 4408 >> 2], t = HEAP32[f + (HEAP32[f >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), A = 0)
                    } else x = 1, c = 96;
                while (0);
                96 == c && (A =
                    x & -1);
                t = a + 204545;
                if (0 != (HEAP8[t] | 0)) return m = 0;
                if (-2147483648 == (A | 0)) return f = HEAP32[a + 4408 >> 2], k = HEAP32[f + (HEAP32[f >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]), m = 0;
                k = -1 < (A | 0) ? A : -A;
                do
                    if (v) {
                        f = 1;
                        for (S = 0;;)
                            if (q = f * (HEAP32[d + 28 + (e + S << 2) >> 2] | 0), s = S + 1, (s | 0) < (p | 0)) f = q, S = s;
                            else break;
                        2147483647 >= q ? (w = q, c = 104) : (S = HEAP32[a + 4408 >> 2], f = HEAP32[S + (HEAP32[S >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), u = 0)
                    } else w = 1, c = 104;
                while (0);
                104 == c && (u = w & -1 | 0);
                p = (k | 0) * u;
                2147483647 < p ? (v = HEAP32[a +
                    4408 >> 2], f = HEAP32[v + (HEAP32[v >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), b = 0) : b = p & -1;
                if (0 == (HEAP8[t] | 0)) {
                    v = b;
                    t = HEAP32[l >> 2];
                    break
                } else return m = 0
            }
            z = 32 == (k | 0) ? 4 : 64 == (k | 0) ? 4 : 131072 == (k | 0) ? 2 : 4 == (k | 0) | 67108864 == (k | 0) | 134217728 == (k | 0) | 4194304 == (k | 0) | 8388608 == (k | 0) ? 4 : 536870912 == (k | 0) ? 24 : 1 == (k | 0) | 8 == (k | 0) | 16 == (k | 0) ? k : 2 == (k | 0) | 2097152 == (k | 0) | 33554432 == (k | 0) ? 1 : 16777216 == (k | 0) ? 12 : 65536 == (k | 0) ? 4 : 268435456 == (k | 0) ? 12 : 128 == (k | 0) ? 8 : 1024 == (k | 0) | 4096 == (k | 0) | 8192 == (k | 0) | 16384 == (k | 0) | 2048 == (k | 0) | 32768 ==
                (k | 0) ? 16 : 262144 == (k | 0) | 524288 == (k | 0) | 1048576 == (k | 0) ? 44 : -1;
            do
                if (n) {
                    p = a + 204545;
                    f = a + 204452;
                    v = a + 4408;
                    S = 0;
                    r = s = 1;
                    q = 0;
                    g = d;
                    b: for (;;) {
                        K = Math_imul(r, s) | 0;
                        t = HEAP32[h + (S << 2) >> 2];
                        N = -1 < (t | 0) ? t : -t;
                        A = HEAP32[d + 28 + (S << 2) >> 2];
                        do
                            if ((N | 0) == (A | 0)) T = g, V = q;
                            else {
                                H = g + 20;
                                L = ((HEAP32[H >> 2] | 0) / (A | 0) & -1 | 0) * (N | 0);
                                2147483647 < L ? (w = HEAP32[v >> 2], j = HEAP32[w + (HEAP32[w >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), I = 0) : I = L & -1;
                                if (0 != (HEAP8[p] | 0)) {
                                    m = 0;
                                    c = 177;
                                    break b
                                }
                                L = _jtga(a, k, I, i, g + 28);
                                if (0 == (L | 0)) {
                                    m = 0;
                                    c = 177;
                                    break b
                                }
                                HEAP32[L +
                                    28 + (S << 2) >> 2] = N;
                                j = (N | 0) > (A | 0);
                                do
                                    if (j)
                                        if (w = Math_imul(HEAP32[L + 20 >> 2], z) | 0, x = J = L, u = HEAP32[x >> 2], I = J + u, E = (z | 0) < (w | 0), _memcpy(I, HEAP32[f >> 2], E ? z : w) | 0, E)
                                            for (y = z;;)
                                                if (E = w - y, _memcpy(J + (u + y), I, (y | 0) < (E | 0) ? y : E) | 0, E = y << 1, (E | 0) < (w | 0)) y = E;
                                                else {
                                                    Q = J;
                                                    P = x;
                                                    break
                                                } else Q = J, P = x;
                                else P = Q = L;
                                while (0);
                                x = Math_imul((HEAP32[H >> 2] | 0) / (Math_imul(A, K) | 0) & -1, z) | 0;
                                J = Math_imul(x, j ? A : N) | 0;
                                w = Math_imul(x, N) | 0;
                                I = HEAP32[P >> 2];
                                u = 0 > (t | 0);
                                y = u & j ? (Math_imul(x, N - A) | 0) + I : I;
                                I = Math_imul(x, A) | 0;
                                E = HEAP32[g >> 2];
                                D = u & (A | 0) > (N | 0) ? E + (Math_imul(x, A -
                                    N) | 0) : E;
                                if (0 >= (K | 0)) T = L, V = 1;
                                else {
                                    E = g + D;
                                    x = Q + y;
                                    for (u = 0;;)
                                        if (_memcpy(x, E, J) | 0, y = u + 1, (y | 0) < (K | 0)) E += I, x += w, u = y;
                                        else {
                                            T = L;
                                            V = 1;
                                            break
                                        }
                                }
                            }
                        while (0);
                        A = S + 1;
                        if ((A | 0) < (e | 0)) S = A, s = N, r = K, q = V, g = T;
                        else {
                            c = 167;
                            break
                        }
                    }
                    if (167 == c) 0 == V << 24 >> 24 ? c = 168 : F = T;
                    else if (177 == c) return m
                } else c = 168;
            while (0);
            168 == c && (F = _jtca(a, d));
            do
                if (0 == (HEAP32[l >> 2] & 32 | 0)) c = 174;
                else if (0 == (HEAP32[d + 4 >> 2] & 14 | 0)) c = 174;
            else if (t = d - F, 0 == (F | 0)) C = 0;
            else if (k = F + 4, HEAP32[k >> 2] |= 8, k = F + HEAP32[F >> 2], g = HEAP32[F + 20 >> 2], 0 < (g | 0))
                for (n = 0;;)
                    if (q = k + (n << 2), HEAP32[q >>
                            2] += t, q = n + 1, (q | 0) < (g | 0)) n = q;
                    else {
                        c = 175;
                        break
                    } else c = 175;
            while (0);
            174 == c && (0 == (F | 0) ? C = 0 : c = 175);
            175 == c && (_jttraverse(a, F, 654), g = F + 16, HEAP32[g >> 2] += 1, C = F);
            _jttpop(a, b);
            return m = _jttpush(a, C)
        }
    while (0);
    C = _jtga(a, t, v, i, d + 28);
    if (0 == (C | 0)) return 0;
    a: do
        if (n) {
            d = C + 28;
            for (i = 0;;) {
                t = HEAP32[h + (i << 2) >> 2];
                if (-2147483648 == (t | 0)) break;
                HEAP32[d >> 2] = -1 < (t | 0) ? t : -t;
                t = i + 1;
                if ((t | 0) < (e | 0)) d += 4, i = t;
                else break a
            }
            i = HEAP32[a + 4408 >> 2];
            d = HEAP32[i + (HEAP32[i >> 2] + 40) >> 2];
            _jtjsigstr(a, 10, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]);
            return m = 0
        }
    while (0);
    if (0 == (v | 0)) return C;
    e = HEAP32[l >> 2];
    b = 262144 == (e | 0) | 524288 == (e | 0) | 1048576 == (e | 0) ? 44 : 16777216 == (e | 0) ? 12 : 1 == (e | 0) | 8 == (e | 0) | 16 == (e | 0) ? e : 131072 == (e | 0) ? 2 : 4 == (e | 0) | 67108864 == (e | 0) | 134217728 == (e | 0) | 4194304 == (e | 0) | 8388608 == (e | 0) ? 4 : 65536 == (e | 0) ? 4 : 268435456 == (e | 0) ? 12 : 128 == (e | 0) ? 8 : 1024 == (e | 0) | 4096 == (e | 0) | 8192 == (e | 0) | 16384 == (e | 0) | 2048 == (e | 0) | 32768 == (e | 0) ? 16 : 32 == (e | 0) ? 4 : 64 == (e | 0) ? 4 : 2 == (e | 0) | 2097152 == (e | 0) | 33554432 == (e | 0) ? 1 : 536870912 == (e | 0) ? 24 : -1;
    e = Math_imul(b, v) | 0;
    v = C;
    l = HEAP32[C >> 2];
    h = v + l;
    n = (b | 0) < (e | 0);
    _memcpy(h,
        HEAP32[a + 204452 >> 2], n ? b : e) | 0;
    if (n) a = b;
    else return C;
    for (;;)
        if (b = e - a, _memcpy(v + (l + a), h, (a | 0) < (b | 0) ? a : b) | 0, b = a << 1, (b | 0) < (e | 0)) a = b;
        else {
            m = C;
            break
        }
    return m
}
function _jttpop(a, f) {
    var d, c, b, e, g, h, j, i, l;
    d = a + 205692;
    c = HEAP32[d >> 2];
    b = a + 205752;
    e = HEAP32[b >> 2];
    if (!((e + c | 0) <= (f | 0))) {
        g = a + 205728;
        h = a + 1056;
        j = a + 205732;
        i = e;
        for (e = c;;)
            if (1 < (i | 0) ? (c = i - 1, HEAP32[b >> 2] = c, e = HEAP32[HEAP32[g >> 2] + (c << 2) >> 2], 0 != (e | 0) && (c = e + 16, i = HEAP32[c >> 2] - 1, HEAP32[c >> 2] = i, 0 == (i | 0) && (i = e - 32 + 24, e = HEAP16[i + 4 >> 1], c = e << 16 >> 16, l = HEAP32[124360 + (c << 2) >> 2], HEAP32[h >> 2] -= l, 10 < e << 16 >> 16 ? _free(i) : (e = a + 204588 + (c << 2), HEAP32[i >> 2] = HEAP32[e >> 2], HEAP32[e >> 2] = i, i = a + 204712 + (c << 2), HEAP32[i >> 2] += l)))) : (l = HEAP32[j >>
                    2], i = HEAP32[HEAP32[g >> 2] >> 2], HEAP32[j >> 2] = i, HEAP32[g >> 2] = i + HEAP32[i >> 2], HEAP32[d >> 2] = e - 2E3, HEAP32[b >> 2] = 2E3, 0 != (l | 0) && (i = l + 16, c = HEAP32[i >> 2] - 1, HEAP32[i >> 2] = c, 0 == (c | 0) && (c = l - 32 + 24, l = HEAP16[c + 4 >> 1], i = l << 16 >> 16, e = HEAP32[124360 + (i << 2) >> 2], HEAP32[h >> 2] -= e, 10 < l << 16 >> 16 ? _free(c) : (l = a + 204588 + (i << 2), HEAP32[c >> 2] = HEAP32[l >> 2], HEAP32[l >> 2] = c, c = a + 204712 + (i << 2), HEAP32[c >> 2] += e)))), e = HEAP32[d >> 2], c = HEAP32[b >> 2], (c + e | 0) > (f | 0)) i = c;
            else break
    }
}
function _jttpush(a, f) {
    var d, c, b, e, g;
    if (0 == (f | 0)) return 0;
    _jttraverse(a, f, 2800);
    d = a + 205752;
    c = HEAP32[d >> 2];
    if (1999 < (c | 0)) {
        b = a + 205732;
        e = HEAP32[b >> 2];
        c = _jtma(a, 8032);
        if (0 == (c | 0)) return 0;
        HEAP32[c + 12 >> 2] = 32;
        HEAP32[c + 24 >> 2] = 1;
        HEAP32[c + 16 >> 2] = 1;
        HEAP32[c + 28 >> 2] = 2E3;
        HEAP32[c + 20 >> 2] = 2E3;
        HEAP32[c + 8 >> 2] = 8E3;
        HEAP32[c >> 2] = 32;
        HEAP32[b >> 2] = c;
        b = c + 32;
        c = a + 205728;
        HEAP32[c >> 2] = b;
        g = a + 205692;
        HEAP32[g >> 2] += 2E3;
        HEAP32[d >> 2] = 1;
        HEAP32[b >> 2] = e;
        b = 1
    } else b = c, c = a + 205728;
    HEAP32[HEAP32[c >> 2] + (b << 2) >> 2] = f;
    HEAP32[d >> 2] = b + 1;
    return f
}
function _jttraverse(a, f, d) {
    var c, b, e, g, h, j;
    if (0 != (f | 0))
        if (c = HEAP32[f + 12 >> 2], 1024 == (c | 0) | 4096 == (c | 0) | 8192 == (c | 0) | 16384 == (c | 0) | 2048 == (c | 0) | 32768 == (c | 0)) b = f, c = HEAP32[f >> 2], e = d, getFUNCTION_TABLE(e)(a, b + (HEAP32[b + c >> 2] + c), 0), getFUNCTION_TABLE(e)(a, b + (HEAP32[c + (b + 4) >> 2] + c), 0), getFUNCTION_TABLE(e)(a, b + (HEAP32[c + (b + 8) >> 2] + c), 0), getFUNCTION_TABLE(e)(a, b + (HEAP32[c + (b + 12) >> 2] + c), 0);
        else if (128 == (c | 0)) {
        if (c = HEAP32[f + 20 >> 2], b = c << 1, !(0 >= (c | 0))) {
            c = d;
            e = 0;
            for (g = f + HEAP32[f >> 2];;)
                if (getFUNCTION_TABLE(c)(a, HEAP32[g >> 2], 0), h = e + 1, (h |
                        0) < (b | 0)) e = h, g += 4;
                else break
        }
    } else if (8388608 == (c | 0)) {
        if (e = g = f, b = HEAP32[e >> 2], c = a + 205688, h = d, getFUNCTION_TABLE(h)(a, HEAP32[HEAP32[c >> 2] + (24 * HEAP32[g + b >> 2] & -1) + 4 >> 2], 0), getFUNCTION_TABLE(h)(a, HEAP32[HEAP32[c >> 2] + (24 * HEAP32[g + HEAP32[e >> 2] >> 2] & -1) >> 2], 0), e = HEAP32[f + 20 >> 2] - 1, !(0 >= (e | 0))) {
            j = b + (g + 4);
            for (g = 0;;)
                if (b = HEAP32[j >> 2], 0 != (b | 0) && (f = HEAP32[c >> 2], getFUNCTION_TABLE(h)(a, HEAP32[f + (24 * b & -1) >> 2], 0), getFUNCTION_TABLE(h)(a, HEAP32[f + (24 * b & -1) + 4 >> 2], 0)), b = g + 1, (b | 0) < (e | 0)) j += 4, g = b;
                else break
        }
    } else if (262144 == (c | 0) | 524288 ==
               (c | 0) | 1048576 == (c | 0)) g = f, j = HEAP32[f >> 2], e = d, getFUNCTION_TABLE(e)(a, HEAP32[j + (g + 8) >> 2], 0), getFUNCTION_TABLE(e)(a, HEAP32[j + (g + 12) >> 2], 0), getFUNCTION_TABLE(e)(a, HEAP32[j + (g + 16) >> 2], 0);
    else if (64 == (c | 0) | 32 == (c | 0)) {
        if (g = HEAP32[f + 4 >> 2], 0 == (g & 6 | 0) && (j = f + HEAP32[f >> 2], g = f & -(0 == (c & 32 | 0) ? 0 : 0 != (g & 14 | 0) | 0), b = HEAP32[f + 20 >> 2], !(0 >= (b | 0))))
            if (e = d, 0 == (g | 0))
                for (h = 0;;)
                    if (getFUNCTION_TABLE(e)(a, HEAP32[j + (h << 2) >> 2], 0), c = h + 1, (c | 0) < (b | 0)) h = c;
                    else break;
        else
            for (h = 0;;)
                if (getFUNCTION_TABLE(e)(a, HEAP32[j + (h << 2) >> 2] + g, 0), c = h + 1, (c | 0) < (b | 0)) h =
                    c;
                else break
    } else if (268435456 == (c | 0) && (c = HEAP32[f + 20 >> 2], !(0 >= (c | 0)))) {
        h = d;
        d = 0;
        for (b = f + HEAP32[f >> 2];;)
            if (getFUNCTION_TABLE(h)(a, HEAP32[b + 8 >> 2], 0), f = d + 1, (f | 0) < (c | 0)) d = f, b += 12;
            else break
    }
}
function _jttrident(a, f, d, c) {
    return _jtfolk(a, HEAP32[c + (f << 2) >> 2], HEAP32[c + (f + 1 << 2) >> 2], HEAP32[c + (d << 2) >> 2])
}
function _jtunder(a, f, d) {
    var c, b, e, g, h, j, i, l, k;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    do
        if (0 != (HEAP32[f + 12 >> 2] & 262144 | 0) && 0 != (HEAP32[d + 12 >> 2] & 262144 | 0)) {
            b = d;
            e = HEAP32[d >> 2];
            g = HEAP32[e + (b + 24) >> 2];
            h = HEAP8[e + (b + 40)] | 0;
            51 == (h | 0) ? (j = HEAP32[e + (b + 16) >> 2], i = 0 == (j | 0) ? 0 : 0 == (HEAP32[j + 12 >> 2] & 1835008 | 0) ? 0 : HEAP8[j + (HEAP32[j >> 2] + 40)], c = 10) : 38 == (h | 0) ? (i = 0, c = 10) : 62 == (h | 0) ? (l = 2744, k = 2738) : (l = 394, k = 392);
            do
                if (10 == c)
                    if (h = f, j = HEAP32[f >> 2], (l = 47 == (HEAP8[j + (h + 40)] | 0)) ? (h = HEAP32[j + (h + 8) >> 2], h += HEAP32[h >> 2]) : h += j, j = h + 40, -67 ==
                        (HEAP8[j] | 0) ? (h = HEAP32[h + 8 >> 2], 0 != (HEAP32[h + 24 >> 2] | 0) ? k = 0 : 0 == (HEAP32[h + 12 >> 2] & 4 | 0) ? k = 0 : (h = HEAP32[h + HEAP32[h >> 2] >> 2], k = 15 >= (h | 0) ? 0 : 32 > (h | 0) | 0)) : k = 0, h = HEAP32[e + (b + 12) >> 2], 0 == (h | 0)) l = 394, k = 392;
                    else if (0 == (HEAP32[h + 12 >> 2] & 1835008 | 0)) l = 394, k = 392;
            else if (-55 != (HEAP8[h + (HEAP32[h >> 2] + 40)] | 0)) l = 394, k = 392;
            else if (0 == i << 24 >> 24 | 91 == i << 24 >> 24 | 93 == i << 24 >> 24)
                if (0 == _jtequ(a, HEAP32[40246], HEAP32[e + (b + 8) >> 2]) << 24 >> 24) l = 394, k = 392;
                else {
                    if (0 == (k | 0)) l = 3144;
                    else if (h = l ? 1282 : 3144, l) l = h;
                    else {
                        l = h;
                        k = 628;
                        break
                    }
                    h = HEAP8[j];
                    k = -124 == h << 24 >> 24 ? 2352 : -126 == h << 24 >> 24 ? 2352 : 392
                } else l = 394, k = 392;
            while (0);
            if (0 != (HEAP8[a + 204545] | 0)) return a = 0;
            b = _jtga(a, 262144, 1, 0, 0);
            if (0 == (b | 0)) return a = 0;
            e = b;
            h = HEAP32[b >> 2];
            HEAP32[e + h >> 2] = l;
            HEAP32[h + (e + 4) >> 2] = k;
            HEAP32[h + (e + 8) >> 2] = f;
            HEAP32[h + (e + 12) >> 2] = d;
            HEAP32[h + (e + 16) >> 2] = 0;
            HEAP32[h + (e + 20) >> 2] = 0;
            HEAP32[h + (e + 24) >> 2] = g;
            HEAP32[h + (e + 28) >> 2] = g;
            HEAP32[h + (e + 32) >> 2] = g;
            HEAP32[h + (e + 36) >> 2] = 0;
            HEAP8[h + (e + 40)] = -74;
            return a = b
        }
    while (0);
    d = HEAP32[a + 4408 >> 2];
    f = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[f +
        20 >> 2], f + HEAP32[f >> 2]);
    return 0
}

function ogetFUNCTION_TABLE(i) {
    return FUNCTION_TABLE[i];
}
    
function dgetFUNCTION_TABLE(i) {
    console.log(i);
    f= FUNCTION_TABLE[i];
    if (f == 0) {
        console.log('missing ' + i);
    }
    return f;
}

var getFUNCTION_TABLE = ogetFUNCTION_TABLE;

function _jtunquote(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    g = e + 8;
    h = a + 204545;
    if (0 != (HEAP8[h] | 0)) return STACKTOP = e, 0;
    j = HEAP32[a >> 2];
    if (0 != (HEAP8[j] | 0) && 0 == (HEAP8[a + 1040] | 0)) return HEAP8[j] = 0, i = HEAP32[a + 4408 >> 2], l = HEAP32[i + (HEAP32[i >> 2] + 4) >> 2], _jtjsigstr(a, 1, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]), STACKTOP = e, 0;
    j = c;
    l = HEAP32[c >> 2];
    i = HEAP32[l + (j + 8) >> 2];
    k = _jtsyrd(a, i, g);
    if (0 != (HEAP8[h] | 0)) return STACKTOP =
        e, 0;
    m = HEAP32[l + (j + 16) >> 2];
    n = 0 == (m | 0) ? 0 == (k | 0) ? 0 : HEAP32[k + 4 >> 2] : m;
    m = a + 1168;
    k = HEAP32[m >> 2];
    HEAP32[m >> 2] = i;
    j = a + 1164;
    l = HEAP32[j >> 2];
    p = HEAP32[g >> 2];
    q = 0 == (p | 0) ? 0 : HEAP32[HEAP32[a + 205688 >> 2] + (24 * HEAP32[p + HEAP32[p >> 2] >> 2] & -1) >> 2];
    HEAP32[j >> 2] = q;
    if (0 == (n | 0)) return p = HEAP32[a + 4408 >> 2], r = HEAP32[p + (HEAP32[p >> 2] + 84) >> 2], _jtjsigstr(a, 21, HEAP32[r + 20 >> 2], r + HEAP32[r >> 2]), STACKTOP = e, 0;
    if ((HEAP32[c + 12 >> 2] | 0) != (HEAP32[n + 12 >> 2] | 0)) return c = HEAP32[a + 4408 >> 2], r = HEAP32[c + (HEAP32[c >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[r + 20 >>
        2], r + HEAP32[r >> 2]), STACKTOP = e, 0;
    r = _jtfdep(a, n);
    c = a + 204440;
    p = HEAP32[c >> 2] + r;
    if ((HEAP32[a + 204444 >> 2] | 0) < (p | 0)) return s = HEAP32[a + 4408 >> 2], t = HEAP32[s + (HEAP32[s >> 2] + 68) >> 2], _jtjsigstr(a, 17, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]), STACKTOP = e, 0;
    HEAP32[c >> 2] = p;
    p = a + 4412;
    if ((HEAP32[a + 4416 >> 2] | 0) < (HEAP32[p >> 2] | 0)) return t = HEAP32[a + 4408 >> 2], s = HEAP32[t + (HEAP32[t >> 2] + 68) >> 2], _jtjsigstr(a, 17, HEAP32[s + 20 >> 2], s + HEAP32[s >> 2]), STACKTOP = e, 0;
    s = a + 205300;
    0 < (HEAP32[s >> 2] | 0) && _jtpmrecord(a, i, q, -1, 0 != (f | 0) ? 2 : 1);
    u = 0 == (HEAP32[a + 204524 >>
        2] | 0) ? 0 == (HEAP32[n + (HEAP32[n >> 2] + 20) >> 2] & 65536 | 0) : 0;
    t = HEAP32[p >> 2] + 1;
    HEAP32[p >> 2] = t;
    w = a + 205668;
    v = a + 4420 + (20 * t & -1) + 16;
    HEAP8[v] = HEAP8[w];
    x = a + 204520;
    y = a + 4420 + (20 * t & -1);
    HEAP32[y >> 2] = HEAP32[x >> 2];
    z = a + 4420 + (20 * t & -1) + 12;
    HEAP32[z >> 2] = 0;
    HEAP8[w] = 0;
    A = HEAP32[g >> 2];
    HEAP32[x >> 2] = A;
    g = a + 4420 + (20 * t & -1) + 4;
    HEAP32[g >> 2] = A;
    A = a + 1176;

    do
        if (0 != (HEAP32[A >> 2] | 0) & u)
            if (B = D = n, G = HEAP32[B >> 2], C = HEAP32[G + (D + 8) >> 2], F = _jtdeba(a, 3, f, d, n), 0 == (F | 0)) F = 0;
            else {
                58 != (HEAP8[G + (D + 40)] | 0) | 0 == (C | 0) ? b = 34 : 0 == (HEAP32[C + 12 >> 2] & 805567999 | 0) ? b = 34 :
                    (_jttraverse(a, n, 654), E = n + 16, HEAP32[E >> 2] += 1, E = a + 205596, J = HEAP32[E >> 2], L = HEAP32[B >> 2], 0 == (f | 0) ? (I = HEAP32[D + L >> 2], HEAP32[E >> 2] = n, H = getFUNCTION_TABLE(I)(a, d, n), HEAP32[E >> 2] = J, K = H) : (H = HEAP32[L + (D + 4) >> 2], HEAP32[E >> 2] = n, L = getFUNCTION_TABLE(H)(a, f, d, n), HEAP32[E >> 2] = J, K = L), _jttraverse(a, n, 1910), L = n + 16, J = HEAP32[L >> 2] - 1, HEAP32[L >> 2] = J, 0 == (J | 0) && (J = n - 32 + 24, L = HEAP16[J + 4 >> 1], E = L << 16 >> 16, H = HEAP32[124360 + (E << 2) >> 2], I = a + 1056, HEAP32[I >> 2] -= H, 10 < L << 16 >> 16 ? _free(J) : (L = a + 204588 + (E << 2), HEAP32[J >> 2] = HEAP32[L >> 2], HEAP32[L >>
                        2] = J, J = a + 204712 + (E << 2), HEAP32[J >> 2] += H)));
                do
                    if (34 == b)
                        if (HEAP32[e >> 2] = 0, HEAP32[F + 28 >> 2] = e, 0 != (HEAP32[e >> 2] | 0)) K = 0;
                        else {
                            D = F + 32;
                            B = a + 205600;
                            C = a + 1180;
                            G = a + 1188;
                            H = a + 205596;
                            J = a + 1056;
                            E = a + 4408;
                            L = n;
                            I = 0;
                            N = d;
                            for (S = f;;) {
                                do
                                    if (0 == _jtdbstop(a, F, 0) << 24 >> 24) {
                                        T = 0 == (L | 0);
                                        T || (_jttraverse(a, L, 654), V = L + 16, HEAP32[V >> 2] += 1);
                                        0 == (S | 0) ? T || (V = HEAP32[H >> 2], Q = HEAP32[L + HEAP32[L >> 2] >> 2], HEAP32[H >> 2] = L, P = getFUNCTION_TABLE(Q)(a, N, L), M = V, b = 45) : T || (V = HEAP32[H >> 2], Q = HEAP32[L + (HEAP32[L >> 2] + 4) >> 2], HEAP32[H >> 2] = L, P = getFUNCTION_TABLE(Q)(a, S, N,
                                            L), M = V, b = 45);
                                        if (45 == b && (b = 0, HEAP32[H >> 2] = M, _jttraverse(a, L, 1910), T = L + 16, V = HEAP32[T >> 2] - 1, HEAP32[T >> 2] = V, 0 == (V | 0) && (T = L - 32 + 24, Q = HEAP16[T + 4 >> 1], R = Q << 16 >> 16, O = HEAP32[124360 + (R << 2) >> 2], HEAP32[J >> 2] -= O, 10 < Q << 16 >> 16 ? _free(T) : (Q = a + 204588 + (R << 2), HEAP32[T >> 2] = HEAP32[Q >> 2], HEAP32[Q >> 2] = T, T = a + 204712 + (R << 2), HEAP32[T >> 2] += O)), 0 != (P | 0))) {
                                            aa = P;
                                            Z = L;
                                            break
                                        }
                                        3 == (HEAP32[A >> 2] | 0) ? (aa = 0, Z = L) : b = 51
                                    } else V = HEAP32[E >> 2], O = HEAP32[V + (HEAP32[V >> 2] + 72) >> 2], _jtjsigstr(a, 18, HEAP32[O + 20 >> 2], O + HEAP32[O >> 2]), b = 51;
                                while (0);
                                51 == b && (b =
                                    0, HEAP32[D >> 2] = HEAP8[h] | 0, aa = O = _jtdebug(a), Z = HEAP32[HEAP32[B >> 2] + 8 >> 2]);
                                0 != I << 24 >> 24 && (0 != (S | 0) && (_jttraverse(a, S, 1910), O = S + 16, V = HEAP32[O >> 2] - 1, HEAP32[O >> 2] = V, 0 == (V | 0) && (V = S - 32 + 24, O = HEAP16[V + 4 >> 1], T = O << 16 >> 16, R = HEAP32[124360 + (T << 2) >> 2], HEAP32[J >> 2] -= R, 10 < O << 16 >> 16 ? _free(V) : (O = a + 204588 + (T << 2), HEAP32[V >> 2] = HEAP32[O >> 2], HEAP32[O >> 2] = V, V = a + 204712 + (T << 2), HEAP32[V >> 2] += R))), 0 != (N | 0) && (_jttraverse(a, N, 1910), R = N + 16, V = HEAP32[R >> 2] - 1, HEAP32[R >> 2] = V, 0 == (V | 0) && (V = N - 32 + 24, R = HEAP16[V + 4 >> 1], T = R << 16 >> 16, O = HEAP32[124360 +
                                    (T << 2) >> 2], HEAP32[J >> 2] -= O, 10 < R << 16 >> 16 ? _free(V) : (R = a + 204588 + (T << 2), HEAP32[V >> 2] = HEAP32[R >> 2], HEAP32[R >> 2] = V, V = a + 204712 + (T << 2), HEAP32[V >> 2] += O))));
                                O = HEAP32[C >> 2];
                                V = HEAP32[G >> 2];
                                0 == (O | 0) ? (T = 0 != (V | 0)) ? ($ = T & 1, b = 65) : (ba = S, ka = N, ea = 0) : ($ = 1, b = 65);
                                65 == b && (b = 0, HEAP32[G >> 2] = 0, HEAP32[C >> 2] = 0, ba = O, ka = V, ea = $);
                                V = HEAP32[e >> 2] + 1;
                                HEAP32[e >> 2] = V;
                                if (0 == (V | 0)) L = Z, I = ea, N = ka, S = ba;
                                else {
                                    K = aa;
                                    break
                                }
                            }
                        }
                while (0);
                S = HEAP8[F + 50];
                a: do
                    if (0 != S << 24 >> 24) {
                        for (N = F;;) {
                            ha = HEAP32[N >> 2];
                            if (0 == (ha | 0)) break;
                            if (3 == (HEAP8[ha + 48] | 0)) {
                                b = 70;
                                break
                            } else N =
                                ha
                        }
                        do
                            if (70 == b && 0 == (HEAP8[ha + 49] | 0)) {
                                HEAP8[ha + 50] = S;
                                HEAP32[a + 1200 >> 2] = ha;
                                break a
                            }
                        while (0);
                        HEAP32[a + 1200 >> 2] = 0
                    }
                while (0);
                S = a + 1196;
                31 == (HEAP8[S] | 0) && (HEAP8[S] = 0);
                S = a + 205600;
                HEAP32[S >> 2] = HEAP32[HEAP32[S >> 2] >> 2];
                F = K
            } else _jttraverse(a, n, 654), S = n + 16, HEAP32[S >> 2] += 1, S = a + 205596, F = HEAP32[S >> 2], N = n, I = HEAP32[n >> 2], 0 == (f | 0) ? (L = HEAP32[N + I >> 2], HEAP32[S >> 2] = n, C = getFUNCTION_TABLE(L)(a, d, n), HEAP32[S >> 2] = F, E = C) : (C = HEAP32[I + (N + 4) >> 2], HEAP32[S >> 2] = n, N = getFUNCTION_TABLE(C)(a, f, d, n), HEAP32[S >> 2] = F, E = N), _jttraverse(a, n, 1910),
        N = n + 16, F = HEAP32[N >> 2] - 1, HEAP32[N >> 2] = F, 0 == (F | 0) && (F = n - 32 + 24, N = HEAP16[F + 4 >> 1], S = N << 16 >> 16, C = HEAP32[124360 + (S << 2) >> 2], I = a + 1056, HEAP32[I >> 2] -= C, 10 < N << 16 >> 16 ? _free(F) : (N = a + 204588 + (S << 2), HEAP32[F >> 2] = HEAP32[N >> 2], HEAP32[N >> 2] = F, F = a + 204712 + (S << 2), HEAP32[F >> 2] += C)), F = E; while (0);
    0 == (HEAP8[w] | 0) && (HEAP32[x >> 2] = HEAP32[y >> 2]);
    HEAP8[w] = HEAP8[v];
    v = HEAP32[z >> 2];
    do
        if (0 != (v | 0)) {
            z = HEAP32[a + 205660 >> 2];
            E = z + HEAP32[z >> 2];
            z = HEAP32[a + 205664 >> 2];
            n = z + HEAP32[z >> 2];
            z = HEAP32[g >> 2];
            d = HEAP32[a + 4420 + (20 * t & -1) + 8 >> 2];
            K = 0 == (_jtredefg(a,
                z) | 0);
            if (1 == (v | 0)) {
                if (K) break;
                if (0 == _jtsymfreeh(a, z, d) << 24 >> 24) break
            } else {
                if (K) break;
                if (0 == _jtsymfreeh(a, z, 0) << 24 >> 24) break;
                HEAP32[n + (d << 2) >> 2] = 0;
                HEAP32[E + (d << 2) >> 2] = -1;
                d = a + 205672;
                HEAP32[d >> 2] -= 1
            }(z | 0) == (HEAP32[x >> 2] | 0) && (HEAP32[x >> 2] = 0)
        }
    while (0);
    HEAP32[y >> 2] = 0;
    HEAP32[g >> 2] = 0;
    HEAP8[w] = 0;
    HEAP32[c >> 2] -= r;
    HEAP32[p >> 2] -= 1;
    0 < (HEAP32[s >> 2] | 0) && _jtpmrecord(a, i, q, -2, 0 != (f | 0) ? 2 : 1);
    HEAP32[j >> 2] = l;
    HEAP32[m >> 2] = k;
    _jtspfree(a);
    STACKTOP = e;
    return F
}
function _jtunquote1(a, f, d) {
    return _jtunquote(a, 0, f, d)
}
function _jtva1(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b, na,
        Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf, Mf,
        ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 48 | 0;
    e = b + 8;
    g = b + 16;
    h = b + 24;
    j = b + 32;
    i = b + 40;
    l = a + 204545;
    k = d << 24 >> 24;
    m = a + 4400;
    n = a + 205336;
    p = f;
    a: for (;;) {
        if (q = 0 == (p | 0)) {
            r = 0;
            c = 103;
            break
        }
        s = p + 20;
        t = HEAP32[s >> 2];
        u = 0 == (t | 0);
        do
            if (u) w = 1, v = 0;
            else {
                x = p + 12;
                y = HEAP32[x >>
                    2];
                z = y & 805336541;
                if (A = 0 == (z | 0)) {
                    c = 5;
                    break a
                }
                D = y & 64512;
                (B = 0 == (D | 0)) ? (w = y, v = 0) : (C = G = p, F = HEAP32[C >> 2], E = F + 4, L = J = G + E, I = HEAP32[L >> 2], H = F + 12, K = H + I, S = N = G + K, w = T = HEAP32[S >> 2], v = 1)
            }
        while (0);
        V = HEAP8[l];
        if (Q = 0 == V << 24 >> 24) P = w & 1, (M = 0 == (P | 0)) ? (R = w & 4, (O = 0 == (R | 0)) ? (Z = w & 8, ($ = 0 == (Z | 0)) ? (ba = w & 16, (ka = 0 == (ba | 0)) ? (ea = w >>> 6, ha = ea & 1, aa = da = ha ^ 5) : aa = 3) : aa = 2) : aa = 1) : aa = 0, U = ga = _strchr(792, k), ca = U - 792, X = 312 + (48 * ca & -1) + (aa << 3), Y = HEAP32[X >> 2], ja = 312 + (48 * ca & -1) + (aa << 3) + 4, fa = HEAP32[ja >> 2], ia = Y, ra = fa;
        else {
            sa = w & 192;
            ta = 0 == (sa | 0);
            wa = V <<
                24 >> 24;
            za = wa << 8;
            Ba = za + k;
            b: do switch (Ba | 0) {
                    case 12674:
                        ua = 1756;
                        ya = 1024;
                        break;
                    case 12944:
                        xa = ta & 1;
                        oa = xa << 3;
                        pa = oa | 2048;
                        if (ta) {
                            ua = 1122;
                            ya = pa;
                            break b
                        }
                        la = w & 64;
                        ua = Da = (qa = 0 != (la | 0)) ? 2762 : 1120;
                        ya = pa;
                        break;
                    case 13199:
                        ua = 194;
                        ya = 1028;
                        break;
                    case 12943:
                        ua = 188;
                        ya = 2056;
                        break;
                    case 12676:
                        ua = 1466;
                        ya = 1024;
                        break;
                    case 13200:
                        Aa = ta & 1;
                        Ea = Aa << 2;
                        Sa = Ea | 1024;
                        ua = Oa = ta ? 1134 : 2750;
                        ya = Sa;
                        break;
                    case 13406:
                        ua = 672;
                        ya = 1028;
                        break;
                    case 12924:
                        ua = 118;
                        ya = 1028;
                        break;
                    case 13345:
                        ua = 1434;
                        ya = 1028;
                        break;
                    default:
                        r = 0;
                        c = 103;
                        break a
                }
                while (0);
                HEAP8[l] =
                0;
            HEAP32[m >> 2] = 0;
            ia = ua;
            ra = ya
        }
        if (Ha = 198 == (ia | 0)) {
            c = 27;
            break
        }
        Ga = ra & 1835071;
        (Ma = 0 == (Ga | 0)) ? Ia = 0: (db = ra & 1, (W = 0 == (db | 0)) ? (Xa = ra & 2, (Ta = 0 == (Xa | 0)) ? (fb = ra & 4, (mb = 0 == (fb | 0)) ? (ma = ra & 8, (ab = 0 == (ma | 0)) ? (Na = ra << 1, $a = Na & 64, Ia = Ua = $a + 64) : Ia = 16) : Ia = 8) : Ia = 4) : Ia = 1);
        Pa = ra & 256;
        (bb = 0 == (Pa | 0)) ? (La = ra & 512, (Ja = 0 == (La | 0)) ? (Ya = ra & 1024, (lb = 0 == (Ya | 0)) ? (Ca = ra & 2048, (gb = 0 == (Ca | 0)) ? (Fa = ra & 8192, (Za = 0 == (Fa | 0)) ? (qb = ra & 4096, Qa = ub = (ib = 0 != (qb | 0)) ? 64 : 65536) : Qa = 128) : Qa = 16) : Qa = 8) : Qa = 4) : Qa = 1;
        if (v) {
            c = 42;
            break
        }
        eb = 0 == (Ia | 0);
        rb = (Ia | 0) == (w | 0);
        if (wb =
            eb | rb) Ka = p;
        else {
            Va = HEAP32[n >> 2];
            HEAP32[n >> 2] = 0;
            nb = _jtccvt(a, Ia, p, e);
            HEAP32[n >> 2] = Va;
            if (ob = 0 == nb << 24 >> 24) {
                c = 89;
                break
            }
            cb = HEAP32[e >> 2];
            if (Wa = 0 == (cb | 0)) {
                r = 0;
                c = 103;
                break
            } else Ka = cb
        }
        yb = Ka + 24;
        Cb = HEAP32[yb >> 2];
        Pb = Ka + 28;
        zb = _jtga(a, Qa, t, Cb, Pb);
        if (Zb = 0 == (zb | 0)) {
            r = 0;
            c = 103;
            break
        }
        Hb = ac = zb;
        Ib = HEAP32[Hb >> 2];
        Rb = Qb = ac + Ib;
        Bb = Ob = Ka;
        xb = HEAP32[Bb >> 2];
        tb = dc = Ob + xb;
        oc = ia;
        getFUNCTION_TABLE(oc)(a, t, Rb, tb);
        Mb = HEAP8[l];
        if (Tb = 0 == Mb << 24 >> 24) {
            c = 94;
            break
        }
        if (Ra = 33 < Mb << 24 >> 24) p = Ka;
        else {
            r = 0;
            c = 103;
            break
        }
    }
    if (5 == c) return Nb = a + 4408, sb = HEAP32[Nb >>
        2], Ab = HEAP32[sb >> 2], Eb = Ab + 12, Lb = sb + Eb, vb = HEAP32[Lb >> 2], wc = vb + 20, Ec = HEAP32[wc >> 2], yc = HEAP32[vb >> 2], Db = vb + yc, _jtjsigstr(a, 3, Ec, Db), r = 0, STACKTOP = b, r;
    if (27 == c) {
        bc = _jttpush(a, p);
        if (pb = 0 == (bc | 0)) return r = 0, STACKTOP = b, r;
        _jttraverse(a, bc, 654);
        Fb = bc + 16;
        jb = HEAP32[Fb >> 2];
        gc = jb + 1;
        HEAP32[Fb >> 2] = gc;
        r = bc;
        STACKTOP = b;
        return r
    }
    if (42 == c) {
        vc = ic = p;
        hc = HEAP32[vc >> 2];
        uc = ic + hc;
        Ac = hc + 4;
        xc = ic + Ac;
        cd = HEAP32[xc >> 2];
        jc = cd + hc;
        Tc = ic + jc;
        Fc = hc + 12;
        Bc = ic + Fc;
        ec = HEAP32[Bc >> 2];
        Xb = ec + hc;
        sc = ic + Xb;
        if (nc = 0 == (Ia | 0)) tc = Tc, Ub = 0;
        else if ($c = jc +
            12, ad = ic + $c, qc = HEAP32[ad >> 2], Uc = (Ia | 0) == (qc | 0)) tc = Tc, Ub = 0;
        else {
            rc = HEAP32[n >> 2];
            HEAP32[n >> 2] = 0;
            kb = _jtccvt(a, Ia, Tc, i);
            HEAP32[n >> 2] = rc;
            if (Jb = 0 == kb << 24 >> 24) return $b = a + 4408, na = HEAP32[$b >> 2], Vb = HEAP32[na >> 2], kc = Vb + 12, va = na + kc, Wc = HEAP32[va >> 2], Yb = Wc + 20, fc = HEAP32[Yb >> 2], Kb = HEAP32[Wc >> 2], Gb = Wc + Kb, _jtjsigstr(a, 3, fc, Gb), r = 0, STACKTOP = b, r;
            gd = HEAP32[i >> 2];
            if (mc = 0 == (gd | 0)) return r = 0, STACKTOP = b, r;
            tc = gd;
            Ub = 1
        }
        Gc = _jtga(a, Qa, 1, 0, 0);
        if (dd = 0 == (Gc | 0)) return r = 0, STACKTOP = b, r;
        kd = HEAP32[Gc >> 2];
        Fd = Gc + kd;
        Hd = Vc = tc;
        bd = HEAP32[Hd >>
            2];
        cc = Vc + bd;
        Ic = ia;
        getFUNCTION_TABLE(Ic)(a, 1, Fd, cc);
        if (Ub) {
            fd = HEAP32[n >> 2];
            HEAP32[n >> 2] = 0;
            xd = _jtccvt(a, Ia, sc, j);
            HEAP32[n >> 2] = fd;
            if (Xc = 0 == xd << 24 >> 24) return Wd = a + 4408, Wb = HEAP32[Wd >> 2], Sb = HEAP32[Wb >> 2], pc = Sb + 12, zc = Wb + pc, hd = HEAP32[zc >> 2], Yc = hd + 20, Ad = HEAP32[Yc >> 2], Gd = HEAP32[hd >> 2], hb = hd + Gd, _jtjsigstr(a, 3, Ad, hb), r = 0, STACKTOP = b, r;
            ld = HEAP32[j >> 2];
            if (ed = 0 == (ld | 0)) return r = 0, STACKTOP = b, r;
            Jc = ld
        } else Jc = tc;
        Oc = Xb + 20;
        Pc = ic + Oc;
        ke = HEAP32[Pc >> 2];
        Ed = Xb + 24;
        pd = ic + Ed;
        id = HEAP32[pd >> 2];
        Cc = Xb + 28;
        Qc = ic + Cc;
        Zc = _jtga(a, Qa, ke, id,
            Qc);
        if (vd = 0 == (Zc | 0)) return r = 0, STACKTOP = b, r;
        $d = HEAP32[Zc >> 2];
        je = Zc + $d;
        Kc = HEAP32[sc >> 2];
        Bd = Kc + Xb;
        od = ic + Bd;
        getFUNCTION_TABLE(Ic)(a, ke, je, od);
        Vd = HEAP8[l];
        Zd = 0 == Vd << 24 >> 24;
        a: do
            if (Zd)
                if (Jd = ra & 196608, Md = 0 == (Jd | 0)) Cd = Gc, fe = Zc;
                else {
                    Xd = Gc + 12;
                    qd = HEAP32[Xd >> 2];
                    Od = ra & 65536;
                    Mc = 0 == (Od | 0);
                    Dd = 8 == (qd | 0);
                    Td = Mc | Dd;
                    b: do
                        if (Td)
                            if (le = ra & 131072, me = 0 == (le | 0), wd = 4 == (qd | 0), Ie = me | wd) xe = Gc, c = 66;
                            else {
                                ye = Gc + 20;
                                Fe = HEAP32[ye >> 2];
                                nf = HEAP32[Gc >> 2];
                                Je = Gc + 24;
                                Id = HEAP32[Je >> 2];
                                Qe = Gc + 28;
                                sd = _jtga(a, 4, Fe, Id, Qe);
                                if (ge = 0 == (sd | 0)) return r = 0,
                                    STACKTOP = b, r;
                                if (ud = 0 < (Fe | 0)) {
                                    de = sd;
                                    ae = HEAP32[de >> 2];
                                    Dc = sd;
                                    Nc = Dc + ae;
                                    yd = Gc + nf;
                                    jd = Nc;
                                    Sc = yd;
                                    lc = 0;
                                    nd = Sc;
                                    for (Rc = jd;;) {
                                        Hc = HEAPF64[nd >> 3];
                                        Kd = -2147483648 > Hc;
                                        Rd = 2147483647 < Hc;
                                        if (Nd = Kd | Rd) {
                                            xe = Gc;
                                            c = 66;
                                            break b
                                        }
                                        be = nd + 8;
                                        zd = Hc & -1;
                                        we = Rc + 4;
                                        HEAP32[Rc >> 2] = zd;
                                        Lc = lc + 1;
                                        if (rd = (Lc | 0) < (Fe | 0)) lc = Lc, nd = be, Rc = we;
                                        else {
                                            xe = sd;
                                            c = 66;
                                            break
                                        }
                                    }
                                } else md = sd
                            } else se = HEAP32[n >> 2], HEAP32[n >> 2] = 0, Ud = _jtccvt(a, 8, Gc, h), HEAP32[n >> 2] = se, Cf = 0 != Ud << 24 >> 24, td = HEAP32[h >> 2], xe = Te = Cf ? td : Gc, c = 66;
                    while (0);
                    if (66 == c) {
                        if (pe = 0 == (xe | 0)) return r = 0, STACKTOP =
                            b, r;
                        md = xe
                    }
                    Pd = Zc + 12;
                    Me = HEAP32[Pd >> 2];
                    Sd = 8 == (Me | 0);
                    $e = Mc | Sd;
                    b: do
                        if ($e)
                            if (qe = ra & 131072, Ce = 0 == (qe | 0), cf = 4 == (Me | 0), sf = Ce | cf) Ue = Zc;
                            else {
                                kf = Zc + 20;
                                Re = HEAP32[kf >> 2];
                                ce = HEAP32[Zc >> 2];
                                De = Zc + 24;
                                Ge = HEAP32[De >> 2];
                                He = Zc + 28;
                                We = _jtga(a, 4, Re, Ge, He);
                                if (Yd = 0 == (We | 0)) return r = 0, STACKTOP = b, r;
                                Ne = 0 < (Re | 0);
                                if (!Ne) {
                                    Cd = md;
                                    fe = We;
                                    break a
                                }
                                Se = We;
                                Ee = HEAP32[Se >> 2];
                                Ld = We;
                                he = Ld + Ee;
                                Qd = Zc + ce;
                                re = he;
                                Ke = Qd;
                                Ae = 0;
                                te = Ke;
                                for (ie = re;;) {
                                    ff = HEAPF64[te >> 3];
                                    ue = -2147483648 > ff;
                                    Oe = 2147483647 < ff;
                                    if (ne = ue | Oe) {
                                        Ue = Zc;
                                        break b
                                    }
                                    ze = te + 8;
                                    vf = ff & -1;
                                    lf = ie + 4;
                                    HEAP32[ie >>
                                        2] = vf;
                                    Xe = Ae + 1;
                                    if (Be = (Xe | 0) < (Re | 0)) Ae = Xe, te = ze, ie = lf;
                                    else {
                                        Ue = We;
                                        break
                                    }
                                }
                            } else hf = HEAP32[n >> 2], HEAP32[n >> 2] = 0, af = _jtccvt(a, 8, Zc, g), HEAP32[n >> 2] = hf, zf = 0 != af << 24 >> 24, uf = HEAP32[g >> 2], Ue = ve = zf ? uf : Zc;
                    while (0);
                    if (If = 0 == (Ue | 0)) return r = 0, STACKTOP = b, r;
                    Cd = md;
                    fe = Ue
                } else {
            if (Df = 34 > Vd << 24 >> 24) return r = 0, STACKTOP = b, r;
            Ef = _jtva1(a, Jc, d);
            if (Gf = 0 == (Ef | 0)) return r = 0, STACKTOP = b, r;
            HEAP8[l] = Vd;
            of = _jtva1(a, sc, d);
            if (Lf = 0 == (of | 0)) return r = 0, STACKTOP = b, r;
            Cd = Ef;
            fe = of
        }
        while (0);
        pf = Cd + 12;
        bf = HEAP32[pf >> 2];
        Bf = bf & 1;
        (Pf = 0 == (Bf | 0)) ? (Ye =
            bf & 4, (Hf = 0 == (Ye | 0)) ? (mf = bf & 8, (Le = 0 == (mf | 0)) ? (Ve = bf & 16, (df = 0 == (Ve | 0)) ? (wf = bf & 2, (Yf = 0 == (wf | 0)) ? (Jf = bf << 10, jf = Qf = Jf & 32768) : jf = 2048) : jf = 16384) : jf = 8192) : jf = 4096) : jf = 1024;
        Sf = p + 24;
        Mf = HEAP32[Sf >> 2];
        ee = p + 28;
        oe = _jtga(a, jf, 1, Mf, ee);
        if (rf = 0 == (oe | 0)) return r = 0, STACKTOP = b, r;
        Ff = HEAP32[oe >> 2];
        xf = oe + Ff;
        Pe = HEAP32[uc >> 2];
        qf = Pe + hc;
        yf = ic + qf;
        Nf = _jtca(a, yf);
        Zf = Nf - xf;
        HEAP32[xf >> 2] = Zf;
        tg = Zf + Ff;
        Ze = oe + tg;
        if (gf = 0 == (Ze | 0)) return r = 0, STACKTOP = b, r;
        ef = hc + 8;
        Kf = ic + ef;
        bg = HEAP32[Kf >> 2];
        lg = bg + hc;
        Rf = ic + lg;
        Ug = _jtca(a, Rf);
        Vf = Ug - xf;
        Jg = Ff +
            8;
        hg = oe + Jg;
        HEAP32[hg >> 2] = Vf;
        Lg = Vf + Ff;
        $f = oe + Lg;
        if (ah = 0 == ($f | 0)) return r = 0, STACKTOP = b, r;
        nh = Cd;
        dh = nh - xf;
        mg = Ff + 4;
        yh = oe + mg;
        HEAP32[yh >> 2] = dh;
        Bg = dh + Ff;
        ig = oe + Bg;
        if (ng = 0 == (ig | 0)) return r = 0, STACKTOP = b, r;
        Ng = fe;
        Ch = Ng - xf;
        Dg = Ff + 12;
        Vg = oe + Dg;
        HEAP32[Vg >> 2] = Ch;
        pg = Ch + Ff;
        zg = oe + pg;
        r = cg = (Pg = 0 == (zg | 0)) ? 0 : oe;
        STACKTOP = b;
        return r
    }
    if (89 == c) return dg = a + 4408, qg = HEAP32[dg >> 2], vg = HEAP32[qg >> 2], bh = vg + 12, Zg = qg + bh, Eg = HEAP32[Zg >> 2], wg = Eg + 20, vh = HEAP32[wg >> 2], Kh = HEAP32[Eg >> 2], $g = Eg + Kh, _jtjsigstr(a, 3, vh, $g), r = 0, STACKTOP = b, r;
    if (94 == c) {
        Ag =
            ra & 196608;
        if (Lh = 0 == (Ag | 0)) return r = zb, STACKTOP = b, r;
        xg = zb + 12;
        Mg = HEAP32[xg >> 2];
        rg = ra & 65536;
        Sg = 0 == (rg | 0);
        jg = 8 == (Mg | 0);
        Uh = Sg | jg;
        if (!Uh) return Of = HEAP32[n >> 2], HEAP32[n >> 2] = 0, Tg = _jtccvt(a, 8, zb, b), HEAP32[n >> 2] = Of, qi = 0 != Tg << 24 >> 24, eg = HEAP32[b >> 2], r = gi = qi ? eg : zb, STACKTOP = b, r;
        kg = ra & 131072;
        Qg = 0 == (kg | 0);
        Wg = 4 == (Mg | 0);
        if (wi = Qg | Wg) return r = zb, STACKTOP = b, r;
        zh = zb + 20;
        Wf = HEAP32[zh >> 2];
        di = HEAP32[Hb >> 2];
        ch = zb + 24;
        Mh = HEAP32[ch >> 2];
        Fg = zb + 28;
        Rg = _jtga(a, 4, Wf, Mh, Fg);
        if (Vh = 0 == (Rg | 0)) return r = 0, STACKTOP = b, r;
        Gg = 0 < (Wf | 0);
        if (!Gg) return r =
            Rg, STACKTOP = b, r;
        eh = HEAP32[Rg >> 2];
        kh = Rg + eh;
        fh = ac + di;
        Wh = 0;
        qh = fh;
        for (og = kh;;) {
            Og = HEAPF64[qh >> 3];
            Kg = -2147483648 > Og;
            Ih = 2147483647 < Og;
            if (ai = Kg | Ih) {
                r = zb;
                c = 103;
                break
            }
            wh = qh + 8;
            Xh = Og & -1;
            Nh = og + 4;
            HEAP32[og >> 2] = Xh;
            Jh = Wh + 1;
            if (lj = (Jh | 0) < (Wf | 0)) Wh = Jh, qh = wh, og = Nh;
            else {
                r = Rg;
                c = 103;
                break
            }
        }
    }
    if (103 == c) return STACKTOP = b, r
}
function _jtva2(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 56 | 0;
    g = e;
    h = e + 8;
    j = e + 16;
    i = e + 24;
    l = e + 32;
    k = e + 40;
    m = e + 48;
    n = a + 205336;
    p = HEAP32[n >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = e, 0;
    r = HEAP32[f + 20 >> 2];
    s = HEAP32[f + 24 >> 2];
    t = f + 28;
    u = 0 == (r | 0) ? 1 : HEAP32[f + 12 >> 2];
    w = HEAP32[d + 20 >> 2];
    v = HEAP32[d + 24 >> 2];
    x = d + 28;

    if (0 == (w | 0)) y = 1;
    else if (z = HEAP32[d +
            12 >> 2], 94 == c << 24 >> 24 & 1 == (w | 0))
        if (0 == (z & 8 | 0)) y = z;
        else if (0.5 != HEAPF64[d + HEAP32[d >> 2] >> 3]) y = z;
    else return q = _jtva1(a, f, -113), STACKTOP = e, q;
    else y = z;
    0 == (u & 64512 | 0) ? (A = 0, D = u) : 0 != (u & 1024 | 0) ? D = A = 1 : 0 != (u & 4096 | 0) ? (A = 1, D = 4) : 0 != (u & 8192 | 0) ? (A = 1, D = 8) : 0 != (u & 16384 | 0) ? (A = 1, D = 16) : 0 != (u & 2048 | 0) ? (A = 1, D = 2) : (A = 1, D = u >>> 10 & 32);
    0 == (y & 64512 | 0) ? (B = A, G = y) : 0 != (y & 1024 | 0) ? G = B = 1 : 0 != (y & 4096 | 0) ? (B = 1, G = 4) : 0 != (y & 8192 | 0) ? (B = 1, G = 8) : 0 != (y & 16384 | 0) ? (B = 1, G = 16) : 0 != (y & 2048 | 0) ? (B = 1, G = 2) : (B = 1, G = y >>> 10 & 32);
    if (0 == _jtvar(a, c, f, d, D, G, m, k) << 24 >>
        24) return STACKTOP = e, 0;
    y = HEAP32[k >> 2];
    C = 0 == (y & 256 | 0) ? 0 != (y & 512 | 0) ? 4 : 0 != (y & 1024 | 0) ? 8 : 0 != (y & 2048 | 0) ? 16 : 0 != (y & 8192 | 0) ? 128 : 0 != (y & 4096 | 0) ? 64 : 65536 : 1;
    if (0 == (y & 1835071 | 0)) F = f, E = d, J = 0, L = 0 == B << 24 >> 24;
    else if (I = 0 == (y & 1 | 0) ? 0 != (y & 2 | 0) ? 4 : 0 != (y & 4 | 0) ? 8 : 0 != (y & 8 | 0) ? 16 : (y << 1 & 64) + 64 : 1, 0 != B << 24 >> 24) F = f, E = d, J = I, L = 0;
    else {
        k = I >>> 6 & 1;
        if ((I | 0) == (D | 0)) H = f;
        else {
            0 == k << 24 >> 24 ? (A = HEAP32[n >> 2], HEAP32[n >> 2] = 0, u = _jtccvt(a, I, f, i), HEAP32[n >> 2] = A, 0 == u << 24 >> 24 ? (u = HEAP32[a + 4408 >> 2], A = HEAP32[u + (HEAP32[u >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[A +
                20 >> 2], A + HEAP32[A >> 2]), K = 0) : K = HEAP32[i >> 2]) : (A = a + 205764, u = HEAP32[A >> 2], HEAP32[A >> 2] = 0 == (y & 262144 | 0) ? 0 != (y & 1048576 | 0) ? 0 : 2 - (y >>> 19 & 1) : 3, z = HEAP32[n >> 2], HEAP32[n >> 2] = 0, N = _jtccvt(a, 64, f, l), HEAP32[n >> 2] = z, 0 == N << 24 >> 24 ? (N = HEAP32[a + 4408 >> 2], z = HEAP32[N + (HEAP32[N >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[z + 20 >> 2], z + HEAP32[z >> 2]), S = 0) : S = HEAP32[l >> 2], HEAP32[A >> 2] = u, K = S);
            if (0 == (K | 0)) return STACKTOP = e, 0;
            H = K
        }
        if ((I | 0) == (G | 0)) F = H, E = d, J = G;
        else {
            0 == k << 24 >> 24 ? (u = HEAP32[n >> 2], HEAP32[n >> 2] = 0, A = _jtccvt(a, I, d, h), HEAP32[n >> 2] = u, 0 ==
                A << 24 >> 24 ? (A = HEAP32[a + 4408 >> 2], u = HEAP32[A + (HEAP32[A >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), T = 0) : T = HEAP32[h >> 2]) : (u = a + 205764, A = HEAP32[u >> 2], HEAP32[u >> 2] = 0 == (y & 262144 | 0) ? 0 != (y & 524288 | 0) ? 0 : 2 - (y >>> 20 & 1) : 3, z = HEAP32[n >> 2], HEAP32[n >> 2] = 0, N = _jtccvt(a, 64, d, j), HEAP32[n >> 2] = z, 0 == N << 24 >> 24 ? (N = HEAP32[a + 4408 >> 2], z = HEAP32[N + (HEAP32[N >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[z + 20 >> 2], z + HEAP32[z >> 2]), k = 0) : k = HEAP32[j >> 2], HEAP32[u >> 2] = A, T = k);
            if (0 == (T | 0)) return STACKTOP = e, 0;
            F = H;
            E = T;
            J = I
        }
        L = 1
    }
    I = HEAP32[n >> 2];
    a: do
        if (0 == (I | 0)) {
            T = (s | 0) < (v | 0) ? s : v;
            b: do
                if (0 != (T | 0)) {
                    H = T << 2;
                    k = t;
                    for (j = x;
                        (HEAP8[k] | 0) == (HEAP8[j] | 0);)
                        if (V = H - 1, 0 == (V | 0)) break b;
                        else H = V, k += 1, j += 1;
                    j = HEAP32[a + 4408 >> 2];
                    k = HEAP32[j + (HEAP32[j >> 2] + 36) >> 2];
                    _jtjsigstr(a, 9, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]);
                    q = 0;
                    STACKTOP = e;
                    return q
                }
            while (0);
            k = (T = (s | 0) <= (v | 0)) ? w : r;
            j = T ? r : w;
            b = 0 == (j | 0) ? 0 : (k | 0) / (j | 0) & -1;
            Q = T;
            P = 0;
            M = k;
            R = 0;
            O = s;
            ba = $ = Z = aa = 0;
            ka = v;
            ea = 0;
            ha = T ? x : t;
            da = T ? v : s;
            ga = 0;
            U = 1;
            ca = b;
            X = 1;
            Y = j;
            b = 149
        } else {
            j = HEAP32[I >> 2];
            T = (s | 0) < (j | 0) ? s : j;
            j = s - T;
            k = f + 28 + (j << 2);
            do
                if (0 < (T | 0)) {
                    H =
                        1;
                    for (V = 0;;)
                        if (ja = H * (HEAP32[f + 28 + (j + V << 2) >> 2] | 0), h = V + 1, (h | 0) < (T | 0)) H = ja, V = h;
                        else break;
                    2147483647 >= ja ? (fa = ja, b = 69) : (V = HEAP32[a + 4408 >> 2], H = HEAP32[V + (HEAP32[V >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[H + 20 >> 2], H + HEAP32[H >> 2]), ia = 0, ra = HEAP32[n >> 2])
                } else fa = 1, b = 69;
            while (0);
            69 == b && (ia = fa & -1, ra = I);
            H = HEAP32[ra + 4 >> 2];
            V = (v | 0) < (H | 0) ? v : H;
            H = v - V;
            h = d + 28 + (H << 2);
            do
                if (0 < (V | 0)) {
                    G = 1;
                    for (K = 0;;)
                        if (sa = G * (HEAP32[d + 28 + (H + K << 2) >> 2] | 0), S = K + 1, (S | 0) < (V | 0)) G = sa, K = S;
                        else break;
                    2147483647 >= sa ? (ta = sa, b = 74) : (K = HEAP32[a + 4408 >> 2], G = HEAP32[K +
                        (HEAP32[K >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[G + 20 >> 2], G + HEAP32[G >> 2]), wa = 0)
                } else ta = 1, b = 74;
            while (0);
            74 == b && (wa = ta & -1);
            HEAP32[n >> 2] = 0;
            G = (j | 0) < (H | 0) ? j : H;
            b: do
                if (0 == (G | 0)) b = 79;
                else {
                    K = G << 2;
                    S = t;
                    for (l = x;;) {
                        if ((HEAP8[S] | 0) != (HEAP8[l] | 0)) break b;
                        f = K - 1;
                        if (0 == (f | 0)) {
                            b = 79;
                            break
                        } else K = f, S += 1, l += 1
                    }
                }
            while (0);
            b: do
                if (79 == b) {
                    G = (T | 0) < (V | 0) ? T : V;
                    if (0 != (G | 0)) {
                        l = G << 2;
                        G = k;
                        for (S = h;;) {
                            if ((HEAP8[G] | 0) != (HEAP8[S] | 0)) break b;
                            K = l - 1;
                            if (0 == (K | 0)) break;
                            else l = K, G += 1, S += 1
                        }
                    }
                    S = (j | 0) <= (H | 0);
                    G = S & 1;
                    l = S ? H : j;
                    K = S ? j : H;
                    f = S ? x : t;
                    i = (S = (T | 0) <=
                        (V | 0)) ? wa : ia;
                    D = S ? ia : wa;
                    t = 0 == (D | 0) ? 0 : (i | 0) / (D | 0) & -1;
                    B = S ? V : T;
                    k = S ? h : k;
                    c: do
                        if (0 == (i | 0)) x = h = 0;
                        else {
                            do
                                if (0 < (K | 0)) {
                                    A = 1;
                                    for (u = 0;;)
                                        if (za = A * (HEAP32[f + (u << 2) >> 2] | 0), z = u + 1, (z | 0) < (K | 0)) A = za, u = z;
                                        else break;
                                    2147483647 >= za ? (Ba = za, b = 91) : (u = HEAP32[a + 4408 >> 2], A = HEAP32[u + (HEAP32[u >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), ua = 0)
                                } else Ba = 1, b = 91;
                            while (0);
                            91 == b && (ua = Ba & -1);
                            A = a + 204545;
                            if (0 != (HEAP8[A] | 0)) return q = 0, STACKTOP = e, q;
                            u = l - K;
                            do
                                if (0 < (u | 0)) {
                                    z = 1;
                                    for (N = 0;;)
                                        if (ya = z * (HEAP32[f + (K + N << 2) >> 2] | 0), h = N + 1, (h | 0) < (u | 0)) z = ya, N = h;
                                        else break;
                                    if (2147483647 >= ya) z = ya;
                                    else {
                                        N = HEAP32[a + 4408 >> 2];
                                        z = HEAP32[N + (HEAP32[N >> 2] + 40) >> 2];
                                        _jtjsigstr(a, 10, HEAP32[z + 20 >> 2], z + HEAP32[z >> 2]);
                                        if (0 == (HEAP8[A] | 0)) {
                                            h = 0;
                                            x = ua;
                                            break c
                                        } else q = 0;
                                        STACKTOP = e;
                                        return q
                                    }
                                } else z = 1;
                            while (0);
                            h = z & -1;
                            x = ua
                        }
                    while (0);
                    if (!L) {
                        xa = l;
                        oa = B;
                        pa = V;
                        la = H;
                        qa = j;
                        Da = T;
                        b = 150;
                        break a
                    }
                    K = (h | 0) * (i | 0);
                    2147483647 < K ? (A = HEAP32[a + 4408 >> 2], u = HEAP32[A + (HEAP32[A >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), K = 0) : K = K & -1 | 0;
                    K *= x | 0;
                    2147483647 < K ? (u = HEAP32[a + 4408 >> 2],
                        A = HEAP32[u + (HEAP32[u >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[A + 20 >> 2], A + HEAP32[A >> 2]), za = 0) : za = K & -1;
                    if (0 != (HEAP8[a + 204545] | 0)) return q = 0, STACKTOP = e, q;
                    Ba = 65536 == (C | 0) ? 4 : 1 == (C | 0) | 16 == (C | 0) | 8 == (C | 0) ? C : 4 == (C | 0) ? 4 : 64 == (C | 0) ? 4 : 128 == (C | 0) ? 8 : -1;
                    K = Math_imul(Ba, i) | 0;
                    A = HEAP32[F + 12 >> 2];
                    A = 128 == (A | 0) ? 8 : 1024 == (A | 0) | 4096 == (A | 0) | 8192 == (A | 0) | 16384 == (A | 0) | 2048 == (A | 0) | 32768 == (A | 0) ? 16 : 2 == (A | 0) | 2097152 == (A | 0) | 33554432 == (A | 0) ? 1 : 262144 == (A | 0) | 524288 == (A | 0) | 1048576 == (A | 0) ? 44 : 16777216 == (A | 0) ? 12 : 32 == (A | 0) ? 4 : 64 == (A | 0) ? 4 : 1 == (A | 0) |
                        8 == (A | 0) | 16 == (A | 0) ? A : 65536 == (A | 0) ? 4 : 268435456 == (A | 0) ? 12 : 536870912 == (A | 0) ? 24 : 131072 == (A | 0) ? 2 : 4 == (A | 0) | 67108864 == (A | 0) | 134217728 == (A | 0) | 4194304 == (A | 0) | 8388608 == (A | 0) ? 4 : -1;
                    A = Math_imul(A, ia) | 0;
                    u = HEAP32[E + 12 >> 2];
                    u = 536870912 == (u | 0) ? 24 : 131072 == (u | 0) ? 2 : 4 == (u | 0) | 67108864 == (u | 0) | 134217728 == (u | 0) | 4194304 == (u | 0) | 8388608 == (u | 0) ? 4 : 65536 == (u | 0) ? 4 : 268435456 == (u | 0) ? 12 : 2 == (u | 0) | 2097152 == (u | 0) | 33554432 == (u | 0) ? 1 : 262144 == (u | 0) | 524288 == (u | 0) | 1048576 == (u | 0) ? 44 : 16777216 == (u | 0) ? 12 : 32 == (u | 0) ? 4 : 64 == (u | 0) ? 4 : 1 == (u | 0) | 8 == (u | 0) |
                        16 == (u | 0) ? u : 128 == (u | 0) ? 8 : 1024 == (u | 0) | 4096 == (u | 0) | 8192 == (u | 0) | 16384 == (u | 0) | 2048 == (u | 0) | 32768 == (u | 0) ? 16 : -1;
                    Q = S;
                    P = G;
                    M = za;
                    R = K;
                    O = T;
                    aa = j;
                    Z = A;
                    $ = Math_imul(u, wa) | 0;
                    ba = H;
                    ka = V;
                    ea = f;
                    ha = k;
                    da = B;
                    ga = l;
                    U = h;
                    ca = t;
                    X = x;
                    Y = D;
                    b = 149;
                    break a
                }
            while (0);
            V = HEAP32[a + 4408 >> 2];
            H = HEAP32[V + (HEAP32[V >> 2] + 36) >> 2];
            _jtjsigstr(a, 9, HEAP32[H + 20 >> 2], H + HEAP32[H >> 2]);
            q = 0;
            STACKTOP = e;
            return q
        }
    while (0);
    do
        if (149 == b)
            if (L) {
                x = _jtga(a, C, M, da + ga, ea);
                if (0 == (x | 0)) return q = 0, STACKTOP = e, q;
                _memcpy(x + 28 + (ga << 2), ha, da << 2) | 0;
                if (0 == (M | 0)) return q = x, STACKTOP =
                    e, q;
                t = F + HEAP32[F >> 2];
                h = E + HEAP32[E >> 2];
                u = wa = x;
                za = wa + HEAP32[u >> 2];
                do
                    if (1 == (U | 0)) {
                        if (!(0 >= (X | 0))) {
                            ia = Q & 1;
                            A = HEAP32[m >> 2];
                            Ba = za;
                            K = h;
                            ua = t;
                            for (z = 0;;) {
                                if (getFUNCTION_TABLE(A)(a, ia, Y, ca, Ba, ua, K), ya = z + 1, (ya | 0) < (X | 0)) Ba += R, K += $, ua += Z, z = ya;
                                else break
                            }
                        }
                    } else if (z = 0 < (X | 0), 0 == P << 24 >> 24) {
                    if (z && (ua = Q & 1, K = HEAP32[m >> 2], !(0 >= (U | 0)))) {
                        Ba = Math_imul(Z, U) | 0;
                        ia = Math_imul(R, U) | 0;
                        A = za;
                        D = h;
                        l = t;
                        for (B = 0;;) {
                            k = l + Ba;
                            f = A;
                            G = l;
                            for (S = 0;;)
                                if (getFUNCTION_TABLE(K)(a, ua, Y, ca, f, G, D), i = S + 1, (i | 0) < (U | 0)) f += R, G += Z, S = i;
                                else break;
                            S = B + 1;
                            if ((S | 0) < (X | 0)) A +=
                                ia, D += $, l = k, B = S;
                            else break
                        }
                    }
                } else if (z && (B = Q & 1, l = HEAP32[m >> 2], !(0 >= (U | 0)))) {
                    D = Math_imul($, U) | 0;
                    ia = Math_imul(R, U) | 0;
                    A = za;
                    ua = h;
                    K = t;
                    for (Ba = 0;;) {
                        S = ua + D;
                        G = A;
                        f = ua;
                        for (i = 0;;)
                            if (getFUNCTION_TABLE(l)(a, B, Y, ca, G, K, f), ya = i + 1, (ya | 0) < (U | 0)) G += R, f += $, i = ya;
                            else break;
                        i = Ba + 1;
                        if ((i | 0) < (X | 0)) A += ia, ua = S, K += Z, Ba = i;
                        else break
                    }
                }
                while (0);
                t = HEAP8[a + 204545];
                if (0 != t << 24 >> 24) Aa = t;
                else {
                    if (0 == (y & 196608 | 0)) return q = x, STACKTOP = e, q;
                    t = HEAP32[x + 12 >> 2];
                    if (!(0 == (y & 65536 | 0) | 8 == (t | 0))) return h = HEAP32[n >> 2], HEAP32[n >> 2] = 0, za = _jtccvt(a, 8,
                        x, g), HEAP32[n >> 2] = h, q = 0 != za << 24 >> 24 ? HEAP32[g >> 2] : x, STACKTOP = e, q;
                    if (0 == (y & 131072 | 0) | 4 == (t | 0)) return q = x, STACKTOP = e, q;
                    t = HEAP32[x + 20 >> 2];
                    za = HEAP32[u >> 2];
                    h = _jtga(a, 4, t, HEAP32[x + 24 >> 2], x + 28);
                    if (0 == (h | 0)) return q = 0, STACKTOP = e, q;
                    if (0 >= (t | 0)) return q = h, STACKTOP = e, q;
                    Ba = 0;
                    K = wa + za;
                    for (za = h + HEAP32[h >> 2];;) {
                        ua = HEAPF64[K >> 3];
                        if (-2147483648 > ua | 2147483647 < ua) {
                            q = x;
                            b = 182;
                            break
                        }
                        HEAP32[za >> 2] = ua & -1;
                        ua = Ba + 1;
                        if ((ua | 0) < (t | 0)) Ba = ua, K += 8, za += 4;
                        else {
                            q = h;
                            b = 182;
                            break
                        }
                    }
                    if (182 == b) return STACKTOP = e, q
                }
            } else xa = ga, oa = da, pa = ka, la =
                ba, qa = aa, Da = O, b = 150;
    while (0);
    if (150 == b) {
        g = _jtvasp(a, F, E, c, HEAP32[m >> 2], y, J, C, qa, Da, la, pa, xa, oa);
        Z = HEAP8[a + 204545];
        if (0 == Z << 24 >> 24) return STACKTOP = e, g;
        Aa = Z
    }
    if (33 >= Aa << 24 >> 24) return STACKTOP = e, 0;
    HEAP32[n >> 2] = p;
    q = _jtva2(a, F, E, c);
    STACKTOP = e;
    return q
}

function _plusII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m;
    h = 0;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            j = 0;
            for (i = b;;) {
                c = HEAP32[e >> 2];
                b = c >>> 31;
                l = HEAP32[g >> 2] + c;
                HEAP32[i >> 2] = l;
                if ((b | 0) == (HEAP32[g >> 2] >>> 31 | 0) && (b | 0) != (l >>> 31 | 0)) break;
                l = j + 1;
                if ((l | 0) < (d | 0)) j = l, g += 4, e += 4, i += 4;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a + 204545] = 50)
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i)
            if (0 < (c | 0)) {
                i = b;
                k = e;
                m = 0;
                j = g;
                a: for (;;) {
                    f = j + 4;
                    e = HEAP32[j >> 2];
                    g = e >>> 31;
                    for (j = 0;;) {
                        l = k + (j << 2);
                        b = HEAP32[l >> 2] + e;
                        HEAP32[i + (j << 2) >> 2] = b;
                        if ((g | 0) == (HEAP32[l >> 2] >>> 31 | 0) && (g | 0) != (b >>>
                                31 | 0)) break a;
                        b = j + 1;
                        if ((b | 0) < (c | 0)) j = b;
                        else break
                    }
                    j = m + 1;
                    if ((j | 0) < (d | 0)) i += c << 2, k += c << 2, m = j, j = f;
                    else {
                        h = 26;
                        break
                    }
                }
                26 != h && (HEAP8[a + 204545] = 50)
            } else
                for (f = 0;;)
                    if (e = f + 1, (e | 0) < (d | 0)) f = e;
                    else break
    } else if (i)
        if (0 < (c | 0)) {
            f = b;
            k = 0;
            l = g;
            m = e;
            a: for (;;) {
                e = m + 4;
                g = HEAP32[m >> 2];
                b = g >>> 31;
                for (i = 0;;) {
                    j = l + (i << 2);
                    m = HEAP32[j >> 2] + g;
                    HEAP32[f + (i << 2) >> 2] = m;
                    if ((b | 0) == (HEAP32[j >> 2] >>> 31 | 0) && (b | 0) != (m >>> 31 | 0)) break a;
                    m = i + 1;
                    if ((m | 0) < (c | 0)) i = m;
                    else break
                }
                i = k + 1;
                if ((i | 0) < (d | 0)) f += c << 2, k = i, l += c << 2, m = e;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a +
                204545] = 50)
        } else
            for (e = 0;;)
                if (g = e + 1, (g | 0) < (d | 0)) e = g;
                else break
}

function _minusII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m;
    h = 0;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            j = 0;
            for (i = b;;) {
                c = HEAP32[e >> 2];
                b = c >>> 31;
                l = c - HEAP32[g >> 2];
                HEAP32[i >> 2] = l;
                if ((b | 0) != (HEAP32[g >> 2] >>> 31 | 0) && (b | 0) != (l >>> 31 | 0)) break;
                l = j + 1;
                if ((l | 0) < (d | 0)) j = l, g += 4, e += 4, i += 4;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a + 204545] = 50)
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i)
            if (0 < (c | 0)) {
                i = b;
                k = e;
                m = 0;
                j = g;
                a: for (;;) {
                    f = j + 4;
                    e = HEAP32[j >> 2];
                    g = e >>> 31;
                    for (j = 0;;) {
                        l = k + (j << 2);
                        b = HEAP32[l >> 2] - e;
                        HEAP32[i + (j << 2) >> 2] = b;
                        if ((g | 0) != (HEAP32[l >> 2] >>> 31 | 0) && (g | 0) == (b >>>
                                31 | 0)) break a;
                        b = j + 1;
                        if ((b | 0) < (c | 0)) j = b;
                        else break
                    }
                    j = m + 1;
                    if ((j | 0) < (d | 0)) i += c << 2, k += c << 2, m = j, j = f;
                    else {
                        h = 26;
                        break
                    }
                }
                26 != h && (HEAP8[a + 204545] = 50)
            } else
                for (f = 0;;)
                    if (e = f + 1, (e | 0) < (d | 0)) f = e;
                    else break
    } else if (i)
        if (0 < (c | 0)) {
            f = b;
            k = 0;
            l = g;
            m = e;
            a: for (;;) {
                e = m + 4;
                g = HEAP32[m >> 2];
                b = g >>> 31;
                for (i = 0;;) {
                    j = l + (i << 2);
                    m = g - HEAP32[j >> 2];
                    HEAP32[f + (i << 2) >> 2] = m;
                    if ((b | 0) != (HEAP32[j >> 2] >>> 31 | 0) && (b | 0) != (m >>> 31 | 0)) break a;
                    m = i + 1;
                    if ((m | 0) < (c | 0)) i = m;
                    else break
                }
                i = k + 1;
                if ((i | 0) < (d | 0)) f += c << 2, k = i, l += c << 2, m = e;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a +
                204545] = 50)
        } else
            for (e = 0;;)
                if (g = e + 1, (g | 0) < (d | 0)) e = g;
                else break
}

function _eqIB(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP32[j >> 2] | 0) == (HEAP8[g] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 1, j += 4, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 1;
                if (f) {
                    i = HEAP8[j] | 0;
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP32[k >> 2] | 0) == (i | 0) | 0, a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 1;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b =
                g + 4;
            k = HEAP32[g >> 2];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = (k | 0) == (HEAP8[j] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 1, f += 1;
                    else break;
                a += c
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _eqII(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP32[j >> 2] | 0) == (HEAP32[g >> 2] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 4, j += 4, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 4;
                i = HEAP32[j >> 2];
                if (f) {
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP32[k >> 2] | 0) == (i | 0) | 0, a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 1;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e =
            b;;) {
            b = g + 4;
            k = HEAP32[g >> 2];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = (k | 0) == (HEAP32[j >> 2] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 4, f += 1;
                    else break;
                a += c << 2
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _eqBB(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n, p, q, r, s, t, a = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    h = a;
    i = (j = 1 == (c | 0)) ? d : c;
    l = (i | 0) / 4 & -1;
    k = (i | 0) % 4 & -1;
    m = e;
    n = g;
    p = b;
    if (j) {
        if (3 < (i | 0)) {
            j = 7 < (i | 0) ? l << 2 : 4;
            i = b + j;
            g += j;
            q = e + j;
            j = 0;
            d = p;
            c = n;
            for (p = m;;)
                if (HEAP32[d >> 2] = HEAP32[p >> 2] ^ 16843009 ^ HEAP32[c >> 2], n = j + 1, (n | 0) < (l | 0)) j = n, d += 4, c += 4, p += 4;
                else break;
            e = i;
            f = g;
            r = q
        } else e = p, f = n, r = m;
        0 != (k | 0) && (HEAP32[h >> 2] = HEAP32[r >> 2] ^ 16843009 ^ HEAP32[f >> 2], _memcpy(e, h, k) | 0)
    } else {
        h = 0 != f << 24 >> 24;
        if (4 > (i | 0)) {
            f = 0 < (d | 0) & 0 < (c | 0);
            if (h) {
                if (f) m = 0, n = g, j =
                    e, l = b;
                else {
                    STACKTOP = a;
                    return
                }
                for (;;) {
                    e = j + 1;
                    f = HEAP8[j];
                    r = l + c;
                    q = 0;
                    g = n;
                    for (i = l;;)
                        if (HEAP8[i] = f << 24 >> 24 == (HEAP8[g] | 0) | 0, p = q + 1, (p | 0) < (c | 0)) q = p, g += 1, i += 1;
                        else break;
                    i = m + 1;
                    if ((i | 0) < (d | 0)) m = i, n += c, j = e, l = r;
                    else break
                }
            } else {
                if (f) p = 0, k = g, r = e, q = b;
                else {
                    STACKTOP = a;
                    return
                }
                for (;;) {
                    b = k + 1;
                    f = HEAP8[k];
                    l = q + c;
                    j = 0;
                    n = r;
                    for (m = q;;)
                        if (HEAP8[m] = (HEAP8[n] | 0) == f << 24 >> 24 | 0, i = j + 1, (i | 0) < (c | 0)) j = i, n += 1, m += 1;
                        else break;
                    m = p + 1;
                    if ((m | 0) < (d | 0)) p = m, k = b, r += c, q = l;
                    else break
                }
            }
            STACKTOP = a;
            return
        }
        q = 0 == (k | 0);
        k = 0 < (d | 0);
        if (h)
            if (q) {
                if (k) {
                    h = 3 < (i |
                        0);
                    c = 1 < (l | 0) ? l : 1;
                    r = e;
                    k = 0;
                    for (m = n;;) {
                        n = HEAPU8[r];
                        j = Math_imul(n, 16843009) | 0;
                        f = r + 1;
                        r = n | n << 8;
                        if (h) {
                            n = p + (c << 2);
                            e = 1;
                            i = p;
                            g = m;
                            for (q = r | r << 16;;) {
                                HEAP32[i >> 2] = HEAP32[g >> 2] ^ 16843009 ^ q;
                                if ((e | 0) >= (l | 0)) break;
                                e += 1;
                                i += 4;
                                g += 4;
                                q = j
                            }
                            s = n;
                            t = m + (c << 2)
                        } else s = p, t = m;
                        j = k + 1;
                        if ((j | 0) < (d | 0)) r = f, k = j, p = s, m = t;
                        else break
                    }
                }
            } else {
                if (k) {
                    k = e;
                    g = 1;
                    s = 0;
                    c = p;
                    for (f = n;;) {
                        n = i - s;
                        e = (n | 0) % 4 & -1;
                        t = HEAP8[k];
                        m = t & 255;
                        s = Math_imul(m, 16843009) | 0;
                        p = (n | 0) / 4 & -1;
                        k += 1;
                        r = m | m << 8;
                        if (3 < (n | 0)) {
                            n = 1 < (p | 0) ? p : 1;
                            m = c + (n << 2);
                            h = 1;
                            j = f;
                            for (q = r | r << 16;;) {
                                HEAP32[c >> 2] = HEAP32[j >>
                                    2] ^ 16843009 ^ q;
                                if ((h | 0) >= (p | 0)) break;
                                c += 4;
                                h += 1;
                                j += 4;
                                q = s
                            }
                            r = m;
                            b = f + (n << 2)
                        } else r = c, b = f;
                        s = b;
                        q = r;
                        if (0 == (e | 0)) h = b, j = r, e = 0;
                        else {
                            if (0 < (e | 0)) {
                                j = q + e;
                                h = s;
                                c = q;
                                for (p = 0;;)
                                    if (HEAP8[c] = t << 24 >> 24 == (HEAP8[h] | 0) | 0, f = p + 1, (f | 0) < (e | 0)) h += 1, c += 1, p = f;
                                    else break;
                                m = s + e;
                                f = j
                            } else m = s, f = q;
                            p = HEAP8[k];
                            c = 4 - e;
                            if (0 < (c | 0)) {
                                h = m;
                                t = f;
                                for (n = 0;;)
                                    if (HEAP8[t] = p << 24 >> 24 == (HEAP8[h] | 0) | 0, m = n + 1, (m | 0) < (c | 0)) h += 1, t += 1, n = m;
                                    else break
                            }
                            h = b + 4;
                            j = r + 4;
                            e = c
                        }
                        if ((g | 0) >= (d | 0)) break;
                        g += 1;
                        s = e;
                        c = j;
                        f = h
                    }
                }
            } else if (q) {
            if (k) {
                q = 3 < (i | 0);
                h = 1 < (l | 0) ? l : 1;
                f = p;
                j = m;
                c = g;
                for (e =
                    0;;) {
                    s = HEAPU8[c];
                    g = Math_imul(s, 16843009) | 0;
                    k = c + 1;
                    r = s | s << 8;
                    if (q) {
                        s = f + (h << 2);
                        b = f;
                        f = j;
                        m = 1;
                        for (n = r | r << 16;;) {
                            HEAP32[b >> 2] = HEAP32[f >> 2] ^ 16843009 ^ n;
                            if ((m | 0) >= (l | 0)) break;
                            b += 4;
                            f += 4;
                            m += 1;
                            n = g
                        }
                        r = s;
                        n = j + (h << 2)
                    } else r = f, n = j;
                    g = e + 1;
                    if ((g | 0) < (d | 0)) f = r, j = n, c = k, e = g;
                    else break
                }
            }
        } else if (k) {
            l = p;
            b = m;
            n = g;
            q = 1;
            for (c = 0;;) {
                g = i - c;
                m = (g | 0) % 4 & -1;
                p = HEAP8[n];
                k = p & 255;
                e = Math_imul(k, 16843009) | 0;
                c = (g | 0) / 4 & -1;
                n += 1;
                j = k | k << 8;
                if (3 < (g | 0)) {
                    g = 1 < (c | 0) ? c : 1;
                    k = l + (g << 2);
                    r = l;
                    f = b;
                    h = 1;
                    for (l = j | j << 16;;) {
                        HEAP32[r >> 2] = HEAP32[f >> 2] ^ 16843009 ^ l;
                        if ((h | 0) >=
                            (c | 0)) break;
                        r += 4;
                        f += 4;
                        h += 1;
                        l = e
                    }
                    j = k;
                    b += g << 2
                } else j = l;
                e = b;
                l = j;
                if (0 == (m | 0)) c = 0, h = b, l = j;
                else {
                    if (0 < (m | 0)) {
                        h = l + m;
                        f = e;
                        r = l;
                        for (c = 0;;)
                            if (HEAP8[r] = p << 24 >> 24 == (HEAP8[f] | 0) | 0, k = c + 1, (k | 0) < (m | 0)) f += 1, r += 1, c = k;
                            else break;
                        k = e + m;
                        l = h
                    } else k = e;
                    c = HEAP8[n];
                    r = 4 - m;
                    if (0 < (r | 0)) {
                        f = k;
                        p = l;
                        for (g = 0;;)
                            if (HEAP8[p] = c << 24 >> 24 == (HEAP8[f] | 0) | 0, k = g + 1, (k | 0) < (r | 0)) f += 1, p += 1, g = k;
                            else break
                    }
                    c = r;
                    h = b + 4;
                    l = j + 4
                }
                if ((q | 0) >= (d | 0)) break;
                b = h;
                q += 1
            }
        }
    }
    STACKTOP = a
}
function _tymesII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m;
    h = 0;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            j = 0;
            i = g;
            l = e;
            for (k = b;;) {
                m = (HEAP32[l >> 2] | 0) * (HEAP32[i >> 2] | 0);
                HEAP32[k >> 2] = m & -1;
                if (-2147483648 > m | 2147483647 < m) break;
                m = j + 1;
                if ((m | 0) < (d | 0)) j = m, i += 4, l += 4, k += 4;
                else {
                    h = 21;
                    break
                }
            }
            21 != h && (HEAP8[a + 204545] = 50)
        }
    } else if (k = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (k) {
            f = 0 < (c | 0);
            l = b;
            i = e;
            j = 0;
            m = g;
            a: for (;;) {
                b = m + 4;
                m = HEAP32[m >> 2] | 0;
                if (f)
                    for (g = 0;;) {
                        e = m * (HEAP32[i + (g << 2) >> 2] | 0);
                        HEAP32[l + (g << 2) >> 2] = e & -1;
                        g += 1;
                        if (-2147483648 > e | 2147483647 < e) break a;
                        if (!((g | 0) < (c | 0))) break
                    }
                g =
                    j + 1;
                if ((g | 0) < (d | 0)) l += c << 2, i += c << 2, j = g, m = b;
                else {
                    h = 21;
                    break
                }
            }
            21 != h && (HEAP8[a + 204545] = 50)
        }
    } else if (k) {
        k = 0 < (c | 0);
        m = 0;
        j = b;
        b = g;
        g = e;
        a: for (;;) {
            e = g + 4;
            i = HEAP32[g >> 2] | 0;
            if (k)
                for (l = 0;;) {
                    f = i * (HEAP32[b + (l << 2) >> 2] | 0);
                    HEAP32[j + (l << 2) >> 2] = f & -1;
                    g = l + 1;
                    if (-2147483648 > f | 2147483647 < f) break a;
                    if ((g | 0) < (c | 0)) l = g;
                    else break
                }
            l = m + 1;
            if ((l | 0) < (d | 0)) m = l, j += c << 2, b += c << 2, g = e;
            else {
                h = 21;
                break
            }
        }
        21 != h && (HEAP8[a + 204545] = 50)
    }
}

function _plusBB(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP32[i >> 2] = (HEAP8[g] | 0) + (HEAP8[j] | 0), a = h + 1, (a | 0) < (d | 0)) h = a, g += 1, j += 1, i += 4;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 1;
                if (f) {
                    i = HEAP8[j] | 0;
                    l = a + (c << 2);
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP32[e >> 2] = (HEAP8[k] | 0) + i, a = j + 1, (a | 0) < (c | 0)) k += 1, j = a, e += 4;
                        else break;
                    k = h + c
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 1;
            if (i) {
                k =
                    HEAP8[g] | 0;
                h = e + (c << 2);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP32[f >> 2] = (HEAP8[j] | 0) + k, e = g + 1, (e | 0) < (c | 0)) g = e, j += 1, f += 4;
                    else break;
                a += c
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _minusBB(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP32[i >> 2] = (HEAP8[j] | 0) - (HEAP8[g] | 0), a = h + 1, (a | 0) < (d | 0)) h = a, g += 1, j += 1, i += 4;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 1;
                if (f) {
                    i = HEAP8[j] | 0;
                    l = a + (c << 2);
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP32[e >> 2] = (HEAP8[k] | 0) - i, a = j + 1, (a | 0) < (c | 0)) k += 1, j = a, e += 4;
                        else break;
                    k = h + c
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 1;
            if (i) {
                k =
                    HEAP8[g] | 0;
                h = e + (c << 2);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP32[f >> 2] = k - (HEAP8[j] | 0), e = g + 1, (e | 0) < (c | 0)) g = e, j += 1, f += 4;
                    else break;
                a += c
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}


function _plusIO(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAPF64[i >> 3] = (HEAP32[j >> 2] | 0) + (HEAP32[g >> 2] | 0), a = h + 1, (a | 0) < (d | 0)) h = a, g += 4, j += 4, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 4;
                if (f) {
                    l = HEAP32[j >> 2] | 0;
                    i = h + (c << 2);
                    e = 0;
                    for (k = a;;)
                        if (HEAPF64[k >> 3] = l + (HEAP32[h >> 2] | 0), e += 1, (e | 0) < (c | 0)) h += 4, k += 8;
                        else break;
                    m = i;
                    l = a + (c << 3)
                } else m = h, l = a;
                k = g + 1;
                if ((k | 0) < (d | 0)) j = b, g = k, h = m, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            if (i) {
                m = HEAP32[g >> 2] | 0;
                h = a + (c << 2);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAPF64[f >> 3] = m + (HEAP32[j >> 2] | 0), k = g + 1, (k | 0) < (c | 0)) g = k, j += 4, f += 8;
                    else break;
                a = h;
                k = e + (c << 3)
            } else k = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = k;
            else break
        }
    }
}

function _jtvib(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    d = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    c = d + 8;
    b = d + 16;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    e = a + 205336;
    g = HEAP32[e >> 2];
    HEAP32[e >> 2] = 0;
    h = HEAP32[f + 12 >> 2];
    if (0 == (h & 64512 | 0)) j = f, i = h;
    else {
        l = _jtdenseit(a, f);
        if (0 == (l | 0)) return STACKTOP = d, 0;
        j = l;
        i = HEAP32[l + 12 >> 2]
    }
    a: do
        if (64 == (i | 0) | 128 == (i | 0)) f = _jtga(a, 4, 1, 0, 0), 0 == (f | 0) ? h = 0 : (HEAP32[f + HEAP32[f >> 2] >> 2] = -2147483647, h = f), f = _jtga(a, 4, 1, 0, 0), 0 == (f | 0) ? l = 0 : (HEAP32[f + HEAP32[f >> 2] >> 2] = 2147483647, l = f), f = _jtva2(a, h, _jtva2(a,
            l, j, -126), -124), h = HEAP32[e >> 2], HEAP32[e >> 2] = 0, l = _jtccvt(a, 4, f, c), HEAP32[e >> 2] = h, 0 == l << 24 >> 24 ? (l = HEAP32[a + 4408 >> 2], h = HEAP32[l + (HEAP32[l >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), h = 0) : h = HEAP32[c >> 2];
        else
    if (1 == (i | 0)) h = HEAP32[e >> 2], HEAP32[e >> 2] = 0, l = _jtccvt(a, 4, j, b), HEAP32[e >> 2] = h, 0 == l << 24 >> 24 ? (l = HEAP32[a + 4408 >> 2], h = HEAP32[l + (HEAP32[l >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), h = 0) : h = HEAP32[b >> 2];
    else if (4 == (i | 0)) h = j;
    else {
        if (0 == (i & 8 | 0)) {
            h = HEAP32[e >> 2];
            HEAP32[e >> 2] = 0;
            l =
                _jtccvt(a, 8, j, d);
            HEAP32[e >> 2] = h;
            if (0 == l << 24 >> 24) return l = HEAP32[a + 4408 >> 2], h = HEAP32[l + (HEAP32[l >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), e = 0, STACKTOP = d, e;
            h = HEAP32[d >> 2];
            if (0 == (h | 0)) return e = 0, STACKTOP = d, e;
            k = h
        } else k = j;
        h = HEAP32[k + 20 >> 2];
        l = k + HEAP32[k >> 2];
        f = _jtga(a, 4, h, HEAP32[k + 24 >> 2], k + 28);
        if (0 == (f | 0)) return e = 0, STACKTOP = d, e;
        k = f + HEAP32[f >> 2];
        if (0 >= (h | 0)) h = f;
        else {
            c = HEAPF64[14142];
            b = HEAPF64[14141];
            j = a + 204496;
            i = 0;
            b: for (;;) {
                m = HEAPF64[l + (i << 3) >> 3];
                n = Math_floor(m);
                do
                    if (m == c) HEAP32[k + (i <<
                        2) >> 2] = 2147483647;
                    else if (m == b) HEAP32[k + (i << 2) >> 2] = -2147483647;
                else {
                    p = m - n;
                    q = 0 > p ? -0 - p : p;
                    p = HEAPF64[j >> 3];
                    s = (r = 0 <= m) ? m : -0 - m;
                    u = (t = 0 <= n) ? n : -0 - n;
                    t = s > u ? r ? m : -0 - m : t ? n : -0 - n;
                    if (q <= p * t) p = -2147483647 > m ? -2147483647 : 2147483647 < m ? 2147483647 : n & -1;
                    else {
                        t = n + 1;
                        s = m - t;
                        q = 0 > s ? -0 - s : s;
                        u = r ? m : -0 - m;
                        w = (s = 0 <= t) ? t : -0 - t;
                        r = u > w ? r ? m : -0 - m : s ? t : -0 - t;
                        if (q > p * r) break b;
                        p = -2147483647 > m ? -2147483647 : 2147483647 < m ? 2147483647 : t & -1
                    }
                    HEAP32[k + (i << 2) >> 2] = p
                }
                while (0);
                m = i + 1;
                if ((m | 0) < (h | 0)) i = m;
                else {
                    h = f;
                    break a
                }
            }
            f = HEAP32[a + 4408 >> 2];
            i = HEAP32[f + (HEAP32[f >>
                2] + 12) >> 2];
            _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]);
            e = 0;
            STACKTOP = d;
            return e
        }
    }
    while (0);
    HEAP32[e >> 2] = g;
    STACKTOP = d;
    return h
}
function _jtvnm(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb;
    c = 0;
    if (0 == (f | 0)) return b = 0;
    e = HEAP8[d];
    g = f - 1;
    h = 0 != HEAP8[a + 2388] << 24 >> 24 & 2 == (f | 0) & 46 == HEAP8[d + g] << 24 >> 24;
    a: do
        if (h) {
            switch (e << 24 >> 24) {
                case 109:
                case 110:
                case 117:
                case 118:
                case 120:
                case 121:
                    b = 1;
                    break;
                default:
                    break a
            }
            return b
        }
    while (0);
    if (2 != HEAP8[(e << 24 >> 24) + 113216] << 24 >> 24) return b = 0;
    if (0 < (f | 0)) i = j = 0, l = 97, k = 0, m = e, n = 2;
    else return b = 1;
    for (;;) {
        p = m << 24 >> 24;
        if (!(2 == n << 24 >> 24 | 5 == n << 24 >> 24)) {
            b = 0;
            c = 34;
            break
        }
        q = 95 == m << 24 >> 24;
        r = 95 == (l | 0);
        s = q & r;
        t = 0 == k << 24 >> 24;
        (u = s & t) ? (w = (i | 0) == (g | 0), v = i + 1, x = w ? j : v, y = w & 1, A = z = y ^ 1, D = x, B = v) : (G = i + 1, A = k, D = j, B = G);
        C = (B | 0) < (f | 0);
        if (!C) break;
        F = d + B;
        E = HEAP8[F];
        J = E << 24 >> 24;
        L = J + 113216;
        I = HEAP8[L];
        j = D;
        i = B;
        l = p;
        k = A;
        m = E;
        n = I
    }
    if (34 == c) return b;
    if (!q) {
        if (H = 0 == A << 24 >> 24) return b = 1;
        K = f - D;
        N = 0 < (K | 0);
        a: do {
            if (N) {
                S = 2;
                for (T = 0;;) {
                    V = T + D;
                    Q = d + V;
                    P = HEAP8[Q];
                    if (M = 2 > (S | 0)) R = 95 == P << 24 >> 24, O = R & 1, Z = aa = O + S;
                    else if ($ = P << 24 >> 24, ba = $ + 113216, ka = HEAP8[ba], ea = 2 == ka << 24 >> 24) Z = 0;
                    else {
                        b = 0;
                        break
                    }
                    ha = T + 1;
                    if (da = (ha | 0) < (K | 0)) S = Z, T = ha;
                    else {
                        ga = Z;
                        break a
                    }
                }
                return b
            }
            ga = 2
        } while (0);
        U = 0 == (ga | 0);
        return b = ca = U & 1
    }
    if (0 < (g | 0)) {
        X = g;
        for (Y = 0;;)
            if (ja = X - 1, fa = d + ja, ia = HEAP8[fa], ra = 95 != ia << 24 >> 24, sa = Y + 1, ta = (sa | 0) < (g | 0), wa = ra & ta) X = ja, Y = sa;
            else {
                za = ja;
                break
            }
    } else za = g;
    Ba = f - za - 2;
    if (0 != A << 24 >> 24 | 0 == (za | 0)) return b = 0;
    if (0 == (Ba | 0)) return b = 1;
    ua = za + 1;
    ya = d + ua;
    xa = 0 < (Ba | 0);
    a: do
        if (xa)
            for (oa =
                0;;) {
                pa = oa + ua;
                la = d + pa;
                qa = HEAP8[la];
                if (Da = 95 == qa << 24 >> 24) {
                    Aa = 0;
                    break a
                }
                Ea = qa << 24 >> 24;
                Sa = Ea + 113216;
                Oa = HEAP8[Sa];
                if (!(2 == Oa << 24 >> 24 | 5 == Oa << 24 >> 24)) {
                    Aa = 0;
                    break a
                }
                Ha = oa + 1;
                if (Ga = (Ha | 0) < (Ba | 0)) oa = Ha;
                else {
                    c = 21;
                    break
                }
            } else c = 21;
    while (0);
    a: do
        if (21 == c)
            if (Ma = HEAP8[ya], Ia = Ma << 24 >> 24, db = Ia + 113216, W = HEAP8[db], Xa = 5 == W << 24 >> 24)
                if (Ta = 1 != (Ba | 0), fb = 48 == Ma << 24 >> 24, mb = Ta & fb, ma = xa ^ 1, ab = mb | ma, Na = mb & 1, $a = Na ^ 1, ab) Aa = $a;
                else
    if (Ua = Ma - 48, Pa = 10 > (Ua & 255))
        for (bb = 1;;) {
            La = (bb | 0) < (Ba | 0);
            if (!La) {
                Aa = 1;
                break a
            }
            Ja = bb + ua;
            Qa = d + Ja;
            Ya = HEAP8[Qa];
            lb = bb + 1;
            Ca = Ya - 48;
            if (gb = 10 > (Ca & 255)) bb = lb;
            else {
                Aa = 0;
                break
            }
        } else Aa = 0;
    else Aa = 1;
    while (0);
    return b = 0 != Aa << 24 >> 24 & 1
}
function _jtwordil(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L;
    d = 0;
    if (0 == (f | 0)) return 0;
    c = HEAP32[f + 20 >> 2];
    b = HEAP32[f >> 2];
    e = _jtga(a, 4, c << 1 | 1, 1, 0);
    if (0 == (e | 0)) return 0;
    g = e + (HEAP32[e >> 2] + 4);
    do
        if (0 < (c | 0)) {
            i = j = h = 0;
            l = g;
            for (p = n = m = k = 0;;)
                if (q = HEAP8[122648 + HEAPU8[f + (h + b)]] | 0, r = HEAP8[11072 + (18 * n & -1) + (q << 1)], s = HEAP8[11072 + (18 * n & -1) + (q << 1) + 1], 1 == s << 24 >> 24 ? (q = 0 != p << 24 >> 24, 0 != (6 == (n | 0) & i) << 24 >> 24 ? (t = l, u = q ? k : j, w = h, v = q ? p : 1, d = 11) : (q ? (HEAP32[l >> 2] = k, HEAP32[l + 4 >> 2] = m - k, d = l + 8) : d = l, HEAP32[d >>
                        2] = j, HEAP32[d + 4 >> 2] = h - j, x = 0, y = d + 8, z = 0, d = 10)) : (x = p, y = l, z = i, d = 10), 10 == d && (d = 0, 0 == s << 24 >> 24 ? (A = z, D = j, B = y, G = k, C = m, F = x) : (t = y, u = k, w = m, v = x, d = 11)), 11 == d && (d = 0, A = 6 == r << 24 >> 24 | 0, D = h, B = t, G = u, C = w, F = v), q = h + 1, s = r << 24 >> 24, (q | 0) < (c | 0)) h = q, j = D, i = A, l = B, k = G, m = C, n = s, p = F;
                else break;
            if (7 != r << 24 >> 24) k = F, h = s, m = C, i = G, l = B, n = A, j = D;
            else return _jtjsignal3(a, 13, f, D), c = 0
        } else i = m = h = k = 0, l = g, j = n = 0;
    while (0);
    0 == (6 == (h | 0) & n) << 24 >> 24 ? (0 == k << 24 >> 24 ? b = l : (HEAP32[l >> 2] = i, HEAP32[l + 4 >> 2] = m - i, b = l + 8), 0 == (h | 0) ? (g = HEAP32[e >> 2], E = b - (e + g) >> 2, J =
        g) : (HEAP32[b >> 2] = j, HEAP32[b + 4 >> 2] = c - j, L = b, d = 22)) : (g = 0 != k << 24 >> 24 ? i : j, HEAP32[l >> 2] = g, HEAP32[l + 4 >> 2] = c - g, L = l, d = 22);
    22 == d && (l = HEAP32[e >> 2], c = L + 8 - (e + l) >> 2, E = 9 == (h | 0) | 5 == (h | 0) ? -c : c, J = l);
    HEAP32[e + J >> 2] = (E | 0) / 2 & -1;
    return e
}
function _jtwords(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = c;
    if (0 == (f | 0)) return STACKTOP = c, 0;
    if (1 < (HEAP32[f + 24 >> 2] | 0)) return e = _jtrank1ex(a, f, 0, 1, 2722), STACKTOP = c, e;
    0 == (HEAP32[f + 12 >> 2] & 2 | 0) ? (g = a + 205336, h = HEAP32[g >> 2], HEAP32[g >> 2] = 0, j = _jtccvt(a, 2, f, b), HEAP32[g >> 2] = h, 0 == j << 24 >> 24 ? (j = HEAP32[a + 4408 >> 2], h = HEAP32[j + (HEAP32[j >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), i = 0) : i = HEAP32[b >> 2]) : i = f;
    if (0 == (i | 0)) return STACKTOP = c, 0;
    f = _jtwordil(a, i);
    if (0 == (f | 0)) return STACKTOP =
        c, 0;
    b = i;
    h = HEAP32[i >> 2];
    i = f;
    j = HEAP32[f >> 2];
    f = HEAP32[i + j >> 2];
    g = 0 > (f | 0) ? -f : f;
    f = _jtga(a, 32, g, 1, 0);
    if (0 == (f | 0)) return STACKTOP = c, 0;
    if (0 >= (g | 0)) return STACKTOP = c, f;
    l = f + HEAP32[f >> 2];
    k = j + (i + 4);
    for (i = 0;;) {
        j = HEAP32[k >> 2];
        m = HEAP32[k + 4 >> 2];
        n = _jtga(a, 2, m, 1, 0);
        if (0 == (n | 0)) break;
        _memcpy(n + HEAP32[n >> 2], b + (j + h), m) | 0;
        HEAP32[l >> 2] = n;
        n = i + 1;
        if ((n | 0) < (g | 0)) l += 4, k += 8, i = n;
        else {
            e = f;
            d = 16;
            break
        }
    }
    if (16 == d) return STACKTOP = c, e;
    HEAP32[l >> 2] = 0;
    STACKTOP = c;
    return 0
}
function _jtxdefn(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    g = a + 205692;
    h = HEAP32[g >> 2];
    j = a + 205752;
    i = HEAP32[j >> 2] + h;
    l = a + 204564;
    k = HEAP32[l >> 2];
    m = a + 205757;
    n = HEAP8[m];
    HEAP32[e >> 2] = 0;
    p = a + 1176;
    q = HEAP32[p >> 2];
    r = a + 204545;
    if (0 != HEAP8[r] << 24 >> 24) return s = 0, STACKTOP = e, s;
    t =
        HEAP32[31088];
    u = HEAP32[c >> 2];
    w = c + u;
    v = HEAP32[c + 12 >> 2];
    x = 0 == (HEAP32[a + 204524 >> 2] | 0);
    y = HEAP32[c + (u + 20) >> 2];
    x ? (z = y >>> 16, A = z & 255, B = D = A & 1) : B = 1;
    G = HEAP32[a + 1168 >> 2];
    C = HEAP32[a + 1164 >> 2];
    F = 0 == (y & 131072 | 0);
    0 == (q | 0) | F ? E = 0 : (J = a + 205600, L = HEAP32[J >> 2], I = L + 48, H = HEAP8[I], E = N = (K = 3 == H << 24 >> 24) ? L : 0);
    0 == (y & 1048576 | 0) ? (S = w, V = T = 0) : (Q = u + 8, P = c + Q, M = HEAP32[P >> 2], R = u + 16, O = c + R, aa = HEAP32[O >> 2], Z = u + 12, $ = c + Z, ba = HEAP32[$ >> 2], ka = HEAP32[ba >> 2], S = ea = ba + ka, T = M, V = aa);
    da = (ha = 0 != (v & 1572864 | 0)) ? d : V;
    ga = ha ? f : T;
    U = HEAP32[S + 16 >> 2];
    ca = U + HEAP32[U >>
        2];
    fa = (X = 0 != (f | 0)) ? ja = (Y = 0 != (d | 0)) ? 3 : 0 : 0;
    ia = HEAP32[ca + (fa << 2) >> 2];
    ra = ia + HEAP32[ia >> 2];
    sa = ca + (fa + 1 << 2);
    ta = HEAP32[sa >> 2];
    wa = HEAP32[ta + 20 >> 2];
    za = ta + HEAP32[ta >> 2];
    if (0 == (wa | 0)) return Ba = a + 4408, ua = HEAP32[Ba >> 2], ya = HEAP32[ua >> 2], xa = ya + 12, oa = ua + xa, pa = HEAP32[oa >> 2], la = pa + 20, qa = HEAP32[la >> 2], Da = HEAP32[pa >> 2], Aa = pa + Da, _jtjsigstr(a, 3, qa, Aa), s = 0, STACKTOP = e, s;
    Ea = _jtstcreate(a, 2, 1, 0, 0);
    HEAP32[l >> 2] = Ea;
    if (0 == (Ea | 0)) return s = 0, STACKTOP = e, s;
    if (0 == (HEAP32[S + 20 >> 2] & 12582912 | 0)) Sa = 0;
    else {
        Oa = _jtga(a, 4, 51, 2, 0);
        if (Ha = 0 ==
            (Oa | 0)) return s = 0, STACKTOP = e, s;
        Ga = Oa + 28;
        HEAP32[Ga >> 2] = 17;
        Ma = Oa + 32;
        HEAP32[Ma >> 2] = 3;
        Ia = HEAP32[Oa >> 2];
        Sa = db = Oa + Ia
    }
    W = HEAP32[a + 204444 >> 2];
    Xa = a + 204440;
    Ta = HEAP32[Xa >> 2] + 1;
    if ((W | 0) < (Ta | 0)) return fb = a + 4408, mb = HEAP32[fb >> 2], ma = HEAP32[mb >> 2], ab = ma + 68, Na = mb + ab, $a = HEAP32[Na >> 2], Ua = $a + 20, Pa = HEAP32[Ua >> 2], bb = HEAP32[$a >> 2], La = $a + bb, _jtjsigstr(a, 17, Pa, La), s = 0, STACKTOP = e, s;
    HEAP32[Xa >> 2] = Ta;
    HEAP8[m] = 1;
    _jtsymbis(a, HEAP32[30658], f, HEAP32[l >> 2]);
    if (Ja = 0 != (ga | 0)) Qa = HEAP32[30730], Ya = HEAP32[l >> 2], _jtsymbis(a, Qa, ga, Ya), lb =
        ga + 12, Ca = HEAP32[lb >> 2], gb = Ca & 805567999, Fa = 0 == (gb | 0), Fa || (Za = HEAP32[31128], qb = HEAP32[l >> 2], _jtsymbis(a, Za, ga, qb));
    _jtsymbis(a, HEAP32[30650], d, HEAP32[l >> 2]);
    if (ib = 0 != (da | 0)) ub = HEAP32[30726], eb = HEAP32[l >> 2], _jtsymbis(a, ub, da, eb), rb = da + 12, wb = HEAP32[rb >> 2], Ka = wb & 805567999, Va = 0 == (Ka | 0), Va || (nb = HEAP32[31082], ob = HEAP32[l >> 2], _jtsymbis(a, nb, da, ob));
    0 != HEAP8[a + 2388] << 24 >> 24 && (cb = HEAP32[30660], Wa = HEAP32[l >> 2], _jtsymbis(a, cb, f, Wa), Ja && (yb = HEAP32[30732], Cb = HEAP32[l >> 2], _jtsymbis(a, yb, ga, Cb), Pb = ga + 12, zb = HEAP32[Pb >>
        2], Zb = zb & 805567999, ac = 0 == (Zb | 0), ac || (Hb = HEAP32[31132], Ib = HEAP32[l >> 2], _jtsymbis(a, Hb, ga, Ib))), Qb = HEAP32[30652], Rb = HEAP32[l >> 2], _jtsymbis(a, Qb, d, Rb), ib && (Ob = HEAP32[30728], Bb = HEAP32[l >> 2], _jtsymbis(a, Ob, da, Bb), xb = da + 12, dc = HEAP32[xb >> 2], tb = dc & 805567999, oc = 0 == (tb | 0), oc || (Mb = HEAP32[31084], Tb = HEAP32[l >> 2], _jtsymbis(a, Mb, da, Tb))));
    if (0 != (HEAP32[p >> 2] | 0) && (Ra = a + 205600, Nb = HEAP32[Ra >> 2], sb = 0 == (Nb | 0), !sb && (Ab = Nb + 48, Eb = HEAP8[Ab], Lb = 3 == Eb << 24 >> 24)))
        if (vb = Nb + 8, wc = HEAP32[vb >> 2], Ec = (wc | 0) == (c | 0)) yc = HEAP32[l >> 2],
            Db = Nb + 20, HEAP32[Db >> 2] = yc, bc = HEAP32[sa >> 2], pb = HEAP32[Ra >> 2], Fb = pb + 24, HEAP32[Fb >> 2] = bc, jb = HEAP32[Ra >> 2], gc = jb + 28, HEAP32[gc >> 2] = e;
    ic = HEAP32[j >> 2] + HEAP32[g >> 2];
    vc = HEAP32[e >> 2];
    hc = -1 < (vc | 0) & (vc | 0) < (wa | 0);
    a: do {
        if (hc) {
            uc = a + 205300;
            Ac = a + 205304;
            xc = X ? 2 : 1;
            cd = a + 205340;
            jc = a;
            Tc = a + 1040;
            Fc = a + 1220;
            Bc = a + 4400;
            ec = a + 9;
            Xb = a + 205600;
            nc = (sc = 0 != (d | 0)) ? 3 : 0;
            tc = a + 4408;
            Ub = a + 1056;
            $c = X ? nc : 0;
            ad = $c + 1;
            qc = 0;
            Uc = t;
            rc = za;
            kb = wa;
            $b = Jb = 0;
            na = ra;
            kc = Vb = 0;
            va = c;
            Wc = vc;
            b: for (;;) {
                Yb = HEAP32[uc >> 2];
                if (fc = 0 < (Yb | 0)) Kb = HEAP8[Ac], Gb = 1 != Kb << 24 >> 24, (gd =
                    Gb | F) || _jtpmrecord(a, G, C, Wc, xc);
                mc = HEAP32[cd >> 2];
                Gc = 0 == (mc | 0);
                do
                    if (Gc) dd = va, kd = na, Fd = kb, Vc = rc;
                    else if (Hd = HEAP32[Xb >> 2], bd = 0 == (Hd | 0)) dd = va, kd = na, Fd = kb, Vc = rc;
                else if (cc = Hd + 36, Ic = HEAP32[cc >> 2], fd = (mc | 0) == (Ic | 0))
                    if (xd = Hd + 48, Xc = HEAP8[xd], Wd = 3 == Xc << 24 >> 24)
                        if (Wb = Hd + 8, Sb = HEAP32[Wb >> 2], pc = (va | 0) == (Sb | 0)) dd = va, kd = na, Fd = kb, Vc = rc;
                        else if (hd = zc = Sb, Yc = HEAP32[hd >> 2], Ad = Yc + 16, hb = Gd = zc + Ad, Jc = ed = ld = HEAP32[hb >> 2], Oc = HEAP32[Jc >> 2], ke = Pc = ed + Oc, Ed = ke + ($c << 2), Cc = id = pd = HEAP32[Ed >> 2], Qc = HEAP32[Cc >> 2], vd = Zc = id + Qc, $d = ke + (ad <<
                        2), je = HEAP32[$d >> 2], Kc = je + 20, Bd = HEAP32[Kc >> 2], Vd = od = je, Zd = HEAP32[Vd >> 2], Md = Jd = od + Zd, Cd = Hd + 24, HEAP32[Cd >> 2] = je, HEAP32[cd >> 2] = 0, fe = HEAP32[e >> 2], Xd = (fe | 0) < (Bd | 0)) dd = Sb, kd = vd, Fd = Bd, Vc = Md;
                else {
                    qd = Uc;
                    Od = kc;
                    break a
                } else dd = va, kd = na, Fd = kb, Vc = rc;
                else dd = va, kd = na, Fd = kb, Vc = rc;
                while (0);
                Mc = HEAP32[e >> 2];
                Dd = Vc + (12 * Mc & -1);
                Td = Vc + (12 * Mc & -1) + 10;
                le = HEAP8[Td];
                me = le << 24 >> 24;
                c: do switch (me | 0) {
                        case 10:
                            wd = 17 > (Vb | 0);
                            if (!wd) {
                                ye = xe = Ie = HEAP32[tc >> 2];
                                Fe = HEAP32[ye >> 2];
                                nf = Fe + 40;
                                Id = Je = xe + nf;
                                Qe = HEAP32[Id >> 2];
                                sd = Qe + 20;
                                ge = HEAP32[sd >>
                                    2];
                                md = ud = Qe;
                                de = HEAP32[md >> 2];
                                ae = ud + de;
                                _jtjsigstr(a, 10, ge, ae);
                                HEAP32[e >> 2] = -1;
                                Dc = kc;
                                Nc = Vb;
                                yd = $b;
                                jd = Jb;
                                Sc = 0;
                                lc = qc;
                                break c
                            }
                            nd = Sa + (12 * Vb & -1) + 4;
                            HEAP32[nd >> 2] = 0;
                            Rc = Sa + (12 * Vb & -1);
                            Hc = Mc;
                            Kd = 0;
                            d: for (;;) {
                                HEAP32[Rc >> 2] = Kd;
                                for (Rd = Hc;;) {
                                    Nd = Vc + (12 * Rd & -1) + 6;
                                    be = HEAP16[Nd >> 1];
                                    zd = be & 65535;
                                    we = Vc + (12 * zd & -1) + 10;
                                    Lc = HEAP8[we];
                                    rd = Lc << 24 >> 24;
                                    if (27 == (rd | 0)) {
                                        Kd = Hc = zd;
                                        continue d
                                    } else if (6 == (rd | 0)) break d;
                                    else if (28 != (rd | 0)) {
                                        Rd = zd;
                                        continue
                                    }
                                    Rd = HEAP32[nd >> 2] = zd
                                }
                            }
                            se = Sa + (12 * Vb & -1) + 8;
                            HEAP32[se >> 2] = zd;
                            Ud = HEAP32[p >> 2];
                            Cf = 0 == (Ud | 0);
                            Cf ||
                                (Te = (td = 0 == (Kd | 0)) ? 3 : pe = HEAP32[Fc >> 2], HEAP32[p >> 2] = Te);
                            Pd = Vb + 1;
                            Me = HEAP32[e >> 2];
                            Sd = Me + 1;
                            HEAP32[e >> 2] = Sd;
                            Dc = kc;
                            Nc = Pd;
                            yd = $b;
                            jd = Jb;
                            Sc = Uc;
                            lc = qc;
                            break;
                        case 11:
                        case 27:
                        case 28:
                            ($e = 0 == (Vb | 0)) ? (qe = Vc + (12 * Mc & -1) + 6, Ce = HEAP16[qe >> 1], cf = Ce & 65535, HEAP32[e >> 2] = cf, Dc = kc, Nc = 0) : (sf = Vb - 1, Ue = Sa + (12 * sf & -1) + 8, kf = HEAP32[Ue >> 2], Re = kf + 1, HEAP32[e >> 2] = Re, HEAP32[p >> 2] = q, Dc = kc, Nc = sf);
                            yd = $b;
                            jd = Jb;
                            Sc = Uc;
                            lc = qc;
                            break c;
                        case 26:
                            ce = HEAP32[31086];
                            De = ce + 20;
                            Ge = HEAP32[De >> 2];
                            We = He = ce;
                            Yd = HEAP32[We >> 2];
                            Ne = He + Yd;
                            _jtjsigstr(a, 55, Ge, Ne);
                            HEAP32[e >>
                                2] = -1;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = Jb;
                            Sc = 0;
                            lc = qc;
                            break;
                        case 1:
                            _jttpop(a, ic);
                            Se = Vc + (12 * Mc & -1) + 4;
                            Ee = HEAP16[Se >> 1];
                            Ld = Ee & 65535;
                            he = Dd;
                            Qd = HEAP32[he >> 2];
                            re = _jtga(a, 32, Ld, 1, 0);
                            (Ke = 0 == (re | 0)) ? Ae = 0: (ie = te = kd + (Qd << 2), ue = ff = re, Oe = HEAP32[ue >> 2], ne = ff + Oe, ze = Ld << 2, _memcpy(ne, ie, ze) | 0, Ae = re);
                            vf = _jtparsex(a, Ae, B, Dd, E);
                            lf = 0 == (vf | 0);
                            do
                                if (lf && (Xe = HEAP32[p >> 2], Be = Xe - 1, hf = 2 > Be >>> 0, !hf && (af = HEAP8[r], 0 != af << 24 >> 24))) {
                                    if (55 != af << 24 >> 24) {
                                        zf = Vc + (12 * Mc & -1) + 6;
                                        uf = HEAP16[zf >> 1];
                                        ve = uf & 65535;
                                        HEAP32[e >> 2] = ve;
                                        if (If = -1 == uf << 16 >> 16) {
                                            Dc = kc;
                                            Nc = Vb;
                                            yd = $b;
                                            jd = Jb;
                                            Sc = 0;
                                            lc = qc;
                                            break c
                                        }
                                        HEAP8[r] = 0;
                                        HEAP32[Bc >> 2] = 0;
                                        if (Df = 0 == (Vb | 0)) {
                                            Dc = kc;
                                            Nc = 0;
                                            yd = $b;
                                            jd = Jb;
                                            Sc = 0;
                                            lc = qc;
                                            break c
                                        }
                                        Ef = Vb - 1;
                                        HEAP32[p >> 2] = q;
                                        Dc = kc;
                                        Nc = Ef;
                                        yd = $b;
                                        jd = Jb;
                                        Sc = 0;
                                        lc = qc;
                                        break c
                                    }
                                    Gf = 0 == (Vb | 0);
                                    do
                                        if (!Gf && (of = Vb - 1, Lf = Sa + (12 * of & -1) + 4, pf = HEAP32[Lf >> 2], bf = 0 == (pf | 0), !bf)) {
                                            Bf = pf + 1;
                                            HEAP32[e >> 2] = Bf;
                                            HEAP8[r] = 0;
                                            HEAP32[Bc >> 2] = 0;
                                            Dc = kc;
                                            Nc = Vb;
                                            yd = $b;
                                            jd = Jb;
                                            Sc = 0;
                                            lc = qc;
                                            break c
                                        }
                                    while (0);
                                    Pf = HEAP32[31086];
                                    Ye = Pf + 20;
                                    Hf = HEAP32[Ye >> 2];
                                    mf = jf = Pf;
                                    Le = HEAP32[mf >> 2];
                                    Ve = jf + Le;
                                    _jtjsigstr(a, 55, Hf, Ve);
                                    HEAP32[e >> 2] = -1;
                                    Dc = kc;
                                    Nc = Vb;
                                    yd = $b;
                                    jd = Jb;
                                    Sc = 0;
                                    lc = qc;
                                    break c
                                }
                            while (0);
                            df = HEAP32[e >> 2];
                            wf = df + 1;
                            HEAP32[e >> 2] = wf;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = Jb;
                            Sc = vf;
                            lc = qc;
                            break;
                        case 25:
                            Yf = HEAP8[ec];
                            Jf = 0 == Yf << 24 >> 24;
                            if (!Jf) {
                                b = 79;
                                break c
                            }
                            Qf = Mc + 1;
                            HEAP32[e >> 2] = Qf;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = Jb;
                            Sc = Uc;
                            lc = qc;
                            break;
                        case 2:
                            b = 79;
                            break;
                        case 17:
                        case 20:
                            Sf = 0 == ($b | 0);
                            do
                                if (Sf)
                                    if (Mf = 0 == (kc | 0))
                                        if (ee = _jtga(a, 4, 72, 1, 0), oe = 0 == (ee | 0)) {
                                            HEAP32[e >> 2] = -1;
                                            Dc = 0;
                                            Nc = Vb;
                                            yd = 9;
                                            jd = Jb;
                                            Sc = 0;
                                            lc = qc;
                                            break c
                                        } else Ff = rf = ee, xf = HEAP32[Ff >> 2], Pe = xf - 32, yf = qf = rf + Pe, _jttraverse(a, ee, 654), Nf = ee + 16,
                                            Zf = HEAP32[Nf >> 2], tg = Zf + 1, HEAP32[Nf >> 2] = tg, Ze = ee, gf = 9, ef = yf;
                            else
                            if (Kf = kc + 20, bg = HEAP32[Kf >> 2], lg = bg >>> 3, Rf = _jtext(a, 1, kc), Ug = 0 == (Rf | 0)) {
                                HEAP32[e >> 2] = -1;
                                Dc = 0;
                                Nc = Vb;
                                yd = 0;
                                jd = Jb;
                                Sc = 0;
                                lc = qc;
                                break c
                            } else Jg = Vf = Rf, hg = HEAP32[Jg >> 2], $f = Lg = Vf + hg, ah = lg - 1, nh = $f + (ah << 5), dh = Rf + 20, mg = HEAP32[dh >> 2], yh = mg >>> 3, Bg = yh - lg, Ze = Rf, gf = Bg, ef = nh;
                            else Ze = kc, gf = $b, ef = qc;
                            while (0);
                            ig = ef + 32;
                            ng = gf - 1;
                            Ng = ef + 36;
                            HEAP32[Ng >> 2] = 0;
                            Ch = ig;
                            HEAP32[Ch >> 2] = 0;
                            Dg = Dd;
                            Vg = HEAP32[Dg >> 2];
                            pg = kd + (Vg << 2);
                            zg = HEAP32[pg >> 2];
                            Pg = ef + 40;
                            HEAP32[Pg >> 2] = zg;
                            cg = HEAP32[e >>
                                2];
                            dg = cg + 1;
                            HEAP32[e >> 2] = dg;
                            Dc = Ze;
                            Nc = Vb;
                            yd = ng;
                            jd = Jb;
                            Sc = Uc;
                            lc = ig;
                            break;
                        case 18:
                            qg = qc;
                            vg = HEAP32[qg >> 2];
                            bh = 0 == (vg | 0);
                            d: do
                                if (bh) {
                                    Zg = 0 == (Jb | 0);
                                    do
                                        if (Zg) vh = wg = Eg = HEAP32[tc >> 2], Kh = HEAP32[vh >> 2], $g = Kh + 92, Lh = Ag = wg + $g, xg = HEAP32[Lh >> 2], Mg = xg + 20, rg = HEAP32[Mg >> 2], jg = Sg = xg, Uh = HEAP32[jg >> 2], Of = Sg + Uh, _jtjsigstr(a, 23, rg, Of);
                                        else {
                                            _jttraverse(a, Jb, 654);
                                            Tg = Jb + 16;
                                            qi = HEAP32[Tg >> 2];
                                            eg = qi + 1;
                                            HEAP32[Tg >> 2] = eg;
                                            HEAP32[qg >> 2] = Jb;
                                            gi = Jb + 24;
                                            kg = HEAP32[gi >> 2];
                                            (Qg = 0 == (kg | 0)) ? Wg = 1: (wi = Jb + 28, Wg = zh = HEAP32[wi >> 2]);
                                            Wf = qc + 28;
                                            HEAP32[Wf >>
                                                2] = Wg;
                                            di = qc + 20;
                                            HEAP32[di >> 2] = -1;
                                            ch = qc + 4;
                                            HEAP32[ch >> 2] = 0;
                                            Mh = qc + 8;
                                            Fg = HEAP32[Mh >> 2];
                                            Rg = Fg + 20;
                                            Vh = HEAP32[Rg >> 2];
                                            Gg = Vh - 5;
                                            eh = qc + 24;
                                            HEAP32[eh >> 2] = Gg;
                                            kh = 1 > (Gg | 0);
                                            fh = 0 == (Wg | 0);
                                            if (Wh = kh | fh) {
                                                qh = 0;
                                                og = di;
                                                Og = Wf;
                                                break d
                                            }
                                            Ih = Kg = Fg;
                                            ai = HEAP32[Ih >> 2];
                                            wh = ai + 4;
                                            Xh = Kg + wh;
                                            Nh = Vh + 1;
                                            Jh = _jtga(a, 2, Nh, 1, 0);
                                            if (lj = 0 == (Jh | 0)) HEAP32[ch >> 2] = 0;
                                            else {
                                                rh = gh = Jh;
                                                Ph = HEAP32[rh >> 2];
                                                hi = gh + Ph;
                                                _memcpy(hi, Xh, Nh) | 0;
                                                _jttraverse(a, Jh, 654);
                                                sh = Jh + 16;
                                                fg = HEAP32[sh >> 2];
                                                Yi = fg + 1;
                                                HEAP32[sh >> 2] = Yi;
                                                HEAP32[ch >> 2] = Jh;
                                                mj = HEAP32[rh >> 2];
                                                xi = gh + mj;
                                                Hi = qc + 16;
                                                HEAP32[Hi >>
                                                    2] = xi;
                                                Ii = mj + Gg;
                                                lh = gh + Ii;
                                                HEAP8[lh] = HEAP8[120576];
                                                HEAP8[lh + 1 | 0] = HEAP8[120577];
                                                HEAP8[lh + 2 | 0] = HEAP8[120578];
                                                HEAP8[lh + 3 | 0] = HEAP8[120579];
                                                HEAP8[lh + 4 | 0] = HEAP8[120580];
                                                HEAP8[lh + 5 | 0] = HEAP8[120581];
                                                yg = qc + 12;
                                                HEAP32[yg >> 2] = Xh;
                                                qh = 0;
                                                og = di;
                                                Og = Wf;
                                                break d
                                            }
                                        }
                                    while (0);
                                    HEAP32[e >> 2] = -1;
                                    Dc = kc;
                                    Nc = Vb;
                                    yd = $b;
                                    jd = Jb;
                                    Sc = 0;
                                    lc = qc;
                                    break c
                                } else vj = qc + 20, Ji = qc + 28, qh = Jb, og = vj, Og = Ji;
                            while (0);
                            Xj = HEAP32[og >> 2];
                            yi = Xj + 1;
                            HEAP32[og >> 2] = yi;
                            hh = HEAP32[Og >> 2];
                            Aj = (yi | 0) < (hh | 0);
                            if (!Aj) {
                                ih = qh;
                                b = 120;
                                break c
                            }
                            Hj = qc + 4;
                            zi = HEAP32[Hj >> 2];
                            ni = 0 == (zi | 0);
                            ni ||
                                (ti = qc + 24, Cg = HEAP32[ti >> 2], Ah = Cg + 6, th = qc + 16, oh = HEAP32[th >> 2], Hg = _jtnfs(a, Ah, oh), bi = HEAP32[og >> 2], ui = _jtga(a, 4, 1, 0, 0), (gj = 0 == (ui | 0)) ? rj = 0 : (Pj = Ki = ui, Zi = HEAP32[Pj >> 2], mh = ii = Ki + Zi, HEAP32[mh >> 2] = bi, rj = ui), ji = HEAP32[l >> 2], _jtsymbis(a, Hg, rj, ji), vi = HEAP32[ti >> 2], Qh = qc + 12, Ij = HEAP32[Qh >> 2], ik = _jtnfs(a, vi, Ij), hj = HEAP32[qg >> 2], Xg = _jtfrom(a, rj, hj), Li = HEAP32[l >> 2], _jtsymbis(a, ik, Xg, Li));
                            ph = HEAP32[e >> 2];
                            al = ph + 1;
                            HEAP32[e >> 2] = al;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = qh;
                            Sc = Uc;
                            lc = qc;
                            break;
                        case 19:
                        case 24:
                            ih = Jb;
                            b = 120;
                            break;
                        case 16:
                            oi =
                                0 == (kc | 0);
                            do
                                if (oi) Yh = $b, ek = qc;
                                else if (ki = _jttpush(a, Uc), ci = 0 == (ki | 0), ci || (_jttraverse(a, ki, 654), Rh = ki + 16, Bj = HEAP32[Rh >> 2], wj = Bj + 1, HEAP32[Rh >> 2] = wj), Cj = kc + 20, Qi = HEAP32[Cj >> 2], Ri = Qi >>> 3, Qj = Ri - $b, Dh = 0 < (Qj | 0)) {
                                Vk = $b - Ri;
                                Sh = qc;
                                for (Dj = 0;;) {
                                    xj = Sh + 4;
                                    Eh = HEAP32[xj >> 2];
                                    Rj = 0 == (Eh | 0);
                                    if (!Rj && (Ai = Sh + 24, Vi = HEAP32[Ai >> 2], Yg = Sh + 12, ri = HEAP32[Yg >> 2], Fh = _jtga(a, 2, Vi, 1, 0), (fk = 0 == (Fh | 0)) ? Ei = 0 : (jk = Nk = Fh, qk = HEAP32[jk >> 2], nj = Nk + qk, _memcpy(nj, ri, Vi) | 0, Ei = Fh), pi = _jtlink(a, Eh, Ei), _jtex(a, pi), yj = HEAP32[xj >> 2], Ig = 0 == (yj | 0), !Ig &&
                                            (_jttraverse(a, yj, 1910), Th = yj + 16, ij = HEAP32[Th >> 2], Ej = ij - 1, HEAP32[Th >> 2] = Ej, Yj = 0 == (Ej | 0)))) $i = yj - 32 + 24, zk = Ik = $i + 4, sj = HEAP16[zk >> 1], Fj = sj << 16 >> 16, Jj = 124360 + (Fj << 2), Wk = HEAP32[Jj >> 2], Fi = HEAP32[Ub >> 2], jj = Fi - Wk, HEAP32[Ub >> 2] = jj, (Ak = 10 < sj << 16 >> 16) ? (jl = $i, _free(jl)) : (Wi = a + 204588 + (Fj << 2), ei = tk = HEAP32[Wi >> 2], HEAP32[$i >> 2] = ei, HEAP32[Wi >> 2] = $i, Bk = a + 204712 + (Fj << 2), zj = HEAP32[Bk >> 2], kj = zj + Wk, HEAP32[Bk >> 2] = kj);
                                    Bi = Sh;
                                    Ck = HEAP32[Bi >> 2];
                                    ol = 0 == (Ck | 0);
                                    if (!ol && (_jttraverse(a, Ck, 1910), Ci = Ck + 16, Sj = HEAP32[Ci >> 2], Kj = Sj - 1, HEAP32[Ci >>
                                            2] = Kj, Zj = 0 == (Kj | 0))) Tj = Ck - 32 + 24, Jk = bl = Tj + 4, Ui = HEAP16[Jk >> 1], fi = Ui << 16 >> 16, xh = 124360 + (fi << 2), oj = HEAP32[xh >> 2], Dk = HEAP32[Ub >> 2], gk = Dk - oj, HEAP32[Ub >> 2] = gk, (cl = 10 < Ui << 16 >> 16) ? (uk = Tj, _free(uk)) : (sg = a + 204588 + (fi << 2), ul = Lj = HEAP32[sg >> 2], HEAP32[Tj >> 2] = ul, HEAP32[sg >> 2] = Tj, pj = a + 204712 + (fi << 2), tf = HEAP32[pj >> 2], Xi = tf + oj, HEAP32[pj >> 2] = Xi);
                                    $j = Sh;
                                    _memset($j, 0, 32) | 0;
                                    Si = Sh - 32;
                                    gg = Dj + 1;
                                    if (Kk = (gg | 0) < (Qj | 0)) Sh = Si, Dj = gg;
                                    else break
                                }
                                Gh = qc + (Vk << 5);
                                Yh = Ri;
                                ek = Gh
                            } else Yh = $b, ek = qc;
                            while (0);
                            ag = Vc + (12 * Mc & -1) + 6;
                            jh = HEAP16[ag >> 1];
                            Hh = jh & 65535;
                            HEAP32[e >> 2] = Hh;
                            Dc = kc;
                            Nc = Vb;
                            yd = Yh;
                            jd = Jb;
                            Sc = Uc;
                            lc = ek;
                            break;
                        case 21:
                        case 22:
                            Af = qc;
                            Mi = HEAP32[Af >> 2];
                            kl = 0 == (Mi | 0);
                            d: do
                                if (kl) {
                                    si = 0 == (Jb | 0);
                                    do
                                        if (!si && (Ok = Jb + 12, Zh = HEAP32[Ok >> 2], dl = Zh & 805567999, Lk = 0 == (dl | 0), !Lk)) {
                                            li = Jb + 20;
                                            Uj = HEAP32[li >> 2];
                                            (fm = 0 == (Uj | 0)) ? b = 165: (Di = Zh & 32, (Mk = 0 == (Di | 0)) ? b = 165 : (qj = _jttpush(a, Jb), (Pk = 0 == (qj | 0)) ? b = 166 : (_jttraverse(a, qj, 654), vl = qj + 16, Mj = HEAP32[vl >> 2], ak = Mj + 1, HEAP32[vl >> 2] = ak, mi = qj, b = 167)));
                                            165 == b && (b = 0, Jl = _jtbox(a, Jb), (Gi = 0 == (Jl | 0)) ? b = 166 : (mi = Jl, b = 167));
                                            if (166 == b) b =
                                                0, HEAP32[Af >> 2] = 0;
                                            else if (167 == b && (b = 0, _jttraverse(a, mi, 654), Nj = mi + 16, Oh = HEAP32[Nj >> 2], fl = Oh + 1, HEAP32[Nj >> 2] = fl, HEAP32[Af >> 2] = mi, ll = 0 == (mi | 0), !ll)) {
                                                vk = 0;
                                                break d
                                            }
                                            HEAP32[e >> 2] = -1;
                                            Dc = kc;
                                            Nc = Vb;
                                            yd = $b;
                                            jd = Jb;
                                            Sc = 0;
                                            lc = qc;
                                            break c
                                        }
                                    while (0);
                                    ck = Vj = bk = HEAP32[tc >> 2];
                                    ml = HEAP32[ck >> 2];
                                    rk = ml + 92;
                                    Kl = pl = Vj + rk;
                                    Qk = HEAP32[Kl >> 2];
                                    wl = Qk + 20;
                                    Ek = HEAP32[wl >> 2];
                                    Bl = sk = Qk;
                                    aj = HEAP32[Bl >> 2];
                                    kk = sk + aj;
                                    _jtjsigstr(a, 23, Ek, kk);
                                    HEAP32[e >> 2] = -1;
                                    Dc = kc;
                                    Nc = Vb;
                                    yd = $b;
                                    jd = Jb;
                                    Sc = 0;
                                    lc = qc;
                                    break c
                                } else vk = Jb;
                            while (0);
                            Ni = Vc + (12 * Mc & -1) + 6;
                            Oi = HEAP16[Ni >>
                                1];
                            lk = Oi & 65535;
                            HEAP32[e >> 2] = lk;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = vk;
                            Sc = Uc;
                            lc = qc;
                            break;
                        case 23:
                            mk = 0 == (Jb | 0);
                            d: do {
                                if (mk) nk = Mc;
                                else {
                                    Fl = Jb + 12;
                                    Xk = HEAP32[Fl >> 2];
                                    bj = Xk & 805567999;
                                    if (Ll = 0 == (bj | 0)) {
                                        Bh = gl = $h = HEAP32[tc >> 2];
                                        cj = HEAP32[Bh >> 2];
                                        Fk = cj + 92;
                                        dj = Rk = gl + Fk;
                                        ql = HEAP32[dj >> 2];
                                        Sk = ql + 20;
                                        ej = HEAP32[Sk >> 2];
                                        dk = xl = ql;
                                        Gl = HEAP32[dk >> 2];
                                        hk = xl + Gl;
                                        _jtjsigstr(a, 23, ej, hk);
                                        HEAP32[e >> 2] = -1;
                                        Dc = kc;
                                        Nc = Vb;
                                        yd = $b;
                                        jd = Jb;
                                        Sc = 0;
                                        lc = qc;
                                        break c
                                    }
                                    nl = qc;
                                    Yk = HEAP32[nl >> 2];
                                    ok = Jb + 20;
                                    Wj = HEAP32[ok >> 2];
                                    (Rl = 0 == (Wj | 0)) ? b = 177: (pk = Xk & 32, (Vl = 0 == (pk | 0)) ? b = 177 : (rl =
                                        _jttpush(a, Jb), (Zk = 0 == (rl | 0)) ? Gj = 0 : (_jttraverse(a, rl, 654), Cl = rl + 16, Gk = HEAP32[Cl >> 2], gm = Gk + 1, HEAP32[Cl >> 2] = gm, Gj = rl)));
                                    177 == b && (b = 0, Gj = hl = _jtbox(a, Jb));
                                    sl = _jteps(a, Yk, Gj);
                                    Xf = 0 == (sl | 0);
                                    do
                                        if (!Xf && ($k = mm = sl, Dl = HEAP32[$k >> 2], tl = mm + Dl, bm = sl + 20, Ti = HEAP32[bm >> 2], ug = _memchr(tl, 1, Ti), Tf = 0 == (ug | 0))) {
                                            uh = Vc + (12 * Mc & -1) + 6;
                                            Uf = HEAP16[uh >> 1];
                                            uj = tj = Uf & 65535;
                                            break d
                                        }
                                    while (0);
                                    nk = Sl = HEAP32[e >> 2]
                                }
                                b = 182
                            } while (0);
                            182 == b && (b = 0, uj = il = nk + 1);
                            HEAP32[e >> 2] = uj;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = 0;
                            Sc = Uc;
                            lc = qc;
                            break;
                        case 3:
                            Wl = Mc + 1;
                            HEAP32[e >> 2] =
                                Wl;
                            if (yn = 0 == (Jb | 0)) {
                                Dc = kc;
                                Nc = Vb;
                                yd = $b;
                                jd = 0;
                                Sc = Uc;
                                lc = qc;
                                break c
                            }
                            im = Jb + 12;
                            Im = HEAP32[im >> 2];
                            zl = Im & 64512;
                            Xl = 0 == (zl | 0);
                            do
                                if (Xl) vm = Jb, Tl = Im;
                                else if (Ml = _jtdenseit(a, Jb), kn = 0 == (Ml | 0)) {
                                HEAP32[e >> 2] = -1;
                                Dc = kc;
                                Nc = Vb;
                                yd = $b;
                                Sc = jd = 0;
                                lc = qc;
                                break c
                            } else nm = Ml + 12, Fn = HEAP32[nm >> 2], vm = Ml, Tl = Fn;
                            while (0);
                            Nl = Tl & 805567999;
                            if (Gn = 0 == (Nl | 0)) {
                                Op = Hl = Pm = HEAP32[tc >> 2];
                                Hn = HEAP32[Op >> 2];
                                uo = Hn + 92;
                                Do = Ol = Hl + uo;
                                Xn = HEAP32[Do >> 2];
                                io = Xn + 20;
                                ln = HEAP32[io >> 2];
                                el = qm = Xn;
                                Il = HEAP32[el >> 2];
                                mn = qm + Il;
                                _jtjsigstr(a, 23, ln, mn);
                                HEAP32[e >> 2] = -1;
                                Dc = kc;
                                Nc = Vb;
                                yd = $b;
                                jd = vm;
                                Sc = 0;
                                lc = qc;
                                break c
                            }
                            $m = vm + 20;
                            Jm = HEAP32[$m >> 2];
                            zm = (om = 0 == (Jm | 0)) ? 0 : Tl;
                            switch (zm | 0) {
                                case 128:
                                case 64:
                                    Eo = Am = vm;
                                    jo = HEAP32[Eo >> 2];
                                    Fo = hm = Am + jo;
                                    Bm = pm = ko = HEAP32[Fo >> 2];
                                    Km = HEAP32[Bm >> 2];
                                    rm = Cm = pm + Km;
                                    Lm = HEAP32[rm >> 2];
                                    Tm = 0 == (Lm | 0);
                                    if (!Tm) {
                                        Dc = kc;
                                        Nc = Vb;
                                        yd = $b;
                                        jd = 0;
                                        Sc = Uc;
                                        lc = qc;
                                        break c
                                    }
                                    Qm = ko + 20;
                                    an = HEAP32[Qm >> 2];
                                    wk = 1 < (an | 0);
                                    nn = Go = wk & 1;
                                    break;
                                case 16:
                                    cm = on = vm;
                                    In = HEAP32[cm >> 2];
                                    Dp = bp = on + In;
                                    lo = HEAPF64[Dp >> 3];
                                    if (bn = 0 != lo) {
                                        Dc = kc;
                                        Nc = Vb;
                                        yd = $b;
                                        jd = 0;
                                        Sc = Uc;
                                        lc = qc;
                                        break c
                                    }
                                    cn = In + 8;
                                    Ro = Um = on + cn;
                                    Yn = HEAPF64[Ro >> 3];
                                    Yl =
                                        0 != Yn;
                                    nn = pn = Yl & 1;
                                    break;
                                case 8:
                                    vo = Hk = vm;
                                    Ho = HEAP32[vo >> 2];
                                    vp = Pp = Hk + Ho;
                                    mo = HEAPF64[vp >> 3];
                                    Io = 0 != mo;
                                    nn = hp = Io & 1;
                                    break;
                                case 4:
                                    sm = Vm = vm;
                                    Zn = HEAP32[sm >> 2];
                                    Mm = Oj = Vm + Zn;
                                    Yp = HEAP32[Mm >> 2];
                                    Tq = 0 != (Yp | 0);
                                    nn = Dm = Tq & 1;
                                    break;
                                case 1:
                                    dn = Zl = vm;
                                    Nm = HEAP32[dn >> 2];
                                    Rm = Zl + Nm;
                                    nn = jm = HEAP8[Rm];
                                    break;
                                default:
                                    Dc = kc;
                                    Nc = Vb;
                                    yd = $b;
                                    jd = 0;
                                    Sc = Uc;
                                    lc = qc;
                                    break c
                            }(Ep = 0 == nn << 24 >> 24) ? (cp = 0, b = 200) : (Dc = kc, Nc = Vb, yd = $b, jd = 0, Sc = Uc, lc = qc);
                            break;
                        default:
                            cp = Jb, b = 200
                    }
                    while (0);
                    c: do
                        if (79 == b) {
                            b = 0;
                            So = 0 == (Uc | 0);
                            So || (_jttraverse(a, Uc, 654), Jo = Uc + 16, Jn = HEAP32[Jo >>
                                2], Ko = Jn + 1, HEAP32[Jo >> 2] = Ko);
                            _jttpop(a, ic);
                            _jttpush(a, Uc);
                            $n = Vc + (12 * Mc & -1) + 4;
                            Em = HEAP16[$n >> 1];
                            dm = Em & 65535;
                            To = Dd;
                            Kn = HEAP32[To >> 2];
                            El = _jtga(a, 32, dm, 1, 0);
                            (rq = 0 == (El | 0)) ? Zp = 0: (zn = Bq = kd + (Kn << 2), no = wp = El, ip = HEAP32[no >> 2], Er = wp + ip, Lo = dm << 2, _memcpy(Er, zn, Lo) | 0, Zp = El);
                            sq = _jtparsex(a, Zp, B, Dd, E);
                            An = 0 == (sq | 0);
                            do
                                if (An && (jp = HEAP32[p >> 2], Mo = jp - 1, Ln = 2 > Mo >>> 0, !Ln && (kp = HEAP8[r], 0 != kp << 24 >> 24))) {
                                    if (55 != kp << 24 >> 24) {
                                        en = Vc + (12 * Mc & -1) + 6;
                                        Bn = HEAP16[en >> 1];
                                        Mn = Bn & 65535;
                                        HEAP32[e >> 2] = Mn;
                                        if (gq = -1 == Bn << 16 >> 16) {
                                            Dc = kc;
                                            Nc = Vb;
                                            yd =
                                                $b;
                                            jd = 0;
                                            Sc = Uc;
                                            lc = qc;
                                            break c
                                        }
                                        HEAP8[r] = 0;
                                        HEAP32[Bc >> 2] = 0;
                                        if (Nn = 0 == (Vb | 0)) {
                                            Dc = kc;
                                            Nc = 0;
                                            yd = $b;
                                            jd = 0;
                                            Sc = Uc;
                                            lc = qc;
                                            break c
                                        }
                                        Hq = Vb - 1;
                                        HEAP32[p >> 2] = q;
                                        Dc = kc;
                                        Nc = Hq;
                                        yd = $b;
                                        jd = 0;
                                        Sc = Uc;
                                        lc = qc;
                                        break c
                                    }
                                    dp = 0 == (Vb | 0);
                                    do
                                        if (!dp && (wo = Vb - 1, Fp = Sa + (12 * wo & -1) + 4, fn = HEAP32[Fp >> 2], On = 0 == (fn | 0), !On)) {
                                            ao = fn + 1;
                                            HEAP32[e >> 2] = ao;
                                            HEAP8[r] = 0;
                                            HEAP32[Bc >> 2] = 0;
                                            Dc = kc;
                                            Nc = Vb;
                                            yd = $b;
                                            jd = 0;
                                            Sc = Uc;
                                            lc = qc;
                                            break c
                                        }
                                    while (0);
                                    Qp = HEAP32[31086];
                                    gn = Qp + 20;
                                    tm = HEAP32[gn >> 2];
                                    xo = um = Qp;
                                    No = HEAP32[xo >> 2];
                                    Gp = um + No;
                                    _jtjsigstr(a, 55, tm, Gp);
                                    HEAP32[e >> 2] = -1;
                                    Dc = kc;
                                    Nc = Vb;
                                    yd =
                                        $b;
                                    Sc = jd = 0;
                                    lc = qc;
                                    break c
                                }
                            while (0);
                            $l = HEAP32[e >> 2];
                            lp = $l + 1;
                            HEAP32[e >> 2] = lp;
                            Dc = kc;
                            Nc = Vb;
                            yd = $b;
                            jd = sq;
                            Sc = Uc;
                            lc = qc
                        } else
                if (120 == b) {
                    b = 0;
                    km = _jttpush(a, Uc);
                    am = 0 == (km | 0);
                    am || (_jttraverse(a, km, 654), mp = km + 16, Fm = HEAP32[mp >> 2], Ar = Fm + 1, HEAP32[mp >> 2] = Ar);
                    hq = qc + 4;
                    iq = HEAP32[hq >> 2];
                    Hp = 0 == (iq | 0);
                    if (!Hp && (hn = qc + 24, Pn = HEAP32[hn >> 2], yo = qc + 12, np = HEAP32[yo >> 2], qn = _jtga(a, 2, Pn, 1, 0), (tq = 0 == (qn | 0)) ? rn = 0 : (Uq = $p = qn, Rp = HEAP32[Uq >> 2], Cq = $p + Rp, _memcpy(Cq, np, Pn) | 0, rn = qn), sn = _jtlink(a, iq, rn), _jtex(a, sn), Qn = HEAP32[hq >> 2], uq = 0 == (Qn |
                            0), !uq && (_jttraverse(a, Qn, 1910), Iq = Qn + 16, Uo = HEAP32[Iq >> 2], Rn = Uo - 1, HEAP32[Iq >> 2] = Rn, Vo = 0 == (Rn | 0)))) Sn = Qn - 32 + 24, ep = Ip = Sn + 4, Cn = HEAP16[ep >> 1], Pi = Cn << 16 >> 16, xk = 124360 + (Pi << 2), Tk = HEAP32[xk >> 2], yl = HEAP32[Ub >> 2], yk = yl - Tk, HEAP32[Ub >> 2] = yk, (tn = 10 < Cn << 16 >> 16) ? (lm = Sn, _free(lm)) : (Tn = a + 204588 + (Pi << 2), Dn = vq = HEAP32[Tn >> 2], HEAP32[Sn >> 2] = Dn, HEAP32[Tn >> 2] = Sn, oo = a + 204712 + (Pi << 2), Wo = HEAP32[oo >> 2], wm = Wo + Tk, HEAP32[oo >> 2] = wm);
                    Pl = qc;
                    Sp = HEAP32[Pl >> 2];
                    Vq = 0 == (Sp | 0);
                    if (!Vq && (_jttraverse(a, Sp, 1910), Tp = Sp + 16, Oo = HEAP32[Tp >> 2], fp =
                            Oo - 1, HEAP32[Tp >> 2] = fp, jq = 0 == (fp | 0))) un = Sp - 32 + 24, op = Ul = un + 4, rr = HEAP16[op >> 1], Up = rr << 16 >> 16, bo = 124360 + (Up << 2), Po = HEAP32[bo >> 2], Un = HEAP32[Ub >> 2], Jq = Un - Po, HEAP32[Ub >> 2] = Jq, (aq = 10 < rr << 16 >> 16) ? (xp = un, _free(xp)) : (Gm = a + 204588 + (Up << 2), co = kq = HEAP32[Gm >> 2], HEAP32[un >> 2] = co, HEAP32[Gm >> 2] = un, pp = a + 204712 + (Up << 2), En = HEAP32[pp >> 2], Kq = En + Po, HEAP32[pp >> 2] = Kq);
                    eo = qc;
                    _memset(eo, 0, 32) | 0;
                    dr = qc - 32;
                    Ql = $b + 1;
                    Wq = Vc + (12 * Mc & -1) + 6;
                    kr = HEAP16[Wq >> 1];
                    Xo = kr & 65535;
                    HEAP32[e >> 2] = Xo;
                    Dc = kc;
                    Nc = Vb;
                    yd = Ql;
                    jd = ih;
                    Sc = Uc;
                    lc = dr
                } else if (200 == b) {
                    b =
                        0;
                    yp = HEAP32[jc >> 2];
                    Jp = HEAP8[yp];
                    if (qp = 1 < Jp << 24 >> 24)
                        if (Yo = HEAP8[Tc], Wm = 0 == Yo << 24 >> 24) break b;
                    Vn = Vc + (12 * Mc & -1) + 6;
                    Vp = HEAP16[Vn >> 1];
                    Zo = Vp & 65535;
                    HEAP32[e >> 2] = Zo;
                    Dc = kc;
                    Nc = Vb;
                    yd = $b;
                    jd = cp;
                    Sc = Uc;
                    lc = qc
                }
                while (0);
                lq = HEAP32[e >> 2];
                Kp = -1 < (lq | 0);
                sr = (lq | 0) < (Fd | 0);
                if (Lp = Kp & sr) qc = lc, Uc = Sc, rc = Vc, kb = Fd, Jb = jd, $b = yd, na = kd, Vb = Nc, kc = Dc, va = dd, Wc = lq;
                else {
                    qd = Sc;
                    Od = Dc;
                    break a
                }
            }
            HEAP8[yp] = 0;
            fo = zo = mq = HEAP32[tc >> 2];
            Br = HEAP32[fo >> 2];
            rp = Br + 8;
            Xq = nq = zo + rp;
            Yr = HEAP32[Xq >> 2];
            Dq = Yr + 20;
            Cr = HEAP32[Dq >> 2];
            tr = lr = Yr;
            wq = HEAP32[tr >> 2];
            Lq = lr + wq;
            _jtjsigstr(a, 2, Cr, Lq);
            s = 0;
            STACKTOP = e;
            return s
        }
        qd = t;
        Od = 0
    } while (0);
    HEAP32[Xa >> 2] -= 1;
    0 == HEAP8[r] << 24 >> 24 ? (oq = 0 == (qd | 0)) ? bq = er = HEAP32[31088] : (_jttraverse(a, qd, 654), mr = qd + 16, Yq = HEAP32[mr >> 2], po = Yq + 1, HEAP32[mr >> 2] = po, bq = qd) : bq = 0;
    if (0 != (Od | 0) && (_jttraverse(a, Od, 1910), qo = Od + 16, fr = HEAP32[qo >> 2], $o = fr - 1, HEAP32[qo >> 2] = $o, Xm = 0 == ($o | 0))) gp = Od - 32 + 24, go = gp + 4, Ym = HEAP16[go >> 1], ro = Ym << 16 >> 16, ap = 124360 + (ro << 2), ho = HEAP32[ap >> 2], Zm = a + 1056, Ao = HEAP32[Zm >> 2], Wn = Ao - ho, HEAP32[Zm >> 2] = Wn, (so = 10 < Ym << 16 >> 16) ? _free(gp) : (fj = a + 204588 +
        (ro << 2), Mq = HEAP32[fj >> 2], HEAP32[gp >> 2] = Mq, HEAP32[fj >> 2] = gp, sp = a + 204712 + (ro << 2), tp = HEAP32[sp >> 2], Zq = tp + ho, HEAP32[sp >> 2] = Zq);
    _jtsymfreeh(a, HEAP32[l >> 2], 0);
    HEAP32[l >> 2] = k;
    HEAP8[a + 8] = 0;
    HEAP8[m] = n;
    _jttpop(a, i);
    if (!(0 == (bq | 0) | ha) && (Uk = bq + 12, zp = HEAP32[Uk >> 2], em = zp & 805567999, to = 0 == (em | 0))) return vn = a + 4408, Hm = HEAP32[vn >> 2], xm = HEAP32[Hm >> 2], wn = xm + 76, Ap = Hm + wn, ym = HEAP32[Ap >> 2], jn = ym + 20, Om = HEAP32[jn >> 2], Mp = HEAP32[ym >> 2], xn = ym + Mp, _jtjsigstr(a, 19, Om, xn), s = 0, STACKTOP = e, s;
    _jttpush(a, bq);
    s = bq;
    STACKTOP = e;
    return s
}
function _main(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, a = f = 0;
    d = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    c = d;
    b = d + 8;
    g = e = _malloc(205768);
    a: do {
        if (0 != (e | 0)) {
            _memset(e, 0, 205768) | 0;
            HEAP8[112872] = 1;
            HEAP32[e >> 2] = 156616;
            h = 0;
            for (j = 1;;)
                if (HEAP32[124360 + (h << 2) >> 2] = j, i = h + 1, 31 > (i | 0)) h = i, j <<= 1;
                else break;
            HEAP32[e + 205692 >> 2] = -2E3;
            HEAP32[e + 205752 >> 2] = 2E3;
            HEAP32[e + 204964 >> 2] = HEAP32[31120];
            for (j = 0;;)
                if (HEAP32[g + 204588 + (j << 2) >> 2] = 0, HEAP32[g + 204712 + (j << 2) >> 2] = 0, HEAP32[g + 204836 + (j << 2) >> 2] = 1048576,
                    h = j + 1, 31 > (h | 0)) j = h;
                else break;
            j = HEAP32[e + 205292 >> 2] = 0;
            for (h = 156624;;)
                if (i = j & 255, HEAP8[h] = (i & 255) >>> 7 | 48, HEAP8[h + 1] = 32, HEAP8[h + 2] = (i & 255) >>> 6 & 1 | 48, HEAP8[h + 3] = 32, HEAP8[h + 4] = (i & 255) >>> 5 & 1 | 48, HEAP8[h + 5] = 32, HEAP8[h + 6] = (i & 255) >>> 4 & 1 | 48, HEAP8[h + 7] = 32, HEAP8[h + 8] = (i & 255) >>> 3 & 1 | 48, HEAP8[h + 9] = 32, HEAP8[h + 10] = (i & 255) >>> 2 & 1 | 48, HEAP8[h + 11] = 32, HEAP8[h + 12] = (i & 255) >>> 1 & 1 | 48, HEAP8[h + 13] = 32, HEAP8[h + 14] = i & 1 | 48, HEAP8[h + 15] = 32, i = j + 1, 256 > (i | 0)) j = i, h += 16;
                else {
                    l = 0;
                    break
                }
            for (;;)
                if (h = l & 255, HEAP8[l + 160720] = ((h & 255) >>> 7) + (((h &
                        255) >>> 6 & 1) + (((h & 255) >>> 5 & 1) + (((h & 255) >>> 4 & 1) + (((h & 255) >>> 3 & 1) + (((h & 255) >>> 2 & 1) + (((h & 255) >>> 1 & 1) + (h & 1))))))), h = l + 1, 16 > (h | 0)) l = h;
                else {
                    k = 0;
                    break
                }
            for (;;) {
                h = k + 1;
                j = h + 160720;
                i = h << 4;
                for (m = 0;;)
                    if (HEAP8[i + (m + 160720)] = HEAP8[m + 160720] + HEAP8[j], n = m + 1, 16 > (n | 0)) m = n;
                    else break;
                if (15 > (h | 0)) k = h;
                else break
            }
            HEAPF64[14142] = Infinity;
            HEAPF64[14130] = NaN;
            HEAPF64[14141] = -Infinity;
            _memset(122936, 0, 256) | 0;
            HEAP8[122958] = 1;
            HEAP8[122957] = 1;
            HEAP8[122953] = 1;
            HEAP8[122944] = 1;
            HEAP8[122943] = 1;
            HEAP8[122956] = 1;
            HEAP8[122945] = 1;
            HEAP8[122940] =
                1;
            HEAP32[31080] = 124276;
            for (m = 0;;) {
                j = _jtga(g, 4, 1, 0, 0);
                if (0 == (j | 0)) break;
                HEAP32[j + 16 >> 2] = 1073741823;
                i = m - 9;
                HEAP32[j + HEAP32[j >> 2] >> 2] = i;
                HEAP32[HEAP32[31080] + (i << 2) >> 2] = j;
                j = m + 1;
                if (9 > (j | 0)) m = j;
                else {
                    p = 0;
                    f = 15;
                    break
                }
            }
            b: do
                if (15 == f) {
                    for (;;) {
                        f = 0;
                        m = _jtga(g, 4, 1, 0, 0);
                        if (0 == (m | 0)) break b;
                        HEAP32[m + 16 >> 2] = 1073741823;
                        j = p + 2;
                        HEAP32[m + HEAP32[m >> 2] >> 2] = j;
                        HEAP32[HEAP32[31080] + (j << 2) >> 2] = m;
                        m = p + 1;
                        if (8 > (m | 0)) p = m, f = 15;
                        else break
                    }
                    h = _jtga(g, 1, 1, 0, 0);
                    if (0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 0, HEAP32[30648] =
                            h, HEAP32[31069] = h, h = _jtga(g, 1, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 1, HEAP32[31058] = h, HEAP32[31070] = h, _memset(155592, 0, 1024) | 0, h = _jtga(g, 2, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 32, HEAP32[38930] = h, h = _jtga(g, 2, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 58, HEAP32[38956] = h, h = _jtga(g, 2, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 47, HEAP32[38945] = h, h = _jtga(g, 2, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823,
                                HEAP8[h + HEAP32[h >> 2]] = 92, HEAP32[38990] = h, h = _jtga(g, 2, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP8[h + HEAP32[h >> 2]] = 39, HEAP32[38937] = h, h = _jtma(g, 36), 0 != (h | 0) && (m = h, HEAP32[m + 28 >> 2] = 0, HEAP32[h + 32 >> 2] = 0, j = h + 16, HEAP32[j >> 2] = 1, HEAP32[h + 20 >> 2] = 0, HEAP32[h + 24 >> 2] = 1, HEAP32[h + 4 >> 2] = 0, HEAP32[m >> 2] = 32, HEAP32[h + 8 >> 2] = HEAP32[124360 + (HEAP16[h - 32 + 28 >> 1] << 2) >> 2] - 40, m = h + 12, HEAP32[m >> 2] = 0, _jttpush(g, h), HEAP32[m >> 2] = 1, HEAP32[h + 28 >> 2] = 0, HEAP32[j >> 2] = 1073741823, HEAP32[31086] = h, h = _jtga(g, 2, 0, 1, 0), 0 != (h | 0) && (HEAP32[h +
                                    16 >> 2] = 1073741823, HEAP32[40244] = h, h = _jtga(g, 4, 1, 1, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP32[h + HEAP32[h >> 2] >> 2] = 0, HEAP32[30654] = h, HEAP32[31140] = h, h = _jtga(g, 4, 1, 1, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP32[h + HEAP32[h >> 2] >> 2] = 1, HEAP32[30656] = h, HEAP32[31138] = h, h = _jtga(g, 8, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAPF64[h + HEAP32[h >> 2] >> 3] = HEAPF64[14142], HEAP32[40248] = h, h = _jtga(g, 8, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAPF64[h + HEAP32[h >> 2] >> 3] = 3.141592653589793, HEAP32[31054] = h,
                                    h = _jtga(g, 4194304, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823, HEAP32[h + HEAP32[h >> 2] >> 2] = 0, HEAP32[31134] = h, h = _jtma(g, 44), 0 != (h | 0) && (j = h, HEAP32[j + 36 >> 2] = 0, HEAP32[j + 40 >> 2] = 0, m = h + 16, HEAP32[m >> 2] = 1, HEAP32[h + 20 >> 2] = 0, HEAP32[h + 24 >> 2] = 2, HEAP32[h + 4 >> 2] = 0, HEAP32[j >> 2] = 40, HEAP32[h + 8 >> 2] = HEAP32[124360 + (HEAP16[h - 32 + 28 >> 1] << 2) >> 2] - 48, j = h + 12, HEAP32[j >> 2] = 0, _jttpush(g, h), HEAP32[j >> 2] = 1, j = h + 28, HEAP32[j >> 2] = 0, HEAP32[j + 4 >> 2] = 0, HEAP32[m >> 2] = 1073741823, HEAP32[31088] = h, h = _jtga(g, 16, 1, 0, 0), 0 != (h | 0) && (HEAP32[h + 16 >> 2] = 1073741823,
                                        m = h, j = HEAP32[h >> 2], HEAPF64[m + j >> 3] = 0, HEAPF64[j + (m + 8) >> 3] = 1, HEAP32[40252] = h, h = _jtga(g, 2, 1, 1, 0), 0 != (h | 0) && (HEAP8[h + HEAP32[h >> 2]] = 122, HEAP32[h + 16 >> 2] = 1073741823, m = _jtga(g, 32, 1, 1, 0), 0 != (m | 0)))))))))))))))))))
                        if (HEAP32[m + 16 >> 2] = 1073741823, HEAP32[m + HEAP32[m >> 2] >> 2] = h, HEAP32[30640] = m, m = _jtga(g, 33554432, 1, 1, 0), 0 == (m | 0)) HEAP32[31128] = 0;
                        else {
                            h = m;
                            j = HEAP32[m >> 2];
                            i = h + j;
                            HEAP8[j + (h + 14)] = 109;
                            HEAP8[j + (h + 15)] = 0;
                            HEAP8[j + (h + 12)] = 1;
                            HEAP32[j + (h + 4) >> 2] = 0;
                            HEAP32[j + (h + 8) >> 2] = 0;
                            HEAP8[j + (h + 13)] = 4;
                            j = h = 0;
                            n = 119056;
                            for (q = 109;;) {
                                r =
                                    n + 1;
                                s = 1 - j ^ h ^ q;
                                if (0 <= (j | 0)) break;
                                h = 1000003 * s & -1;
                                j += 1;
                                n = r;
                                q = HEAPU8[r]
                            }
                            HEAP32[i >> 2] = s;
                            HEAP32[m + 16 >> 2] = 1073741823;
                            HEAP32[31128] = m;
                            q = _jtga(g, 33554432, 2, 1, 0);
                            if (0 == (q | 0)) HEAP32[31132] = 0;
                            else {
                                n = q;
                                j = HEAP32[q >> 2];
                                h = n + j;
                                r = j + (n + 14);
                                tempBigInt = 11885;
                                HEAP8[r] = tempBigInt;
                                tempBigInt >>= 8;
                                HEAP8[r + 1 | 0] = tempBigInt;
                                HEAP8[j + (n + 16)] = 0;
                                HEAP8[j + (n + 12)] = 2;
                                HEAP32[j + (n + 4) >> 2] = 0;
                                HEAP32[j + (n + 8) >> 2] = 0;
                                HEAP8[j + (n + 13)] = 4;
                                j = n = 0;
                                r = 118472;
                                for (t = 109;;) {
                                    u = r + 1;
                                    w = 2 - j ^ n ^ t;
                                    v = j + 1;
                                    if (2 <= (v | 0)) break;
                                    n = 1000003 * w & -1;
                                    j = v;
                                    r = u;
                                    t = HEAPU8[u]
                                }
                                HEAP32[h >>
                                    2] = w;
                                HEAP32[q + 16 >> 2] = 1073741823;
                                HEAP32[31132] = q;
                                t = _jtga(g, 33554432, 1, 1, 0);
                                if (0 == (t | 0)) HEAP32[31082] = 0;
                                else {
                                    r = t;
                                    j = HEAP32[t >> 2];
                                    n = r + j;
                                    HEAP8[j + (r + 14)] = 110;
                                    HEAP8[j + (r + 15)] = 0;
                                    HEAP8[j + (r + 12)] = 1;
                                    HEAP32[j + (r + 4) >> 2] = 0;
                                    HEAP32[j + (r + 8) >> 2] = 0;
                                    HEAP8[j + (r + 13)] = 4;
                                    j = r = 0;
                                    m = 118096;
                                    for (i = 110;;) {
                                        u = m + 1;
                                        x = 1 - j ^ r ^ i;
                                        if (0 <= (j | 0)) break;
                                        r = 1000003 * x & -1;
                                        j += 1;
                                        m = u;
                                        i = HEAPU8[u]
                                    }
                                    HEAP32[n >> 2] = x;
                                    HEAP32[t + 16 >> 2] = 1073741823;
                                    HEAP32[31082] = t;
                                    i = _jtga(g, 33554432, 2, 1, 0);
                                    if (0 == (i | 0)) HEAP32[31084] = 0;
                                    else {
                                        m = i;
                                        j = HEAP32[i >> 2];
                                        r = m + j;
                                        q = j + (m + 14);
                                        tempBigInt =
                                            11886;
                                        HEAP8[q] = tempBigInt;
                                        tempBigInt >>= 8;
                                        HEAP8[q + 1 | 0] = tempBigInt;
                                        HEAP8[j + (m + 16)] = 0;
                                        HEAP8[j + (m + 12)] = 2;
                                        HEAP32[j + (m + 4) >> 2] = 0;
                                        HEAP32[j + (m + 8) >> 2] = 0;
                                        HEAP8[j + (m + 13)] = 4;
                                        j = m = 0;
                                        q = 117904;
                                        for (h = 110;;) {
                                            u = q + 1;
                                            y = 2 - j ^ m ^ h;
                                            v = j + 1;
                                            if (2 <= (v | 0)) break;
                                            m = 1000003 * y & -1;
                                            j = v;
                                            q = u;
                                            h = HEAPU8[u]
                                        }
                                        HEAP32[r >> 2] = y;
                                        HEAP32[i + 16 >> 2] = 1073741823;
                                        HEAP32[31084] = i;
                                        h = _jtga(g, 33554432, 1, 1, 0);
                                        if (0 == (h | 0)) HEAP32[30730] = 0;
                                        else {
                                            q = h;
                                            j = HEAP32[h >> 2];
                                            m = q + j;
                                            HEAP8[j + (q + 14)] = 117;
                                            HEAP8[j + (q + 15)] = 0;
                                            HEAP8[j + (q + 12)] = 1;
                                            HEAP32[j + (q + 4) >> 2] = 0;
                                            HEAP32[j + (q + 8) >> 2] =
                                                0;
                                            HEAP8[j + (q + 13)] = 4;
                                            j = q = 0;
                                            t = 117696;
                                            for (n = 117;;) {
                                                u = t + 1;
                                                z = 1 - j ^ q ^ n;
                                                if (0 <= (j | 0)) break;
                                                q = 1000003 * z & -1;
                                                j += 1;
                                                t = u;
                                                n = HEAPU8[u]
                                            }
                                            HEAP32[m >> 2] = z;
                                            HEAP32[h + 16 >> 2] = 1073741823;
                                            HEAP32[30730] = h;
                                            n = _jtga(g, 33554432, 2, 1, 0);
                                            if (0 == (n | 0)) HEAP32[30732] = 0;
                                            else {
                                                t = n;
                                                j = HEAP32[n >> 2];
                                                q = t + j;
                                                i = j + (t + 14);
                                                tempBigInt = 11893;
                                                HEAP8[i] = tempBigInt;
                                                tempBigInt >>= 8;
                                                HEAP8[i + 1 | 0] = tempBigInt;
                                                HEAP8[j + (t + 16)] = 0;
                                                HEAP8[j + (t + 12)] = 2;
                                                HEAP32[j + (t + 4) >> 2] = 0;
                                                HEAP32[j + (t + 8) >> 2] = 0;
                                                HEAP8[j + (t + 13)] = 4;
                                                j = t = 0;
                                                i = 117608;
                                                for (r = 117;;) {
                                                    u = i + 1;
                                                    A = 2 - j ^ t ^ r;
                                                    v = j + 1;
                                                    if (2 <= (v |
                                                            0)) break;
                                                    t = 1000003 * A & -1;
                                                    j = v;
                                                    i = u;
                                                    r = HEAPU8[u]
                                                }
                                                HEAP32[q >> 2] = A;
                                                HEAP32[n + 16 >> 2] = 1073741823;
                                                HEAP32[30732] = n;
                                                r = _jtga(g, 33554432, 1, 1, 0);
                                                if (0 == (r | 0)) HEAP32[30726] = 0;
                                                else {
                                                    i = r;
                                                    j = HEAP32[r >> 2];
                                                    t = i + j;
                                                    HEAP8[j + (i + 14)] = 118;
                                                    HEAP8[j + (i + 15)] = 0;
                                                    HEAP8[j + (i + 12)] = 1;
                                                    HEAP32[j + (i + 4) >> 2] = 0;
                                                    HEAP32[j + (i + 8) >> 2] = 0;
                                                    HEAP8[j + (i + 13)] = 4;
                                                    j = i = 0;
                                                    h = 117488;
                                                    for (m = 118;;) {
                                                        u = h + 1;
                                                        D = 1 - j ^ i ^ m;
                                                        if (0 <= (j | 0)) break;
                                                        i = 1000003 * D & -1;
                                                        j += 1;
                                                        h = u;
                                                        m = HEAPU8[u]
                                                    }
                                                    HEAP32[t >> 2] = D;
                                                    HEAP32[r + 16 >> 2] = 1073741823;
                                                    HEAP32[30726] = r;
                                                    m = _jtga(g, 33554432, 2, 1, 0);
                                                    if (0 == (m | 0)) HEAP32[30728] =
                                                        0;
                                                    else {
                                                        h = m;
                                                        j = HEAP32[m >> 2];
                                                        i = h + j;
                                                        n = j + (h + 14);
                                                        tempBigInt = 11894;
                                                        HEAP8[n] = tempBigInt;
                                                        tempBigInt >>= 8;
                                                        HEAP8[n + 1 | 0] = tempBigInt;
                                                        HEAP8[j + (h + 16)] = 0;
                                                        HEAP8[j + (h + 12)] = 2;
                                                        HEAP32[j + (h + 4) >> 2] = 0;
                                                        HEAP32[j + (h + 8) >> 2] = 0;
                                                        HEAP8[j + (h + 13)] = 4;
                                                        j = h = 0;
                                                        n = 122400;
                                                        for (q = 118;;) {
                                                            u = n + 1;
                                                            B = 2 - j ^ h ^ q;
                                                            v = j + 1;
                                                            if (2 <= (v | 0)) break;
                                                            h = 1000003 * B & -1;
                                                            j = v;
                                                            n = u;
                                                            q = HEAPU8[u]
                                                        }
                                                        HEAP32[i >> 2] = B;
                                                        HEAP32[m + 16 >> 2] = 1073741823;
                                                        HEAP32[30728] = m;
                                                        q = _jtga(g, 33554432, 1, 1, 0);
                                                        if (0 == (q | 0)) HEAP32[30658] = 0;
                                                        else {
                                                            n = q;
                                                            j = HEAP32[q >> 2];
                                                            h = n + j;
                                                            HEAP8[j + (n + 14)] = 120;
                                                            HEAP8[j + (n + 15)] = 0;
                                                            HEAP8[j +
                                                                (n + 12)] = 1;
                                                            HEAP32[j + (n + 4) >> 2] = 0;
                                                            HEAP32[j + (n + 8) >> 2] = 0;
                                                            HEAP8[j + (n + 13)] = 4;
                                                            j = n = 0;
                                                            r = 118376;
                                                            for (t = 120;;) {
                                                                u = r + 1;
                                                                G = 1 - j ^ n ^ t;
                                                                if (0 <= (j | 0)) break;
                                                                n = 1000003 * G & -1;
                                                                j += 1;
                                                                r = u;
                                                                t = HEAPU8[u]
                                                            }
                                                            HEAP32[h >> 2] = G;
                                                            HEAP32[q + 16 >> 2] = 1073741823;
                                                            HEAP32[30658] = q;
                                                            t = _jtga(g, 33554432, 2, 1, 0);
                                                            if (0 == (t | 0)) HEAP32[30660] = 0;
                                                            else {
                                                                r = t;
                                                                j = HEAP32[t >> 2];
                                                                n = r + j;
                                                                m = j + (r + 14);
                                                                tempBigInt = 11896;
                                                                HEAP8[m] = tempBigInt;
                                                                tempBigInt >>= 8;
                                                                HEAP8[m + 1 | 0] = tempBigInt;
                                                                HEAP8[j + (r + 16)] = 0;
                                                                HEAP8[j + (r + 12)] = 2;
                                                                HEAP32[j + (r + 4) >> 2] = 0;
                                                                HEAP32[j + (r + 8) >> 2] = 0;
                                                                HEAP8[j + (r + 13)] = 4;
                                                                j = r = 0;
                                                                m =
                                                                    121928;
                                                                for (i = 120;;) {
                                                                    u = m + 1;
                                                                    C = 2 - j ^ r ^ i;
                                                                    v = j + 1;
                                                                    if (2 <= (v | 0)) break;
                                                                    r = 1000003 * C & -1;
                                                                    j = v;
                                                                    m = u;
                                                                    i = HEAPU8[u]
                                                                }
                                                                HEAP32[n >> 2] = C;
                                                                HEAP32[t + 16 >> 2] = 1073741823;
                                                                HEAP32[30660] = t;
                                                                i = _jtga(g, 33554432, 1, 1, 0);
                                                                if (0 == (i | 0)) HEAP32[30650] = 0;
                                                                else {
                                                                    m = i;
                                                                    j = HEAP32[i >> 2];
                                                                    r = m + j;
                                                                    HEAP8[j + (m + 14)] = 121;
                                                                    HEAP8[j + (m + 15)] = 0;
                                                                    HEAP8[j + (m + 12)] = 1;
                                                                    HEAP32[j + (m + 4) >> 2] = 0;
                                                                    HEAP32[j + (m + 8) >> 2] = 0;
                                                                    HEAP8[j + (m + 13)] = 4;
                                                                    j = m = 0;
                                                                    q = 121496;
                                                                    for (h = 121;;) {
                                                                        u = q + 1;
                                                                        F = 1 - j ^ m ^ h;
                                                                        if (0 <= (j | 0)) break;
                                                                        m = 1000003 * F & -1;
                                                                        j += 1;
                                                                        q = u;
                                                                        h = HEAPU8[u]
                                                                    }
                                                                    HEAP32[r >> 2] = F;
                                                                    HEAP32[i + 16 >> 2] = 1073741823;
                                                                    HEAP32[30650] =
                                                                        i;
                                                                    h = _jtga(g, 33554432, 2, 1, 0);
                                                                    if (0 == (h | 0)) HEAP32[30652] = 0;
                                                                    else {
                                                                        q = h;
                                                                        j = HEAP32[h >> 2];
                                                                        m = q + j;
                                                                        t = j + (q + 14);
                                                                        tempBigInt = 11897;
                                                                        HEAP8[t] = tempBigInt;
                                                                        tempBigInt >>= 8;
                                                                        HEAP8[t + 1 | 0] = tempBigInt;
                                                                        HEAP8[j + (q + 16)] = 0;
                                                                        HEAP8[j + (q + 12)] = 2;
                                                                        HEAP32[j + (q + 4) >> 2] = 0;
                                                                        HEAP32[j + (q + 8) >> 2] = 0;
                                                                        HEAP8[j + (q + 13)] = 4;
                                                                        j = q = 0;
                                                                        t = 121528;
                                                                        for (n = 121;;) {
                                                                            u = t + 1;
                                                                            E = 2 - j ^ q ^ n;
                                                                            v = j + 1;
                                                                            if (2 <= (v | 0)) break;
                                                                            q = 1000003 * E & -1;
                                                                            j = v;
                                                                            t = u;
                                                                            n = HEAPU8[u]
                                                                        }
                                                                        HEAP32[m >> 2] = E;
                                                                        HEAP32[h + 16 >> 2] = 1073741823;
                                                                        HEAP32[30652] = h;
                                                                        n = HEAP32[30654];
                                                                        HEAP32[30642] = n;
                                                                        HEAP32[30643] = HEAP32[30656];
                                                                        HEAP32[30644] =
                                                                            0;
                                                                        HEAP32[30646] = n;
                                                                        n = 124520;
                                                                        HEAP32[n >> 2] = 0;
                                                                        HEAP32[n + 4 >> 2] = 0;
                                                                        HEAP8[124527] = -128;
                                                                        HEAPF64[14094] = 1E6;
                                                                        _jtpinit(g);
                                                                        t = n = _malloc(205768);
                                                                        if (0 == (n | 0)) {
                                                                            h = 0;
                                                                            break a
                                                                        }
                                                                        _memset(n, 0, 205768) | 0;
                                                                        HEAP8[n + 205592] = 1;
                                                                        _gettimeofday(b, 0);
                                                                        HEAPF64[n + 205720 >> 3] = (HEAP32[b >> 2] | 0) + (HEAP32[b + 4 >> 2] | 0) / 1E6;
                                                                        j = 0;
                                                                        for (q = 1;;)
                                                                            if (HEAP32[124360 + (j << 2) >> 2] = q, i = j + 1, 31 > (i | 0)) j = i, q <<= 1;
                                                                            else break;
                                                                        HEAP32[n + 205692 >> 2] = -2E3;
                                                                        HEAP32[n + 205752 >> 2] = 2E3;
                                                                        HEAP32[n + 204964 >> 2] = HEAP32[31120];
                                                                        for (q = 0;;)
                                                                            if (HEAP32[t + 204588 + (q << 2) >> 2] = 0, HEAP32[t + 204712 + (q << 2) >>
                                                                                    2] = 0, HEAP32[t + 204836 + (q << 2) >> 2] = 1048576, j = q + 1, 31 > (j | 0)) q = j;
                                                                            else break;
                                                                        HEAP32[n >> 2] = 156616;
                                                                        q = _jtga(t, 32, 34, 1, 0);
                                                                        do
                                                                            if (0 != (q | 0)) {
                                                                                j = q;
                                                                                h = HEAP32[q >> 2];
                                                                                m = j + h;
                                                                                i = HEAP32[q + 20 >> 2];
                                                                                if (0 < (i | 0))
                                                                                    for (r = 0;;)
                                                                                        if (HEAP32[m + (r << 2) >> 2] = HEAP32[31086], u = r + 1, (u | 0) < (i | 0)) r = u;
                                                                                        else break;
                                                                                r = _jtga(t, 2, 16, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 120760, 16) | 0, b = r);
                                                                                HEAP32[h + (j + 128) >> 2] = b;
                                                                                r = _jtga(t, 2, 17, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 120592, 17) | 0, b = r);
                                                                                HEAP32[h + (j + 48) >> 2] = b;
                                                                                r = _jtga(t, 2, 19, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >>
                                                                                    2], 120456, 19) | 0, b = r);
                                                                                HEAP32[h + (j + 4) >> 2] = b;
                                                                                r = _jtga(t, 2, 5, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (i = r + HEAP32[r >> 2], HEAP8[i] = HEAP8[120360], HEAP8[i + 1 | 0] = HEAP8[120361], HEAP8[i + 2 | 0] = HEAP8[120362], HEAP8[i + 3 | 0] = HEAP8[120363], HEAP8[i + 4 | 0] = HEAP8[120364], b = r);
                                                                                HEAP32[h + (j + 8) >> 2] = b;
                                                                                r = _jtga(t, 2, 13, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 120144, 13) | 0, b = r);
                                                                                HEAP32[h + (j + 92) >> 2] = b;
                                                                                r = _jtga(t, 2, 12, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 120008, 12) | 0, b = r);
                                                                                HEAP32[h + (j + 12) >> 2] = b;
                                                                                r = _jtga(t, 2, 17, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119856,
                                                                                    17) | 0, b = r);
                                                                                HEAP32[h + (j + 96) >> 2] = b;
                                                                                r = _jtga(t, 2, 15, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119704, 15) | 0, b = r);
                                                                                HEAP32[h + (j + 100) >> 2] = b;
                                                                                r = _jtga(t, 2, 17, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119592, 17) | 0, b = r);
                                                                                HEAP32[h + (j + 104) >> 2] = b;
                                                                                r = _jtga(t, 2, 15, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119488, 15) | 0, b = r);
                                                                                HEAP32[h + (j + 16) >> 2] = b;
                                                                                r = _jtga(t, 2, 17, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119392, 17) | 0, b = r);
                                                                                HEAP32[h + (j + 20) >> 2] = b;
                                                                                r = _jtga(t, 2, 11, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119312, 11) | 0, b = r);
                                                                                HEAP32[h +
                                                                                    (j + 24) >> 2] = b;
                                                                                r = _jtga(t, 2, 15, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119256, 15) | 0, b = r);
                                                                                HEAP32[h + (j + 32) >> 2] = b;
                                                                                r = _jtga(t, 2, 15, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119184, 15) | 0, b = r);
                                                                                HEAP32[h + (j + 28) >> 2] = b;
                                                                                r = _jtga(t, 2, 12, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 119072, 12) | 0, b = r);
                                                                                HEAP32[h + (j + 36) >> 2] = b;
                                                                                r = _jtga(t, 2, 11, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118992, 11) | 0, b = r);
                                                                                HEAP32[h + (j + 40) >> 2] = b;
                                                                                r = _jtga(t, 2, 12, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118936, 12) | 0, b = r);
                                                                                HEAP32[h + (j + 120) >> 2] = b;
                                                                                r =
                                                                                    _jtga(t, 2, 9, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118904, 9) | 0, b = r);
                                                                                HEAP32[h + (j + 132) >> 2] = b;
                                                                                r = _jtga(t, 2, 11, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118872, 11) | 0, b = r);
                                                                                HEAP32[h + (j + 44) >> 2] = b;
                                                                                r = _jtga(t, 2, 26, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118816, 26) | 0, b = r);
                                                                                HEAP32[h + (j + 116) >> 2] = b;
                                                                                r = _jtga(t, 2, 10, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118752, 10) | 0, b = r);
                                                                                HEAP32[h + (j + 52) >> 2] = b;
                                                                                r = _jtga(t, 2, 13, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118680, 13) | 0, b = r);
                                                                                HEAP32[h + (j + 88) >> 2] = b;
                                                                                r = _jtga(t, 2, 10, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118624, 10) | 0, b = r);
                                                                                HEAP32[h + (j + 56) >> 2] = b;
                                                                                r = _jtga(t, 2, 14, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118592, 14) | 0, b = r);
                                                                                HEAP32[h + (j + 124) >> 2] = b;
                                                                                r = _jtga(t, 2, 18, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118488, 18) | 0, b = r);
                                                                                HEAP32[h + (j + 112) >> 2] = b;
                                                                                r = _jtga(t, 2, 14, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118440, 14) | 0, b = r);
                                                                                HEAP32[h + (j + 64) >> 2] = b;
                                                                                r = _jtga(t, 2, 11, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118424, 11) | 0, b = r);
                                                                                HEAP32[h + (j + 68) >> 2] = b;
                                                                                r = _jtga(t, 2, 4, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (i =
                                                                                    r + HEAP32[r >> 2], tempBigInt = 1886352499, HEAP8[i] = tempBigInt, tempBigInt >>= 8, HEAP8[i + 1 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[i + 2 | 0] = tempBigInt, tempBigInt >>= 8, HEAP8[i + 3 | 0] = tempBigInt, b = r);
                                                                                HEAP32[h + (j + 72) >> 2] = b;
                                                                                r = _jtga(t, 2, 12, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118384, 12) | 0, b = r);
                                                                                HEAP32[h + (j + 76) >> 2] = b;
                                                                                r = _jtga(t, 2, 12, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118328, 12) | 0, b = r);
                                                                                HEAP32[h + (j + 80) >> 2] = b;
                                                                                r = _jtga(t, 2, 10, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118312, 10) | 0, b = r);
                                                                                HEAP32[h + (j + 108) >> 2] = b;
                                                                                r = _jtga(t,
                                                                                    2, 11, 1, 0);
                                                                                0 == (r | 0) ? b = 0 : (_memcpy(r + HEAP32[r >> 2], 118264, 11) | 0, b = r);
                                                                                HEAP32[h + (j + 84) >> 2] = b;
                                                                                _jttraverse(t, q, 654);
                                                                                r = q + 16;
                                                                                HEAP32[r >> 2] += 1;
                                                                                HEAP32[n + 4408 >> 2] = q;
                                                                                r = HEAP8[n + 204545];
                                                                                0 != r << 24 >> 24 && (_printf(118224, (a = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[a >> 2] = r << 24 >> 24, a)), STACKTOP = a)
                                                                            }
                                                                        while (0);
                                                                        HEAP8[n + 9] = 1;
                                                                        q = _jtga(t, 2, 11, 1, 0);
                                                                        if (0 == (q | 0)) HEAP32[n + 1052 >> 2] = 0;
                                                                        else {
                                                                            i = r = q;
                                                                            _memcpy(r + HEAP32[i >> 2], 121296, 11) | 0;
                                                                            HEAP32[n + 1052 >> 2] = q;
                                                                            HEAP32[n + 1048 >> 2] = r + HEAP32[i >> 2];
                                                                            i = 1;
                                                                            for (r = 0;;)
                                                                                if (J = 0.5 * i, q = r + 1, 44 > (q | 0)) i = J, r = q;
                                                                                else break;
                                                                            HEAPF64[n + 204496 >> 3] = J;
                                                                            HEAPF64[n + 1152 >> 3] = J;
                                                                            HEAP32[n + 2356 >> 2] = 1;
                                                                            HEAP32[n + 2360 >> 2] = 5;
                                                                            HEAP32[n + 4416 >> 2] = 1E4;
                                                                            HEAP32[n + 204444 >> 2] = 2E4;
                                                                            HEAP32[n + 205276 >> 2] = 222;
                                                                            HEAP32[n + 205284 >> 2] = 256;
                                                                            r = n + 205288;
                                                                            tempBigInt = 10;
                                                                            HEAP8[r] = tempBigInt;
                                                                            tempBigInt >>= 8;
                                                                            HEAP8[r + 1 | 0] = tempBigInt;
                                                                            r = n + 205324;
                                                                            HEAP8[r] = HEAP8[120896];
                                                                            HEAP8[r + 1 | 0] = HEAP8[120897];
                                                                            HEAP8[r + 2 | 0] = HEAP8[120898];
                                                                            HEAP8[r + 3 | 0] = HEAP8[120899];
                                                                            HEAP8[r + 4 | 0] = HEAP8[120900];
                                                                            HEAP8[r + 5 | 0] = HEAP8[120901];
                                                                            HEAP8[n + 205356] = 1;
                                                                            HEAP8[n + 205709] = 1;
                                                                            HEAP32[n + 205712 >> 2] = 1;
                                                                            HEAP32[n + 205764 >>
                                                                                2] = 2
                                                                        }
                                                                        HEAP32[n + 204568 >> 2] = 3;
                                                                        HEAP32[n + 204572 >> 2] = 2;
                                                                        do
                                                                            if (0 != _jtsymext(t, 0) << 24 >> 24 && (r = _jtga(t, 8388608, 499, 1, 0), 0 != (r | 0) && (HEAP32[n + 205652 >> 2] = r, r = _jtga(t, 4, 40, 1, 0), 0 != (r | 0)))) {
                                                                                i = r + HEAP32[r >> 2];
                                                                                for (q = 0;;)
                                                                                    if (HEAP32[i >> 2] = -1, m = q + 1, 40 > (m | 0)) i += 4, q = m;
                                                                                    else break;
                                                                                HEAP32[n + 205660 >> 2] = r;
                                                                                q = _jtga(t, 4, 40, 1, 0);
                                                                                0 != (q | 0) && (HEAP32[n + 205664 >> 2] = q, _memset(q + HEAP32[q >> 2], 0, 160) | 0, q = _jtstcreate(t, 0, 5, 4, 121248), HEAP32[n + 204520 >> 2] = q, 0 != (q | 0) && _jtstcreate(t, 0, 7, 1, 119696))
                                                                            }
                                                                        while (0);
                                                                        q = _jtga(t, 4, 20, 1, 0);
                                                                        0 != (q | 0) && (_jttraverse(t,
                                                                            q, 654), i = q + 16, HEAP32[i >> 2] += 1, HEAP32[n + 205244 >> 2] = q, HEAP32[n + 205248 >> 2] = q + HEAP32[q >> 2], i = _jtga(t, 1, 20, 1, 0), 0 != (i | 0) && (_jttraverse(t, i, 654), j = i + 16, HEAP32[j >> 2] += 1, HEAP32[n + 205252 >> 2] = i, HEAP32[n + 205256 >> 2] = i + HEAP32[i >> 2]));
                                                                        q = _jtga(t, 32, 8, 1, 0);
                                                                        0 != (q | 0) && (_memset(q + HEAP32[q >> 2], 0, HEAP32[q + 20 >> 2] << 2) | 0, _jttraverse(t, q, 654), i = q + 16, HEAP32[i >> 2] += 1, HEAP32[n + 204480 >> 2] = q, i = _jtga(t, 4, 8, 1, 0), 0 != (i | 0) && (_jttraverse(t, i, 654), j = i + 16, HEAP32[j >> 2] += 1, HEAP32[n + 204484 >> 2] = i));
                                                                        q = _jtga(t, 32, 10, 1, 0);
                                                                        0 != (q | 0) && (_memset(q +
                                                                            HEAP32[q >> 2], 0, HEAP32[q + 20 >> 2] << 2) | 0, _jttraverse(t, q, 654), i = q + 16, HEAP32[i >> 2] += 1, HEAP32[n + 205604 >> 2] = q, HEAP32[n + 205608 >> 2] = -1);
                                                                        q = c;
                                                                        HEAP32[q >> 2] = 2E3;
                                                                        HEAP32[c + 4 >> 2] = 11;
                                                                        i = _jtga(t, 2, 2E4, 1, 0);
                                                                        do
                                                                            if (0 != (i | 0) && (HEAP32[n + 205548 >> 2] = i, HEAP32[n + 205556 >> 2] = i + HEAP32[i >> 2], HEAP32[n + 205552 >> 2] = 0, j = _jtga(t, 4, 2029, 1, 0), 0 != (j | 0))) {
                                                                                m = h = j;
                                                                                u = h + HEAP32[m >> 2];
                                                                                for (v = 0;;)
                                                                                    if (HEAP32[u >> 2] = -1, c = v + 1, 2029 > (c | 0)) u += 4, v = c;
                                                                                    else break;
                                                                                HEAP32[n + 205536 >> 2] = j;
                                                                                v = n + 205540;
                                                                                HEAP32[v >> 2] = h + HEAP32[m >> 2];
                                                                                u = _jtga(t, 4, 11 * HEAP32[q >> 2] & -1, 2, q);
                                                                                0 != (u | 0) && (HEAP32[n + 205560 >> 2] = u, r = u + HEAP32[u >> 2], HEAP32[n + 205568 >> 2] = r, HEAP32[n + 205532 >> 2] = 15, HEAP32[n + 205528 >> 2] = 1024, HEAP32[n + 205544 >> 2] = 0, _memcpy(r, 11560, 44) | 0, HEAP32[n + 205564 >> 2] = 1, HEAP32[HEAP32[v >> 2] >> 2] = 0)
                                                                            }
                                                                        while (0);
                                                                        _memset(n + 205480, 0, 40) | 0;
                                                                        HEAP32[n + 205364 >> 2] = 2566;
                                                                        HEAP32[n + 205456 >> 2] = 16807;
                                                                        HEAP32[n + 205368 >> 2] = 3138;
                                                                        HEAP32[n + 205460 >> 2] = 16807;
                                                                        HEAP32[n + 205372 >> 2] = 1680;
                                                                        HEAP32[n + 205464 >> 2] = 16807;
                                                                        HEAP32[n + 205376 >> 2] = 82;
                                                                        HEAP32[n + 205468 >> 2] = 16807;
                                                                        HEAP32[n + 205380 >> 2] = 2946;
                                                                        HEAP32[n + 205472 >> 2] = 16807;
                                                                        HEAP32[n +
                                                                            205436 >> 2] = 0;
                                                                        HEAP32[n + 205440 >> 2] = -2147483648;
                                                                        HEAP32[n + 205444 >> 2] = 0;
                                                                        HEAP32[n + 205448 >> 2] = -2147483648;
                                                                        HEAP32[n + 205452 >> 2] = -209;
                                                                        HEAP32[n + 205416 >> 2] = 54;
                                                                        _jtrngselects(t, HEAP32[31071]);
                                                                        q = n + 2392;
                                                                        0 == (HEAP32[q >> 2] | 0) && (i = _jtga(t, 2, 8248, 1, 0), 0 != (i | 0) && (v = i, r = HEAP32[i >> 2], HEAP32[r + (v + 156) >> 2] = 0, u = r + (v + 168), HEAP32[r + (v + 160) >> 2] = u, _memset(u, 0, 8E3) | 0, _memset(r + (v + 8168), 0, 64) | 0, HEAP32[r + (v + 8232) >> 2] = n, _jttraverse(t, i, 654), u = i + 16, HEAP32[u >> 2] += 1, HEAP32[q >> 2] = v + r));
                                                                        if (0 == (HEAP8[n + 204545] | 0)) {
                                                                            h = t;
                                                                            break a
                                                                        }
                                                                        _free(n);
                                                                        h =
                                                                            0;
                                                                        break a
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                }
            while (0);
            _free(e)
        }
        h = 0
    } while (0);
    HEAP32[31136] = h;
    HEAP32[h + 205628 >> 2] = 2130;
    HEAP32[h + 205620 >> 2] = 0;
    HEAP32[h + 205624 >> 2] = 2180;
    HEAP32[h + 205616 >> 2] = 3;
    e = 0;
    for (c = h;;) {
        _jdo(c, 12640 + (1E3 * e & -1));
        h = e + 1;
        if (42 <= (h | 0)) break;
        e = h;
        c = HEAP32[31136]
    }
    STACKTOP = d;
    return 0
}
function _malloc(a) {
    var f, d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X;
    f = 0;
    do
        if (245 > a >>> 0) {
            d = 11 > a >>> 0 ? 16 : a + 11 & -8;
            c = d >>> 3;
            b = HEAP32[40256];
            e = b >>> (c >>> 0);
            if (0 != (e & 3 | 0)) return g = (e & 1 ^ 1) + c, h = g << 1, j = 161064 + (h << 2), i = 161064 + (h + 2 << 2), h = HEAP32[i >> 2], l = h + 8, k = HEAP32[l >> 2], (j | 0) == (k | 0) ? HEAP32[40256] = b & ~(1 << g) : (k >>> 0 < HEAP32[40260] >>> 0 && _abort(), m = k + 12, (HEAP32[m >> 2] | 0) == (h | 0) ? (HEAP32[m >> 2] = j, HEAP32[i >> 2] = k) : _abort()), k = g << 3, HEAP32[h + 4 >>
                2] = k | 3, i = h + (k | 4), HEAP32[i >> 2] |= 1, n = l;
            if (d >>> 0 <= HEAP32[40258] >>> 0) g = d;
            else {
                if (0 != (e | 0)) return i = 2 << c, k = e << c & (i | -i), i = (k & -k) - 1, k = i >>> 12 & 16, j = i >>> (k >>> 0), i = j >>> 5 & 8, m = j >>> (i >>> 0), j = m >>> 2 & 4, p = m >>> (j >>> 0), m = p >>> 1 & 2, q = p >>> (m >>> 0), p = q >>> 1 & 1, r = (i | k | j | m | p) + (q >>> (p >>> 0)), p = r << 1, q = 161064 + (p << 2), m = 161064 + (p + 2 << 2), p = HEAP32[m >> 2], j = p + 8, k = HEAP32[j >> 2], (q | 0) == (k | 0) ? HEAP32[40256] = b & ~(1 << r) : (k >>> 0 < HEAP32[40260] >>> 0 && _abort(), i = k + 12, (HEAP32[i >> 2] | 0) == (p | 0) ? (HEAP32[i >> 2] = q, HEAP32[m >> 2] = k) : _abort()), k = r << 3, m = k - d, HEAP32[p +
                    4 >> 2] = d | 3, q = p, b = q + d, HEAP32[q + (d | 4) >> 2] = m | 1, HEAP32[q + k >> 2] = m, k = HEAP32[40258], 0 != (k | 0) && (q = HEAP32[40261], c = k >>> 3, k = c << 1, e = 161064 + (k << 2), l = HEAP32[40256], h = 1 << c, 0 == (l & h | 0) ? (HEAP32[40256] = l | h, s = e, t = 161064 + (k + 2 << 2)) : (c = 161064 + (k + 2 << 2), g = HEAP32[c >> 2], g >>> 0 >= HEAP32[40260] >>> 0 ? (s = g, t = c) : _abort()), HEAP32[t >> 2] = q, HEAP32[s + 12 >> 2] = q, HEAP32[q + 8 >> 2] = s, HEAP32[q + 12 >> 2] = e), HEAP32[40258] = m, HEAP32[40261] = b, n = j;
                k = HEAP32[40257];
                if (0 == (k | 0)) g = d;
                else {
                    h = (k & -k) - 1;
                    k = h >>> 12 & 16;
                    l = h >>> (k >>> 0);
                    h = l >>> 5 & 8;
                    p = l >>> (h >>> 0);
                    l = p >>> 2 & 4;
                    r = p >>> (l >>> 0);
                    p = r >>> 1 & 2;
                    c = r >>> (p >>> 0);
                    r = c >>> 1 & 1;
                    c = r = g = HEAP32[161328 + ((h | k | l | p | r) + (c >>> (r >>> 0)) << 2) >> 2];
                    for (p = (HEAP32[g + 4 >> 2] & -8) - d;;) {
                        g = HEAP32[r + 16 >> 2];
                        if (0 == (g | 0))
                            if (l = HEAP32[r + 20 >> 2], 0 == (l | 0)) break;
                            else n = l;
                        else n = g;
                        g = (HEAP32[n + 4 >> 2] & -8) - d;
                        l = g >>> 0 < p >>> 0;
                        r = n;
                        c = l ? n : c;
                        p = l ? g : p
                    }
                    r = c;
                    j = HEAP32[40260];
                    r >>> 0 < j >>> 0 && _abort();
                    m = b = r + d;
                    r >>> 0 >= b >>> 0 && _abort();
                    b = HEAP32[c + 24 >> 2];
                    e = HEAP32[c + 12 >> 2];
                    do
                        if ((e | 0) == (c | 0)) {
                            q = c + 20;
                            g = HEAP32[q >> 2];
                            if (0 == (g | 0))
                                if (l = c + 16, k = HEAP32[l >> 2], 0 == (k | 0)) {
                                    u = 0;
                                    break
                                } else n = k, w = l;
                            else n =
                                g, w = q;
                            for (;;)
                                if (q = n + 20, g = HEAP32[q >> 2], 0 != (g | 0)) n = g, w = q;
                                else if (q = n + 16, g = HEAP32[q >> 2], 0 == (g | 0)) break;
                            else n = g, w = q;
                            w >>> 0 < j >>> 0 ? _abort() : (HEAP32[w >> 2] = 0, u = n)
                        } else q = HEAP32[c + 8 >> 2], q >>> 0 < j >>> 0 && _abort(), g = q + 12, (HEAP32[g >> 2] | 0) != (c | 0) && _abort(), l = e + 8, (HEAP32[l >> 2] | 0) == (c | 0) ? (HEAP32[g >> 2] = e, HEAP32[l >> 2] = q, u = e) : _abort();
                    while (0);
                    a: do
                        if (0 != (b | 0)) {
                            e = HEAP32[c + 28 >> 2];
                            j = 161328 + (e << 2);
                            do
                                if ((c | 0) == (HEAP32[j >> 2] | 0)) {
                                    if (HEAP32[j >> 2] = u, 0 == (u | 0)) {
                                        HEAP32[40257] &= ~(1 << e);
                                        break a
                                    }
                                } else if (b >>> 0 < HEAP32[40260] >>> 0 && _abort(),
                                q = b + 16, (HEAP32[q >> 2] | 0) == (c | 0) ? HEAP32[q >> 2] = u : HEAP32[b + 20 >> 2] = u, 0 == (u | 0)) break a; while (0);
                            u >>> 0 < HEAP32[40260] >>> 0 && _abort();
                            HEAP32[u + 24 >> 2] = b;
                            e = HEAP32[c + 16 >> 2];
                            0 != (e | 0) && (e >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[u + 16 >> 2] = e, HEAP32[e + 24 >> 2] = u));
                            e = HEAP32[c + 20 >> 2];
                            0 != (e | 0) && (e >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[u + 20 >> 2] = e, HEAP32[e + 24 >> 2] = u))
                        }
                    while (0);
                    16 > p >>> 0 ? (b = p + d, HEAP32[c + 4 >> 2] = b | 3, e = b + (r + 4), HEAP32[e >> 2] |= 1) : (HEAP32[c + 4 >> 2] = d | 3, HEAP32[r + (d | 4) >> 2] = p | 1, HEAP32[r + (p + d) >> 2] = p, e = HEAP32[40258], 0 != (e |
                        0) && (b = HEAP32[40261], j = e >>> 3, e = j << 1, q = 161064 + (e << 2), l = HEAP32[40256], g = 1 << j, 0 == (l & g | 0) ? (HEAP32[40256] = l | g, v = q, x = 161064 + (e + 2 << 2)) : (j = 161064 + (e + 2 << 2), k = HEAP32[j >> 2], k >>> 0 >= HEAP32[40260] >>> 0 ? (v = k, x = j) : _abort()), HEAP32[x >> 2] = b, HEAP32[v + 12 >> 2] = b, HEAP32[b + 8 >> 2] = v, HEAP32[b + 12 >> 2] = q), HEAP32[40258] = p, HEAP32[40261] = m);
                    return n = c + 8
                }
            }
        } else if (4294967231 < a >>> 0) g = -1;
    else if (e = a + 11, g = e & -8, l = HEAP32[40257], 0 != (l | 0)) {
        r = -g;
        j = e >>> 8;
        0 == (j | 0) ? d = 0 : 16777215 < g >>> 0 ? d = 31 : (e = j + 1048320 >>> 16 & 8, k = j << e, h = k + 520192 >>> 16 & 4, i = k << h, k =
            i + 245760 >>> 16 & 2, e = 14 - (h | e | k) + (i << k >>> 15), d = g >>> (e + 7 >>> 0) & 1 | e << 1);
        j = HEAP32[161328 + (d << 2) >> 2];
        a: do
            if (0 == (j | 0)) y = 0, z = r, A = 0;
            else {
                b = 31 == (d | 0) ? 0 : 25 - (d >>> 1);
                c = 0;
                m = r;
                p = j;
                q = g << b;
                for (b = 0;;) {
                    e = HEAP32[p + 4 >> 2] & -8;
                    k = e - g;
                    if (k >>> 0 < m >>> 0)
                        if ((e | 0) == (g | 0)) {
                            y = p;
                            z = k;
                            A = p;
                            break a
                        } else c = p, m = k;
                    k = HEAP32[p + 20 >> 2];
                    e = HEAP32[p + 16 + (q >>> 31 << 2) >> 2];
                    i = 0 == (k | 0) | (k | 0) == (e | 0) ? b : k;
                    if (0 == (e | 0)) {
                        y = c;
                        z = m;
                        A = i;
                        break
                    } else p = e, q <<= 1, b = i
                }
            }
        while (0);
        if (0 == (A | 0) & 0 == (y | 0)) {
            j = 2 << d;
            r = l & (j | -j);
            if (0 == (r | 0)) break;
            j = (r & -r) - 1;
            r = j >>> 12 & 16;
            b = j >>> (r >>> 0);
            j = b >>> 5 & 8;
            q = b >>> (j >>> 0);
            b = q >>> 2 & 4;
            p = q >>> (b >>> 0);
            q = p >>> 1 & 2;
            m = p >>> (q >>> 0);
            p = m >>> 1 & 1;
            b = HEAP32[161328 + ((j | r | b | q | p) + (m >>> (p >>> 0)) << 2) >> 2]
        } else b = A;
        if (0 == (b | 0)) D = z, B = y;
        else {
            p = b;
            m = z;
            for (q = y;;)
                if (b = (HEAP32[p + 4 >> 2] & -8) - g, j = (r = b >>> 0 < m >>> 0) ? b : m, b = r ? p : q, r = HEAP32[p + 16 >> 2], 0 != (r | 0)) p = r, m = j, q = b;
                else if (r = HEAP32[p + 20 >> 2], 0 == (r | 0)) {
                D = j;
                B = b;
                break
            } else p = r, m = j, q = b
        }
        if (0 != (B | 0) && !(D >>> 0 >= HEAP32[40258] - g >>> 0)) {
            q = B;
            m = HEAP32[40260];
            q >>> 0 < m >>> 0 && _abort();
            l = p = q + g;
            q >>> 0 >= p >>> 0 && _abort();
            b = HEAP32[B + 24 >> 2];
            j = HEAP32[B + 12 >> 2];
            do
                if ((j | 0) == (B | 0)) {
                    r = B + 20;
                    c = HEAP32[r >> 2];
                    if (0 == (c | 0))
                        if (i = B + 16, e = HEAP32[i >> 2], 0 == (e | 0)) {
                            G = 0;
                            break
                        } else f = e, n = i;
                    else f = c, n = r;
                    for (;;)
                        if (r = f + 20, c = HEAP32[r >> 2], 0 != (c | 0)) f = c, n = r;
                        else if (r = f + 16, c = HEAP32[r >> 2], 0 == (c | 0)) break;
                    else f = c, n = r;
                    n >>> 0 < m >>> 0 ? _abort() : (HEAP32[n >> 2] = 0, G = f)
                } else r = HEAP32[B + 8 >> 2], r >>> 0 < m >>> 0 && _abort(), c = r + 12, (HEAP32[c >> 2] | 0) != (B | 0) && _abort(), i = j + 8, (HEAP32[i >> 2] | 0) == (B | 0) ? (HEAP32[c >> 2] = j, HEAP32[i >> 2] = r, G = j) : _abort();
            while (0);
            a: do
                if (0 != (b | 0)) {
                    j = HEAP32[B + 28 >> 2];
                    m = 161328 + (j << 2);
                    do
                        if ((B |
                                0) == (HEAP32[m >> 2] | 0)) {
                            if (HEAP32[m >> 2] = G, 0 == (G | 0)) {
                                HEAP32[40257] &= ~(1 << j);
                                break a
                            }
                        } else if (b >>> 0 < HEAP32[40260] >>> 0 && _abort(), r = b + 16, (HEAP32[r >> 2] | 0) == (B | 0) ? HEAP32[r >> 2] = G : HEAP32[b + 20 >> 2] = G, 0 == (G | 0)) break a; while (0);
                    G >>> 0 < HEAP32[40260] >>> 0 && _abort();
                    HEAP32[G + 24 >> 2] = b;
                    j = HEAP32[B + 16 >> 2];
                    0 != (j | 0) && (j >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[G + 16 >> 2] = j, HEAP32[j + 24 >> 2] = G));
                    j = HEAP32[B + 20 >> 2];
                    0 != (j | 0) && (j >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[G + 20 >> 2] = j, HEAP32[j + 24 >> 2] = G))
                }
            while (0);
            a: do
                if (16 > D >>> 0) b = D + g, HEAP32[B +
                    4 >> 2] = b | 3, j = b + (q + 4), HEAP32[j >> 2] |= 1;
                else
            if (HEAP32[B + 4 >> 2] = g | 3, HEAP32[q + (g | 4) >> 2] = D | 1, HEAP32[q + (D + g) >> 2] = D, j = D >>> 3, 256 > D >>> 0) b = j << 1, m = 161064 + (b << 2), r = HEAP32[40256], i = 1 << j, 0 == (r & i | 0) ? (HEAP32[40256] = r | i, C = m, F = 161064 + (b + 2 << 2)) : (j = 161064 + (b + 2 << 2), c = HEAP32[j >> 2], c >>> 0 >= HEAP32[40260] >>> 0 ? (C = c, F = j) : _abort()), HEAP32[F >> 2] = l, HEAP32[C + 12 >> 2] = l, HEAP32[g + (q + 8) >> 2] = C, HEAP32[g + (q + 12) >> 2] = m;
            else if (b = p, i = D >>> 8, 0 == (i | 0) ? j = 0 : 16777215 < D >>> 0 ? j = 31 : (r = i + 1048320 >>> 16 & 8, j = i << r, c = j + 520192 >>> 16 & 4, e = j << c, j = e + 245760 >>> 16 & 2,
                    k = 14 - (c | r | j) + (e << j >>> 15), j = D >>> (k + 7 >>> 0) & 1 | k << 1), i = 161328 + (j << 2), HEAP32[g + (q + 28) >> 2] = j, HEAP32[g + (q + 20) >> 2] = 0, HEAP32[g + (q + 16) >> 2] = 0, m = HEAP32[40257], k = 1 << j, 0 == (m & k | 0)) HEAP32[40257] = m | k, HEAP32[i >> 2] = b, HEAP32[g + (q + 24) >> 2] = i, HEAP32[g + (q + 12) >> 2] = b, HEAP32[g + (q + 8) >> 2] = b;
            else {
                k = HEAP32[i >> 2];
                r = 31 == (j | 0) ? 0 : 25 - (j >>> 1);
                b: do
                    if ((HEAP32[k + 4 >> 2] & -8 | 0) == (D | 0)) E = k;
                    else {
                        i = k;
                        for (m = D << r;;) {
                            J = i + 16 + (m >>> 31 << 2);
                            j = HEAP32[J >> 2];
                            if (0 == (j | 0)) break;
                            if ((HEAP32[j + 4 >> 2] & -8 | 0) == (D | 0)) {
                                E = j;
                                break b
                            } else i = j, m <<= 1
                        }
                        if (J >>> 0 < HEAP32[40260] >>>
                            0) _abort();
                        else {
                            HEAP32[J >> 2] = b;
                            HEAP32[g + (q + 24) >> 2] = i;
                            HEAP32[g + (q + 12) >> 2] = b;
                            HEAP32[g + (q + 8) >> 2] = b;
                            break a
                        }
                    }
                while (0);
                k = E + 8;
                m = HEAP32[k >> 2];
                j = HEAP32[40260];
                E >>> 0 < j >>> 0 && _abort();
                m >>> 0 < j >>> 0 ? _abort() : (HEAP32[m + 12 >> 2] = b, HEAP32[k >> 2] = b, HEAP32[g + (q + 8) >> 2] = m, HEAP32[g + (q + 12) >> 2] = E, HEAP32[g + (q + 24) >> 2] = 0)
            }
            while (0);
            return n = B + 8
        }
    }
    while (0);
    B = HEAP32[40258];
    if (g >>> 0 <= B >>> 0) return E = B - g, J = HEAP32[40261], 15 < E >>> 0 ? (D = J, HEAP32[40261] = D + g, HEAP32[40258] = E, HEAP32[g + (D + 4) >> 2] = E | 1, HEAP32[D + B >> 2] = E, HEAP32[J + 4 >> 2] = g | 3) : (HEAP32[40258] =
        0, HEAP32[40261] = 0, HEAP32[J + 4 >> 2] = B | 3, E = B + (J + 4), HEAP32[E >> 2] |= 1), J + 8;
    J = HEAP32[40259];
    if (g >>> 0 < J >>> 0) return E = J - g, HEAP32[40259] = E, B = J = HEAP32[40262], HEAP32[40262] = B + g, HEAP32[g + (B + 4) >> 2] = E | 1, HEAP32[J + 4 >> 2] = g | 3, J + 8;
    0 == (HEAP32[31122] | 0) && (J = _sysconf(30), 0 == (J - 1 & J | 0) ? (HEAP32[31124] = J, HEAP32[31123] = J, HEAP32[31125] = -1, HEAP32[31126] = -1, HEAP32[31127] = 0, HEAP32[40367] = 0, HEAP32[31122] = _time(0) & -16 ^ 1431655768) : _abort());
    J = g + 48;
    E = HEAP32[31124];
    B = g + 47;
    D = E + B;
    r = -E;
    E = D & r;
    if (E >>> 0 <= g >>> 0) return 0;
    j = HEAP32[40366];
    if (0 !=
        (j | 0) && (C = HEAP32[40364], F = C + E, F >>> 0 <= C >>> 0 | F >>> 0 > j >>> 0)) return 0;
    a: do {
        if (0 == (HEAP32[40367] & 4 | 0)) {
            j = HEAP32[40262];
            b: do
                if (0 == (j | 0)) f = 182;
                else {
                    F = j;
                    for (C = 161472;;) {
                        L = C;
                        G = HEAP32[L >> 2];
                        if (G >>> 0 <= F >>> 0 && (I = C + 4, G + HEAP32[I >> 2] >>> 0 > F >>> 0)) break;
                        G = HEAP32[C + 8 >> 2];
                        if (0 == (G | 0)) {
                            f = 182;
                            break b
                        } else C = G
                    }
                    0 == (C | 0) ? f = 182 : (F = D - HEAP32[40259] & r, 2147483647 <= F >>> 0 ? H = 0 : (b = _sbrk(F), K = (G = (b | 0) == (HEAP32[L >> 2] + HEAP32[I >> 2] | 0)) ? b : -1, N = G ? F : 0, S = b, T = F, f = 191))
                }
            while (0);
            182 == f && (j = _sbrk(0), -1 == (j | 0) ? H = 0 : (F = j, b = HEAP32[31123], G = b - 1,
                p = 0 == (G & F | 0) ? E : E - F + (G + F & -b), b = HEAP32[40364], F = b + p, p >>> 0 > g >>> 0 & 2147483647 > p >>> 0 ? (G = HEAP32[40366], 0 != (G | 0) && F >>> 0 <= b >>> 0 | F >>> 0 > G >>> 0 ? H = 0 : (G = _sbrk(p), K = (F = (G | 0) == (j | 0)) ? j : -1, N = F ? p : 0, S = G, T = p, f = 191)) : H = 0));
            b: do
                if (191 == f) {
                    G = -T;
                    if (-1 != (K | 0)) {
                        n = N;
                        w = K;
                        f = 202;
                        break a
                    }
                    do
                        if (-1 != (S | 0) & 2147483647 > T >>> 0 & T >>> 0 < J >>> 0)
                            if (F = HEAP32[31124], j = B - T + F & -F, 2147483647 <= j >>> 0) C = T;
                            else if (-1 == (_sbrk(j) | 0)) {
                        _sbrk(G);
                        H = N;
                        break b
                    } else C = j + T;
                    else C = T;
                    while (0);
                    if (-1 == (S | 0)) H = N;
                    else {
                        n = C;
                        w = S;
                        f = 202;
                        break a
                    }
                }
            while (0);
            HEAP32[40367] |= 4;
            V = H
        } else V = 0;
        f = 199
    } while (0);
    if (199 == f && !(2147483647 <= E >>> 0) && (H = _sbrk(E), S = _sbrk(0), -1 != (S | 0) & -1 != (H | 0) & H >>> 0 < S >>> 0 && (C = S - H, S = C >>> 0 > g + 40 >>> 0))) n = S ? C : V, w = H, f = 202;
    do
        if (202 == f) {
            V = HEAP32[40364] + n;
            HEAP32[40364] = V;
            V >>> 0 > HEAP32[40365] >>> 0 && (HEAP32[40365] = V);
            V = HEAP32[40262];
            a: do
                if (0 == (V | 0)) {
                    E = HEAP32[40260];
                    0 == (E | 0) | w >>> 0 < E >>> 0 && (HEAP32[40260] = w);
                    HEAP32[40368] = w;
                    HEAP32[40369] = n;
                    HEAP32[40371] = 0;
                    HEAP32[40265] = HEAP32[31122];
                    HEAP32[40264] = -1;
                    for (E = 0;;)
                        if (H = E << 1, C = 161064 + (H << 2), HEAP32[161064 + (H + 3 << 2) >> 2] = C, HEAP32[161064 +
                                (H + 2 << 2) >> 2] = C, C = E + 1, 32 > C >>> 0) E = C;
                        else break;
                    E = w + 8;
                    B = 0 == (E & 7 | 0) ? 0 : -E & 7;
                    E = n - 40 - B;
                    HEAP32[40262] = w + B;
                    HEAP32[40259] = E;
                    HEAP32[B + (w + 4) >> 2] = E | 1;
                    HEAP32[w + (n - 36) >> 2] = 40;
                    HEAP32[40263] = HEAP32[31126]
                } else {
                    for (E = 161472;;) {
                        Q = HEAP32[E >> 2];
                        P = E + 4;
                        M = HEAP32[P >> 2];
                        if ((w | 0) == (Q + M | 0)) {
                            f = 214;
                            break
                        }
                        C = HEAP32[E + 8 >> 2];
                        if (0 == (C | 0)) break;
                        else E = C
                    }
                    do
                        if (214 == f && 0 == (HEAP32[E + 12 >> 2] & 8 | 0) && (C = V, C >>> 0 >= Q >>> 0 & C >>> 0 < w >>> 0)) {
                            HEAP32[P >> 2] = M + n;
                            H = HEAP32[40259] + n;
                            S = V + 8;
                            B = 0 == (S & 7 | 0) ? 0 : -S & 7;
                            S = H - B;
                            HEAP32[40262] = C + B;
                            HEAP32[40259] = S;
                            HEAP32[B +
                                (C + 4) >> 2] = S | 1;
                            HEAP32[H + (C + 4) >> 2] = 40;
                            HEAP32[40263] = HEAP32[31126];
                            break a
                        }
                    while (0);
                    w >>> 0 < HEAP32[40260] >>> 0 && (HEAP32[40260] = w);
                    E = w + n;
                    for (C = 161472;;) {
                        R = C;
                        if ((HEAP32[R >> 2] | 0) == (E | 0)) {
                            f = 224;
                            break
                        }
                        H = HEAP32[C + 8 >> 2];
                        if (0 == (H | 0)) break;
                        else C = H
                    }
                    do
                        if (224 == f && 0 == (HEAP32[C + 12 >> 2] & 8 | 0)) {
                            HEAP32[R >> 2] = w;
                            E = C + 4;
                            HEAP32[E >> 2] += n;
                            E = w + 8;
                            Q = 0 == (E & 7 | 0) ? 0 : -E & 7;
                            E = n + (w + 8);
                            P = 0 == (E & 7 | 0) ? 0 : -E & 7;
                            H = E = w + (P + n);
                            S = Q + g;
                            T = N = w + S;
                            B = E - (w + Q) - g;
                            HEAP32[Q + (w + 4) >> 2] = g | 3;
                            b: do
                                if ((H | 0) == (HEAP32[40262] | 0)) J = HEAP32[40259] + B, HEAP32[40259] = J, HEAP32[40262] =
                                    T, HEAP32[S + (w + 4) >> 2] = J | 1;
                                else
                            if ((H | 0) == (HEAP32[40261] | 0)) J = HEAP32[40258] + B, HEAP32[40258] = J, HEAP32[40261] = T, HEAP32[S + (w + 4) >> 2] = J | 1, HEAP32[w + (J + S) >> 2] = J;
                            else {
                                J = n + 4;
                                K = HEAP32[w + (J + P) >> 2];
                                if (1 == (K & 3 | 0)) {
                                    p = K & -8;
                                    I = K >>> 3;
                                    c: do
                                        if (256 > K >>> 0) L = HEAP32[w + ((P | 8) + n) >> 2], r = HEAP32[P + (w + (n + 12)) >> 2], D = 161064 + (I << 1 << 2), (L | 0) != (D | 0) && (L >>> 0 < HEAP32[40260] >>> 0 && _abort(), (HEAP32[L + 12 >> 2] | 0) != (H | 0) && _abort()), (r | 0) == (L | 0) ? HEAP32[40256] &= ~(1 << I) : ((r | 0) == (D | 0) ? O = r + 8 : (r >>> 0 < HEAP32[40260] >>> 0 && _abort(), G = r + 8, (HEAP32[G >> 2] | 0) ==
                                            (H | 0) ? O = G : _abort()), HEAP32[L + 12 >> 2] = r, HEAP32[O >> 2] = L);
                                        else {
                                            D = E;
                                            G = HEAP32[w + ((P | 24) + n) >> 2];
                                            C = HEAP32[P + (w + (n + 12)) >> 2];
                                            do
                                                if ((C | 0) == (D | 0)) {
                                                    j = P | 16;
                                                    F = w + (J + j);
                                                    b = HEAP32[F >> 2];
                                                    if (0 == (b | 0))
                                                        if (f = w + (j + n), j = HEAP32[f >> 2], 0 == (j | 0)) {
                                                            aa = 0;
                                                            break
                                                        } else M = j;
                                                    else M = b, f = F;
                                                    for (;;)
                                                        if (F = M + 20, b = HEAP32[F >> 2], 0 != (b | 0)) M = b, f = F;
                                                        else if (F = M + 16, b = HEAP32[F >> 2], 0 == (b | 0)) break;
                                                    else M = b, f = F;
                                                    f >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[f >> 2] = 0, aa = M)
                                                } else F = HEAP32[w + ((P | 8) + n) >> 2], F >>> 0 < HEAP32[40260] >>> 0 && _abort(), b = F + 12, (HEAP32[b >> 2] | 0) !=
                                                    (D | 0) && _abort(), f = C + 8, (HEAP32[f >> 2] | 0) == (D | 0) ? (HEAP32[b >> 2] = C, HEAP32[f >> 2] = F, aa = C) : _abort();
                                            while (0);
                                            if (0 != (G | 0)) {
                                                C = HEAP32[P + (w + (n + 28)) >> 2];
                                                L = 161328 + (C << 2);
                                                do
                                                    if ((D | 0) == (HEAP32[L >> 2] | 0)) {
                                                        if (HEAP32[L >> 2] = aa, 0 == (aa | 0)) {
                                                            HEAP32[40257] &= ~(1 << C);
                                                            break c
                                                        }
                                                    } else if (G >>> 0 < HEAP32[40260] >>> 0 && _abort(), r = G + 16, (HEAP32[r >> 2] | 0) == (D | 0) ? HEAP32[r >> 2] = aa : HEAP32[G + 20 >> 2] = aa, 0 == (aa | 0)) break c; while (0);
                                                aa >>> 0 < HEAP32[40260] >>> 0 && _abort();
                                                HEAP32[aa + 24 >> 2] = G;
                                                D = P | 16;
                                                C = HEAP32[w + (D + n) >> 2];
                                                0 != (C | 0) && (C >>> 0 < HEAP32[40260] >>> 0 ?
                                                    _abort() : (HEAP32[aa + 16 >> 2] = C, HEAP32[C + 24 >> 2] = aa));
                                                C = HEAP32[w + (J + D) >> 2];
                                                0 != (C | 0) && (C >>> 0 < HEAP32[40260] >>> 0 ? _abort() : (HEAP32[aa + 20 >> 2] = C, HEAP32[C + 24 >> 2] = aa))
                                            }
                                        }
                                    while (0);
                                    K = w + ((p | P) + n);
                                    f = p + B
                                } else K = H, f = B;
                                J = K + 4;
                                HEAP32[J >> 2] &= -2;
                                HEAP32[S + (w + 4) >> 2] = f | 1;
                                HEAP32[w + (f + S) >> 2] = f;
                                J = f >>> 3;
                                if (256 > f >>> 0) I = J << 1, K = 161064 + (I << 2), C = HEAP32[40256], G = 1 << J, 0 == (C & G | 0) ? (HEAP32[40256] = C | G, Z = K, $ = 161064 + (I + 2 << 2)) : (J = 161064 + (I + 2 << 2), L = HEAP32[J >> 2], L >>> 0 >= HEAP32[40260] >>> 0 ? (Z = L, $ = J) : _abort()), HEAP32[$ >> 2] = T, HEAP32[Z + 12 >> 2] = T, HEAP32[S +
                                    (w + 8) >> 2] = Z, HEAP32[S + (w + 12) >> 2] = K;
                                else if (I = N, G = f >>> 8, 0 == (G | 0) ? J = 0 : 16777215 < f >>> 0 ? J = 31 : (C = G + 1048320 >>> 16 & 8, p = G << C, J = p + 520192 >>> 16 & 4, L = p << J, p = L + 245760 >>> 16 & 2, r = 14 - (J | C | p) + (L << p >>> 15), J = f >>> (r + 7 >>> 0) & 1 | r << 1), G = 161328 + (J << 2), HEAP32[S + (w + 28) >> 2] = J, HEAP32[S + (w + 20) >> 2] = 0, HEAP32[S + (w + 16) >> 2] = 0, K = HEAP32[40257], r = 1 << J, 0 == (K & r | 0)) HEAP32[40257] = K | r, HEAP32[G >> 2] = I, HEAP32[S + (w + 24) >> 2] = G, HEAP32[S + (w + 12) >> 2] = I, HEAP32[S + (w + 8) >> 2] = I;
                                else {
                                    r = HEAP32[G >> 2];
                                    J = 31 == (J | 0) ? 0 : 25 - (J >>> 1);
                                    c: do
                                        if ((HEAP32[r + 4 >> 2] & -8 | 0) == (f | 0)) ba =
                                            r;
                                        else {
                                            G = r;
                                            for (K = f << J;;) {
                                                ka = G + 16 + (K >>> 31 << 2);
                                                p = HEAP32[ka >> 2];
                                                if (0 == (p | 0)) break;
                                                if ((HEAP32[p + 4 >> 2] & -8 | 0) == (f | 0)) {
                                                    ba = p;
                                                    break c
                                                } else G = p, K <<= 1
                                            }
                                            if (ka >>> 0 < HEAP32[40260] >>> 0) _abort();
                                            else {
                                                HEAP32[ka >> 2] = I;
                                                HEAP32[S + (w + 24) >> 2] = G;
                                                HEAP32[S + (w + 12) >> 2] = I;
                                                HEAP32[S + (w + 8) >> 2] = I;
                                                break b
                                            }
                                        }
                                    while (0);
                                    r = ba + 8;
                                    K = HEAP32[r >> 2];
                                    D = HEAP32[40260];
                                    ba >>> 0 < D >>> 0 && _abort();
                                    K >>> 0 < D >>> 0 ? _abort() : (HEAP32[K + 12 >> 2] = I, HEAP32[r >> 2] = I, HEAP32[S + (w + 8) >> 2] = K, HEAP32[S + (w + 12) >> 2] = ba, HEAP32[S + (w + 24) >> 2] = 0)
                                }
                            }
                            while (0);
                            return n = w + (Q | 8)
                        }
                    while (0);
                    C =
                        V;
                    for (S = 161472;;) {
                        ea = HEAP32[S >> 2];
                        if (ea >>> 0 <= C >>> 0 && (ha = HEAP32[S + 4 >> 2], da = ea + ha, da >>> 0 > C >>> 0)) break;
                        S = HEAP32[S + 8 >> 2]
                    }
                    S = ea + (ha - 39);
                    B = 0 == (S & 7 | 0) ? 0 : -S & 7;
                    S = ea + (ha - 47 + B);
                    N = S >>> 0 < V + 16 >>> 0 ? C : S;
                    S = N + 8;
                    T = w + 8;
                    B = 0 == (T & 7 | 0) ? 0 : -T & 7;
                    T = n - 40 - B;
                    HEAP32[40262] = w + B;
                    HEAP32[40259] = T;
                    HEAP32[B + (w + 4) >> 2] = T | 1;
                    HEAP32[w + (n - 36) >> 2] = 40;
                    HEAP32[40263] = HEAP32[31126];
                    HEAP32[N + 4 >> 2] = 27;
                    HEAP32[S >> 2] = HEAP32[40368];
                    HEAP32[S + 4 >> 2] = HEAP32[40369];
                    HEAP32[S + 8 >> 2] = HEAP32[40370];
                    HEAP32[S + 12 >> 2] = HEAP32[40371];
                    HEAP32[40368] = w;
                    HEAP32[40369] = n;
                    HEAP32[40371] =
                        0;
                    HEAP32[40370] = S;
                    S = N + 28;
                    HEAP32[S >> 2] = 7;
                    if (N + 32 >>> 0 < da >>> 0)
                        for (T = S;;)
                            if (S = T + 4, HEAP32[S >> 2] = 7, T + 8 >>> 0 < da >>> 0) T = S;
                            else break;
                    if ((N | 0) != (C | 0))
                        if (T = N - V, S = T + (C + 4), HEAP32[S >> 2] &= -2, HEAP32[V + 4 >> 2] = T | 1, HEAP32[C + T >> 2] = T, S = T >>> 3, 256 > T >>> 0) B = S << 1, H = 161064 + (B << 2), E = HEAP32[40256], i = 1 << S, 0 == (E & i | 0) ? (HEAP32[40256] = E | i, ga = H, U = 161064 + (B + 2 << 2)) : (S = 161064 + (B + 2 << 2), K = HEAP32[S >> 2], K >>> 0 >= HEAP32[40260] >>> 0 ? (ga = K, U = S) : _abort()), HEAP32[U >> 2] = V, HEAP32[ga + 12 >> 2] = V, HEAP32[V + 8 >> 2] = ga, HEAP32[V + 12 >> 2] = H;
                        else if (B = V, i = T >>> 8, 0 ==
                        (i | 0) ? E = 0 : 16777215 < T >>> 0 ? E = 31 : (E = i + 1048320 >>> 16 & 8, C = i << E, N = C + 520192 >>> 16 & 4, S = C << N, C = S + 245760 >>> 16 & 2, K = 14 - (N | E | C) + (S << C >>> 15), E = T >>> (K + 7 >>> 0) & 1 | K << 1), i = 161328 + (E << 2), HEAP32[V + 28 >> 2] = E, HEAP32[V + 20 >> 2] = 0, HEAP32[V + 16 >> 2] = 0, H = HEAP32[40257], K = 1 << E, 0 == (H & K | 0)) HEAP32[40257] = H | K, HEAP32[i >> 2] = B, HEAP32[V + 24 >> 2] = i, HEAP32[V + 12 >> 2] = V, HEAP32[V + 8 >> 2] = V;
                    else {
                        K = HEAP32[i >> 2];
                        E = 31 == (E | 0) ? 0 : 25 - (E >>> 1);
                        b: do
                            if ((HEAP32[K + 4 >> 2] & -8 | 0) == (T | 0)) ca = K;
                            else {
                                i = K;
                                for (H = T << E;;) {
                                    X = i + 16 + (H >>> 31 << 2);
                                    C = HEAP32[X >> 2];
                                    if (0 == (C | 0)) break;
                                    if ((HEAP32[C + 4 >> 2] & -8 | 0) == (T | 0)) {
                                        ca = C;
                                        break b
                                    } else i = C, H <<= 1
                                }
                                if (X >>> 0 < HEAP32[40260] >>> 0) _abort();
                                else {
                                    HEAP32[X >> 2] = B;
                                    HEAP32[V + 24 >> 2] = i;
                                    HEAP32[V + 12 >> 2] = V;
                                    HEAP32[V + 8 >> 2] = V;
                                    break a
                                }
                            }
                        while (0);
                        T = ca + 8;
                        K = HEAP32[T >> 2];
                        H = HEAP32[40260];
                        ca >>> 0 < H >>> 0 && _abort();
                        K >>> 0 < H >>> 0 ? _abort() : (HEAP32[K + 12 >> 2] = B, HEAP32[T >> 2] = B, HEAP32[V + 8 >> 2] = K, HEAP32[V + 12 >> 2] = ca, HEAP32[V + 24 >> 2] = 0)
                    }
                }
            while (0);
            V = HEAP32[40259];
            if (!(V >>> 0 <= g >>> 0)) return K = V - g, HEAP32[40259] = K, T = V = HEAP32[40262], HEAP32[40262] = T + g, HEAP32[g + (T + 4) >> 2] = K | 1, HEAP32[V +
                4 >> 2] = g | 3, n = V + 8
        }
    while (0);
    HEAP32[___errno_location() >> 2] = 12;
    return 0
}
function _memcpy(a, f, d) {
    var a = a | 0,
        f = f | 0,
        d = d | 0,
        c = 0;
    if (4096 <= (d | 0)) return _emscripten_memcpy_big(a | 0, f | 0, d | 0) | 0;
    c = a | 0;
    if ((a & 3) == (f & 3)) {
        for (; a & 3;) {
            if (0 == (d | 0)) return c | 0;
            HEAP8[a] = HEAP8[f];
            a = a + 1 | 0;
            f = f + 1 | 0;
            d = d - 1 | 0
        }
        for (; 4 <= (d | 0);) HEAP32[a >> 2] = HEAP32[f >> 2], a = a + 4 | 0, f = f + 4 | 0, d = d - 4 | 0
    }
    for (; 0 < (d | 0);) HEAP8[a] = HEAP8[f], a = a + 1 | 0, f = f + 1 | 0, d = d - 1 | 0;
    return c | 0
}
function _memset(a, f, d) {
    var a = a | 0,
        f = f | 0,
        d = d | 0,
        c = 0,
        b = 0,
        e = 0,
        g = 0,
        c = a + d | 0;
    if (20 <= (d | 0)) {
        f &= 255;
        g = a & 3;
        b = f | f << 8 | f << 16 | f << 24;
        e = c & -4;
        if (g)
            for (g = a + 4 - g | 0;
                (a | 0) < (g | 0);) HEAP8[a] = f, a = a + 1 | 0;
        for (;
            (a | 0) < (e | 0);) HEAP32[a >> 2] = b, a = a + 4 | 0
    }
    for (;
        (a | 0) < (c | 0);) HEAP8[a] = f, a = a + 1 | 0;
    return a - d | 0
}
function _on1(a, f, d) {
    var c, b, e, g, h, j;
    c = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    b = HEAP32[d >> 2];
    e = HEAP32[b + (d + 8) >> 2];
    g = 0 == (e | 0) ? 0 : HEAP32[e + HEAP32[e >> 2] >> 2];
    h = HEAP32[b + (d + 12) >> 2];
    j = 0 == (h | 0) ? 0 : HEAP32[h + HEAP32[h >> 2] >> 2];
    b = HEAP32[b + (d + 24) >> 2];
    if (0 == (f | 0)) return 0;
    if ((b | 0) < (HEAP32[f + 24 >> 2] | 0)) return a = _jtrank1ex(a, f, d, b, 2046);
    //console.log('j: ' + j);
    b = getFUNCTION_TABLE(j)(a, f, h);
    //console.log('g: ' + g);
    h = getFUNCTION_TABLE(g)(a, b, e);
    0 != (h | 0) && (_jttraverse(a, h, 654), e = h + 16, HEAP32[e >> 2] += 1);
    _jttpop(a, c);
    return a = _jttpush(a, h)
}
function _sgnI(a, f, d, c) {
    var b;
    if (0 < (f | 0)) {
        a = c;
        c = 0;
        for (b = d;;)
            if (d = HEAP32[a >> 2], HEAP32[b >> 2] = (0 < (d | 0) | 0) - (d >>> 31), d = c + 1, (d | 0) < (f | 0)) a += 4, c = d, b += 4;
            else break
    }
}
function _snprintf(a, f, d, c) {
    d = __formatString(d, c);
    c = void 0 === f ? d.length : Math.min(d.length, Math.max(f - 1, 0));
    if (0 > a) var a = -a,
        b = _malloc(c + 1),
        a = HEAP32[a >> 2] = b;
    for (b = 0; b < c; b++) HEAP8[a + b | 0] = d[b];
    if (c < f || void 0 === f) HEAP8[a + b | 0] = 0;
    return d.length
}
function _spellin(a, f) {
    var d, c, b;
    d = HEAP8[f];
    if (2 == (a | 0)) {
        c = HEAP8[f + 1];
        if (46 == c << 24 >> 24) b = 1;
        else if (58 == c << 24 >> 24) b = 2;
        else return 0;
        c = _strchr(11256, d << 24 >> 24);
        return 0 == (c | 0) ? 0 : c = HEAP8[c - 11256 + (11256 + (70 * b & -1))]
    }
    if (1 == (a | 0)) return d;
    if (3 == (a | 0)) {
        c = HEAP8[f + 1];
        b = HEAP8[f + 2];
        if (95 == d << 24 >> 24 & 58 == b << 24 >> 24 & 48 < c << 24 >> 24 & 58 > c << 24 >> 24) return -24;
        d = _strchr(11477, d << 24 >> 24);
        if (0 != (d | 0)) return d -= 11477, c << 24 >> 24 != (HEAP8[d + 11482] | 0) || b << 24 >> 24 != (HEAP8[d + 11487] | 0) ? 0 : c = HEAP8[d + 11472]
    }
    return 0
}
function _sprintf(a, f, d) {
    return _snprintf(a, void 0, f, d)
}
function _strtod(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc;
    d = 0;
    c = STACKTOP;
    STACKTOP = STACKTOP + 624 | 0;
    b = c + 512;
    _memset(b, 0, 108) | 0;
    e = b + 4;
    HEAP32[e >> 2] = a;
    g = b + 8;
    HEAP32[g >> 2] = -1;
    HEAP32[b + 44 >> 2] = a;
    HEAP32[b + 76 >> 2] = -1;
    h = b + 104;
    HEAP32[h >> 2] = 0;
    j = b + 108;
    HEAP32[j >> 2] = ~a;
    i = b + 100;
    HEAP32[i >> 2] = -1;
    l = a;
    for (k = -1;;) {
        l >>> 0 < k >>> 0 ? (HEAP32[e >> 2] = l + 1, m = HEAPU8[l]) : m = ___shgetc(b);
        if (0 == (_isspace(m) | 0)) break;
        l = HEAP32[e >> 2];
        k = HEAP32[i >> 2]
    }
    45 == (m | 0) | 43 == (m | 0) ? (k = 1 - ((45 == (m | 0)) << 1), l = HEAP32[e >> 2], l >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >>
        2] = l + 1, n = HEAPU8[l]) : n = ___shgetc(b), p = k) : (n = m, p = 1);
    m = 0;
    for (k = n;;) {
        if ((k | 32) != (HEAP8[m + 117952] | 0)) {
            q = m;
            r = k;
            break
        }
        7 > m >>> 0 ? (n = HEAP32[e >> 2], n >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = n + 1, s = HEAPU8[n]) : s = ___shgetc(b)) : s = k;
        n = m + 1;
        if (8 > n >>> 0) m = n, k = s;
        else {
            q = n;
            r = s;
            break
        }
    }
    a: do
        if (3 == (q | 0)) d = 21;
        else
    if (8 == (q | 0)) d = 25;
    else if (4 <= q >>> 0) d = 8 == (q | 0) ? 25 : 21;
    else {
        b: do
            if (0 == (q | 0)) {
                s = 0;
                for (k = r;;) {
                    if ((k | 32) != (HEAP8[s + 120904] | 0)) {
                        t = k;
                        u = s;
                        break b
                    }
                    2 > s >>> 0 ? (m = HEAP32[e >> 2], m >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = m + 1, w = HEAPU8[m]) : w = ___shgetc(b)) :
                        w = k;
                    m = s + 1;
                    if (3 > m >>> 0) s = m, k = w;
                    else {
                        t = w;
                        u = m;
                        break
                    }
                }
            } else t = r, u = q;while (0);
        if (3 == (u | 0)) {
            k = HEAP32[e >> 2];
            k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, v = HEAPU8[k]) : v = ___shgetc(b);
            if (40 == (v | 0)) {
                for (x = 1;;) {
                    k = HEAP32[e >> 2];
                    k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, z = HEAPU8[k]) : z = ___shgetc(b);
                    if (!(10 > z - 48 >>> 0 | 26 > z - 65 >>> 0) && !(26 > z - 97 >>> 0 | 95 == (z | 0))) break;
                    x += 1
                }
                if (41 != (z | 0) && 0 != (HEAP32[i >> 2] | 0) && (k = HEAP32[e >> 2] - 1, HEAP32[e >> 2] = k, 0 != (x | 0))) {
                    A = x;
                    for (D = k; !(k = A - 1, B = D - 1, 0 == (k | 0));) A = k, D = B;
                    HEAP32[e >> 2] = B
                }
            } else 0 != (HEAP32[i >>
                2] | 0) && (HEAP32[e >> 2] -= 1);
            y = NaN
        } else if (0 == (u | 0)) {
            do
                if (48 == (t | 0))
                    if (k = HEAP32[e >> 2], k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, G = HEAPU8[k]) : G = ___shgetc(b), 120 != (G | 32)) 0 != (HEAP32[i >> 2] | 0) && (HEAP32[e >> 2] -= 1), C = 48;
                    else {
                        k = HEAP32[e >> 2];
                        k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, F = HEAPU8[k]) : F = ___shgetc(b);
                        for (E = 0;;) {
                            if (46 == (F | 0)) {
                                d = 65;
                                break
                            } else if (48 != (F | 0)) {
                                J = F;
                                K = H = I = L = 0;
                                N = E;
                                T = S = 0;
                                V = 1;
                                P = Q = 0;
                                break
                            }
                            k = HEAP32[e >> 2];
                            k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, F = HEAPU8[k]) : F = ___shgetc(b);
                            E = 1
                        }
                        b: do
                            if (65 == d)
                                if (k = HEAP32[e >>
                                        2], k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, M = HEAPU8[k]) : M = ___shgetc(b), 48 == (M | 0))
                                    for (O = R = -1;;) {
                                        k = HEAP32[e >> 2];
                                        k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, aa = HEAPU8[k]) : aa = ___shgetc(b);
                                        if (48 != (aa | 0)) {
                                            J = aa;
                                            I = L = 0;
                                            H = R;
                                            K = O;
                                            S = N = 1;
                                            T = 0;
                                            V = 1;
                                            P = Q = 0;
                                            break b
                                        }
                                        k = _i64Add(O, R, -1, -1);
                                        R = tempRet0;
                                        O = k
                                    } else J = M, K = H = I = L = 0, N = E, S = 1, T = 0, V = 1, P = Q = 0;
                        while (0);
                        b: for (;;) {
                            k = J - 48;
                            do
                                if (10 > k >>> 0) Z = k, d = 79;
                                else {
                                    s = J | 32;
                                    m = 46 == (J | 0);
                                    if (!(6 > s - 97 >>> 0 | m)) {
                                        $ = J;
                                        break b
                                    }
                                    if (m)
                                        if (0 == (S | 0)) ba = L, ka = I, ea = L, ha = I, da = N, ga = 1, U = T, ca = V, X = Q, Y = P;
                                        else {
                                            $ = 46;
                                            break b
                                        } else Z = 57 < (J | 0) ? s - 87 : k, d = 79
                                }
                            while (0);
                            79 == d && (k = d = 0, (L | 0) < (k | 0) | (L | 0) == (k | 0) & 8 > I >>> 0 ? (ja = T, fa = V, ia = Q, ra = Z + (P << 4)) : (s = 0, (L | 0) < (s | 0) | (L | 0) == (s | 0) & 14 > I >>> 0 ? (s = 0.0625 * V, ja = T, fa = s, ia = Q + s * (Z | 0)) : 0 != (Z | 0) & 0 == (T | 0) ? (ja = 1, fa = V, ia = Q + 0.5 * V) : (ja = T, fa = V, ia = Q), ra = P), k = _i64Add(I, L, 1, 0), ba = tempRet0, ka = k, ea = H, ha = K, da = 1, ga = S, U = ja, ca = fa, X = ia, Y = ra);
                            k = HEAP32[e >> 2];
                            k >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = k + 1, J = HEAPU8[k]) : J = ___shgetc(b);
                            L = ba;
                            I = ka;
                            H = ea;
                            K = ha;
                            N = da;
                            S = ga;
                            T = U;
                            V = ca;
                            Q = X;
                            P = Y
                        }
                        if (0 == (N | 0)) {
                            0 != (HEAP32[i >> 2] | 0) &&
                                (k = HEAP32[e >> 2], HEAP32[e >> 2] = k - 2, 0 != (S | 0) && (HEAP32[e >> 2] = k - 3));
                            y = 0 * (p | 0);
                            break a
                        }
                        s = (k = 0 == (S | 0)) ? I : K;
                        m = k ? L : H;
                        k = 0;
                        if ((L | 0) < (k | 0) | (L | 0) == (k | 0) & 8 > I >>> 0) {
                            k = P;
                            n = L;
                            for (l = I;;)
                                if (sa = k << 4, ta = _i64Add(l, n, 1, 0), wa = tempRet0, za = 0, (wa | 0) < (za | 0) | (wa | 0) == (za | 0) & 8 > ta >>> 0) k = sa, n = wa, l = ta;
                                else {
                                    Ba = sa;
                                    break
                                }
                        } else Ba = P;
                        112 == ($ | 32) ? (l = _scanexp(b), n = tempRet0, 0 == (l | 0) & -2147483648 == (n | 0) ? (0 != (HEAP32[i >> 2] | 0) && (HEAP32[e >> 2] -= 1), ya = ua = 0) : (ua = n, ya = l)) : (0 != (HEAP32[i >> 2] | 0) && (HEAP32[e >> 2] -= 1), ya = ua = 0);
                        l = _i64Add(s << 2 | 0, m << 2 | s >>> 30, -32, -1);
                        n = _i64Add(l, tempRet0, ya, ua);
                        l = tempRet0;
                        if (0 == (Ba | 0)) {
                            y = 0 * (p | 0);
                            break a
                        }
                        k = 0;
                        if ((l | 0) > (k | 0) | (l | 0) == (k | 0) & 1074 < n >>> 0) {
                            HEAP32[___errno_location() >> 2] = 34;
                            y = Infinity * (p | 0);
                            break a
                        }
                        k = -1;
                        if ((l | 0) < (k | 0) | (l | 0) == (k | 0) & 4294966116 > n >>> 0) {
                            HEAP32[___errno_location() >> 2] = 34;
                            y = 0 * (p | 0);
                            break a
                        }
                        if (-1 < (Ba | 0)) {
                            k = Ba;
                            sa = Q;
                            ta = l;
                            for (wa = n;;)
                                if (za = k << 1, 0.5 > sa ? (xa = sa, oa = za) : (xa = sa - 1, oa = za | 1), za = sa + xa, pa = _i64Add(wa, ta, -1, -1), la = tempRet0, -1 < (oa | 0)) k = oa, sa = za, ta = la, wa = pa;
                                else {
                                    qa = oa;
                                    Da = za;
                                    Aa = la;
                                    Ea = pa;
                                    break
                                }
                        } else qa = Ba, Da =
                            Q, Aa = l, Ea = n;
                        wa = _i64Add(Ea, Aa, 1106, 0);
                        ta = tempRet0;
                        sa = 0;
                        (ta | 0) < (sa | 0) | (ta | 0) == (sa | 0) & 53 > wa >>> 0 ? (k = wa, s = 0 > (k | 0) ? 0 : k, 53 <= (s | 0) ? d = 114 : (k = 84 - s, 1023 < (k | 0) ? (m = k - 1023, 1023 >= (m | 0) ? (Sa = 8.98846567431158E307, Oa = m) : (m = k - 2046, Sa = Infinity, Oa = 1023 < (m | 0) ? 1023 : m)) : -1022 <= (k | 0) ? (Sa = 1, Oa = k) : (m = k + 1022, -1022 <= (m | 0) ? (Sa = 2.2250738585072014E-308, Oa = m) : (m = k + 2044, Sa = 0, Oa = -1022 > (m | 0) ? -1022 : m)), k = p | 0, m = _copysign(Sa * (HEAP32[tempDoublePtr >> 2] = 0, HEAP32[tempDoublePtr + 4 >> 2] = Oa + 1023 << 20 | 0, HEAPF64[tempDoublePtr >> 3]), k), 32 > (s | 0) & 0 != Da ?
                            (pa = qa & 1, Ha = 0 == (pa | 0) ? 0 : Da, Ga = (pa ^ 1) + qa) : (Ha = Da, Ga = qa), Ma = m, Ia = k)) : d = 114;
                        114 == d && (Ha = Da, Ga = qa, Ma = 0, Ia = p | 0);
                        wa = Ia * Ha + (Ma + Ia * (Ga >>> 0)) - Ma;
                        0 == wa && (HEAP32[___errno_location() >> 2] = 34);
                        sa = Ea;
                        1023 < (sa | 0) ? (ta = 8.98846567431158E307 * wa, n = sa - 1023, 1023 >= (n | 0) ? (db = ta, W = n) : (n = sa - 2046, db = 8.98846567431158E307 * ta, W = 1023 < (n | 0) ? 1023 : n)) : -1022 <= (sa | 0) ? (db = wa, W = sa) : (n = 2.2250738585072014E-308 * wa, ta = sa + 1022, -1022 <= (ta | 0) ? (db = n, W = ta) : (ta = sa + 2044, db = 2.2250738585072014E-308 * n, W = -1022 > (ta | 0) ? -1022 : ta));
                        y = db * (HEAP32[tempDoublePtr >>
                            2] = 0, HEAP32[tempDoublePtr + 4 >> 2] = W + 1023 << 20 | 0, HEAPF64[tempDoublePtr >> 3]);
                        break a
                    } else C = t; while (0);
            sa = C;
            for (wa = 0;;) {
                if (46 == (sa | 0)) {
                    d = 139;
                    break
                } else if (48 != (sa | 0)) {
                    Xa = sa;
                    Ta = 0;
                    fb = wa;
                    ma = mb = 0;
                    break
                }
                ta = HEAP32[e >> 2];
                ta >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = ta + 1, sa = HEAPU8[ta]) : sa = ___shgetc(b);
                wa = 1
            }
            b: do
                if (139 == d)
                    if (sa = HEAP32[e >> 2], sa >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = sa + 1, ab = HEAPU8[sa]) : ab = ___shgetc(b), 48 == (ab | 0))
                        for ($a = Na = -1;;) {
                            sa = HEAP32[e >> 2];
                            sa >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = sa + 1, Ua = HEAPU8[sa]) : Ua = ___shgetc(b);
                            if (48 != (Ua | 0)) {
                                Xa = Ua;
                                fb = Ta = 1;
                                mb = Na;
                                ma = $a;
                                break b
                            }
                            sa = _i64Add($a, Na, -1, -1);
                            Na = tempRet0;
                            $a = sa
                        } else Xa = ab, Ta = 1, fb = wa, ma = mb = 0;
            while (0);
            wa = c;
            HEAP32[wa >> 2] = 0;
            sa = Xa - 48;
            ta = 46 == (Xa | 0);
            b: do
                if (10 > sa >>> 0 | ta) {
                    n = c + 496;
                    l = mb;
                    k = ma;
                    la = pa = m = 0;
                    za = fb;
                    Pa = Ta;
                    La = bb = 0;
                    Ja = Xa;
                    Qa = sa;
                    for (Ya = ta;;) {
                        do
                            if (Ya)
                                if (0 == (Pa | 0)) lb = La, Ca = bb, gb = 1, Fa = za, Za = la, qb = m, ib = pa, ub = m, eb = pa;
                                else {
                                    rb = l;
                                    wb = k;
                                    Ka = m;
                                    Va = pa;
                                    nb = la;
                                    ob = za;
                                    cb = bb;
                                    Wa = La;
                                    yb = Ja;
                                    break b
                                } else Cb = _i64Add(pa, m, 1, 0), Pb = tempRet0, zb = 48 != (Ja | 0), 125 <= (bb | 0) ? (zb && (HEAP32[n >> 2] |= 1), lb = La, Ca =
                            bb, gb = Pa, Fa = za, Za = la) : (Zb = c + (bb << 2), ac = 0 == (La | 0) ? Qa : Ja - 48 + (10 * HEAP32[Zb >> 2] & -1), HEAP32[Zb >> 2] = ac, Zb = La + 1, lb = (Hb = 9 == (Zb | 0)) ? 0 : Zb, Ca = (Hb & 1) + bb, gb = Pa, Fa = 1, Za = zb ? Cb : la), qb = Pb, ib = Cb, ub = l, eb = k; while (0);
                        s = HEAP32[e >> 2];
                        s >>> 0 < HEAP32[i >> 2] >>> 0 ? (HEAP32[e >> 2] = s + 1, Ib = HEAPU8[s]) : Ib = ___shgetc(b);
                        s = Ib - 48;
                        Cb = 46 == (Ib | 0);
                        if (10 > s >>> 0 | Cb) l = ub, k = eb, m = qb, pa = ib, la = Za, za = Fa, Pa = gb, bb = Ca, La = lb, Ja = Ib, Qa = s, Ya = Cb;
                        else {
                            Qb = ub;
                            Rb = eb;
                            Ob = qb;
                            Bb = ib;
                            xb = Za;
                            dc = Fa;
                            tb = gb;
                            oc = Ca;
                            Mb = lb;
                            Tb = Ib;
                            d = 162;
                            break
                        }
                    }
                } else Qb = mb, Rb = ma, xb = Bb = Ob = 0, dc = fb, tb =
                    Ta, Mb = oc = 0, Tb = Xa, d = 162;
            while (0);
            162 == d && (rb = (ta = 0 == (tb | 0)) ? Ob : Qb, wb = ta ? Bb : Rb, Ka = Ob, Va = Bb, nb = xb, ob = dc, cb = oc, Wa = Mb, yb = Tb);
            (ta = 0 != (ob | 0)) ? 101 != (yb | 32) ? d = 169 : (sa = _scanexp(b), Ya = tempRet0, 0 == (sa | 0) & -2147483648 == (Ya | 0) ? (0 != (HEAP32[i >> 2] | 0) && (HEAP32[e >> 2] -= 1), Nb = Ra = 0) : (Ra = Ya, Nb = sa), sa = _i64Add(Nb, Ra, wb, rb), sb = tempRet0, Ab = sa): d = 169;
            169 == d && (-1 >= (yb | 0) || 0 != (HEAP32[i >> 2] | 0) && (HEAP32[e >> 2] -= 1), sb = rb, Ab = wb);
            if (ta)
                if (sa = HEAP32[wa >> 2], 0 == (sa | 0)) y = 0 * (p | 0);
                else if (Ya = 0, (Ab | 0) == (Va | 0) & (sb | 0) == (Ka | 0) & ((Ka | 0) < (Ya | 0) |
                    (Ka | 0) == (Ya | 0) & 10 > Va >>> 0)) y = (p | 0) * (sa >>> 0);
            else if (sa = 0, (sb | 0) > (sa | 0) | (sb | 0) == (sa | 0) & 537 < Ab >>> 0) HEAP32[___errno_location() >> 2] = 34, y = Infinity * (p | 0);
            else if (sa = -1, (sb | 0) < (sa | 0) | (sb | 0) == (sa | 0) & 4294966116 > Ab >>> 0) HEAP32[___errno_location() >> 2] = 34, y = 0 * (p | 0);
            else {
                if (0 == (Wa | 0)) Eb = cb;
                else {
                    if (9 > (Wa | 0)) {
                        sa = c + (cb << 2);
                        Ya = Wa;
                        for (Qa = HEAP32[sa >> 2];;)
                            if (Lb = 10 * Qa & -1, Ja = Ya + 1, 9 > (Ja | 0)) Ya = Ja, Qa = Lb;
                            else break;
                        HEAP32[sa >> 2] = Lb
                    }
                    Eb = cb + 1
                }
                Qa = Ab;
                do
                    if (9 > (nb | 0) && (nb | 0) <= (Qa | 0) & 18 > (Qa | 0)) {
                        if (9 == (Qa | 0)) {
                            y = (p | 0) * (HEAP32[wa >> 2] >>>
                                0);
                            break a
                        }
                        if (9 > (Qa | 0)) {
                            y = (p | 0) * (HEAP32[wa >> 2] >>> 0) / (HEAP32[113168 + (8 - Qa << 2) >> 2] | 0);
                            break a
                        }
                        Ya = (-3 * Qa & -1) + 80;
                        ta = HEAP32[wa >> 2];
                        if (!(30 >= (Ya | 0) && 0 != (ta >>> (Ya >>> 0) | 0))) {
                            y = (p | 0) * (ta >>> 0) * (HEAP32[113168 + (Qa - 10 << 2) >> 2] | 0);
                            break a
                        }
                    }
                while (0);
                wa = (Qa | 0) % 9 & -1;
                if (0 == (wa | 0)) vb = 0, wc = Eb, Ec = 0, yc = Qa;
                else {
                    sa = -1 < (Qa | 0) ? wa : wa + 9;
                    wa = HEAP32[113168 + (8 - sa << 2) >> 2];
                    if (0 == (Eb | 0)) bc = Db = 0, pb = Qa;
                    else {
                        ta = 1E9 / (wa | 0) & -1;
                        Ya = Qa;
                        for (bb = La = Ja = 0; !(Pa = c + (La << 2), za = HEAP32[Pa >> 2], la = ((za >>> 0) / (wa >>> 0) & -1) + bb, HEAP32[Pa >> 2] = la, Fb = Math_imul((za >>>
                                0) % (wa >>> 0) & -1, ta) | 0, za = La + 1, (La | 0) == (Ja | 0) & 0 == (la | 0) ? (jb = za & 127, gc = Ya - 9) : (jb = Ja, gc = Ya), (za | 0) == (Eb | 0));) Ya = gc, Ja = jb, La = za, bb = Fb;
                        0 == (Fb | 0) ? Db = Eb : (HEAP32[c + (Eb << 2) >> 2] = Fb, Db = Eb + 1);
                        bc = jb;
                        pb = gc
                    }
                    vb = bc;
                    wc = Db;
                    Ec = 0;
                    yc = 9 - sa + pb
                }
                b: for (;;) {
                    wa = c + (vb << 2);
                    if (18 > (yc | 0)) {
                        Qa = wc;
                        for (bb = Ec;;) {
                            La = 0;
                            Ja = Qa + 127;
                            for (Ya = Qa; !(ta = Ja & 127, za = c + (ta << 2), la = HEAP32[za >> 2], Pa = _i64Add(la << 29 | 0, 0 | la >>> 3, La, 0), la = tempRet0, pa = 0, la >>> 0 > pa >>> 0 | la >>> 0 == pa >>> 0 & 1E9 < Pa >>> 0 ? (pa = ___udivdi3(Pa, la, 1E9, 0), m = ___uremdi3(Pa, la, 1E9, 0), ic = pa, vc = m) : (ic =
                                    0, vc = Pa), HEAP32[za >> 2] = vc, za = (ta | 0) == (vb | 0), hc = (ta | 0) != (Ya + 127 & 127 | 0) | za ? Ya : 0 == (vc | 0) ? ta : Ya, za);) La = ic, Ja = ta - 1, Ya = hc;
                            Ya = bb - 29;
                            if (0 == (ic | 0)) Qa = hc, bb = Ya;
                            else {
                                uc = Ya;
                                Ac = hc;
                                xc = ic;
                                break
                            }
                        }
                    } else {
                        if (18 == (yc | 0)) cd = wc, jc = Ec;
                        else {
                            Tc = vb;
                            Fc = wc;
                            Bc = Ec;
                            ec = yc;
                            break
                        }
                        for (;;) {
                            if (9007199 <= HEAP32[wa >> 2] >>> 0) {
                                Tc = vb;
                                Fc = cd;
                                Bc = jc;
                                ec = 18;
                                break b
                            }
                            bb = 0;
                            Qa = cd + 127;
                            for (Ya = cd; !(Ja = Qa & 127, La = c + (Ja << 2), ta = HEAP32[La >> 2], za = _i64Add(ta << 29 | 0, 0 | ta >>> 3, bb, 0), ta = tempRet0, Pa = 0, ta >>> 0 > Pa >>> 0 | ta >>> 0 == Pa >>> 0 & 1E9 < za >>> 0 ? (Pa = ___udivdi3(za, ta, 1E9,
                                    0), m = ___uremdi3(za, ta, 1E9, 0), Xb = Pa, sc = m) : (Xb = 0, sc = za), HEAP32[La >> 2] = sc, La = (Ja | 0) == (vb | 0), nc = (Ja | 0) != (Ya + 127 & 127 | 0) | La ? Ya : 0 == (sc | 0) ? Ja : Ya, La);) bb = Xb, Qa = Ja - 1, Ya = nc;
                            Ya = jc - 29;
                            if (0 == (Xb | 0)) cd = nc, jc = Ya;
                            else {
                                uc = Ya;
                                Ac = nc;
                                xc = Xb;
                                break
                            }
                        }
                    }
                    wa = vb + 127 & 127;
                    (wa | 0) == (Ac | 0) ? (Ya = Ac + 127 & 127, Qa = c + ((Ac + 126 & 127) << 2), HEAP32[Qa >> 2] |= HEAP32[c + (Ya << 2) >> 2], tc = Ya) : tc = Ac;
                    HEAP32[c + (wa << 2) >> 2] = xc;
                    vb = wa;
                    wc = tc;
                    Ec = uc;
                    yc += 9
                }
                b: for (;;) {
                    Ub = Fc + 1 & 127;
                    sa = c + ((Fc + 127 & 127) << 2);
                    wa = Tc;
                    Ya = Bc;
                    for (Qa = ec;;) {
                        bb = 18 == (Qa | 0);
                        Ja = 27 < (Qa | 0) ? 9 : 1;
                        $c = wa;
                        for (ad =
                            Ya;;) {
                            for (La = 0;;) {
                                za = La + $c & 127;
                                if ((za | 0) == (Fc | 0)) {
                                    qc = 2;
                                    break
                                }
                                m = HEAP32[c + (za << 2) >> 2];
                                za = HEAP32[113160 + (La << 2) >> 2];
                                if (m >>> 0 < za >>> 0) {
                                    qc = 2;
                                    break
                                }
                                Pa = La + 1;
                                if (m >>> 0 > za >>> 0) {
                                    qc = La;
                                    break
                                }
                                if (2 > (Pa | 0)) La = Pa;
                                else {
                                    qc = Pa;
                                    break
                                }
                            }
                            if (2 == (qc | 0) & bb) break b;
                            Uc = Ja + ad;
                            if (($c | 0) == (Fc | 0)) $c = Fc, ad = Uc;
                            else break
                        }
                        bb = (1 << Ja) - 1;
                        La = 1E9 >>> (Ja >>> 0);
                        Pa = Qa;
                        m = za = $c;
                        for (ta = 0; !(pa = c + (m << 2), la = HEAP32[pa >> 2], k = (la >>> (Ja >>> 0)) + ta, HEAP32[pa >> 2] = k, rc = Math_imul(la & bb, La) | 0, la = (m | 0) == (za | 0) & 0 == (k | 0), k = m + 1 & 127, kb = la ? Pa - 9 : Pa, Jb = la ? k : za, (k | 0) ==
                                (Fc | 0));) Pa = kb, za = Jb, m = k, ta = rc;
                        if (0 != (rc | 0)) {
                            if ((Ub | 0) != (Jb | 0)) break;
                            HEAP32[sa >> 2] |= 1
                        }
                        wa = Jb;
                        Ya = Uc;
                        Qa = kb
                    }
                    HEAP32[c + (Fc << 2) >> 2] = rc;
                    Tc = Jb;
                    Fc = Ub;
                    Bc = Uc;
                    ec = kb
                }
                Qa = $c & 127;
                (Qa | 0) == (Fc | 0) ? (HEAP32[c + (Ub - 1 << 2) >> 2] = 0, $b = Ub) : $b = Fc;
                Ya = HEAP32[c + (Qa << 2) >> 2] >>> 0;
                Qa = $c + 1 & 127;
                (Qa | 0) == ($b | 0) ? (wa = $b + 1 & 127, HEAP32[c + (wa - 1 << 2) >> 2] = 0, na = wa) : na = $b;
                wa = p | 0;
                sa = wa * (1E9 * Ya + (HEAP32[c + (Qa << 2) >> 2] >>> 0));
                Qa = ad + 53;
                Ya = ad + 1127;
                53 > (Ya | 0) ? (ta = 0 > (Ya | 0) ? 0 : Ya, 53 <= (ta | 0) ? (kc = Vb = 0, va = sa) : (m = 105 - ta, 1023 < (m | 0) ? (za = m - 1023, 1023 >= (za | 0) ? (fc = 8.98846567431158E307,
                    Kb = za) : (za = m - 2046, fc = Infinity, Kb = 1023 < (za | 0) ? 1023 : za)) : -1022 <= (m | 0) ? (fc = 1, Kb = m) : (za = m + 1022, -1022 <= (za | 0) ? (fc = 2.2250738585072014E-308, Kb = za) : (za = m + 2044, fc = 0, Kb = -1022 > (za | 0) ? -1022 : za)), m = _copysign(fc * (HEAP32[tempDoublePtr >> 2] = 0, HEAP32[tempDoublePtr + 4 >> 2] = Kb + 1023 << 20 | 0, HEAPF64[tempDoublePtr >> 3]), sa), za = 53 - ta, 1023 < (za | 0) ? (Pa = za - 1023, 1023 >= (Pa | 0) ? (Gb = 8.98846567431158E307, gd = Pa) : (Pa = za - 2046, Gb = Infinity, gd = 1023 < (Pa | 0) ? 1023 : Pa)) : -1022 <= (za | 0) ? (Gb = 1, gd = za) : (Pa = za + 1022, -1022 <= (Pa | 0) ? (Gb = 2.2250738585072014E-308,
                    gd = Pa) : (Pa = za + 2044, Gb = 0, gd = -1022 > (Pa | 0) ? -1022 : Pa)), za = _fmod(sa, Gb * (HEAP32[tempDoublePtr >> 2] = 0, HEAP32[tempDoublePtr + 4 >> 2] = gd + 1023 << 20 | 0, HEAPF64[tempDoublePtr >> 3])), Vb = m, kc = za, va = m + (sa - za)), Wc = 1, Yb = ta) : (kc = Vb = 0, va = sa, Wc = 0, Yb = 53);
                sa = $c + 2 & 127;
                (sa | 0) == (na | 0) ? mc = kc: (za = HEAP32[c + (sa << 2) >> 2], Gc = 5E8 > za >>> 0 ? 0 == (za | 0) && ($c + 3 & 127 | 0) == (na | 0) ? kc : 0.25 * wa + kc : 5E8 < za >>> 0 ? 0.75 * wa + kc : ($c + 3 & 127 | 0) == (na | 0) ? 0.5 * wa + kc : 0.75 * wa + kc, mc = 1 >= (53 - Yb | 0) ? Gc : 0 != _fmod(Gc, 1) ? Gc : Gc + 1);
                wa = va + mc - Vb;
                if (1019 < (Qa & 2147483644) >>> 0) {
                    9007199254740992 >
                        Math_abs(wa) ? (dd = wa, kd = Wc, Fd = ad) : (dd = 0.5 * wa, kd = 0 != (Wc | 0) & (Yb | 0) == (Ya | 0) ? 0 : Wc, Fd = ad + 1);
                    if (!(1021 >= (Fd + 50 | 0)) || 0 != (kd | 0) & 0 != mc) HEAP32[___errno_location() >> 2] = 34;
                    Vc = dd;
                    Hd = Fd
                } else Vc = wa, Hd = ad;
                1023 < (Hd | 0) ? (wa = 8.98846567431158E307 * Vc, Ya = Hd - 1023, 1023 >= (Ya | 0) ? (bd = wa, cc = Ya) : (Ya = Hd - 2046, bd = 8.98846567431158E307 * wa, cc = 1023 < (Ya | 0) ? 1023 : Ya)) : -1022 <= (Hd | 0) ? (bd = Vc, cc = Hd) : (Ya = 2.2250738585072014E-308 * Vc, wa = Hd + 1022, -1022 <= (wa | 0) ? (bd = Ya, cc = wa) : (wa = Hd + 2044, bd = 2.2250738585072014E-308 * Ya, cc = -1022 > (wa | 0) ? -1022 : wa));
                y = bd *
                    (HEAP32[tempDoublePtr >> 2] = 0, HEAP32[tempDoublePtr + 4 >> 2] = cc + 1023 << 20 | 0, HEAPF64[tempDoublePtr >> 3])
            } else HEAP32[___errno_location() >> 2] = 22, HEAP32[h >> 2] = 0, sa = HEAP32[g >> 2], HEAP32[j >> 2] = sa - HEAP32[e >> 2], HEAP32[i >> 2] = sa, y = 0
        } else wa = HEAP32[e >> 2],
        0 == (HEAP32[i >> 2] | 0) ? Ic = wa : (Ya = wa - 1, Ic = HEAP32[e >> 2] = Ya),
        HEAP32[___errno_location() >> 2] = 22,
        HEAP32[h >> 2] = 0,
        Ya = HEAP32[g >> 2],
        HEAP32[j >> 2] = Ya - Ic,
        HEAP32[i >> 2] = Ya,
        y = 0
    }
    while (0);
    do
        if (21 == d) {
            if (0 != (HEAP32[i >> 2] | 0) && (Ic = HEAP32[e >> 2] - 1, HEAP32[e >> 2] = Ic, !(4 > q >>> 0))) {
                fd = q;
                for (xd =
                    Ic;;)
                    if (Xc = xd - 1, Ic = fd - 1, 3 < Ic >>> 0) fd = Ic, xd = Xc;
                    else break;
                HEAP32[e >> 2] = Xc
            }
            d = 25
        }
    while (0);
    25 == d && (y = Infinity * (p | 0));
    p = HEAP32[e >> 2] - HEAP32[g >> 2] + HEAP32[j >> 2];
    if (0 == (f | 0)) return STACKTOP = c, y;
    HEAP32[f >> 2] = 0 == (p | 0) ? a : a + p;
    STACKTOP = c;
    return y
}
function _tcv(a, f, d) {
    var c, b;
    c = d;
    b = HEAP32[d >> 2];
    d = HEAP32[b + (c + 8) >> 2];
    return 0 == (d | 0) ? 0 : a = getFUNCTION_TABLE(HEAP32[d + (HEAP32[d >> 2] + 4) >> 2])(a, f, HEAP32[b + (c + 12) >> 2], d)
}
function allocate(a, f, d, c) {
    var b, e;
    "number" === typeof a ? (b = !0, e = a) : (b = !1, e = a.length);
    var g = "string" === typeof f ? f : null,
        d = d == ALLOC_NONE ? c : [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][void 0 === d ? ALLOC_STATIC : d](Math.max(e, g ? 1 : f.length));
    if (b) {
        c = d;
        assert(0 == (d & 3));
        for (a = d + (e & -4); c < a; c += 4) HEAP32[c >> 2] = 0;
        for (a = d + e; c < a;) HEAP8[c++ | 0] = 0;
        return d
    }
    if ("i8" === g) return a.subarray || a.slice ? HEAPU8.set(a, d) : HEAPU8.set(new Uint8Array(a), d), d;
    for (var c = 0, h, j; c < e;) {
        var i = a[c];
        "function" === typeof i &&
            (i = Runtime.getFunctionIndex(i));
        b = g || f[c];
        0 === b ? c++ : ("i64" == b && (b = "i32"), setValue(d + c, i, b), j !== b && (h = Runtime.getNativeTypeSize(b), j = b), c += h)
    }
    return d
}



function callRuntimeCallbacks(a) {
    for (; 0 < a.length;) {
        var f = a.shift();
        if ("function" == typeof f) f();
        else {
            var d = f.func;
            "number" === typeof d ? void 0 === f.arg ? Runtime.dynCall("v", d) : Runtime.dynCall("vi", d, [f.arg]) : d(void 0 === f.arg ? null : f.arg)
        }
    }
}
function ccall(a, f, d, c) {
    return ccallFunc(getCFunc(a), f, d, c)
}
function ccallFunc(a, f, d, c) {
    function b(a, b) {
        if ("string" == b) {
            if (null === a || void 0 === a || 0 === a) return 0;
            a = intArrayFromString(a);
            b = "array"
        }
        if ("array" == b) {
            e || (e = Runtime.stackSave());
            var c = Runtime.stackAlloc(a.length);
            writeArrayToMemory(a, c);
            return c
        }
        return a
    }
    var e = 0,
        g = 0,
        c = c ? c.map(function(a) {
            return b(a, d[g++])
        }) : [];
    a = a.apply(null, c);
    "string" == f ? f = Pointer_stringify(a) : (assert("array" != f), f = a);
    e && Runtime.stackRestore(e);
    return f
}
function ensureInitRuntime() {
    runtimeInitialized || (runtimeInitialized = !0, callRuntimeCallbacks(__ATINIT__))
}













function intArrayFromString(a, f, d) {
    a = (new Runtime.UTF8Processor).processJSString(a);
    d && (a.length = d);
    f || a.push(0);
    return a
}




function preRun() {
    if (Module.preRun)
        for ("function" == typeof Module.preRun && (Module.preRun = [Module.preRun]); Module.preRun.length;) addOnPreRun(Module.preRun.shift());
    callRuntimeCallbacks(__ATPRERUN__)
}
function run(a) {
    function f() {
        Module.calledRun || (Module.calledRun = !0, ensureInitRuntime(), preMain(), Module._main && shouldRunNow && Module.callMain(a), postRun())
    }
    a = a || Module.arguments;
    null === preloadStartTime && (preloadStartTime = Date.now());
    0 < runDependencies ? Module.printErr("run() called, but dependencies remain, so not running") : (preRun(), !(0 < runDependencies) && !Module.calledRun && (Module.setStatus ? (Module.setStatus("Running..."), setTimeout(function() {
        setTimeout(function() {
            Module.setStatus("")
        }, 1);
        ABORT ||
            f()
    }, 1)) : f()))
}


function _process_wrapper(a) {
    _jdo(HEAP32[31136], a)
}

function _jttymes(a, f, d) {
    return _jtva2(a, f, d, 42)
}

function _jtdivide(a, f, d) {
    return _jtva2(a, f, d, 37)
}

function _divII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (a = HEAP32[j >> 2], b = HEAP32[g >> 2], l = 0 == (a | b | 0) ? 0 : (a | 0) / (b | 0), HEAPF64[i >> 3] = l, b = h + 1, (b | 0) < (d | 0)) h = b, g += 4, j += 4, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (l = b;;) {
                b = j + 4;
                a = HEAP32[j >> 2];
                if (f) {
                    i = a | 0;
                    e = h + (c << 2);
                    j = 0;
                    for (k = l;;)
                        if (m = HEAP32[h >> 2], m = 0 == (m | a | 0) ? 0 : (m | 0) / i, HEAPF64[k >> 3] = m, m = j + 1, (m | 0) < (c | 0)) h += 4, j = m, k += 8;
                        else break;
                    n = e;
                    a = l + (c << 3)
                } else n = h, a = l;
                k = g + 1;
                if ((k | 0) < (d | 0)) j = b, g =
                    k, h = n, l = a;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        a = 0;
        l = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            n = HEAP32[g >> 2];
            if (i) {
                h = n | 0;
                g = l + (c << 2);
                j = 0;
                m = l;
                for (f = e;;)
                    if (k = HEAP32[m >> 2], l = 0 == (n | k | 0) ? 0 : h / (k | 0), HEAPF64[f >> 3] = l, k = j + 1, (k | 0) < (c | 0)) j = k, m += 4, f += 8;
                    else break;
                l = g;
                k = e + (c << 3)
            } else k = e;
            f = a + 1;
            if ((f | 0) < (d | 0)) a = f, g = b, e = k;
            else break
        }
    }
}

function _tymesID(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n, p;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (a = HEAP32[j >> 2], l = 0 == (a | 0) ? 0 : (a | 0) * HEAPF64[g >> 3], HEAPF64[i >> 3] = l, a = h + 1, (a | 0) < (d | 0)) h = a, g += 8, j += 4, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (l = b;;) {
                a = j + 8;
                b = HEAPF64[j >> 3];
                if (f) {
                    i = h + (c << 2);
                    k = 0;
                    for (m = l;;)
                        if (n = HEAP32[h >> 2], n = 0 == (n | 0) ? 0 : b * (n | 0), HEAPF64[m >> 3] = n, n = k + 1, (n | 0) < (c | 0)) h += 4, k = n, m += 8;
                        else break;
                    p = i;
                    k = l + (c << 3)
                } else p = h, k = l;
                m = g + 1;
                if ((m | 0) < (d | 0)) j = a, g = m, h = p, l = k;
                else break
            }
        }
    } else if (i) {
        i =
            0 < (c | 0);
        k = 0;
        l = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            p = HEAP32[g >> 2];
            if (i) {
                h = 0 == (p | 0);
                g = p | 0;
                p = l + (c << 3);
                j = 0;
                n = l;
                for (f = e;;)
                    if (l = h ? 0 : g * HEAPF64[n >> 3], HEAPF64[f >> 3] = l, m = j + 1, (m | 0) < (c | 0)) j = m, n += 8, f += 8;
                    else break;
                l = p;
                a = e + (c << 3)
            } else a = e;
            f = k + 1;
            if ((f | 0) < (d | 0)) k = f, g = b, e = a;
            else break
        }
    }
}

function _minusID(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAPF64[i >> 3] = (HEAP32[j >> 2] | 0) - HEAPF64[g >> 3], a = h + 1, (a | 0) < (d | 0)) h = a, g += 8, j += 4, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 8;
                i = HEAPF64[j >> 3];
                if (f) {
                    l = a + (c << 3);
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAPF64[e >> 3] = (HEAP32[k >> 2] | 0) - i, a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 8;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            if (i) {
                k = HEAP32[g >> 2] | 0;
                h = e + (c << 3);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAPF64[f >> 3] = k - HEAPF64[j >> 3], e = g + 1, (e | 0) < (c | 0)) g = e, j += 8, f += 8;
                    else break;
                a += c << 3
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _plusID(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAPF64[i >> 3] = (HEAP32[j >> 2] | 0) + HEAPF64[g >> 3], a = h + 1, (a | 0) < (d | 0)) h = a, g += 8, j += 4, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 8;
                i = HEAPF64[j >> 3];
                if (f) {
                    l = a + (c << 3);
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAPF64[e >> 3] = i + (HEAP32[k >> 2] | 0), a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 8;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e =
            b;;) {
            b = g + 4;
            if (i) {
                k = HEAP32[g >> 2] | 0;
                h = e + (c << 3);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAPF64[f >> 3] = k + HEAPF64[j >> 3], e = g + 1, (e | 0) < (c | 0)) g = e, j += 8, f += 8;
                    else break;
                a += c << 3
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _powII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = g;
            i = e;
            for (l = b;;) {
                a = HEAP32[i >> 2] | 0;
                k = HEAP32[j >> 2];
                0 > (k | 0) ? (e = 1 / a, n = (m = -2147483648 == (k | 0)) ? e : 1, p = m ? 2147483647 : -k, q = e) : (n = 1, p = k, q = a);
                if (0 == (p | 0)) r = n;
                else {
                    a = q;
                    k = p;
                    for (e = n;;)
                        if (b = 0 == (k & 1 | 0) ? e : e * a, m = k >> 1, 0 == (m | 0)) {
                            r = b;
                            break
                        } else a *= a, k = m, e = b
                }
                HEAPF64[l >> 3] = r;
                e = h + 1;
                if ((e | 0) < (d | 0)) h = e, j += 4, i += 4, l += 8;
                else break
            }
        }
    } else if (l = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (l) {
            f = 0 < (c | 0);
            i = g;
            j = 0;
            h = e;
            for (r = b;;) {
                b = i + 4;
                n = HEAP32[i >> 2];
                if (f) {
                    p = 0 >
                        (n | 0);
                    e = (q = -2147483648 == (n | 0)) ? 2147483647 : -n;
                    k = h + (c << 2);
                    a = h;
                    m = 0;
                    for (l = r;;) {
                        h = HEAP32[a >> 2] | 0;
                        p ? (i = 1 / h, s = q ? i : 1, t = e, u = i) : (s = 1, t = n, u = h);
                        if (0 == (t | 0)) w = s;
                        else {
                            h = u;
                            i = t;
                            for (g = s;;)
                                if (g = 0 == (i & 1 | 0) ? g : g * h, s = i >> 1, 0 == (s | 0)) {
                                    w = g;
                                    break
                                } else h *= h, i = s
                        }
                        HEAPF64[l >> 3] = w;
                        g = m + 1;
                        if ((g | 0) < (c | 0)) a += 4, m = g, l += 8;
                        else break
                    }
                    m = k;
                    a = r + (c << 3)
                } else m = h, a = r;
                l = j + 1;
                if ((l | 0) < (d | 0)) i = b, j = l, h = m, r = a;
                else break
            }
        }
    } else if (l) {
        l = 0 < (c | 0);
        a = 0;
        r = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            if (l) {
                m = HEAP32[g >> 2] | 0;
                h = 1 / m;
                j = r + (c << 2);
                i = 0;
                w = r;
                for (g = e;;) {
                    s = HEAP32[w >> 2];
                    0 > (s |
                        0) ? (f = (t = -2147483648 == (s | 0)) ? h : 1, r = t ? 2147483647 : -s, s = h) : (f = 1, r = s, s = m);
                    if (0 == (r | 0)) k = f;
                    else {
                        t = r;
                        for (u = f;;)
                            if (r = 0 == (t & 1 | 0) ? u : u * s, f = t >> 1, 0 == (f | 0)) {
                                k = r;
                                break
                            } else s *= s, t = f, u = r
                    }
                    HEAPF64[g >> 3] = k;
                    u = i + 1;
                    if ((u | 0) < (c | 0)) i = u, w += 4, g += 8;
                    else break
                }
                w = e + (c << 3)
            } else j = r, w = e;
            g = a + 1;
            if ((g | 0) < (d | 0)) a = g, r = j, g = b, e = w;
            else break
        }
    }
}

function _jtexpn2(a, f, d) {
    return _jtva2(a, f, d, 94)
 }

function _logI(a, f, d, c) {
    var b, e, g;
    b = 0;
    if (0 < (f | 0)) {
        e = 0;
        for (g = d;;) {
            d = HEAP32[c >> 2];
            if (-1 >= (d | 0)) break;
            HEAPF64[g >> 3] = Math_log(d | 0);
            d = e + 1;
            if ((d | 0) < (f | 0)) c += 4, e = d, g += 8;
            else {
                b = 5;
                break
            }
        }
        5 != b && (HEAP8[a + 204545] = 51)
    }
}

function _divDD(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (a = HEAPF64[j >> 3], b = HEAPF64[g >> 3], l = 0 != a | 0 != b ? a / b : 0, HEAPF64[i >> 3] = l, b = h + 1, (b | 0) < (d | 0)) h = b, g += 8, j += 8, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (l = b;;) {
                b = j + 8;
                a = HEAPF64[j >> 3];
                if (f) {
                    i = 0 != a;
                    e = h + (c << 3);
                    j = 0;
                    for (k = l;;)
                        if (m = HEAPF64[h >> 3], m = 0 != m | i ? m / a : 0, HEAPF64[k >> 3] = m, m = j + 1, (m | 0) < (c | 0)) h += 8, j = m, k += 8;
                        else break;
                    n = e;
                    a = l + (c << 3)
                } else n = h, a = l;
                k = g + 1;
                if ((k | 0) < (d | 0)) j = b, g = k, h = n, l = a;
                else break
            }
        }
    } else if (i) {
        i =
            0 < (c | 0);
        a = 0;
        l = g;
        g = e;
        for (e = b;;) {
            b = g + 8;
            n = HEAPF64[g >> 3];
            if (i) {
                h = 0 != n;
                g = l + (c << 3);
                j = 0;
                m = l;
                for (f = e;;)
                    if (k = HEAPF64[m >> 3], l = h | 0 != k ? n / k : 0, HEAPF64[f >> 3] = l, k = j + 1, (k | 0) < (c | 0)) j = k, m += 8, f += 8;
                    else break;
                l = g;
                k = e + (c << 3)
            } else k = e;
            f = a + 1;
            if ((f | 0) < (d | 0)) a = f, g = b, e = k;
            else break
        }
    }
}

function _jtminimum(a, f, d) {
    return _jtva2(a, f, d, -126)
}

function _minII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m, n;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (a = HEAP32[j >> 2], l = HEAP32[g >> 2], HEAP32[i >> 2] = (a | 0) < (l | 0) ? a : l, l = h + 1, (l | 0) < (d | 0)) h = l, g += 4, j += 4, i += 4;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (l = b;;) {
                a = j + 4;
                b = HEAP32[j >> 2];
                if (f) {
                    i = h + (c << 2);
                    k = 0;
                    for (m = l;;)
                        if (e = HEAP32[h >> 2], HEAP32[m >> 2] = (e | 0) < (b | 0) ? e : b, e = k + 1, (e | 0) < (c | 0)) h += 4, k = e, m += 4;
                        else break;
                    n = i;
                    k = l + (c << 2)
                } else n = h, k = l;
                m = g + 1;
                if ((m | 0) < (d | 0)) j = a, g = m, h = n, l = k;
                else break
            }
        }
    } else if (i) {
        i =
            0 < (c | 0);
        k = 0;
        l = g;
        g = e;
        for (e = b;;) {
            b = g + 4;
            n = HEAP32[g >> 2];
            if (i) {
                h = l + (c << 2);
                g = 0;
                j = l;
                for (f = e;;)
                    if (m = HEAP32[j >> 2], HEAP32[f >> 2] = (n | 0) < (m | 0) ? n : m, m = g + 1, (m | 0) < (c | 0)) g = m, j += 4, f += 4;
                    else break;
                l = h;
                a = e + (c << 2)
            } else a = e;
            f = k + 1;
            if ((f | 0) < (d | 0)) k = f, g = b, e = a;
            else break
        }
    }
}

function _jtceil1(a, f) {
    return _jtva1(a, f, -124)
}

function _ceilDI(a, f, d, c) {
    var b, e, g, h, j, i, l, k;
    b = 0;
    if (!(0 >= (f | 0))) {
        e = a + 1152;
        g = HEAPF64[14142];
        h = 0;
        j = c;
        for (c = d;;) {
            d = HEAPF64[j >> 3]; - 4E35 > d | 4E35 < d ? i = d : (i = Math_floor(d + 0.5), l = i < d, i == d | l ^ 1 ? d = 0 : (k = 0 < i, k ^ 0 < d ? d = 1 : (k ? i > d ? (l = i, d = i - d) : (l = d, d -= i) : l ? (l = -0 - i, d -= i) : (l = -0 - d, d = i - d), d = d > l * HEAPF64[e >> 3] ? 1 : l == g & 1)), i += d);
            d = i & -1;
            HEAP32[c >> 2] = d;
            if (i != (d | 0)) break;
            d = h + 1;
            if ((d | 0) < (f | 0)) h = d, j += 8, c += 4;
            else {
                b = 19;
                break
            }
        }
        19 != b && (HEAP8[a + 204545] = 50)
    }
}


function _jtlogar2(a, f, d) {
    var c, b, e, g, h, j;
    c = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    b = c + 8;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    e = a + 205764;
    if (0 != (_jtmaxtype(a, HEAP32[f + 12 >> 2], HEAP32[d + 12 >> 2]) & 64 | 0) && 2 != (HEAP32[e >> 2] | 0)) {
        g = a + 205336;
        h = HEAP32[g >> 2];
        HEAP32[g >> 2] = 0;
        j = _jtccvt(a, 64, f, b);
        HEAP32[g >> 2] = h;
        0 == j << 24 >> 24 ? (j = HEAP32[a + 4408 >> 2], h = HEAP32[j + (HEAP32[j >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), b = 0, j = HEAP32[g >> 2]) : (b = HEAP32[b >> 2], j = h);
        HEAP32[g >> 2] = 0;
        h = _jtccvt(a, 64, d, c);
        HEAP32[g >> 2] = j;
        0 == h <<
            24 >> 24 ? (h = HEAP32[a + 4408 >> 2], g = HEAP32[h + (HEAP32[h >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), g = 0) : g = HEAP32[c >> 2];
        g = _jtrank2ex(a, b, g, 0, 0, 0, 2020);
        if (0 != (g | 0)) return STACKTOP = c, g;
        g = a + 204545;
        if (2 <= (HEAP8[g] - 51 & 255)) return STACKTOP = c, 0;
        HEAP8[g] = 0;
        HEAP32[a + 4400 >> 2] = 0;
        HEAP32[e >> 2] = 2;
        g = _jtva1(a, d, -112);
        a = _jtva2(a, g, _jtva1(a, f, -112), 37);
        STACKTOP = c;
        return a
    }
    HEAP32[e >> 2] = 2;
    e = _jtva1(a, d, -112);
    a = _jtva2(a, e, _jtva1(a, f, -112), 37);
    STACKTOP = c;
    return a
}
var initialStackTop, preloadStartTime = null,
    calledMain = !1,
    dependenciesFulfilled = function runCaller() {
        !Module.calledRun && shouldRunNow && run();
        Module.calledRun || (dependenciesFulfilled = runCaller)
    };


Module._process_wrapper = _process_wrapper;
Module._main = _main;
Module._malloc = _malloc;
Module._free = _free;
Module.run = run;

var Module;
Module || (Module = eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));
var moduleOverrides = {},
    key;
for (key in Module) Module.hasOwnProperty(key) && (moduleOverrides[key] = Module[key]);
var ENVIRONMENT_IS_NODE = "object" === typeof process && "function" === typeof require,
    ENVIRONMENT_IS_WEB = "object" === typeof window,
    ENVIRONMENT_IS_WORKER = "function" === typeof importScripts,
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
    Module.print || (Module.print = function(a) {
        process.stdout.write(a + "\n")
    });
    Module.printErr || (Module.printErr = function(a) {
        process.stderr.write(a + "\n")
    });
    var nodeFS = require("fs"),
        nodePath = require("path");
    Module.read = function(a, f) {
        var a = nodePath.normalize(a),
            d = nodeFS.readFileSync(a);
        !d && a != nodePath.resolve(a) && (a = path.join(__dirname, "..", "src", a), d = nodeFS.readFileSync(a));
        d && !f && (d = d.toString());
        return d
    };
    Module.readBinary = function(a) {
        return Module.read(a, !0)
    };
    Module.load = function(a) {
        globalEval(read(a))
    };
    Module.arguments = process.argv.slice(2);
    module.exports = Module
} else if (ENVIRONMENT_IS_SHELL) Module.print || (Module.print = print), "undefined" != typeof printErr && (Module.printErr = printErr), Module.read = "undefined" != typeof read ? read : function() {
    throw "no read() available (jsc?)";
}, Module.readBinary = function(a) {
    return read(a, "binary")
}, "undefined" != typeof scriptArgs ? Module.arguments = scriptArgs : "undefined" != typeof arguments && (Module.arguments = arguments), this.Module = Module, eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined");
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.read = function(a) {
        var f = new XMLHttpRequest;
        f.open("GET", a, !1);
        f.send(null);
        return f.responseText
    };
    "undefined" != typeof arguments && (Module.arguments = arguments);
    if ("undefined" !== typeof console) Module.print || (Module.print = function(a) {
        console.log(a)
    }), Module.printErr || (Module.printErr = function(a) {
        console.log(a)
    });
    else {
        var TRY_USE_DUMP = !1;
        Module.print || (Module.print = TRY_USE_DUMP && "undefined" !== typeof dump ? function(a) {
            dump(a)
        } : function() {})
    }
    ENVIRONMENT_IS_WEB ?
        this.Module = Module : Module.load = importScripts
} else throw "Unknown runtime environment. Where are we?";

function globalEval(a) {
    eval.call(null, a)
}
"undefined" == !Module.load && Module.read && (Module.load = function(a) {
    globalEval(Module.read(a))
});
Module.print || (Module.print = function() {});
Module.printErr || (Module.printErr = Module.print);
Module.arguments || (Module.arguments = []);
Module.print = Module.print;
Module.printErr = Module.printErr;
Module.preRun = [];
Module.postRun = [];
for (key in moduleOverrides) moduleOverrides.hasOwnProperty(key) && (Module[key] = moduleOverrides[key]);
var Runtime = {
    stackSave: function() {
        return STACKTOP
    },
    stackRestore: function(a) {
        STACKTOP = a
    },
    forceAlign: function(a, f) {
        f = f || 4;
        return 1 == f ? a : isNumber(a) && isNumber(f) ? Math.ceil(a / f) * f : isNumber(f) && isPowerOfTwo(f) ? "(((" + a + ")+" + (f - 1) + ")&" + -f + ")" : "Math.ceil((" + a + ")/" + f + ")*" + f
    },
    isNumberType: function(a) {
        return a in Runtime.INT_TYPES || a in Runtime.FLOAT_TYPES
    },
    isPointerType: function(a) {
        return "*" == a[a.length - 1]
    },
    isStructType: function(a) {
        return isPointerType(a) ? !1 : isArrayType(a) || /<?\{ ?[^}]* ?\}>?/.test(a) ? !0 : "%" ==
            a[0]
    },
    INT_TYPES: {
        i1: 0,
        i8: 0,
        i16: 0,
        i32: 0,
        i64: 0
    },
    FLOAT_TYPES: {
        "float": 0,
        "double": 0
    },
    or64: function(a, f) {
        var d = a | 0 | f | 0,
            c = 4294967296 * (Math.round(a / 4294967296) | Math.round(f / 4294967296));
        return d + c
    },
    and64: function(a, f) {
        var d = (a | 0) & (f | 0),
            c = 4294967296 * (Math.round(a / 4294967296) & Math.round(f / 4294967296));
        return d + c
    },
    xor64: function(a, f) {
        var d = (a | 0) ^ (f | 0),
            c = 4294967296 * (Math.round(a / 4294967296) ^ Math.round(f / 4294967296));
        return d + c
    },
    getNativeTypeSize: function(a) {
        switch (a) {
            case "i1":
            case "i8":
                return 1;
            case "i16":
                return 2;
            case "i32":
                return 4;
            case "i64":
                return 8;
            case "float":
                return 4;
            case "double":
                return 8;
            default:
                return "*" === a[a.length - 1] ? Runtime.QUANTUM_SIZE : "i" === a[0] ? (a = parseInt(a.substr(1)), assert(0 === a % 8), a / 8) : 0
        }
    },
    getNativeFieldSize: function(a) {
        return Math.max(Runtime.getNativeTypeSize(a), Runtime.QUANTUM_SIZE)
    },
    dedup: function(a, f) {
        var d = {};
        return f ? a.filter(function(a) {
            return d[a[f]] ? !1 : d[a[f]] = !0
        }) : a.filter(function(a) {
            return d[a] ? !1 : d[a] = !0
        })
    },
    set: function() {
        for (var a = "object" === typeof arguments[0] ? arguments[0] :
                arguments, f = {}, d = 0; d < a.length; d++) f[a[d]] = 0;
        return f
    },
    STACK_ALIGN: 8,
    getAlignSize: function(a, f, d) {
        return d || !d && ("i64" == a || "double" == a) ? 8 : !a ? Math.min(f, 8) : Math.min(f || (a ? Runtime.getNativeFieldSize(a) : 0), Runtime.QUANTUM_SIZE)
    },
    calculateStructAlignment: function(a) {
        a.flatSize = 0;
        a.alignSize = 0;
        var f = [],
            d = -1,
            c = 0;
        a.flatIndexes = a.fields.map(function(b) {
            c++;
            var e, g;
            Runtime.isNumberType(b) || Runtime.isPointerType(b) ? (e = Runtime.getNativeTypeSize(b), g = Runtime.getAlignSize(b, e)) : Runtime.isStructType(b) ? "0" === b[1] ?
                (e = 0, g = Types.types[b] ? Runtime.getAlignSize(null, Types.types[b].alignSize) : a.alignSize || QUANTUM_SIZE) : (e = Types.types[b].flatSize, g = Runtime.getAlignSize(null, Types.types[b].alignSize)) : "b" == b[0] ? (e = b.substr(1) | 0, g = 1) : "<" === b[0] ? e = g = Types.types[b].flatSize : "i" === b[0] ? (e = g = parseInt(b.substr(1)) / 8, assert(0 === e % 1, "cannot handle non-byte-size field " + b)) : assert(!1, "invalid type for calculateStructAlignment");
            a.packed && (g = 1);
            a.alignSize = Math.max(a.alignSize, g);
            b = Runtime.alignMemory(a.flatSize, g);
            a.flatSize =
                b + e;
            0 <= d && f.push(b - d);
            return d = b
        });
        a.name_ && "[" === a.name_[0] && (a.flatSize = parseInt(a.name_.substr(1)) * a.flatSize / 2);
        a.flatSize = Runtime.alignMemory(a.flatSize, a.alignSize);
        0 == f.length ? a.flatFactor = a.flatSize : 1 == Runtime.dedup(f).length && (a.flatFactor = f[0]);
        a.needsFlattening = 1 != a.flatFactor;
        return a.flatIndexes
    },
    generateStructInfo: function(a, f, d) {
        var c, b;
        if (f) {
            d = d || 0;
            c = ("undefined" === typeof Types ? Runtime.typeInfo : Types.types)[f];
            if (!c) return null;
            if (c.fields.length != a.length) return printErr("Number of named fields must match the type for " +
                f + ": possibly duplicate struct names. Cannot return structInfo"), null;
            b = c.flatIndexes
        } else c = {
            fields: a.map(function(a) {
                return a[0]
            })
        }, b = Runtime.calculateStructAlignment(c);
        var e = {
            __size__: c.flatSize
        };
        f ? a.forEach(function(a, f) {
            if ("string" === typeof a) e[a] = b[f] + d;
            else {
                var j, i;
                for (i in a) j = i;
                e[j] = Runtime.generateStructInfo(a[j], c.fields[f], b[f])
            }
        }) : a.forEach(function(a, c) {
            e[a[1]] = b[c]
        });
        return e
    },
    dynCall: function(a, f, d) {
        return d && d.length ? getFUNCTION_TABLE(f).apply(null, d) : FUNCTION_TABLE[f]()
    },
    addFunction: function(a) {
        var f =
            FUNCTION_TABLE,
            d = f.length;
        assert(0 === d % 2);
        f.push(a);
        for (a = 0; 1 > a; a++) f.push(0);
        return d
    },
    removeFunction: function(a) {
        FUNCTION_TABLE[a] = null
    },
    getAsmConst: function(a, f) {
        Runtime.asmConstCache || (Runtime.asmConstCache = {});
        var d = Runtime.asmConstCache[a];
        if (d) return d;
        for (var d = [], c = 0; c < f; c++) d.push(String.fromCharCode(36) + c);
        a = Pointer_stringify(a);
        '"' === a[0] && (a.indexOf('"', 1) === a.length - 1 ? a = a.substr(1, a.length - 2) : abort("invalid EM_ASM input |" + a + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"));
        return Runtime.asmConstCache[a] = eval("(function(" + d.join(",") + "){ " + a + " })")
    },
    warnOnce: function(a) {
        Runtime.warnOnce.shown || (Runtime.warnOnce.shown = {});
        Runtime.warnOnce.shown[a] || (Runtime.warnOnce.shown[a] = 1, Module.printErr(a))
    },
    funcWrappers: {},
    getFuncWrapper: function(a, f) {
        assert(f);
        Runtime.funcWrappers[a] || (Runtime.funcWrappers[a] = function() {
            return Runtime.dynCall(f, a, arguments)
        });
        return Runtime.funcWrappers[a]
    },
    UTF8Processor: function() {
        var a = [],
            f = 0;
        this.processCChar = function(d) {
            d &= 255;
            if (0 == a.length) {
                if (0 ==
                    (d & 128)) return String.fromCharCode(d);
                a.push(d);
                f = 192 == (d & 224) ? 1 : 224 == (d & 240) ? 2 : 3;
                return ""
            }
            if (f && (a.push(d), f--, 0 < f)) return "";
            var d = a[0],
                c = a[1],
                b = a[2],
                e = a[3];
            2 == a.length ? d = String.fromCharCode((d & 31) << 6 | c & 63) : 3 == a.length ? d = String.fromCharCode((d & 15) << 12 | (c & 63) << 6 | b & 63) : (d = (d & 7) << 18 | (c & 63) << 12 | (b & 63) << 6 | e & 63, d = String.fromCharCode(Math.floor((d - 65536) / 1024) + 55296, (d - 65536) % 1024 + 56320));
            a.length = 0;
            return d
        };
        this.processJSString = function(a) {
            for (var a = unescape(encodeURIComponent(a)), c = [], b = 0; b < a.length; b++) c.push(a.charCodeAt(b));
            return c
        }
    },
    getCompilerSetting: function() {
        throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
    },
    stackAlloc: function(a) {
        var f = STACKTOP;
        STACKTOP = STACKTOP + a | 0;
        STACKTOP = STACKTOP + 7 & -8;
        return f
    },
    staticAlloc: function(a) {
        var f = STATICTOP;
        STATICTOP = STATICTOP + a | 0;
        STATICTOP = STATICTOP + 7 & -8;
        return f
    },
    dynamicAlloc: function(a) {
        var f = DYNAMICTOP;
        DYNAMICTOP = DYNAMICTOP + a | 0;
        DYNAMICTOP = DYNAMICTOP + 7 & -8;
        DYNAMICTOP >= TOTAL_MEMORY && enlargeMemory();
        return f
    },
    alignMemory: function(a, f) {
        return Math.ceil(a / (f ? f : 8)) * (f ? f : 8)
    },
    makeBigInt: function(a, f, d) {
        return d ? (a >>> 0) + 4294967296 * (f >>> 0) : (a >>> 0) + 4294967296 * (f | 0)
    },
    GLOBAL_BASE: 8,
    QUANTUM_SIZE: 4,
    __dummy__: 0
};
Module.Runtime = Runtime;
var __THREW__ = 0,
    setjmpId = 1,
    setjmpLabels = {},
    ABORT = !1,
    EXITSTATUS = 0,
    undef = 0,
    tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat, tempI64, tempI64b, tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(a, f) {
    a || abort("Assertion failed: " + f)
}
var globalScope = this;

function ccall(a, f, d, c) {
    return ccallFunc(getCFunc(a), f, d, c)
}
Module.ccall = ccall;

function getCFunc(a) {
    try {
        var f = Module["_" + a];
        f || (f = eval("_" + a))
    } catch (d) {}
    assert(f, "Cannot call unknown function " + a + " (perhaps LLVM optimizations or closure removed it?)");
    return f
}

function ccallFunc(a, f, d, c) {
    function b(a, b) {
        if ("string" == b) {
            if (null === a || void 0 === a || 0 === a) return 0;
            a = intArrayFromString(a);
            b = "array"
        }
        if ("array" == b) {
            e || (e = Runtime.stackSave());
            var c = Runtime.stackAlloc(a.length);
            writeArrayToMemory(a, c);
            return c
        }
        return a
    }
    var e = 0,
        g = 0,
        c = c ? c.map(function(a) {
            return b(a, d[g++])
        }) : [];
    a = a.apply(null, c);
    "string" == f ? f = Pointer_stringify(a) : (assert("array" != f), f = a);
    e && Runtime.stackRestore(e);
    return f
}

function cwrap(a, f, d) {
    var c = getCFunc(a);
    return function() {
        return ccallFunc(c, f, d, Array.prototype.slice.call(arguments))
    }
}
Module.cwrap = cwrap;

function setValue(a, f, d) {
    d = d || "i8";
    "*" === d.charAt(d.length - 1) && (d = "i32");
    switch (d) {
        case "i1":
            HEAP8[a] = f;
            break;
        case "i8":
            HEAP8[a] = f;
            break;
        case "i16":
            HEAP16[a >> 1] = f;
            break;
        case "i32":
            HEAP32[a >> 2] = f;
            break;
        case "i64":
            tempI64 = [f >>> 0, (tempDouble = f, 1 <= Math_abs(tempDouble) ? 0 < tempDouble ? Math_min(Math_floor(tempDouble / 4294967296), 4294967295) >>> 0 : ~~Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)];
            HEAP32[a >> 2] = tempI64[0];
            HEAP32[a + 4 >> 2] = tempI64[1];
            break;
        case "float":
            HEAPF32[a >> 2] = f;
            break;
        case "double":
            HEAPF64[a >>
                3] = f;
            break;
        default:
            abort("invalid type for setValue: " + d)
    }
}
Module.setValue = setValue;

function getValue(a, f) {
    f = f || "i8";
    "*" === f.charAt(f.length - 1) && (f = "i32");
    switch (f) {
        case "i1":
            return HEAP8[a];
        case "i8":
            return HEAP8[a];
        case "i16":
            return HEAP16[a >> 1];
        case "i32":
            return HEAP32[a >> 2];
        case "i64":
            return HEAP32[a >> 2];
        case "float":
            return HEAPF32[a >> 2];
        case "double":
            return HEAPF64[a >> 3];
        default:
            abort("invalid type for setValue: " + f)
    }
    return null
}
Module.getValue = getValue;
var ALLOC_NORMAL = 0,
    ALLOC_STACK = 1,
    ALLOC_STATIC = 2,
    ALLOC_DYNAMIC = 3,
    ALLOC_NONE = 4;
Module.ALLOC_NORMAL = ALLOC_NORMAL;
Module.ALLOC_STACK = ALLOC_STACK;
Module.ALLOC_STATIC = ALLOC_STATIC;
Module.ALLOC_DYNAMIC = ALLOC_DYNAMIC;
Module.ALLOC_NONE = ALLOC_NONE;

Module.allocate = allocate;

function Pointer_stringify(a, f) {
    for (var d = !1, c, b = 0;;) {
        c = HEAPU8[a + b | 0];
        if (128 <= c) d = !0;
        else if (0 == c && !f) break;
        b++;
        if (f && b == f) break
    }
    f || (f = b);
    var e = "";
    if (!d) {
        for (; 0 < f;) c = String.fromCharCode.apply(String, HEAPU8.subarray(a, a + Math.min(f, 1024))), e = e ? e + c : c, a += 1024, f -= 1024;
        return e
    }
    d = new Runtime.UTF8Processor;
    for (b = 0; b < f; b++) c = HEAPU8[a + b | 0], e += d.processCChar(c);
    return e
}
Module.Pointer_stringify = Pointer_stringify;

function UTF16ToString(a) {
    for (var f = 0, d = "";;) {
        var c = HEAP16[a + 2 * f >> 1];
        if (0 == c) return d;
        ++f;
        d += String.fromCharCode(c)
    }
}
Module.UTF16ToString = UTF16ToString;

function stringToUTF16(a, f) {
    for (var d = 0; d < a.length; ++d) {
        var c = a.charCodeAt(d);
        HEAP16[f + 2 * d >> 1] = c
    }
    HEAP16[f + 2 * a.length >> 1] = 0
}
Module.stringToUTF16 = stringToUTF16;

function UTF32ToString(a) {
    for (var f = 0, d = "";;) {
        var c = HEAP32[a + 4 * f >> 2];
        if (0 == c) return d;
        ++f;
        65536 <= c ? (c -= 65536, d += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023)) : d += String.fromCharCode(c)
    }
}
Module.UTF32ToString = UTF32ToString;

function stringToUTF32(a, f) {
    for (var d = 0, c = 0; c < a.length; ++c) {
        var b = a.charCodeAt(c);
        if (55296 <= b && 57343 >= b) var e = a.charCodeAt(++c),
            b = 65536 + ((b & 1023) << 10) | e & 1023;
        HEAP32[f + 4 * d >> 2] = b;
        ++d
    }
    HEAP32[f + 4 * d >> 2] = 0
}
Module.stringToUTF32 = stringToUTF32;

function demangle(a) {
    function f(g, j, i) {
        var j = j || Infinity,
            l = "",
            k = [],
            m;
        if ("N" === a[d]) {
            d++;
            "K" === a[d] && d++;
            for (m = [];
                "E" !== a[d];)
                if ("S" === a[d]) {
                    d++;
                    var n = a.indexOf("_", d),
                        p = a.substring(d, n) || 0;
                    m.push(b[p] || "?");
                    d = n + 1
                } else if ("C" === a[d]) m.push(m[m.length - 1]), d += 2;
            else {
                n = parseInt(a.substr(d));
                p = n.toString().length;
                if (!n || !p) {
                    d--;
                    break
                }
                var q = a.substr(d + p, n);
                m.push(q);
                b.push(q);
                d += p + n
            }
            d++;
            m = m.join("::");
            j--;
            if (0 === j) return g ? [m] : m
        } else if (("K" === a[d] || e && "L" === a[d]) && d++, n = parseInt(a.substr(d))) p = n.toString().length,
            m = a.substr(d + p, n), d += p + n;
        e = !1;
        "I" === a[d] ? (d++, n = f(!0), p = f(!0, 1, !0), l += p[0] + " " + m + "<" + n.join(", ") + ">") : l = m;
        a: for (; d < a.length && 0 < j--;)
            if (m = a[d++], m in c) k.push(c[m]);
            else switch (m) {
                case "P":
                    k.push(f(!0, 1, !0)[0] + "*");
                    break;
                case "R":
                    k.push(f(!0, 1, !0)[0] + "&");
                    break;
                case "L":
                    d++;
                    n = a.indexOf("E", d) - d;
                    k.push(a.substr(d, n));
                    d += n + 2;
                    break;
                case "A":
                    n = parseInt(a.substr(d));
                    d += n.toString().length;
                    if ("_" !== a[d]) throw "?";
                    d++;
                    k.push(f(!0, 1, !0)[0] + " [" + n + "]");
                    break;
                case "E":
                    break a;
                default:
                    l += "?" + m;
                    break a
            }!i && (1 ===
                k.length && "void" === k[0]) && (k = []);
        return g ? k : l + ("(" + k.join(", ") + ")")
    }
    var d = 3,
        c = {
            v: "void",
            b: "bool",
            c: "char",
            s: "short",
            i: "int",
            l: "long",
            f: "float",
            d: "double",
            w: "wchar_t",
            a: "signed char",
            h: "unsigned char",
            t: "unsigned short",
            j: "unsigned int",
            m: "unsigned long",
            x: "long long",
            y: "unsigned long long",
            z: "..."
        },
        b = [],
        e = !0;
    try {
        if ("Object._main" == a || "_main" == a) return "main()";
        "number" === typeof a && (a = Pointer_stringify(a));
        if ("_" !== a[0] || "_" !== a[1] || "Z" !== a[2]) return a;
        switch (a[3]) {
            case "n":
                return "operator new()";
            case "d":
                return "operator delete()"
        }
        return f()
    } catch (g) {
        return a
    }
}

function demangleAll(a) {
    return a.replace(/__Z[\w\d_]+/g, function(a) {
        var d = demangle(a);
        return a === d ? a : a + " [" + d + "]"
    })
}

function stackTrace() {
    var a = Error().stack;
    return a ? demangleAll(a) : "(no stack trace available)"
}
var PAGE_SIZE = 4096;

function alignMemoryPage(a) {
    return a + 4095 & -4096
}
var HEAP, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64, STATIC_BASE = 0,
    STATICTOP = 0,
    staticSealed = !1,
    STACK_BASE = 0,
    STACKTOP = 0,
    STACK_MAX = 0,
    DYNAMIC_BASE = 0,
    DYNAMICTOP = 0;

function enlargeMemory() {
    abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")
}
var TOTAL_STACK = Module.TOTAL_STACK || 5242880,
    TOTAL_MEMORY = Module.TOTAL_MEMORY || 16777216,
    FAST_MEMORY = Module.FAST_MEMORY || 2097152;
assert("undefined" !== typeof Int32Array && "undefined" !== typeof Float64Array && !!(new Int32Array(1)).subarray && !!(new Int32Array(1)).set, "JS engine does not provide full typed array support");
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(255 === HEAPU8[0] && 0 === HEAPU8[3], "Typed arrays 2 must be run on a little-endian system");
Module.HEAP = HEAP;
Module.HEAP8 = HEAP8;
Module.HEAP16 = HEAP16;
Module.HEAP32 = HEAP32;
Module.HEAPU8 = HEAPU8;
Module.HEAPU16 = HEAPU16;
Module.HEAPU32 = HEAPU32;
Module.HEAPF32 = HEAPF32;
Module.HEAPF64 = HEAPF64;

function callRuntimeCallbacks(a) {
    for (; 0 < a.length;) {
        var f = a.shift();
        if ("function" == typeof f) f();
        else {
            var d = f.func;
            "number" === typeof d ? void 0 === f.arg ? Runtime.dynCall("v", d) : Runtime.dynCall("vi", d, [f.arg]) : d(void 0 === f.arg ? null : f.arg)
        }
    }
}
var __ATPRERUN__ = [],
    __ATINIT__ = [],
    __ATMAIN__ = [],
    __ATEXIT__ = [],
    __ATPOSTRUN__ = [],
    runtimeInitialized = !1;

function preRun() {
    if (Module.preRun)
        for ("function" == typeof Module.preRun && (Module.preRun = [Module.preRun]); Module.preRun.length;) addOnPreRun(Module.preRun.shift());
    callRuntimeCallbacks(__ATPRERUN__)
}

function ensureInitRuntime() {
    runtimeInitialized || (runtimeInitialized = !0, callRuntimeCallbacks(__ATINIT__))
}

function preMain() {
    callRuntimeCallbacks(__ATMAIN__)
}

function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__)
}

function postRun() {
    if (Module.postRun)
        for ("function" == typeof Module.postRun && (Module.postRun = [Module.postRun]); Module.postRun.length;) addOnPostRun(Module.postRun.shift());
    callRuntimeCallbacks(__ATPOSTRUN__)
}

function addOnPreRun(a) {
    __ATPRERUN__.unshift(a)
}
Module.addOnPreRun = Module.addOnPreRun = addOnPreRun;

function addOnInit(a) {
    __ATINIT__.unshift(a)
}
Module.addOnInit = Module.addOnInit = addOnInit;

function addOnPreMain(a) {
    __ATMAIN__.unshift(a)
}
Module.addOnPreMain = Module.addOnPreMain = addOnPreMain;

function addOnExit(a) {
    __ATEXIT__.unshift(a)
}
Module.addOnExit = Module.addOnExit = addOnExit;

function addOnPostRun(a) {
    __ATPOSTRUN__.unshift(a)
}
Module.addOnPostRun = Module.addOnPostRun = addOnPostRun;

function intArrayFromString(a, f, d) {
    a = (new Runtime.UTF8Processor).processJSString(a);
    d && (a.length = d);
    f || a.push(0);
    return a
}
Module.intArrayFromString = intArrayFromString;

function intArrayToString(a) {
    for (var f = [], d = 0; d < a.length; d++) {
        var c = a[d];
        255 < c && (c &= 255);
        f.push(String.fromCharCode(c))
    }
    return f.join("")
}
Module.intArrayToString = intArrayToString;

function writeStringToMemory(a, f, d) {
    a = intArrayFromString(a, d);
    for (d = 0; d < a.length;) HEAP8[f + d | 0] = a[d], d += 1
}
Module.writeStringToMemory = writeStringToMemory;

function writeArrayToMemory(a, f) {
    for (var d = 0; d < a.length; d++) HEAP8[f + d | 0] = a[d]
}
Module.writeArrayToMemory = writeArrayToMemory;

function writeAsciiToMemory(a, f, d) {
    for (var c = 0; c < a.length; c++) HEAP8[f + c | 0] = a.charCodeAt(c);
    d || (HEAP8[f + a.length | 0] = 0)
}
Module.writeAsciiToMemory = writeAsciiToMemory;

function unSign(a, f) {
    return 0 <= a ? a : 32 >= f ? 2 * Math.abs(1 << f - 1) + a : Math.pow(2, f) + a
}

function reSign(a, f) {
    if (0 >= a) return a;
    var d = 32 >= f ? Math.abs(1 << f - 1) : Math.pow(2, f - 1);
    if (a >= d && (32 >= f || a > d)) a = -2 * d + a;
    return a
}
if (!Math.imul || -5 !== Math.imul(4294967295, 5)) Math.imul = function(a, f) {
    var d = a & 65535,
        c = f & 65535;
    return d * c + ((a >>> 16) * c + d * (f >>> 16) << 16) | 0
};
Math.imul = Math.imul;
var Math_abs = Math.abs,
    Math_cos = Math.cos,
    Math_sin = Math.sin,
    Math_tan = Math.tan,
    Math_acos = Math.acos,
    Math_asin = Math.asin,
    Math_atan = Math.atan,
    Math_atan2 = Math.atan2,
    Math_exp = Math.exp,
    Math_log = Math.log,
    Math_sqrt = Math.sqrt,
    Math_ceil = Math.ceil,
    Math_floor = Math.floor,
    Math_pow = Math.pow,
    Math_imul = Math.imul,
    Math_fround = Math.fround,
    Math_min = Math.min,
    runDependencies = 0,
    runDependencyWatcher = null,
    dependenciesFulfilled = null;

function addRunDependency() {
    runDependencies++;
    Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies)
}
Module.addRunDependency = addRunDependency;

function removeRunDependency() {
    runDependencies--;
    Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies);
    if (0 == runDependencies && (null !== runDependencyWatcher && (clearInterval(runDependencyWatcher), runDependencyWatcher = null), dependenciesFulfilled)) {
        var a = dependenciesFulfilled;
        dependenciesFulfilled = null;
        a()
    }
}
Module.removeRunDependency = removeRunDependency;
Module.preloadedImages = {};
Module.preloadedAudios = {};
var memoryInitializer = null,
    STATIC_BASE = 8,
    STATICTOP = STATIC_BASE + 161488;
__ATINIT__.push({
    func: function() {
        runPostSets()
    }
});
var _stdout;
_stdout = _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
_stdin = _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
_stderr = _stderr = allocate(1, "i32*", ALLOC_STATIC);

var ctlz_i8 = allocate([8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
], "i8", ALLOC_DYNAMIC);



var initAllocate = function() {

allocate([24, 45, 68, 84, 251, 33, 9, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 0, 0, 0, 18, 0, 0, 0, 0, 19, 20, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 31, 32, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 1, 0, 0, 198, 0, 0, 0, 0, 2, 0, 0, 90, 7, 0, 0, 0, 2, 0, 0, 216, 6, 0, 0, 0, 8, 0, 0, 198, 0, 0, 0, 0, 16, 0, 0, 214, 6, 0, 0, 0, 16, 0, 0, 198, 0, 0, 0, 0, 1, 0, 0, 198, 0, 0, 0, 0, 2, 0, 0, 80, 9, 0, 0, 0, 2, 0, 0, 244, 7, 0, 0, 0, 8, 0, 0, 198, 0, 0, 0, 0, 16, 0, 0, 178, 5, 0, 0, 0, 16, 0, 0, 198, 0, 0, 0, 0, 1, 0, 0, 198, 0, 0, 0, 0, 2, 0, 0, 198, 0, 0, 0, 0, 4, 0, 0, 86, 10, 0, 0, 0, 8, 0, 0, 198, 0, 0, 0, 0, 16, 0, 0, 198, 0, 0, 0, 0, 32, 0, 0, 198, 0, 0, 0, 0, 1, 0,
    0, 250, 5, 0, 0, 0, 2, 0, 0, 252, 5, 0, 0, 0, 2, 0, 0, 236, 5, 0, 0, 0, 8, 0, 0, 240, 5, 0, 0, 0, 16, 0, 0, 244, 5, 0, 0, 0, 16, 0, 0, 198, 0, 0, 0, 0, 1, 0, 0, 196, 0, 0, 0, 0, 4, 0, 0, 194, 0, 0, 0, 0, 4, 0, 0, 188, 0, 0, 0, 0, 8, 0, 0, 186, 0, 0, 0, 0, 16, 0, 0, 184, 0, 0, 0, 0, 32, 0, 0, 170, 2, 0, 0, 0, 4, 0, 0, 174, 2, 0, 0, 0, 4, 0, 0, 160, 2, 0, 0, 0, 4, 0, 0, 190, 2, 0, 0, 0, 8, 0, 0, 188, 2, 0, 0, 0, 16, 0, 0, 160, 2, 0, 0, 4, 4, 0, 0, 116, 4, 0, 0, 0, 4, 0, 0, 108, 4, 0, 0, 0, 4, 0, 0, 110, 4, 0, 0, 0, 4, 0, 0, 98, 4, 0, 0, 0, 8, 0, 0, 178, 0, 0, 0, 0, 16, 0, 0, 114, 4, 0, 0, 0, 4, 0, 0, 198, 0, 0, 0, 0, 1, 0, 0, 122, 0, 0, 0, 0, 2, 0, 0, 118, 0, 0, 0, 0, 4, 0, 0, 112, 0, 0, 0, 0, 4, 0, 0, 114, 0, 0,
    0, 0, 16, 0, 0, 104, 0, 0, 0, 0, 32, 0, 0, 18, 10, 0, 0, 0, 1, 0, 0, 156, 5, 0, 0, 0, 4, 0, 0, 154, 5, 0, 0, 0, 4, 0, 0, 176, 6, 0, 0, 0, 8, 0, 0, 168, 5, 0, 0, 0, 16, 0, 0, 160, 5, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 132, 43, 42, 143, 94, 144, 124, 33, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 0, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0,
    2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 162, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 2, 2, 0, 0, 24, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 11, 0, 0, 2, 2, 0, 0, 26, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 9, 0, 0, 2, 2, 0, 0, 130, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 0, 2, 0, 0, 80, 0, 0, 0, 2,
    2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 80, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 9, 0, 0, 2, 2, 0, 0, 166, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 4, 0, 0, 2, 2, 0, 0, 194, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 4, 0, 0, 2, 2, 0, 0, 90, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0,
    0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 0, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 24, 6, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 4, 0, 0, 2, 2, 0, 0, 178, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 8, 0, 0, 2, 2, 0, 0, 22, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 0, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 78, 9, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 0, 0, 2, 2, 0, 0, 64, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 7, 0, 0, 2, 2, 0, 0, 82, 7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 4, 0, 0, 2, 2, 0, 0, 12, 4, 0, 0,
    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 0, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 234, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 6, 0, 0, 2, 2, 0, 0, 152, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 9, 0, 0, 2, 2, 0, 0, 104, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 0, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 120, 7, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 6, 0, 0, 2, 2, 0, 0, 188, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 128, 11, 0, 0, 2, 2, 0, 0, 128, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 6, 0, 0, 2, 2, 0, 0, 90, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 0, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 62, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 3, 0, 0, 2, 2, 0, 0, 48, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 10, 0, 0, 2, 2, 0, 0, 168, 10, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 9, 0, 0, 2, 2, 0, 0, 254, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 0, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 172, 11,
    0, 0, 2, 2, 0, 0, 172, 11, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 6, 0, 0, 2, 2, 0, 0, 208, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 5, 0, 0, 2, 2, 0, 0, 14, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 9, 0, 0, 2, 2, 0, 0, 50, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 0, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0,
    2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 34, 7, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 6, 0, 0, 2, 2, 0, 0, 230, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 1, 0, 0, 2, 2, 0, 0, 70, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2,
    2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 0, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 192, 10, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 11, 0, 0, 2, 2, 0, 0, 30, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 2, 0, 0, 12, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 9, 0, 0, 2, 2, 0, 0, 144, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 0, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 184, 5, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 3, 0, 0, 2, 2, 0, 0, 146, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
    9, 0, 0, 2, 2, 0, 0, 240, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 0, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 254, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 2, 0, 0, 2, 2, 0, 0, 104, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 2, 2, 0, 0, 70, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 0, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 224, 9, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 6, 0, 0, 2, 2, 0, 0, 116, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 8, 0, 0, 2, 2, 0, 0, 236, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 0, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 132, 7, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 12, 0, 0,
    2, 2, 0, 0, 118, 12, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 10, 0, 0, 2, 2, 0, 0, 44, 10, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 0, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2,
    0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 174, 11, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 5, 0, 0, 2, 2, 0, 0, 226, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 2, 2, 0, 0, 78, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 0, 2, 0,
    0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 96, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 5, 0, 0, 2, 2, 0, 0, 62, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 11, 0, 0, 2, 2, 0, 0, 118, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 11, 0, 0, 2, 2, 0, 0, 138, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 12, 0, 0, 0, 1,
    0, 0, 110, 5, 0, 0, 4, 4, 2, 0, 110, 5, 0, 0, 4, 4, 0, 0, 110, 5, 0, 0, 4, 4, 2, 0, 110, 5, 0, 0, 4, 4, 2, 0, 110, 5, 0, 0, 4, 4, 0, 0, 110, 5, 0, 0, 4, 4, 0, 0, 110, 5, 0, 0, 4, 4, 0, 0, 110, 5, 0, 0, 0, 4, 0, 0, 198, 12, 0, 0, 8, 8, 0, 0, 196, 1, 0, 0, 16, 16, 0, 0, 4, 8, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 9, 0, 0, 0, 4, 0, 0, 86, 6, 0, 0, 0, 4, 0, 0, 132, 9, 0, 0, 0, 4, 0, 0, 100, 3, 0, 0, 0, 4, 0, 0, 90, 3, 0, 0, 0, 4, 0, 0, 94, 3, 0, 0, 0, 4, 0, 0, 94, 11, 0, 0, 0, 4, 0, 0, 88, 11, 0, 0, 0, 4, 0, 0, 96, 11, 0, 0, 0, 4, 0, 0, 90, 2, 0, 0, 8, 8, 0, 0, 166, 0, 0, 0, 16, 16, 0, 0, 182, 6, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 8, 0, 0, 4, 4, 0, 0, 18, 8, 0, 0, 4, 4, 0, 0, 18, 8, 0, 0, 0, 4, 0, 0, 8, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 3, 0, 0, 4, 4, 0, 0, 44, 3, 0, 0, 4, 4, 0, 0, 44, 3, 0, 0, 0, 4, 0, 0, 40, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 2, 0, 0, 4, 4, 0, 0, 112, 2, 0, 0, 4, 4, 0, 0, 112, 2, 0, 0, 0, 4, 0, 0, 106, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 10, 0, 0, 0, 1, 0, 0, 148, 0, 0, 0, 0, 2, 0, 0, 144, 0, 0, 0, 0, 4, 0, 0, 124, 3, 0, 0, 0, 2, 0, 0, 128, 3, 0, 0, 0, 2, 0, 0, 122, 3, 0, 0, 0, 4, 0, 0, 164, 7, 0, 0, 0, 4, 0, 0, 172, 7, 0, 0, 0, 4, 0, 0, 168, 7, 0, 0, 0, 4, 0, 0, 130, 4, 0, 0, 8, 8, 0, 0, 196, 3, 0, 0, 16, 16, 0, 0, 214, 8, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 7, 0, 0, 0, 1, 0, 0, 188, 4, 0, 0, 0, 2, 0, 0, 180, 4, 0, 0, 0, 4, 0, 0, 196, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
    3, 0, 0, 0, 1, 0, 0, 222, 4, 0, 0, 0, 2, 0, 0, 76, 9, 0, 0, 0, 4, 0, 0, 52, 9, 0, 0, 0, 8, 0, 0, 54, 9, 0, 0, 0, 16, 0, 0, 62, 9, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 1, 0, 0, 0, 1, 0, 0, 206, 11, 0, 0, 0, 2, 0, 0, 208, 11, 0, 0, 0, 4, 0, 0, 194, 11, 0, 0, 0, 8, 0, 0, 196, 11, 0, 0, 0, 16, 0, 0, 202, 11, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 1, 0, 0, 0, 2, 0, 0, 38, 4, 0, 0, 2, 2, 0, 0, 174, 1, 0, 0, 0, 4, 0, 0, 38, 4, 0, 0, 2, 2, 0, 0, 38, 4, 0, 0, 0, 2, 0, 0, 52, 4, 0, 0, 0, 4, 0, 0, 232, 8, 0, 0, 0, 4, 0, 0, 222, 8, 0, 0, 0, 4, 0, 0, 226, 8, 0, 0, 0, 4, 0, 0, 144, 8, 0, 0, 8, 8, 0, 0, 212, 6, 0, 0, 16, 16, 0, 0, 164, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 2, 0, 0, 210,
    0, 0, 0, 0, 2, 0, 0, 202, 0, 0, 0, 0, 4, 0, 0, 200, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 8, 0, 0, 0, 2, 0, 0, 30, 7, 0, 0, 0, 2, 0, 0, 246, 8, 0, 0, 0, 4, 0, 0, 250, 8, 0, 0, 0, 8, 0, 0, 248, 8, 0, 0, 0, 16, 0, 0, 252, 8, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 10, 0, 0, 0, 2, 0, 0, 146, 10, 0, 0, 0, 2, 0, 0, 148, 10, 0, 0, 0, 4, 0, 0, 156, 10, 0, 0, 0, 8, 0, 0, 154, 10, 0, 0, 0, 16, 0, 0, 160, 10, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 3, 0, 0, 0, 2, 0, 0, 184, 8, 0, 0, 2, 2, 0, 0, 192, 0, 0, 0, 0, 4, 0, 0, 184, 8, 0, 0, 2, 2, 0, 0, 184, 8, 0, 0, 0, 2, 0, 0, 182, 8, 0, 0, 0, 4, 0, 0, 140, 11, 0, 0, 0, 4, 0, 0, 144, 11, 0, 0, 0, 4, 0, 0,
    142, 11, 0, 0, 0, 4, 0, 0, 66, 6, 0, 0, 8, 8, 0, 0, 222, 7, 0, 0, 16, 16, 0, 0, 116, 12, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 0, 2, 0, 0, 130, 1, 0, 0, 0, 2, 0, 0, 118, 1, 0, 0, 0, 4, 0, 0, 134, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 9, 0, 0, 0, 2, 0, 0, 24, 9, 0, 0, 0, 2, 0, 0, 34, 9, 0, 0, 0, 4, 0, 0, 38, 9, 0, 0, 0, 8, 0, 0, 36, 9, 0, 0, 0, 16, 0, 0, 42, 9, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 2, 0, 0, 0, 2, 0, 0, 80, 2, 0, 0, 0, 2, 0, 0, 88, 2, 0, 0, 0, 4, 0, 0, 76, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 5, 0, 0, 0, 1, 0, 0, 158, 5, 0, 0, 0, 1, 0, 0, 152, 5, 0, 0, 0, 1, 0,
    0, 220, 9, 0, 0, 0, 1, 0, 0, 226, 9, 0, 0, 0, 1, 0, 0, 222, 9, 0, 0, 0, 1, 0, 0, 56, 0, 0, 0, 0, 1, 0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 54, 0, 0, 0, 0, 1, 0, 0, 54, 0, 0, 0, 4, 1, 0, 0, 72, 9, 0, 0, 0, 1, 16, 0, 66, 1, 0, 0, 32, 1, 0, 0, 36, 3, 0, 0, 0, 1, 0, 0, 174, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 9, 0, 0, 0, 1, 0, 0, 88, 9, 0, 0, 0, 1, 0, 0, 90, 9, 0, 0, 0, 1, 0, 0, 228, 6, 0, 0, 0, 1, 0, 0, 138, 3, 0, 0, 0, 1, 0, 0, 136, 3, 0, 0, 0, 1, 0, 0, 38, 2, 0, 0, 0, 1, 0, 0, 36, 2, 0, 0, 0, 1, 0, 0, 40, 2, 0, 0, 0, 1, 0, 0, 246, 3, 0, 0, 8, 1, 0, 0, 196, 5, 0, 0, 0, 1, 4, 0, 244, 11, 0, 0, 32, 1, 0, 0, 138, 3, 0, 0, 0, 1, 0, 0, 154, 9, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 12, 0, 0, 0, 1, 0, 0, 128, 12, 0, 0, 0, 1, 0, 0, 124, 12, 0, 0, 0, 1, 0, 0, 248, 7, 0, 0, 0, 1, 0, 0, 252, 7, 0, 0, 0, 1, 0, 0, 250, 7, 0, 0, 0, 1, 0, 0, 168, 12, 0, 0, 0, 1, 0, 0, 172, 10, 0, 0, 0, 1, 0, 0, 188, 10, 0, 0, 0, 1, 0, 0, 188, 10, 0, 0, 4, 1, 0, 0, 234, 8, 0, 0, 0, 1, 8, 0, 16, 4, 0, 0, 32, 1, 0, 0, 66, 2, 0, 0, 0, 1, 0, 0, 178, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 5, 0, 0, 0, 1, 0, 0, 36, 6, 0, 0, 0, 4, 0, 0, 44, 6, 0, 0, 0, 4, 0, 0, 204, 8, 0, 0, 0, 2, 0, 0, 202, 8, 0, 0, 0, 4, 0, 0, 230, 10, 0, 0, 0, 4, 0, 0, 254, 0, 0, 0, 0, 4, 0, 0, 240, 0, 0, 0, 0, 4, 0, 0, 246, 0, 0, 0, 0, 4, 0, 0, 158, 0, 0, 0, 8, 8, 0, 0, 100, 11, 0, 0, 16, 16, 0, 0, 64, 5, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 202, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 5, 0, 0, 0, 1, 0, 0, 190, 0, 0, 0, 2, 2, 0, 0, 194, 3, 0, 0, 4, 4, 0, 0, 190, 0, 0, 0, 2, 2, 0, 0, 190, 0, 0, 0, 0, 2, 0, 0, 132, 3, 0, 0, 0, 2, 0, 0, 194, 3, 0, 0, 4, 4, 0, 0, 194, 3, 0, 0, 4, 4, 0, 0, 194, 3, 0, 0, 0, 4, 0, 0, 216, 10, 0, 0, 8, 8, 0, 0, 150, 12, 0, 0, 16, 16, 0, 0, 60, 6, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 6, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 10, 0, 0, 0, 1, 0, 0, 144, 7, 0, 0, 0, 2, 0, 0, 142, 7, 0, 0, 0, 4, 0, 0, 78, 1, 0, 0, 0, 2, 0, 0, 80, 1, 0, 0, 0, 2, 0, 0, 76, 1, 0, 0, 0, 4, 0, 0, 16, 6, 0, 0, 0, 4, 0, 0, 28, 6, 0, 0, 0, 4, 0, 0, 12, 6, 0, 0, 0, 4, 0, 0, 12, 6, 0, 0, 4, 4, 0, 0, 232, 3, 0,
    0, 16, 16, 0, 0, 204, 10, 0, 0, 32, 32, 0, 0, 104, 8, 0, 0, 0, 64, 0, 0, 134, 7, 0, 0, 0, 1, 0, 0, 42, 0, 0, 0, 0, 2, 0, 0, 46, 0, 0, 0, 0, 4, 0, 0, 46, 0, 0, 0, 4, 4, 0, 0, 30, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 64, 0, 0, 104, 3, 0, 0, 0, 1, 0, 0, 218, 3, 0, 0, 0, 2, 0, 0, 216, 3, 0, 0, 0, 4, 0, 0, 216, 3, 0, 0, 4, 4, 0, 0, 208, 3, 0, 0, 0, 16, 0, 0, 206, 3, 0, 0, 0, 32, 0, 0, 204, 3, 0, 0, 0, 64, 0, 0, 176, 1, 0, 0, 0, 1, 0, 0, 242, 5, 0, 0, 0, 2, 0, 0, 100, 7, 0, 0, 0, 4, 0, 0, 100, 7, 0, 0, 4, 4, 0, 0, 174, 9, 0, 0, 0, 16, 0, 0, 248, 5, 0, 0, 0, 32, 0, 0, 246, 5, 0, 0, 0, 64, 0, 0, 212, 12, 0, 0, 0, 1, 0, 0, 214, 12, 0, 0, 0, 1, 0, 0, 206, 12, 0, 0, 0, 1, 0, 0, 236, 9, 0, 0, 0, 1,
    0, 0, 238, 9, 0, 0, 0, 1, 0, 0, 230, 9, 0, 0, 0, 1, 0, 0, 126, 5, 0, 0, 0, 1, 0, 0, 128, 5, 0, 0, 0, 1, 0, 0, 124, 5, 0, 0, 0, 1, 0, 0, 124, 5, 0, 0, 4, 1, 0, 0, 136, 10, 0, 0, 0, 1, 8, 0, 80, 4, 0, 0, 32, 1, 0, 0, 166, 2, 0, 0, 0, 1, 0, 0, 84, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 134, 5, 0, 0, 0, 1, 0, 0, 124, 11, 0, 0, 0, 2, 0, 0, 126, 11, 0, 0, 0, 4, 0, 0, 68, 3, 0, 0, 0, 2, 0, 0, 64, 3, 0, 0, 0, 2, 0, 0, 66, 3, 0, 0, 0, 4, 0, 0, 168, 0, 0, 0, 0, 4, 0, 0, 162, 0, 0, 0, 0, 4, 0, 0, 170, 0, 0, 0, 0, 4, 0, 0, 170, 0, 0, 0, 4, 4, 0, 0, 188, 5, 0, 0, 16, 16, 0, 0, 90, 10, 0, 0, 32, 32, 0, 0, 248, 11, 0, 0, 0, 64, 0, 0, 218, 5, 0, 0, 0, 1, 0, 0, 64, 9, 0, 0, 0, 2, 0, 0, 248, 4, 0, 0, 0, 4, 0, 0, 248, 4, 0, 0, 4, 4, 0, 0, 168, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 9, 0, 0, 0, 64, 0, 0, 112, 10, 0, 0, 0, 1, 0, 0, 68, 4, 0, 0, 0, 2, 0, 0, 70, 4, 0, 0, 0, 4, 0, 0, 70, 4, 0, 0, 4, 4, 0, 0, 60, 4, 0, 0, 0, 16, 0, 0, 62, 4, 0, 0, 0, 32, 0, 0, 64, 4, 0, 0, 0, 64, 0, 0, 58, 4, 0, 0,
    0, 1, 0, 0, 156, 4, 0, 0, 0, 2, 0, 0, 154, 4, 0, 0, 0, 4, 0, 0, 154, 4, 0, 0, 4, 4, 0, 0, 152, 4, 0, 0, 0, 16, 0, 0, 140, 4, 0, 0, 0, 32, 0, 0, 142, 4, 0, 0, 0, 64, 0, 0, 90, 5, 0, 0, 0, 1, 0, 0, 80, 5, 0, 0, 0, 1, 0, 0, 84, 5, 0, 0, 0, 1, 0, 0, 194, 8, 0, 0, 0, 1, 0, 0, 158, 8, 0, 0, 0, 1, 0, 0, 252, 9, 0, 0, 0, 1, 0, 0, 240, 6, 0, 0, 0, 1, 0, 0, 238, 6, 0, 0, 0, 1, 0, 0, 242, 6, 0, 0, 0, 1, 0, 0, 242, 6, 0, 0, 4, 1, 0, 0, 122, 11, 0, 0, 0, 1, 16, 0, 42, 4, 0, 0, 32, 1, 0, 0, 34, 6, 0, 0, 0, 1, 0, 0, 134, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 5, 0, 0, 0, 1, 0, 0, 114, 3, 0, 0, 2, 2, 0, 0, 102, 2, 0, 0, 4, 4, 0, 0, 114, 3, 0, 0, 2, 2, 0, 0, 114, 3, 0, 0, 0, 2, 0, 0, 102, 2, 0, 0, 4, 4, 0, 0, 102, 2, 0, 0, 4, 4, 0, 0, 102, 2, 0, 0, 4, 4, 0, 0, 102, 2, 0, 0, 0, 4, 0, 0, 56, 10, 0, 0, 8, 8, 0, 0, 26, 6, 0, 0, 16, 16, 0, 0, 86, 12, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 10, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 11, 0, 0, 0, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 24, 11, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
    2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 10, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 10, 0, 0, 0, 1, 0, 0, 154, 2, 0, 0, 2, 2, 0, 0, 146, 5, 0, 0, 4, 4, 0, 0, 154, 2, 0, 0, 2, 2, 0, 0, 154, 2, 0, 0, 0, 2, 0, 0, 146, 5, 0, 0, 4, 4, 0, 0, 146, 5, 0, 0, 4, 4, 0, 0, 146, 5, 0, 0, 4, 4, 0, 0, 146, 5, 0, 0, 0, 4, 0, 0,
    60, 0, 0, 0, 8, 8, 0, 0, 252, 1, 0, 0, 16, 16, 0, 0, 124, 6, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 8, 0, 0, 0, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1,
    0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 190, 8, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 6, 0, 0, 0, 1
         ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




allocate([122, 6, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 1, 0, 0, 12, 1, 0, 0, 0, 1, 0, 0, 6, 1, 0, 0, 0, 1, 0, 0, 48, 7, 0, 0, 0, 1, 0, 0, 58, 7, 0, 0, 0, 1, 0, 0, 54, 7, 0, 0, 0, 1, 0, 0, 26, 8, 0, 0, 0, 1, 0, 0, 28, 8, 0, 0, 0, 1, 0, 0, 24, 8, 0, 0, 0, 1, 0, 0, 102, 6, 0, 0, 8, 1, 0, 0, 172, 4, 0, 0, 0, 1, 4, 0, 20, 11, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 12, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 94, 10, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 120, 0, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 126, 6, 0, 0, 8, 8, 1, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 12, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 89, 64, 0, 0, 0, 0, 0, 64, 143, 64, 0, 0, 0, 0, 0, 136, 195, 64, 0, 0, 0, 0, 0, 106, 248, 64, 0, 0, 0, 0, 128, 132, 46, 65, 0, 0, 0, 0, 208, 18, 99, 65, 0, 0, 0, 0, 132, 215, 151, 65, 0, 0, 0, 0, 101, 205, 205, 65, 0, 0, 0, 32, 95, 160, 2, 66, 0, 0, 0, 232, 118, 72, 55, 66, 0, 0, 0, 162,
    148, 26, 109, 66, 0, 0, 64, 229, 156, 48, 162, 66, 0, 0, 144, 30, 196, 188, 214, 66, 0, 0, 52, 38, 245, 107, 12, 67, 0, 128, 224, 55, 121, 195, 65, 67, 0, 160, 216, 133, 87, 52, 118, 67, 0, 200, 78, 103, 109, 193, 171, 67, 0, 61, 145, 96, 228, 88, 225, 67, 64, 140, 181, 120, 29, 175, 21, 68, 80, 239, 226, 214, 228, 26, 75, 68, 146, 213, 77, 6, 207, 240, 128, 68, 138, 130, 42, 136, 132, 61, 149, 139, 137, 60, 131, 62, 133, 0, 0, 0, 1, 2, 0, 0, 2, 2, 3, 2, 2, 2, 6, 2, 1, 2, 1, 2, 7, 2, 1, 1, 0, 1, 2, 1, 3, 1, 2, 1, 6, 1, 1, 0, 1, 0, 7, 1, 1, 1, 0, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 1, 0, 7, 1, 1, 1, 0, 1, 2, 0, 2, 0, 4, 0, 2, 0, 1, 0, 1, 0, 7, 1, 1, 1, 0, 1, 2, 0, 2, 0, 2, 0, 2,
    0, 5, 0, 1, 0, 7, 1, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 1, 0, 1, 0, 9, 0, 1, 1, 0, 1, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 1, 0, 7, 1, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 8, 0, 1, 1, 0, 1, 2, 1, 3, 1, 2, 1, 6, 1, 1, 1, 1, 1, 7, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 0, 0, 0, 0, 61, 60, 62, 95, 43, 42, 45, 37, 94, 36, 126, 124, 46, 58, 44, 59, 35, 64, 47, 92, 91, 93, 123, 125, 96, 34, 38, 33, 63, 97, 65, 98, 99, 67, 100, 68, 101, 69, 102, 72, 105, 73, 106, 76, 109, 77, 110, 111, 112, 113, 114, 115, 83, 116, 84, 117, 118, 120, 121, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 128, 130, 132, 1, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 180,
    164, 166, 168, 170, 172, 174, 178, 176, 182, 162, 184, 186, 187, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 1, 216, 1, 1, 219, 221, 222, 224, 225, 227, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 129, 131, 133, 232, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 181, 165, 167, 169, 171, 173, 175, 179, 177, 183, 163, 185, 188, 1, 1, 1, 1, 1, 195, 1, 1, 1, 1, 202, 1, 1, 207, 1, 1, 1, 1, 213, 215, 1, 217, 218, 220, 1, 223, 1, 226, 1, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 0, 0, 0, 0, 0, 0, 0, 235, 237, 239, 238, 0, 123, 125, 112, 38, 0, 58, 58, 46, 46, 0, 58, 58, 46, 58, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 157, 91, 93, 151, 150, 172, 174, 165, 167, 36, 35, 201, 202, 196, 123, 141, 61, 60, 130, 131, 62, 132, 133, 43, 136, 137, 42, 138, 139, 45, 37, 94, 149, 124, 33, 211, 0, 0, 0, 44, 157, 91, 93, 151, 150, 172, 174, 165, 167, 60, 149, 173, 175, 47, 92, 166, 156, 213, 180, 0, 0, 0, 0, 130, 131, 132, 133, 43, 136, 137, 42, 138, 139, 45, 140, 141, 37,
    143, 94, 144, 124, 33, 91, 93, 63, 200, 205, 211, 213, 215, 216, 219, 226, 0, 0, 87, 112, 112, 0, 171, 75, 236, 0, 115, 95, 108, 1, 3, 49, 239, 1, 23, 20, 116, 2, 45, 161, 250, 2, 145, 135, 130, 3, 75, 149, 11, 4, 5, 174, 149, 4, 125, 175, 32, 5, 101, 120, 172, 5, 39, 242, 56, 6, 29, 35, 198, 6, 197, 16, 84, 7, 233, 97, 226, 7, 19, 108, 113, 8, 13, 211, 0, 9, 195, 191, 144, 9, 231, 24, 33, 10, 179, 205, 177, 10, 201, 13, 67, 11, 193, 188, 212, 11, 7, 171, 102, 12, 143, 0, 249, 12, 197, 159, 139, 13, 147, 158, 30, 14, 87, 209, 177, 14, 213, 89, 69, 15, 181, 48, 217, 15, 67, 100, 109, 16, 35, 224, 1, 17, 81, 125, 150, 17, 197, 110, 43, 18, 43, 133,
    192, 18, 91, 15, 86, 19, 67, 181, 235, 19, 135, 132, 129, 20, 243, 152, 23, 21, 211, 238, 173, 21, 199, 127, 68, 22, 163, 238, 218, 22, 23, 239, 113, 23, 151, 10, 9, 24, 123, 76, 160, 24, 149, 204, 55, 25, 253, 108, 207, 25, 77, 36, 103, 26, 173, 43, 255, 26, 217, 78, 151, 27, 129, 155, 47, 28, 49, 15, 200, 28, 63, 180, 96, 29, 31, 148, 249, 29, 145, 166, 146, 30, 149, 190, 43, 31, 209, 240, 196, 31, 213, 82, 94, 32, 101, 183, 247, 32, 247, 108, 145, 33, 169, 62, 43, 34, 107, 35, 197, 34, 69, 52, 95, 35, 109, 68, 249, 35, 169, 147, 147, 36, 149, 37, 46, 37, 95, 179, 200, 37, 93, 99, 99, 38, 141, 31, 254, 38, 129, 1, 153, 39, 127, 37, 52,
    40, 85, 104, 207, 40, 51, 136, 106, 41, 31, 236, 5, 42, 141, 122, 161, 42, 123, 9, 61, 43, 157, 221, 216, 43, 65, 169, 116, 44, 155, 163, 16, 45, 63, 214, 172, 45, 219, 237, 72, 46, 201, 3, 229, 46, 173, 78, 129, 47, 5, 157, 29, 48, 253, 31, 186, 48, 95, 206, 86, 49, 47, 128, 243, 49, 129, 93, 144, 50, 85, 48, 45, 51, 7, 59, 202, 51, 57, 99, 103, 52, 183, 158, 4, 53, 83, 0, 162, 53, 171, 55, 63, 54, 239, 125, 220, 54, 245, 45, 122, 55, 83, 205, 23, 56, 219, 136, 181, 56, 205, 31, 83, 57, 51, 244, 240, 57, 251, 5, 143, 58, 69, 244, 44, 59, 213, 12, 203, 59, 165, 46, 105, 60, 127, 97, 7, 61, 25, 185, 165, 61, 43, 6, 68, 62, 229, 162, 226, 62, 83,
    57, 129, 63, 155, 198, 31, 64, 5, 97, 190, 64, 95, 28, 93, 65, 79, 239, 251, 65, 17, 217, 154, 66, 219, 240, 57, 67, 11, 42, 217, 67, 233, 96, 120, 68, 25, 130, 23, 69, 233, 192, 182, 69, 215, 2, 86, 70, 51, 130, 245, 70, 105, 9, 149, 71, 75, 148, 52, 72, 93, 39, 212, 72, 13, 232, 115, 73, 183, 197, 19, 74, 49, 101, 179, 74, 229, 79, 83, 75, 103, 33, 243, 75, 115, 33, 147, 76, 219, 56, 51, 77, 201, 95, 211, 77, 113, 143, 115, 78, 107, 204, 19, 79, 7, 252, 179, 79, 107, 76, 84, 80, 101, 158, 244, 80, 177, 21, 149, 81, 221, 198, 53, 82, 211, 116, 214, 82, 217, 246, 118, 83, 235, 200, 23, 84, 21, 124, 184, 84, 59, 78, 89, 85, 193, 85, 250, 85,
    49, 47, 155, 86, 195, 19, 60, 87, 17, 69, 221, 87, 227, 68, 126, 88, 215, 36, 31, 89, 67, 85, 192, 89, 33, 177, 97, 90, 33, 251, 2, 91, 157, 75, 164, 91, 131, 189, 69, 92, 19, 50, 231, 92, 59, 220, 136, 93, 165, 88, 42, 94, 127, 249, 203, 94, 17, 162, 109, 95, 207, 109, 15, 96, 119, 44, 177, 96, 155, 250, 82, 97, 31, 191, 244, 97, 111, 222, 150, 98, 3, 236, 56, 99, 39, 242, 218, 99, 235, 250, 124, 100, 11, 250, 30, 101, 227, 32, 193, 101, 113, 74, 99, 102, 87, 142, 5, 103, 115, 252, 167, 103, 39, 85, 74, 104, 199, 173, 236, 104, 43, 40, 143, 105, 19, 158, 49, 106, 253, 33, 212, 106, 117, 149, 118, 107, 197, 59, 25, 108, 43, 5, 188, 108,
    61, 188, 94, 109, 5, 111, 1, 110, 19, 89, 164, 110, 195, 66, 71, 111, 5, 51, 234, 111, 215, 55, 141, 112, 43, 32, 48, 113, 193, 36, 211, 113, 101, 73, 118, 114, 119, 105, 25, 115, 37, 168, 188, 115, 121, 180, 95, 116, 105, 254, 2, 117, 61, 60, 166, 117, 111, 116, 73, 118, 101, 206, 236, 118, 227, 28, 144, 119, 243, 100, 51, 120, 1, 249, 214, 120, 127, 141, 122, 121, 135, 35, 30, 122, 185, 198, 193, 122, 169, 124, 101, 123, 83, 41, 9, 124, 145, 217, 172, 124, 191, 136, 80, 125, 135, 47, 244, 125, 171, 20, 152, 126, 191, 50, 60, 127, 203, 15, 224, 127, 53, 0, 0, 0, 113, 0, 0, 0, 241, 0, 0, 0, 243, 1, 0, 0, 245, 3, 0, 0, 237, 7, 0, 0, 239, 15,
    0, 0, 243, 31, 0, 0, 241, 63, 0, 0, 237, 127, 0, 0, 241, 255, 0, 0, 243, 255, 1, 0, 245, 255, 3, 0, 237, 255, 7, 0, 239, 255, 15, 0, 237, 255, 31, 0, 239, 255, 63, 0, 241, 255, 127, 0, 239, 255, 255, 0, 217, 255, 255, 1, 229, 255, 255, 3, 217, 255, 255, 7, 199, 255, 255, 15, 223, 255, 255, 31, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 49, 56, 33, 58, 52, 32, 60, 39, 39, 122, 39, 39, 10, 40, 57, 33, 58, 55, 41, 32, 40, 49, 54, 43, 105, 46, 49, 49, 41, 32, 123, 32, 97, 46, 10, 39, 39, 84, 65, 66, 32, 76, 70, 32, 70, 70, 32, 67, 82, 32, 68, 69, 76, 32, 69, 65, 86, 39, 39, 61, 58, 32, 57, 32, 49, 48, 32, 49, 50, 32, 49, 51, 32, 49, 50, 55, 32, 50, 53, 53, 123,
    97, 46, 10, 76, 70, 50, 61, 58, 32, 76, 70, 44, 76, 70, 10, 67, 82, 76, 70, 61, 58, 32, 67, 82, 44, 76, 70, 10, 69, 77, 80, 84, 89, 61, 58, 32, 105, 46, 48, 32, 48, 10, 68, 101, 98, 117, 103, 61, 58, 32, 48, 10, 39, 39, 110, 111, 117, 110, 32, 97, 100, 118, 101, 114, 98, 32, 99, 111, 110, 106, 117, 110, 99, 116, 105, 111, 110, 32, 118, 101, 114, 98, 32, 109, 111, 110, 97, 100, 32, 100, 121, 97, 100, 39, 39, 61, 58, 32, 48, 32, 49, 32, 50, 32, 51, 32, 51, 32, 52, 10, 97, 112, 112, 108, 121, 61, 58, 32, 49, 50, 56, 33, 58, 50, 10, 100, 101, 102, 61, 58, 32, 58, 10, 100, 101, 102, 105, 110, 101, 61, 58, 32, 58, 32, 48, 10, 100, 111, 61, 58, 32, 34,
    46, 10, 100, 114, 111, 112, 61, 58, 32, 125, 46, 10, 101, 97, 99, 104, 61, 58, 32, 38, 46, 62, 10, 101, 99, 104, 111, 61, 58, 32, 48, 32, 48, 38, 36, 32, 64, 32, 40, 49, 33, 58, 50, 38, 50, 41, 10, 101, 120, 105, 116, 61, 58, 32, 50, 33, 58, 53, 53, 10, 101, 118, 101, 114, 121, 61, 58, 32, 38, 62, 10, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 97, 98, 108, 101, 61, 58, 32, 49, 32, 58, 32, 48, 126, 10, 58, 10, 40, 40, 40, 35, 126, 76, 70, 45, 46, 64, 101, 46, 93, 41, 53, 33, 58, 53, 60, 39, 39, 117, 39, 39, 41, 59, 44, 46, 121, 41, 44, 46, 40, 123, 46, 59, 125, 46, 41, 34, 58, 120, 44, 121, 32, 117, 47, 120, 10, 41, 10, 105, 116, 101, 109, 115, 61, 58, 32, 34, 95, 49, 10, 102, 101, 116, 99, 104, 61, 58, 32, 123, 58, 58, 10, 108, 101, 97, 102, 61, 58, 32, 76, 58, 48, 10, 110, 97, 109, 101, 99, 108, 97, 115, 115, 61,
    58, 32, 110, 99, 61, 58, 32, 52, 33, 58, 48, 10, 110, 97, 109, 101, 108, 105, 115, 116, 61, 58, 32, 52, 33, 58, 49, 10, 111, 110, 61, 58, 32, 64, 58, 10, 112, 105, 99, 107, 61, 58, 32, 62, 64, 123, 10, 114, 111, 119, 115, 61, 58, 32, 34, 49, 10, 115, 116, 100, 111, 117, 116, 61, 58, 32, 49, 33, 58, 50, 38, 52, 10, 115, 116, 100, 101, 114, 114, 61, 58, 32, 49, 33, 58, 50, 38, 53, 10, 115, 116, 100, 105, 110, 61, 58, 32, 49, 33, 58, 49, 64, 51, 58, 32, 58, 46, 32, 115, 116, 100, 111, 117, 116, 10, 115, 105, 103, 110, 61, 58, 32, 42, 10, 115, 111, 114, 116, 61, 58, 32, 47, 58, 126, 32, 58, 32, 47, 58, 10, 116, 97, 107, 101, 61, 58, 32, 123, 46,
    10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 97, 115, 115, 101, 114,
    116, 61, 58, 32, 48, 32, 48, 32, 36, 32, 49, 51, 33, 58, 56, 94, 58, 40, 40, 48, 32, 101, 46, 32, 93, 41, 96, 40, 49, 50, 34, 95, 41, 41, 10, 98, 105, 110, 100, 61, 58, 32, 50, 32, 58, 32, 39, 39, 120, 64, 40, 121, 34, 95, 41, 39, 39, 10, 98, 111, 120, 111, 112, 101, 110, 61, 58, 32, 60, 94, 58, 40, 76, 46, 61, 48, 58, 41, 10, 98, 111, 120, 120, 111, 112, 101, 110, 61, 58, 32, 60, 94, 58, 40, 76, 46, 60, 42, 64, 35, 41, 10, 99, 108, 101, 97, 114, 61, 58, 32, 51, 32, 58, 32, 48, 10, 34, 46, 32, 39, 39, 100, 111, 95, 39, 39, 44, 40, 39, 39, 32, 39, 39, 45, 46, 126, 121, 41, 44, 39, 39, 95, 32, 39, 39, 39, 39, 32, 40, 35, 126, 32, 45, 46, 64, 40, 52, 33,
    58, 53, 53, 41, 41, 32, 40, 52, 33, 58, 49, 41, 32, 48, 32, 49, 32, 50, 32, 51, 39, 39, 39, 39, 39, 39, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 117, 116, 76, 70, 61, 58, 32, 51, 32, 58, 32, 39, 39, 105, 102, 46, 32, 76, 46, 32, 121, 32, 100, 111, 46, 32, 121, 32, 101, 108, 115, 101, 46, 32, 97, 58, 32, 45, 46, 126, 32, 60, 59, 46, 95, 50, 32, 121, 44, 76, 70, 32, 101, 110, 100, 46, 39, 39, 10, 99, 117, 116, 111, 112, 101, 110, 61, 58, 32, 51, 32, 58, 32, 48, 10, 121, 32, 99, 117, 116, 111, 112, 101, 110, 126, 32, 40,
    39, 39, 32, 39, 39, 44, 76, 70, 41, 32, 123, 126, 32, 76, 70, 32, 101, 46, 32, 44, 121, 10, 58, 10, 105, 102, 46, 32, 76, 46, 32, 121, 32, 100, 111, 46, 32, 121, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 49, 32, 60, 32, 35, 36, 121, 32, 100, 111, 46, 32, 60, 34, 95, 49, 32, 121, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 40, 60, 39, 39, 39, 39, 41, 32, 45, 46, 126, 32, 40, 121, 32, 101, 46, 120, 41, 32, 60, 59, 46, 95, 50, 32, 121, 61, 46, 32, 121, 44, 49, 123, 46, 120, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 100,
    97, 116, 97, 116, 121, 112, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 110, 61, 46, 32, 49, 32, 50, 32, 52, 32, 56, 32, 49, 54, 32, 51, 50, 32, 54, 52, 32, 49, 50, 56, 32, 49, 48, 50, 52, 32, 50, 48, 52, 56, 32, 52, 48, 57, 54, 32, 56, 49, 57, 50, 32, 49, 54, 51, 56, 52, 32, 51, 50, 55, 54, 56, 32, 54, 53, 53, 51, 54, 32, 49, 51, 49, 48, 55, 50, 10, 116, 61, 46, 32, 39, 39, 47, 98, 111, 111, 108, 101, 97, 110, 47, 108, 105, 116, 101, 114, 97, 108, 47, 105, 110, 116, 101, 103, 101, 114, 47, 102, 108, 111, 97, 116, 105, 110, 103, 47, 99, 111, 109, 112, 108, 101, 120, 47, 98, 111, 120, 101, 100, 47, 101, 120, 116, 101, 110, 100, 101, 100, 47, 114,
    97, 116, 105, 111, 110, 97, 108, 39, 39, 10, 116, 61, 46, 32, 116, 44, 39, 39, 47, 115, 112, 97, 114, 115, 101, 32, 98, 111, 111, 108, 101, 97, 110, 47, 115, 112, 97, 114, 115, 101, 32, 108, 105, 116, 101, 114, 97, 108, 47, 115, 112, 97, 114, 115, 101, 32, 105, 110, 116, 101, 103, 101, 114, 47, 115, 112, 97, 114, 115, 101, 32, 102, 108, 111, 97, 116, 105, 110, 103, 39, 39, 10, 116, 61, 46, 32, 116, 44, 39, 39, 47, 115, 112, 97, 114, 115, 101, 32, 99, 111, 109, 112, 108, 101, 120, 47, 115, 112, 97, 114, 115, 101, 32, 98, 111, 120, 101, 100, 47, 115, 121, 109, 98, 111, 108, 47, 117, 110, 105, 99, 111, 100, 101, 39, 39, 10, 40, 110, 32,
    105, 46, 32, 51, 33, 58, 48, 32, 121, 41, 32, 112, 105, 99, 107, 32, 60, 59, 46, 95, 49, 32, 116, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 101, 109, 112, 116, 121, 61, 58, 32, 69, 77, 80, 84,
    89, 34, 95, 10, 101, 114, 97, 115, 101, 61, 58, 32, 91, 58, 32, 52, 33, 58, 53, 53, 32, 59, 58, 32, 58, 58, 93, 10, 101, 120, 112, 97, 110, 100, 61, 58, 32, 35, 32, 105, 110, 118, 101, 114, 115, 101, 10, 72, 61, 46, 32, 39, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 39, 39, 10, 104, 61, 46, 32, 39, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 39, 39, 10, 100, 102, 104, 61, 58, 32, 49, 54, 32, 35, 46, 32, 49, 54, 32, 124, 32, 40, 72, 44, 104, 41, 32, 105, 46, 32, 93, 10, 104, 102, 100, 61, 58, 32, 104, 32, 123, 126, 32, 49, 54, 32, 35, 46, 94, 58, 95, 49, 32, 93, 10, 105, 115, 117, 116, 102, 56, 61,
    58, 32, 49, 58, 64, 40, 55, 38, 117, 58, 41, 32, 58, 58, 32, 48, 58, 10, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 108, 105, 115, 116, 61, 58, 32, 51, 32, 58, 32, 48, 10, 119, 61, 46, 32, 123, 46, 119, 99, 115, 105, 122, 101, 39, 39, 39, 39, 10, 119, 32, 108, 105, 115, 116, 32, 121, 10, 58, 10, 105, 102, 46, 32, 48, 61, 35, 121, 32, 100, 111, 46, 32, 105, 46, 48, 32, 48, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 50, 62, 35, 36, 121, 61, 46, 32, 62, 121, 32, 100, 111, 46,
    10, 32, 32, 100, 61, 46, 32, 40, 39, 39, 32, 39, 39, 44, 76, 70, 41, 32, 123, 126, 32, 76, 70, 32, 101, 46, 32, 121, 61, 46, 32, 116, 111, 74, 32, 34, 58, 32, 121, 10, 32, 32, 121, 61, 46, 32, 91, 59, 46, 95, 50, 32, 121, 44, 32, 100, 32, 35, 126, 32, 100, 32, 126, 58, 32, 123, 58, 32, 121, 10, 101, 110, 100, 46, 10, 121, 61, 46, 32, 121, 45, 46, 32, 39, 39, 32, 39, 39, 123, 46, 126, 32, 99, 61, 46, 32, 123, 58, 36, 32, 121, 61, 46, 32, 40, 34, 58, 32, 121, 41, 44, 46, 39, 39, 32, 39, 39, 10, 40, 45, 32, 49, 62, 46, 32, 60, 46, 32, 120, 32, 37, 32, 99, 41, 32, 59, 92, 32, 60, 34, 49, 32, 121, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 110,
    108, 61, 58, 32, 51, 32, 58, 32, 48, 10, 39, 39, 39, 39, 32, 110, 108, 32, 121, 10, 58, 10, 105, 102, 46, 32, 48, 32, 101, 46, 32, 35, 121, 32, 100, 111, 46, 32, 121, 61, 46, 32, 48, 32, 49, 32, 50, 32, 51, 32, 101, 110, 100, 46, 10, 10, 105, 102, 46, 32, 49, 32, 52, 32, 56, 32, 101, 46, 126, 32, 51, 33, 58, 48, 32, 121, 32, 100, 111, 46, 10, 32, 32, 110, 109, 115, 61, 46, 32, 40, 52, 33, 58, 49, 32, 121, 41, 32, 45, 46, 32, 59, 58, 32, 39, 39, 120, 32, 121, 32, 120, 46, 32, 121, 46, 39, 39, 10, 101, 108, 115, 101, 46, 10, 32, 32, 110, 109, 115, 61, 46, 32, 99, 117, 116, 111, 112, 101, 110, 95, 122, 95, 32, 121, 10, 101, 110, 100, 46, 10, 10, 105,
    102, 46, 32, 48, 32, 101, 46, 32, 35, 110, 109, 115, 32, 100, 111, 46, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 10, 105, 102, 46, 32, 35, 116, 61, 46, 32, 120, 32, 45, 46, 32, 39, 39, 32, 39, 39, 32, 100, 111, 46, 10, 32, 32, 39, 39, 110, 32, 115, 39, 39, 61, 46, 32, 39, 39, 126, 42, 39, 39, 32, 101, 46, 32, 116, 10, 32, 32, 116, 61, 46, 32, 116, 32, 45, 46, 32, 39, 39, 126, 42, 39, 39, 10, 32, 32, 98, 61, 46, 32, 116, 38, 69, 46, 32, 38, 62, 32, 110, 109, 115, 10, 32, 32, 105, 102, 46, 32, 115, 32, 100, 111, 46, 32, 98, 61, 46, 32, 43, 46, 47, 34, 49, 32, 98, 10, 32, 32, 101, 108, 115, 101, 46, 32, 98, 61, 46, 32, 123, 46,
    34, 49, 32, 98, 32, 101, 110, 100, 46, 10, 32, 32, 110, 109, 115, 61, 46, 32, 110, 109, 115, 32, 35, 126, 32, 110, 32, 126, 58, 32, 98, 10, 101, 110, 100, 46, 10, 41, 10, 10, 39
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 10264);
allocate([40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 110, 97, 109, 101, 115, 61, 58, 32, 108, 105, 115, 116, 95, 122, 95, 32, 64, 32, 110, 108, 10, 78, 111, 116, 101, 61, 58, 32, 51, 32, 58, 32, 39, 39, 48, 32, 48, 32, 36, 32, 48, 32, 58, 32, 48, 39, 39, 32, 58, 32, 91, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 105, 109, 101, 120, 61, 58, 32, 54, 33, 58, 50, 10, 116, 105, 109, 101, 115, 112, 97, 99, 101, 120, 61, 58, 32, 54, 33, 58, 50, 32, 44, 32, 55, 33, 58, 50, 64, 93, 10, 116, 111, 108, 111, 119, 101, 114, 61, 58, 32, 51, 32, 58, 32, 48, 10, 120, 61, 46, 32, 73, 46, 32, 50, 54, 32, 62, 32, 110, 61, 46, 32, 40, 40, 54, 53, 43, 105, 46, 50, 54, 41, 123, 97, 46, 41, 32, 105, 46, 32, 116, 61, 46, 32, 44, 121, 10, 40, 36, 121, 41, 32, 36, 32, 40, 40, 120, 123, 110, 41, 32, 123, 32, 40, 57, 55, 43, 105, 46, 50,
    54, 41, 123, 97, 46, 41, 32, 120, 125, 116, 10, 41, 10, 10, 116, 111, 117, 112, 112, 101, 114, 61, 58, 32, 51, 32, 58, 32, 48, 10, 120, 61, 46, 32, 73, 46, 32, 50, 54, 32, 62, 32, 110, 61, 46, 32, 40, 40, 57, 55, 43, 105, 46, 50, 54, 41, 123, 97, 46, 41, 32, 105, 46, 32, 116, 61, 46, 32, 44, 121, 10, 40, 36, 121, 41, 32, 36, 32, 40, 40, 120, 123, 110, 41, 32, 123, 32, 40, 54, 53, 43, 105, 46, 50, 54, 41, 123, 97, 46, 41, 32, 120, 125, 116, 10, 41, 10, 116, 61, 46, 32, 60, 59, 46, 95, 49, 32, 39, 39, 47, 105, 110, 118, 97, 108, 105, 100, 32, 110, 97, 109, 101, 47, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 47, 110, 111, 117, 110, 47,
    97, 100, 118, 101, 114, 98, 47, 99, 111, 110, 106, 117, 110, 99, 116, 105, 111, 110, 47, 118, 101, 114, 98, 47, 117, 110, 107, 110, 111, 119, 110, 39, 39, 10, 116, 121, 112, 101, 61, 58, 32, 123, 38, 116, 64, 40, 50, 38, 43, 41, 64, 40, 52, 33, 58, 48, 41, 38, 98, 111, 120, 111, 112, 101, 110, 10, 117, 99, 112, 61, 58, 32, 55, 38, 117, 58, 10, 117, 99, 112, 99, 111, 117, 110, 116, 61, 58, 32, 35, 32, 64, 32, 40, 55, 38, 117, 58, 41, 10, 10, 117, 116, 102, 56, 61, 58, 32, 56, 38, 117, 58, 10, 117, 117, 99, 112, 61, 58, 32, 117, 58, 64, 40, 55, 38, 117, 58, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 99, 108, 97, 115, 115, 61, 58, 32, 49, 56, 33, 58, 52, 32, 64, 32, 98, 111, 120, 120, 111, 112, 101, 110, 10, 99, 111, 99, 114, 101, 97, 116, 101, 61, 58, 32, 49, 56, 33, 58, 51, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 61, 58, 32, 49, 56, 33, 58, 52, 32, 64, 32, 98, 111, 120, 120, 111, 112, 101, 110, 10, 99, 111, 100, 101, 115, 116, 114, 111, 121, 61, 58, 32, 99, 111, 101, 114, 97, 115, 101, 32, 64, 32, 99, 111, 110, 97, 109, 101, 10,
    99, 111, 101, 114, 97, 115, 101, 61, 58, 32, 49, 56, 33, 58, 53, 53, 10, 99, 111, 102, 117, 108, 108, 110, 97, 109, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 121, 61, 46, 32, 44, 62, 32, 121, 10, 105, 102, 46, 32, 35, 121, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 40, 39, 39, 95, 39, 39, 32, 61, 32, 123, 58, 32, 121, 41, 32, 43, 58, 32, 49, 32, 101, 46, 32, 39, 39, 95, 95, 39, 39, 32, 69, 46, 32, 121, 32, 100, 111, 46, 10, 32, 32, 32, 32, 121, 44, 39, 39, 95, 39, 39, 44, 40, 62, 49, 56, 33, 58, 53, 39, 39, 39, 39, 41, 44, 39, 39, 95, 39, 39, 10, 32, 32, 101, 110, 100, 46, 10, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 105, 110, 115,
    101, 114, 116, 61, 58, 32, 51, 32, 58, 32, 48, 10, 110, 61, 46, 32, 59, 58, 32, 58, 58, 32, 93, 32, 121, 10, 112, 61, 46, 32, 59, 32, 40, 44, 32, 49, 56, 33, 58, 50, 41, 32, 64, 32, 60, 32, 101, 97, 99, 104, 32, 110, 10, 112, 61, 46, 32, 126, 46, 32, 40, 49, 56, 33, 58, 50, 32, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 41, 44, 32, 112, 10, 40, 112, 32, 47, 58, 32, 112, 32, 61, 32, 60, 44, 39, 39, 122, 39, 39, 41, 32, 49, 56, 33, 58, 50, 32, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 10, 41, 10, 99, 111, 110, 97, 109, 101, 61, 58, 32, 49, 56, 33, 58, 53, 10, 99, 111, 110, 97, 109, 101, 115, 61, 58, 32, 108, 105, 115, 116, 95, 122, 95, 32, 64, 32,
    99, 111, 110, 108, 10, 99, 111, 110, 101, 119, 61, 58, 32, 51, 32, 58, 32, 48, 10, 99, 61, 46, 32, 60, 121, 10, 111, 98, 106, 61, 46, 32, 99, 111, 99, 114, 101, 97, 116, 101, 39, 39, 39, 39, 10, 99, 111, 105, 110, 115, 101, 114, 116, 95, 95, 111, 98, 106, 32, 99, 10, 67, 79, 67, 82, 69, 65, 84, 79, 82, 95, 95, 111, 98, 106, 61, 58, 32, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 10, 111, 98, 106, 10, 58, 10, 119, 61, 46, 32, 99, 111, 110, 101, 119, 32, 121, 10, 99, 114, 101, 97, 116, 101, 95, 95, 119, 32, 120, 10, 119, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 110, 108, 61, 58, 32, 49, 56, 33, 58, 49, 32, 64, 32, 40, 44, 32, 48, 32, 49, 34, 95, 32, 35, 126, 32, 35, 32, 61, 32, 48, 58, 41, 10, 99, 111, 112, 97, 116, 104, 61, 58, 32, 49, 56, 33,
    58, 50, 32, 38, 32, 98, 111, 120, 120, 111, 112, 101, 110, 10, 99, 111, 114, 101, 115, 101, 116, 61, 58, 32, 51, 32, 58, 32, 48, 10, 32, 32, 101, 120, 99, 61, 46, 32, 39, 39, 39, 39, 10, 48, 32, 48, 36, 99, 111, 101, 114, 97, 115, 101, 32, 40, 99, 111, 110, 108, 32, 49, 41, 32, 45, 46, 32, 101, 120, 99, 10, 41, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 99, 111, 102, 105, 110, 100, 61, 58, 32, 51, 32, 58, 32, 48, 10, 114, 61, 46, 32, 40, 60, 44, 62, 121, 41, 32, 40, 52, 32, 58, 32, 39, 39, 116, 114, 121, 46, 32, 120, 32, 101, 46, 32, 110, 108, 95, 95, 121, 32, 36, 48, 32, 99, 97, 116, 99, 104, 46, 32, 48, 32, 101,
    110, 100, 46, 39, 39, 34, 48, 32, 35, 32, 93, 41, 32, 49, 56, 33, 58, 49, 93, 48, 32, 49, 10, 105, 102, 46, 32, 48, 61, 35, 114, 32, 100, 111, 46, 32, 105, 46, 48, 32, 50, 32, 101, 110, 100, 46, 10, 41, 10, 10, 99, 111, 102, 105, 110, 100, 118, 61, 58, 32, 51, 32, 58, 32, 48, 10, 108, 99, 115, 61, 46, 32, 99, 111, 102, 105, 110, 100, 32, 121, 10, 105, 102, 46, 32, 35, 108, 99, 115, 32, 100, 111, 46, 10, 32, 32, 108, 99, 115, 32, 44, 46, 32, 34, 46, 32, 101, 97, 99, 104, 32, 40, 60, 121, 44, 39, 39, 95, 39, 39, 41, 32, 44, 101, 97, 99, 104, 32, 108, 99, 115, 32, 44, 101, 97, 99, 104, 32, 39, 39, 95, 39, 39, 10, 101, 110, 100, 46, 10, 41, 10, 39,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 105, 110, 102, 111, 61, 58, 32, 51, 32, 58, 32, 48, 10, 114, 101, 102, 61, 46, 32, 98, 111, 120, 120, 111, 112, 101, 110, 32, 121, 10, 105, 102, 46, 32, 48, 32, 101, 46, 32, 36, 114, 101, 102, 32, 100, 111, 46, 32, 105, 46, 48, 32, 52, 32, 114,
    101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 48, 61, 52, 33, 58, 48, 32, 60, 39, 39, 67, 79, 67, 82, 69, 65, 84, 79, 82, 95, 95, 114, 101, 102, 39, 39, 10, 100, 111, 46, 32, 99, 61, 46, 32, 67, 79, 67, 82, 69, 65, 84, 79, 82, 95, 95, 114, 101, 102, 32, 101, 108, 115, 101, 46, 32, 99, 61, 46, 32, 97, 58, 32, 101, 110, 100, 46, 10, 40, 99, 111, 110, 111, 117, 110, 115, 32, 114, 101, 102, 41, 44, 114, 101, 102, 44, 99, 44, 60, 32, 59, 58, 105, 110, 118, 101, 114, 115, 101, 32, 99, 111, 112, 97, 116, 104, 32, 114, 101, 102, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 110, 111, 117, 110, 115, 61, 58, 32, 51, 32, 58, 32, 48, 32, 34, 48, 10, 110, 61, 46, 32, 110, 108, 32, 48, 10, 116, 61, 46, 32, 110, 35, 126, 32, 40, 60, 121, 41, 45, 58, 38, 62, 32, 34, 46, 101, 97, 99, 104, 32, 110, 10, 60, 32, 59, 58, 32, 105, 110, 118, 101, 114, 115, 101, 32, 116, 10, 41, 10, 99, 111, 110, 111, 117, 110, 115, 120, 61, 58, 32, 51, 32, 58, 32, 48, 10, 114, 61, 46, 32, 39, 39, 39, 39, 10, 105, 102, 46, 32, 35, 121, 32, 100, 111, 46, 10, 32, 32, 115, 61, 46, 32, 35, 121, 61, 46, 32, 98, 111, 120, 120, 111, 112, 101, 110, 32, 121,
    10, 32, 32, 108, 111, 99, 61, 46, 32, 99, 111, 110, 108, 32, 48, 10, 32, 32, 102, 111, 114, 95, 105, 46, 32, 108, 111, 99, 32, 100, 111, 46, 32, 114, 61, 46, 32, 114, 44, 99, 111, 110, 111, 117, 110, 115, 95, 95, 105, 32, 121, 32, 101, 110, 100, 46, 10, 32, 32, 114, 61, 46, 32, 40, 114, 126, 58, 97, 58, 41, 32, 35, 32, 40, 121, 36, 126, 35, 114, 41, 44, 46, 114, 44, 46, 115, 35, 108, 111, 99, 10, 101, 110, 100, 46, 10, 47, 58, 126, 126, 46, 114, 10, 41, 10, 99, 111, 112, 97, 116, 104, 110, 108, 61, 58, 32, 51, 32, 58, 32, 48, 10, 39, 39, 39, 39, 32, 99, 111, 112, 97, 116, 104, 110, 108, 32, 121, 10, 58, 10, 114, 61, 46, 32, 39, 39, 39, 39, 10,
    116, 61, 46, 32, 40, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 41, 44, 99, 111, 112, 97, 116, 104, 32, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 10, 102, 111, 114, 95, 105, 46, 32, 116, 32, 45, 46, 32, 60, 44, 39, 39, 122, 39, 39, 32, 100, 111, 46, 10, 32, 32, 114, 61, 46, 32, 114, 44, 120, 32, 110, 108, 95, 95, 105, 32, 121, 10, 101, 110, 100, 46, 10, 47, 58, 126, 126, 46, 114, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 112, 97, 116, 104, 110, 108, 120, 61, 58, 32, 51, 32, 58, 32, 48, 10, 39, 39, 39, 39, 32, 99, 111, 112, 97, 116, 104, 110, 108, 120, 32, 121, 10, 58, 10, 114, 61, 46, 32, 39, 39, 39, 39, 10, 116, 61, 46, 32, 40, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 41, 44, 99, 111, 112, 97, 116, 104, 32, 99, 111, 110, 97, 109, 101, 39, 39, 39, 39, 10, 102, 111, 114, 95, 105, 46, 32, 116, 61, 46, 32, 116, 32, 45, 46, 32, 60, 44, 39, 39, 122, 39, 39, 32, 100, 111, 46, 10, 32, 32, 114, 61, 46, 32, 114, 44, 60, 120, 32, 110, 108, 95, 95, 105, 32, 121, 10,
    101, 110, 100, 46, 10, 110, 61, 46, 32, 126, 46, 59, 114, 10, 110, 44, 46, 124, 58, 40, 32, 110, 38, 101, 46, 32, 38, 62, 32, 114, 41, 32, 35, 101, 97, 99, 104, 32, 116, 10, 41, 10, 99, 111, 115, 101, 108, 101, 99, 116, 95, 114, 101, 115, 117, 108, 116, 61, 58, 32, 51, 32, 58, 32, 48, 10, 39, 39, 114, 32, 120, 32, 115, 39, 39, 61, 46, 32, 121, 10, 105, 102, 46, 32, 114, 32, 100, 111, 46, 10, 32, 32, 114, 117, 110, 105, 109, 109, 120, 48, 95, 106, 105, 106, 115, 95, 32, 39, 39, 49, 56, 33, 58, 52, 32, 60, 39, 39, 39, 39, 39, 39, 44, 115, 44, 39, 39, 39, 39, 39, 39, 39, 39, 10, 101, 110, 100, 46, 10, 101, 109, 112, 116, 121, 39, 39, 39, 39, 10,
    41, 10, 99, 111, 115, 116, 97, 116, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 114, 61, 46, 32, 44, 58, 32, 59, 58, 39, 39, 114, 101, 102, 115, 32, 105, 100, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 116, 104, 39, 39, 10, 105, 102, 46, 32, 35, 110, 61, 46, 32, 99, 111, 110, 108, 32, 49, 32, 100, 111, 46, 32, 114, 44, 99, 111, 105, 110, 102, 111, 32, 38, 62, 32, 110, 32, 47, 58, 32, 48, 32, 34, 46, 38, 62, 32, 110, 32, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 99, 100, 61, 58, 32, 49, 53, 33, 58, 48, 10, 109, 101, 109, 114, 61, 58, 32, 49, 53, 33, 58, 49, 10, 109, 101, 109, 119, 61, 58, 32, 49, 53, 33, 58, 50, 10, 109, 101, 109, 97, 61, 58, 32, 49, 53, 33, 58, 51, 10, 109, 101, 109, 102, 61, 58, 32, 49, 53, 33, 58, 52, 10, 99, 100, 102, 61, 58, 32, 49, 53, 33, 58, 53, 10, 99, 100, 101, 114, 61, 58, 32, 49, 53, 33, 58, 49, 48, 10, 99, 100, 101, 114, 120, 61, 58, 32, 49, 53, 33, 58, 49, 49, 10, 103, 104, 61, 46,
    32, 49, 53, 33, 58, 56, 10, 102, 104, 61, 46, 32, 49, 53, 33, 58, 57, 10, 115, 121, 109, 103, 101, 116, 61, 58, 32, 49, 53, 33, 58, 54, 10, 115, 121, 109, 115, 101, 116, 61, 58, 32, 49, 53, 33, 58, 55, 10, 99, 100, 99, 98, 61, 58, 32, 49, 53, 33, 58, 49, 51, 10, 74, 66, 48, 49, 61, 58, 32, 49, 10, 74, 67, 72, 65, 82, 61, 58, 32, 50, 10, 74, 83, 84, 82, 61, 58, 32, 95, 49, 44, 74, 67, 72, 65, 82, 10, 74, 73, 78, 84, 61, 58, 32, 52, 10, 74, 80, 84, 82, 61, 58, 32, 74, 73, 78, 84, 10, 74, 70, 76, 61, 58, 32, 56, 10, 74, 67, 77, 80, 88, 61, 58, 32, 49, 54, 10, 74, 66, 79, 88, 69, 68, 61, 58, 32, 51, 50, 10, 74, 84, 89, 80, 69, 83, 61, 58, 32, 74, 66, 48, 49,
    44, 74, 67, 72, 65, 82, 44, 74, 73, 78, 84, 44, 74, 80, 84, 82, 44, 74, 70, 76, 44, 74, 67, 77, 80, 88, 44, 74, 66, 79, 88, 69, 68, 10, 74, 83, 73, 90, 69, 83, 61, 58, 32, 49, 32, 49, 32, 52, 32, 52, 32, 56, 32, 49, 54, 32, 52, 10, 105, 99, 61, 58, 32, 51, 33, 58, 52, 10, 102, 99, 61, 58, 32, 51, 33, 58, 53, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49,
    49, 48, 41, 32, 39, 101, 110, 100, 105, 97, 110, 61, 58, 32, 124, 46, 94, 58, 40, 39, 39, 97, 39, 39, 61, 123, 46, 50, 32, 105, 99, 32, 97, 46, 105, 46, 39, 39, 97, 39, 39, 41, 10, 69, 110, 100, 105, 97, 110, 61, 58, 32, 124, 46, 94, 58, 40, 39, 39, 97, 39, 39, 126, 58, 123, 46, 50, 32, 105, 99, 32, 97, 46, 105, 46, 39, 39, 97, 39, 39, 41, 10, 65, 78, 68, 61, 58, 32, 36, 58, 47, 32, 58, 32, 40, 49, 55, 32, 98, 46, 41, 10, 79, 82, 61, 58, 32, 36, 58, 47, 32, 58, 32, 40, 50, 51, 32, 98, 46, 41, 10, 88, 79, 82, 61, 58, 32, 36, 58, 47, 32, 58, 32, 40, 50, 50, 32, 98, 46, 41, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 10, 99,
    111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 97, 108, 101, 110, 100, 97, 114, 61, 58, 32, 51, 32, 58, 32, 48, 10, 48, 32, 99, 97, 108, 101, 110, 100, 97, 114, 32, 121, 10, 58, 10, 97, 61, 46, 32, 40, 40, 106, 60, 49, 48, 48, 41, 42, 40, 45, 49, 48, 48, 38, 124, 41, 123, 46, 54, 33, 58, 48, 39, 39, 39, 39, 41, 43, 106, 61, 46, 32, 123, 46, 121, 10, 98, 61, 46, 32, 40, 97, 45, 120, 41, 43, 45, 47, 60, 46, 52,
    32, 49, 48, 48, 32, 52, 48, 48, 37, 126, 60, 58, 97, 10, 114, 61, 46, 32, 50, 56, 43, 51, 44, 40, 126, 58, 47, 48, 61, 52, 32, 49, 48, 48, 32, 52, 48, 48, 124, 97, 41, 44, 49, 48, 36, 53, 36, 51, 32, 50, 10, 114, 61, 46, 32, 40, 45, 55, 124, 98, 43, 48, 44, 43, 47, 92, 125, 58, 114, 41, 124, 46, 34, 48, 32, 49, 32, 114, 40, 93, 38, 58, 62, 58, 42, 34, 49, 62, 47, 41, 105, 46, 52, 50, 10, 109, 61, 46, 32, 40, 60, 58, 125, 46, 121, 41, 44, 105, 46, 49, 50, 42, 49, 61, 35, 121, 10, 104, 61, 46, 32, 39, 39, 74, 97, 110, 70, 101, 98, 77, 97, 114, 65, 112, 114, 77, 97, 121, 74, 117, 110, 74
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 20632);
allocate([117, 108, 65, 117, 103, 83, 101, 112, 79, 99, 116, 78, 111, 118, 68, 101, 99, 39, 39, 10, 104, 61, 46, 32, 40, 40, 120, 42, 51, 41, 124, 46, 39, 39, 32, 83, 117, 32, 77, 111, 32, 84, 117, 32, 87, 101, 32, 84, 104, 32, 70, 114, 32, 83, 97, 39, 39, 41, 44, 58, 34, 49, 126, 95, 51, 40, 95, 49, 50, 38, 123, 46, 41, 92, 104, 10, 60, 34, 50, 32, 109, 123, 104, 44, 34, 50, 91, 49, 50, 32, 54, 32, 50, 49, 32, 40, 36, 44, 41, 32, 114, 123, 39, 39, 32, 39, 39, 44, 51, 34, 58, 49, 43, 105, 46, 51, 49, 32, 49, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 103, 101, 116, 100, 97, 116, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 48, 32, 103, 101, 116, 100, 97, 116, 101, 32, 121, 10, 58, 10, 114, 61, 46, 32, 39, 39, 39, 39, 10, 111, 112, 116, 61, 46, 32, 120, 10, 99, 104, 114, 61, 46, 32, 91, 58, 32, 45, 46, 32, 91, 58, 32, 42, 46, 47, 32, 101, 46, 38, 39, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 39, 39, 10, 100, 97, 116, 61, 46, 32,
    39, 39, 32, 39, 39, 32, 40, 73, 46, 32, 121, 32, 101, 46, 39, 39, 44, 45, 47, 58, 39, 39, 41, 32, 125, 32, 121, 10, 10, 105, 102, 46, 32, 99, 104, 114, 32, 100, 97, 116, 32, 100, 111, 46, 10, 32, 32, 111, 112, 116, 61, 46, 32, 48, 10, 32, 32, 100, 97, 116, 61, 46, 32, 97, 58, 32, 45, 46, 126, 32, 60, 59, 46, 95, 49, 32, 39, 39, 32, 39, 39, 44, 100, 97, 116, 10, 32, 32, 105, 102, 46, 32, 49, 61, 35, 100, 97, 116, 32, 100, 111, 46, 32, 114, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 32, 32, 116, 121, 112, 61, 46, 32, 99, 104, 114, 32, 38, 62, 32, 100, 97, 116, 10, 32, 32, 100, 97, 116, 61, 46, 32, 40, 50, 123, 46, 116, 121,
    112, 123, 100, 97, 116, 41, 44, 123, 58, 100, 97, 116, 10, 32, 32, 109, 116, 104, 61, 46, 32, 51, 123, 46, 62, 49, 123, 100, 97, 116, 10, 32, 32, 117, 99, 61, 46, 32, 39, 39, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 39, 39, 10, 32, 32, 108, 99, 61, 46, 32, 39, 39, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 39, 39, 10, 32, 32, 109, 116, 104, 61, 46, 32, 40, 108, 99, 44, 97, 46, 41, 32, 123, 126, 32, 109, 116, 104, 32, 105, 46, 126, 32, 117, 99, 44, 97, 46, 10, 32, 32, 109, 111, 115, 61, 46, 32, 95,
    51, 91, 92, 39, 39, 106, 97, 110, 102, 101, 98, 109, 97, 114, 97, 112, 114, 109, 97, 121, 106, 117, 110, 106, 117, 108, 97, 117, 103, 115, 101, 112, 111, 99, 116, 110, 111, 118, 100, 101, 99, 39, 39, 10, 32, 32, 109, 116, 104, 61, 46, 32, 60, 34, 58, 32, 62, 58, 109, 111, 115, 32, 105, 46, 32, 109, 116, 104, 10, 32, 32, 100, 97, 116, 61, 46, 32, 59, 39, 39, 32, 39, 39, 44, 101, 97, 99, 104, 32, 109, 116, 104, 32, 49, 32, 125, 32, 100, 97, 116, 10, 101, 110, 100, 46, 10, 10, 100, 97, 116, 61, 46, 32, 34, 46, 32, 58, 58, 32, 40, 39, 39, 39, 39, 34, 95, 41, 32, 100, 97, 116, 10, 105, 102, 46, 32, 48, 32, 101, 46, 32, 35, 100, 97, 116, 32, 100,
    111, 46, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 10, 105, 102, 46, 32, 51, 32, 126, 58, 32, 35, 100, 97, 116, 32, 100, 111, 46, 32, 114, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 10, 105, 102, 46, 32, 51, 49, 32, 60, 32, 123, 46, 100, 97, 116, 32, 100, 111, 46, 32, 39, 39, 121, 32, 109, 32, 100, 39, 39, 61, 46, 32, 100, 97, 116, 10, 101, 108, 115, 101, 46, 32, 40, 40, 111, 112, 116, 124, 46, 39, 39, 100, 32, 109, 32, 39, 39, 41, 44, 39, 39, 32, 121, 39, 39, 41, 61, 46, 32, 100, 97, 116, 10, 101, 110, 100, 46, 10, 10, 105, 102, 46, 32, 121, 60, 49, 48, 48, 32, 100, 111, 46, 10, 32, 32, 121, 61,
    46, 32, 121, 32, 43, 32, 40, 45, 49, 48, 48, 38, 124, 41, 32, 123, 46, 32, 54, 33, 58, 48, 39, 39, 39, 39, 10, 101, 110, 100, 46, 10, 10, 40, 35, 126, 32, 118, 97, 108, 100, 97, 116, 101, 41, 32, 121, 44, 109, 44, 100, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 105, 115, 111, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 58, 32, 51, 32, 58, 32, 48, 10, 114, 61, 46, 32, 125, 58, 32, 36, 121, 10, 116, 61, 46, 32, 95, 54, 32, 91, 92, 32, 44, 32, 54, 32, 123, 46, 34, 49, 32, 121, 10, 100, 61, 46, 32, 39, 39, 45, 45, 98, 58, 58, 39, 39, 32, 52, 32, 55, 32, 49, 48, 32, 49, 51, 32, 49, 54, 32, 125, 34, 49, 32, 91, 32, 52, 32, 51, 32, 51, 32, 51,
    32, 51, 32, 51, 32, 34, 58, 32, 60, 46, 116, 10, 100, 61, 46, 32, 100, 32, 44, 46, 32, 125, 46, 34, 49, 32, 91, 32, 48, 106, 51, 32, 34, 58, 32, 44, 46, 32, 49, 32, 124, 32, 123, 58, 34, 49, 32, 116, 10, 99, 61, 46, 32, 123, 58, 32, 36, 100, 10, 100, 61, 46, 32, 44, 100, 10, 100, 61, 46, 32, 39, 39, 48, 39, 39, 32, 40, 73, 46, 32, 100, 61, 39, 39, 32, 39, 39, 41, 125, 32, 100, 10, 100, 61, 46, 32, 39, 39, 32, 39, 39, 32, 40, 73, 46, 32, 100, 61, 39, 39, 98, 39, 39, 41, 125, 32, 100, 10, 40, 114, 44, 99, 41, 32, 36, 32, 100, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 111, 100, 97, 116, 101, 61, 58,
    32, 51, 32, 58, 32, 48, 10, 48, 32, 116, 111, 100, 97, 116, 101, 32, 121, 10, 58, 10, 115, 61, 46, 32, 36, 121, 10, 97, 61, 46, 32, 54, 53, 55, 51, 55, 55, 46, 55, 53, 32, 43, 44, 32, 121, 10, 100, 61, 46, 32, 60, 46, 32, 97, 32, 45, 32, 51, 54, 53, 50, 52, 46, 50, 53, 32, 42, 32, 99, 61, 46, 32, 60, 46, 32, 97, 32, 37, 32, 51, 54, 53, 50, 52, 46, 50, 53, 10, 100, 61, 46, 32, 60, 46, 49, 46, 55, 53, 32, 43, 32, 100, 32, 45, 32, 51, 54, 53, 46, 50, 53, 32, 42, 32, 121, 61, 46, 32, 60, 46, 32, 40, 100, 43, 48, 46, 55, 53, 41, 32, 37, 32, 51, 54, 53, 46, 50, 53, 10, 114, 61, 46, 32, 40, 49, 43, 49, 50, 124, 109, 43, 50, 41, 32, 44, 58, 32, 60, 46, 32, 48, 46,
    52, 49, 43, 100, 45, 51, 48, 46, 54, 42, 32, 109, 61, 46, 32, 60, 46, 32, 40, 100, 45, 48, 46, 53, 57, 41, 32, 37, 32, 51, 48, 46, 54, 10, 114, 61, 46, 32, 115, 32, 36, 32, 124, 58, 32, 40, 40, 99, 42, 49, 48, 48, 41, 43, 121, 43, 109, 32, 62, 58, 32, 49, 48, 41, 32, 44, 114, 10, 105, 102, 46, 32, 120, 32, 100, 111, 46, 32, 114, 61, 46, 32, 49, 48, 48, 32, 35, 46, 32, 114, 32, 101, 110, 100, 46, 10, 114, 10, 41, 10, 116, 111, 100, 97, 121, 110, 111, 61, 58, 32, 51, 32, 58, 32, 48, 10, 48, 32, 116, 111, 100, 97, 121, 110, 111, 32, 121, 10, 58, 10, 97, 61, 46, 32, 121, 10, 105, 102, 46, 32, 120, 32, 100, 111, 46, 32, 97, 61, 46, 32, 48, 32, 49, 48,
    48, 32, 49, 48, 48, 32, 35, 58, 32, 97, 32, 101, 110, 100, 46, 10, 97, 61, 46, 32, 40, 40, 42, 47, 114, 61, 46, 32, 125, 58, 32, 36, 97, 41, 32, 44, 32, 123, 58, 36, 97, 41, 32, 36, 44, 97, 10, 39, 39, 121, 32, 109, 32, 100, 39, 39, 61, 46, 32, 60, 34, 95, 49, 32, 124, 58, 32, 97, 10, 121, 61, 46, 32, 48, 32, 49, 48, 48, 32, 35, 58, 32, 121, 32, 45, 32, 109, 32, 60, 58, 32, 50, 10, 110, 61, 46, 32, 43, 47, 32, 124, 58, 32, 60, 46, 32, 51, 54, 53, 50, 52, 46, 50, 53, 32, 51, 54, 53, 46, 50, 53, 32, 42, 34, 49, 32, 121, 10, 110, 61, 46, 32, 110, 32, 43, 32, 60, 46, 32, 48, 46, 52, 49, 32, 43, 32, 48, 32, 51, 48, 46, 54, 32, 35, 46, 32, 40, 49, 50, 32, 124,
    32, 109, 45, 51, 41, 44, 34, 48, 32, 100, 10, 48, 32, 62, 46, 32, 114, 32, 36, 32, 110, 32, 45, 32, 54, 53, 55, 51, 55, 56, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 115, 100, 105, 102, 102, 61, 58, 32, 52, 32, 58, 32, 48, 10, 114, 61, 46, 32, 45, 47, 34, 50, 32, 100, 61, 46, 32, 95, 54, 32, 40, 95, 51, 38, 40, 91, 92, 41, 41, 32, 92, 32, 44, 120, 44, 34, 49, 32, 121, 10, 105, 102, 46, 32, 35, 105, 61, 46, 32, 105, 35, 105, 46, 35, 105, 61, 46, 32, 48, 32, 62, 32, 50, 123, 34, 49, 32, 114, 32, 100, 111, 46, 10, 32, 32, 106, 61, 46, 32, 40, 45, 47, 48, 61, 52, 32, 49, 48, 48, 32, 52, 48, 48, 32, 124, 47, 32, 40, 60, 105, 59, 49, 59, 48, 41, 123, 100, 41, 42, 32, 50, 61, 109, 61, 46, 32, 40, 60, 105, 59, 49, 59, 49,
    41, 123, 100, 10, 32, 32, 106, 61, 46, 32, 95, 49, 44, 46, 106, 32, 43, 32, 109, 123, 48, 32, 51, 49, 32, 50, 56, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 48, 32, 51, 49, 10, 32, 32, 110, 61, 46, 32, 60, 105, 59, 49, 32, 50, 10, 32, 32, 114, 61, 46, 32, 40, 106, 32, 43, 32, 110, 123, 114, 41, 32, 110, 32, 125, 32, 114, 10, 101, 110, 100, 46, 10, 114, 32, 43, 47, 32, 46, 32, 37, 32, 49, 32, 49, 50, 32, 51, 54, 53, 10, 41, 10, 116, 115, 114, 101, 112, 61, 58, 32, 51, 32, 58, 32, 48, 10, 48, 32, 116, 115, 114, 101, 112, 32, 121, 10, 58, 10, 105, 102, 46, 32, 120, 32, 100, 111, 46, 10, 32,
    32, 114, 61, 46, 32, 36, 121, 10, 32, 32, 39, 39, 119, 32, 110, 32, 116, 39, 39, 61, 46, 32, 124, 58, 32, 48, 32, 56, 54, 52, 48, 48, 32, 49, 48, 48, 48, 32, 35, 58, 32, 44, 121, 10, 32, 32, 119, 61, 46, 32, 119, 32, 43, 32, 54, 53, 55, 51, 55, 55, 46, 55, 53, 10, 32, 32, 100, 61, 46, 32, 60, 46, 32, 119, 32, 45, 32, 51, 54, 53, 50, 52, 46, 50, 53, 32, 42, 32, 99, 61, 46, 32, 60, 46, 32, 119, 32, 37, 32, 51, 54, 53, 50, 52, 46, 50, 53, 10, 32, 32, 100, 61, 46, 32, 60, 46, 49, 46, 55, 53, 32, 43, 32, 100, 32, 45, 32, 51, 54, 53, 46, 50, 53, 32, 42, 32, 119, 61, 46, 32, 60, 46, 32, 40, 100, 43, 48, 46, 55, 53, 41, 32, 37, 32, 51, 54, 53, 46, 50, 53, 10, 32,
    32, 115, 61, 46, 32, 40, 49, 43, 49, 50, 124, 109, 43, 50, 41, 32, 44, 58, 32, 60, 46, 32, 48, 46, 52, 49, 43, 100, 45, 51, 48, 46, 54, 42, 32, 109, 61, 46, 32, 60, 46, 32, 40, 100, 45, 48, 46, 53, 57, 41, 32, 37, 32, 51, 48, 46, 54, 10, 32, 32, 115, 61, 46, 32, 124, 58, 32, 40, 40, 99, 42, 49, 48, 48, 41, 43, 119, 43, 109, 32, 62, 58, 32, 49, 48, 41, 32, 44, 115, 10, 32, 32, 114, 32, 36, 32, 115, 44, 46, 32, 40, 95, 51, 123, 46, 32, 38, 62, 32, 116, 37, 49, 48, 48, 48, 41, 32, 43, 34, 49, 32, 91, 32, 48, 32, 54, 48, 32, 54, 48, 32, 35, 58, 32, 110, 10, 101, 108, 115, 101, 46, 10, 32, 32, 97, 61, 46, 32, 40, 40, 42, 47, 114, 61, 46, 32, 125, 58, 32, 36,
    121, 41, 32, 44, 32, 123, 58, 36, 121, 41, 32, 36, 44, 32, 121, 10, 32, 32, 39, 39, 119, 32, 109, 32, 100, 39, 39, 61, 46, 32, 60, 34, 95, 49, 32, 124, 58, 32, 51, 123, 46, 34, 49, 32, 97, 10, 32, 32, 119, 61, 46, 32, 48, 32, 49, 48, 48, 32, 35, 58, 32, 119, 32, 45, 32, 109, 32, 60, 58, 32, 50, 10, 32, 32, 110, 61, 46, 32, 43, 47, 32, 124, 58, 32, 60, 46, 32, 51, 54, 53, 50, 52, 46, 50, 53, 32, 51, 54, 53, 46, 50, 53, 32, 42, 34, 49, 32, 119, 10, 32, 32, 110, 61, 46, 32, 110, 32, 43, 32, 60, 46, 32, 48, 46, 52, 49, 32, 43, 32, 48, 32, 51, 48, 46, 54, 32, 35, 46, 32, 40, 49, 50, 32, 124, 32, 109, 45, 51, 41, 44, 34, 48, 32, 100, 10, 32, 32, 115, 61, 46,
    32, 51, 54, 48, 48, 48, 48, 48, 32, 54, 48, 48, 48, 48, 32, 49, 48, 48, 48, 32, 43, 47, 32, 46, 42, 34, 49, 32, 91, 32, 51, 125, 46, 34, 49, 32, 97, 10, 32, 32, 114, 32, 36, 32, 115, 43, 56, 54, 52, 48, 48, 48, 48, 48, 32, 42, 32, 110, 32, 45, 32, 54, 53, 55, 51, 55, 56, 10, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 58, 32, 51, 32, 58, 32, 48, 10, 105, 102, 46, 32, 48, 32, 61, 32, 35, 121, 32, 100, 111, 46, 32, 119, 61, 46, 32, 54, 33, 58, 48, 39, 39, 39, 39, 32, 101, 108, 115, 101, 46, 32, 119, 61, 46, 32, 121, 32, 101, 110, 100, 46, 10, 114, 61, 46, 32, 125, 58, 32, 36, 32, 119, 10, 116, 61, 46, 32, 50, 32, 49, 32, 48, 32, 51, 32, 52, 32, 53, 32, 123, 34, 49, 32, 91, 32, 95, 54, 32, 91, 92, 32, 44, 32, 54, 32, 123, 46, 34, 49, 32, 60, 46, 32, 119, 10, 100, 61, 46, 32, 39, 39, 43, 43, 43, 58, 58, 39, 39, 32, 50, 32, 54, 32, 49, 49, 32, 49, 52, 32,
    49, 55, 32, 125, 34, 49, 32, 91, 32, 50, 32, 52, 32, 53, 32, 51, 32, 51, 32, 51, 32, 34, 58, 32, 116, 10, 109, 116, 104, 61, 46, 32, 95, 51, 91, 92, 39, 39, 32, 32, 32, 74, 97, 110, 70, 101, 98, 77, 97, 114, 65, 112, 114, 77, 97, 121, 74, 117, 110, 74, 117, 108, 65, 117, 103, 83, 101, 112, 79, 99, 116, 78, 111, 118, 68, 101, 99, 39, 39, 10, 100, 61, 46, 32, 44, 40, 40, 49, 32, 123, 34, 49, 32, 116, 41, 32, 123, 32, 109, 116, 104, 41, 32, 51, 32, 52, 32, 53, 32, 125, 34, 49, 32, 100, 10, 100, 61, 46, 32, 39, 39, 48, 39, 39, 32, 40, 73, 46, 32, 100, 61, 39, 39, 32, 39, 39, 41, 32, 125, 32, 100, 10, 100, 61, 46, 32, 39, 39, 32, 39, 39, 32, 40, 73, 46,
    32, 100, 61, 39, 39, 43, 39, 39, 41, 32, 125, 32, 100, 10, 40, 114, 44, 50, 48, 41, 32, 36, 32, 100, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 116, 115, 116, 97, 109, 112, 61, 58, 32, 116, 105, 109, 101, 115,
    116, 97, 109, 112, 10, 118, 97, 108, 100, 97, 116, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 115, 61, 46, 32, 125, 58, 36, 121, 10, 39, 39, 119, 32, 109, 32, 100, 39, 39, 61, 46, 32, 116, 61, 46, 32, 124, 58, 40, 40, 42, 47, 115, 41, 44, 51, 41, 36, 44, 121, 10, 98, 61, 46, 32, 42, 46, 47, 40, 116, 61, 60, 46, 116, 41, 44, 40, 95, 49, 32, 48, 32, 48, 60, 116, 41, 44, 49, 50, 62, 58, 109, 10, 100, 97, 121, 61, 46, 32, 40, 49, 51, 124, 109, 41, 123, 48, 32, 51, 49, 32, 50, 56, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 49, 32, 51, 48, 32, 51, 49, 32, 51, 48, 32, 51, 49, 10, 100, 97, 121, 61, 46, 32, 100, 97, 121, 43, 40, 109, 61,
    50, 41, 42, 45, 47, 48, 61, 52, 32, 49, 48, 48, 32, 52, 48, 48, 124, 47, 119, 10, 115, 36, 98, 42, 100, 60, 58, 100, 97, 121, 10, 41, 10, 119, 101, 101, 107, 100, 97, 121, 61, 58, 32, 55, 32, 124, 32, 51, 32, 43, 32, 116, 111, 100, 97, 121, 110, 111, 10, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 61, 58, 32, 51, 32, 58, 32, 48, 10, 121, 114, 61, 46, 32, 123, 46, 121, 10, 115, 100, 61, 46, 32, 49, 32, 40, 40, 105, 46, 126, 119, 101, 101, 107, 100, 97, 121, 41, 123, 93, 41, 32, 40, 40, 60, 58, 121, 114, 41, 44, 46, 49, 50, 44, 46, 50, 57, 43, 105, 46, 51, 41, 44, 121, 114, 44, 46, 49, 44, 46, 49, 43, 105, 46, 52, 10, 119, 107, 61, 46, 32,
    62, 46, 55, 37, 126, 62, 58, 32, 121, 32, 45, 38, 116, 111, 100, 97, 121, 110, 111, 32, 115, 100, 10, 105, 102, 46, 32, 119, 107, 32, 62, 119, 101, 101, 107, 115, 105, 110, 121, 101, 97, 114, 32, 121, 114, 32, 100, 111, 46, 10, 32, 32, 40, 62, 58, 121, 114, 41, 44, 49, 10, 101, 108, 115, 101, 105, 102, 46, 32, 119, 107, 61, 48, 32, 100, 111, 46, 10, 32, 32, 40, 44, 119, 101, 101, 107, 115, 105, 110, 121, 101, 97, 114, 41, 60, 58, 121, 114, 10, 101, 108, 115, 101, 105, 102, 46, 32, 100, 111, 46, 10, 32, 32, 121, 114, 44, 119, 107, 10, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 119, 101, 101, 107, 115, 105, 110, 121, 101, 97, 114, 61, 58, 32, 51, 32, 58, 32, 39, 39, 53, 50, 43, 32, 43, 46, 47, 34, 49, 32, 91, 32, 52, 61, 119, 101, 101, 107, 100, 97, 121, 40, 49, 32, 49, 44, 58, 49, 50, 32, 51, 49, 41, 44, 34, 48, 32, 49, 47, 126, 32, 121, 39, 39, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 100, 98, 114, 61, 58, 32, 49, 51, 33, 58, 48, 10, 100, 98, 115, 61, 58, 32, 49, 51, 33, 58, 49, 10, 100, 98, 115, 113, 61, 58, 32, 49, 51, 33, 58, 50, 10, 100, 98, 115, 115, 61, 58, 32, 49, 51, 33, 58, 51, 10, 100, 98, 114, 117, 110,
    61, 58, 32, 49, 51, 33, 58, 52, 10, 100, 98, 110, 120, 116, 61, 58, 32, 49, 51, 33, 58, 53, 10, 100, 98, 114, 101, 116, 61, 58, 32, 49, 51, 33, 58, 54, 10, 100, 98, 106, 109, 112, 61, 58, 32, 49, 51, 33, 58, 55, 10, 100, 98, 115, 105, 103, 61, 58, 32, 49, 51, 33, 58, 56, 10, 100, 98, 114, 114, 61, 58, 32, 49, 51, 33, 58, 57, 10, 100, 98, 114, 114, 120, 61, 58, 32, 49, 51, 33, 58, 49, 48, 10, 100, 98, 101, 114, 114, 61, 58, 32, 49, 51, 33, 58, 49, 49, 10, 100, 98, 101, 114, 109, 61, 58, 32, 49, 51, 33, 58, 49, 50, 10, 100, 98, 115, 116, 107, 61, 58, 32, 49, 51, 33, 58, 49, 51, 10, 100, 98, 108, 120, 113, 61, 58, 32, 49, 51, 33, 58, 49, 52, 10, 100,
    98, 108, 120, 115, 61, 58, 32, 49, 51, 33, 58, 49, 53, 10, 100, 98, 116, 114, 97, 99, 101, 61, 58, 32, 49, 51, 33, 58, 49, 54, 10, 100, 98, 113, 61, 58, 32, 49, 51, 33, 58, 49, 55, 10, 100, 98, 115, 116, 61, 58, 32, 49, 51, 33, 58, 49, 56, 10, 100, 98, 99, 116, 120, 61, 58, 32, 51, 32, 51, 38, 36, 58, 32, 58, 32, 40, 52, 32, 58, 32, 48, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48,
    33, 58, 49, 49, 48, 41, 32, 39, 105, 102, 46, 32, 45, 46, 49, 51, 33, 58, 49, 55, 39, 39, 39, 39, 32, 100, 111, 46, 32, 48, 32, 48, 36, 39, 39, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 116, 114, 121, 46, 10, 32, 32, 39, 39, 98, 101, 102, 111, 114, 101, 32, 97, 102, 116, 101, 114, 39, 39, 61, 46, 32, 50, 123, 46, 32, 60, 46, 32, 44, 32, 120, 44, 32, 51, 32, 51, 10, 99, 97, 116, 99, 104, 46, 10, 32, 32, 39, 39, 98, 101, 102, 111, 114, 101, 32, 97, 102, 116, 101, 114, 39, 39, 61, 46, 32, 51, 32, 51, 10, 101, 110, 100, 46, 10, 105, 102, 46, 32, 48, 61, 32, 35, 100, 61, 46, 32, 49, 51, 33, 58, 49, 51, 39, 39, 39, 39, 32,
    100, 111, 46, 32, 48, 32, 48, 36, 39, 39, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 39, 39, 42, 39, 39, 32, 45, 46, 64, 101, 46, 32, 115, 117, 115, 61, 46, 32, 62, 123, 58, 34, 49, 32, 100, 32, 100, 111, 46, 32, 48, 32, 48, 36, 39, 39, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 39, 39, 110, 97, 109, 101, 32, 108, 110, 32, 110, 99, 32, 100, 101, 102, 32, 115, 114, 99, 39, 39, 61, 46, 32, 48, 32, 50, 32, 51, 32, 52, 32, 53, 123, 40, 115, 117, 115, 32, 105, 46, 32, 39, 39, 42, 39, 39, 41, 123, 100, 10, 100, 121, 97, 100, 61, 46, 32, 123, 58, 32, 39, 39, 58, 39, 39, 38,
    101, 46, 59, 46, 95, 50, 32, 93, 32, 49, 51, 33, 58, 49, 50, 39, 39, 39, 39, 10, 105, 102, 46, 32, 40, 95, 50, 123, 46, 100, 101, 102, 41, 32, 45, 58, 32, 76, 70, 44, 39, 39, 41, 39, 39, 32, 100, 111, 46, 10, 32, 32, 100, 101, 102, 61, 46, 32, 125, 46, 100, 101, 102, 32, 91, 32, 100, 101, 102, 48, 61, 46, 32, 123, 46, 100, 101, 102, 61, 46, 32, 125, 58, 60, 59, 46, 95, 50, 32, 100, 101, 102, 44, 76, 70, 10, 101, 108, 115, 101, 46, 10, 32, 32, 100, 101, 102, 61, 46, 32, 44, 60, 100, 101, 102, 32, 91, 32, 100, 101, 102, 48, 61, 58, 32, 39, 39, 39, 39, 10, 101, 110, 100, 46, 10, 105, 102, 46, 32, 100, 101, 102, 32, 101, 46, 126, 32, 60, 44, 39, 39,
    58, 39, 39, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 100, 121, 97, 100, 32, 100, 111, 46, 10, 32, 32, 32, 32, 100, 101, 102, 61, 46, 32, 100, 101, 102, 125, 46, 126, 32, 62, 58, 32, 100, 101, 102, 32, 105, 46, 32, 60, 44, 39, 39, 58, 39, 39, 10, 32, 32, 101, 108, 115, 101, 46, 10, 32, 32, 32, 32, 100, 101, 102, 61, 46, 32, 100, 101, 102, 123, 46, 126, 32, 100, 101, 102, 32, 105, 46, 32, 60, 44, 39, 39, 58, 39, 39, 10, 32, 32, 101, 110, 100, 46, 10, 101, 110, 100, 46, 10, 109, 105, 110, 61, 46, 32, 48, 62, 46, 108, 110, 45, 98, 101, 102, 111, 114, 101, 32, 91, 32, 109, 97, 120, 61, 46, 32, 40, 60, 58, 35, 100, 101, 102, 41, 60, 46, 108,
    110, 43, 97, 102, 116, 101, 114, 10, 99, 116, 120, 61, 46, 32, 39, 39, 91, 39, 39, 44, 34, 49, 32, 40, 34, 58, 44, 46, 114, 97, 110, 103, 101, 41, 32, 44, 34, 49, 32, 40, 39, 39, 93, 32, 39, 39, 41, 32, 44, 34, 49, 32, 62, 100, 101, 102, 123, 126, 114, 97, 110, 103, 101, 61, 46, 32, 109, 105, 110, 32, 43, 32, 105, 46, 32, 62, 58, 109, 97, 120, 45, 109, 105, 110, 10, 62, 32, 40, 60, 39, 39, 64, 64, 32, 39, 39, 44, 32, 110, 97, 109, 101, 44, 32, 39, 39, 91, 39, 39, 44, 32, 40, 100, 121, 97, 100, 35, 39, 39, 58, 39, 39, 41, 44, 32, 40, 34, 58, 108, 110, 41, 32, 44, 39, 39, 93, 32, 42, 39, 39, 44, 32, 40, 110, 99, 123, 39, 39, 32, 97, 99, 118, 39, 39,
    41, 44, 39, 39, 32, 64, 64, 32, 39, 39, 44, 32, 115, 114, 99, 41, 44, 32, 100, 101, 102, 48, 44, 32, 60, 34, 49, 32, 99, 116, 120, 10, 41, 10, 100, 98, 103, 61, 58, 32, 49, 51, 33, 58, 48, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 100, 98, 108, 111, 99, 97, 108, 115, 61, 58, 32, 95, 49, 38, 36, 58, 32, 58, 32, 40, 52, 32, 58, 32, 48, 41, 10, 115, 116, 107, 61, 46, 32, 125, 46, 32, 49, 51, 33, 58, 49, 51, 39, 39, 39, 39, 10, 105, 102, 46, 32, 48, 61, 35, 121, 32, 100, 111, 46, 32, 121, 61, 46, 32, 97, 58, 32, 101, 108, 115, 101, 46, 32, 121, 61, 46, 32, 40, 121, 32, 101, 46, 32, 105, 46, 35, 115, 116, 107, 41, 32, 35, 32, 121, 32, 101, 110, 100, 46, 10, 108, 111, 99, 61, 46, 32, 40, 60, 121, 32, 59, 32, 48, 32, 55, 41, 32, 123, 32, 115, 116, 107, 10, 105, 102, 46, 32, 45, 46, 32, 120,
    45, 58, 95, 49, 32, 100, 111, 46, 10, 32, 32, 116, 61, 46, 32, 59, 58, 32, 58, 58, 93, 32, 120, 10, 32, 32, 102, 61, 46, 32, 40, 123, 46, 34, 49, 32, 101, 46, 32, 116, 34, 95, 41, 32, 35, 32, 93, 10, 32, 32, 40, 123, 46, 34, 49, 32, 108, 111, 99, 41, 32, 44, 46, 32, 102, 32, 38, 46, 62, 32, 123, 58, 34, 49, 32, 108, 111, 99, 10, 101, 110, 100, 46, 10, 41, 10, 100, 98, 115, 116, 97, 99, 107, 61, 58, 32, 51, 32, 58, 32, 48, 10, 104, 100, 114, 61, 46, 32, 59, 58, 39, 39, 110, 97, 109, 101, 32, 101, 110, 32, 108, 110, 32, 110, 99, 32, 97, 114, 103, 115, 32, 108, 111, 99, 97, 108, 115, 32, 115, 117, 115, 112, 39, 39, 10, 115, 116, 107, 61, 46, 32, 125,
    46, 32, 49, 51, 33, 58, 49, 51, 39, 39, 39, 39, 10, 105, 102, 46, 32, 35, 121, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 50, 61, 51, 33, 58, 48, 32, 121, 32, 100, 111, 46, 10, 32, 32, 32, 32, 115, 116, 107, 61, 46, 32, 115, 116, 107, 32, 35, 126, 32, 40, 60, 121, 41, 61, 123, 46, 34, 49, 32, 115, 116, 107, 10, 32, 32, 101, 108, 115, 101, 46, 10, 32, 32, 32, 32, 115, 116, 107, 61, 46, 32, 40, 40, 35, 115, 116, 107, 41, 60, 46, 44, 121, 41, 123, 46, 115, 116, 107, 10, 32, 32, 101, 110, 100, 46, 10, 101, 110, 100, 46, 10, 115, 116, 107, 61, 46, 32, 49, 32, 49, 32, 49, 32, 49, 32, 48, 32, 48, 32, 49, 32, 49, 32, 49, 32, 35, 34, 49, 32, 115, 116,
    107, 10, 115, 116, 107, 61, 46, 32, 104, 100, 114, 44, 32, 34, 58, 32, 38, 46, 62, 32, 115, 116, 107, 10, 119, 100, 115, 61, 46, 32, 40, 123, 58, 64, 36, 64, 34, 58, 64, 44, 46, 41, 34, 49, 32, 124, 58, 32, 115, 116, 107, 10, 108, 101, 110, 61, 46, 32, 50, 48, 32, 62, 46, 60, 46, 45, 58, 40, 123, 46, 119, 99, 115, 105, 122, 101, 39, 39, 39, 39, 41, 32, 45, 32, 43, 47, 56, 44, 32, 52, 32, 123, 46, 32, 119, 100, 115, 10, 116, 99, 61, 46, 32, 40, 108, 101, 110, 43, 49, 41, 38, 60, 46, 64, 36, 32, 123, 46, 33, 46, 39, 39, 46, 39, 39, 32, 40, 123, 46, 126, 32, 108, 101, 110, 38, 60, 46, 64, 36, 41, 10, 116, 99, 64, 34, 58, 32, 101, 97, 99, 104, 32, 115,
    116, 107, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 100, 98, 115, 116, 111, 112, 61, 58, 32, 51, 32, 58, 32, 48, 10, 105, 102, 46, 32, 48, 32, 101, 46, 32, 35, 121, 32, 45, 46, 32, 39, 39, 32, 39, 39, 32, 100, 111, 46, 32, 49, 51, 33, 58, 51, 39, 39, 39, 39, 32,
    114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 116, 61, 46, 32, 49, 51, 33, 58, 50, 39, 39, 39, 39, 10, 105, 102, 46, 32, 35, 116, 32, 100, 111, 46, 32, 116, 61, 46, 32, 60, 59, 46, 95, 50, 32, 116, 44, 32, 39, 39, 59, 39, 39, 32, 45, 46, 32, 123, 58, 116, 32, 101, 110, 100, 46, 10, 116, 61, 46, 32, 126, 46, 32, 116, 44, 32, 40, 59, 58, 32, 94, 58, 32, 40, 76, 46, 61, 48, 58, 41, 32, 121, 41, 32, 44, 38, 46, 62, 32, 60, 39, 39, 32, 42, 58, 42, 39, 39, 10, 49, 51, 33, 58, 51, 32, 59, 32, 116, 32, 44, 38, 46, 62, 32, 39, 39, 59, 39, 39, 10, 41, 10, 100, 98, 115, 116, 111, 112, 115, 61, 58, 32, 51, 32, 58, 32, 48, 10, 49, 51, 33, 58, 51,
    32, 59, 32, 40, 59, 58, 32, 94, 58, 32, 40, 76, 46, 61, 48, 58, 41, 32, 121, 41, 32, 44, 38, 46, 62, 32, 60, 39, 39, 32, 42, 58, 42, 59, 39, 39, 10, 41, 10, 100, 98, 115, 116, 111, 112, 109, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 105, 102, 46, 32, 121, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 48, 32, 101, 46, 32, 36, 99, 61, 46, 32, 125, 46, 32, 49, 51, 33, 58, 49, 51, 39, 39, 39, 39, 32, 100, 111, 46, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 32, 32, 99, 61, 46, 32, 40, 62, 32, 123, 46, 32, 123, 46, 32, 99, 41, 44, 32, 39, 39, 32, 42, 58, 42, 39, 39, 10, 32, 32, 116, 61, 46, 32, 49, 51, 33, 58, 50, 39, 39, 39, 39, 10,
    32, 32, 105, 102, 46, 32, 35, 116, 32, 100, 111, 46, 32, 116, 61, 46, 32, 60, 59, 46, 95, 50, 32, 116, 44, 32, 39, 39, 59, 39, 39, 32, 45, 46, 32, 123, 58, 116, 32, 101, 110, 100, 46, 10, 32, 32, 116, 61, 46, 32, 126, 46, 32, 116, 44, 32, 60, 99, 10, 32, 32, 49, 51, 33, 58, 51, 32, 125, 58, 32, 59, 32, 116, 32, 44, 38, 46, 62, 32, 39, 39, 59, 39, 39, 10, 101, 110, 100, 46, 10, 41, 10, 39
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 30872);
allocate([40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 100, 98, 115, 116, 111, 112, 110, 101, 120, 116, 61, 58, 32, 51, 32, 58, 32, 48, 10, 105, 102, 46, 32, 121, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 48, 32, 101, 46, 32, 36, 99, 61, 46, 32, 125, 46, 32, 49, 51, 33, 58, 49, 51, 39, 39, 39, 39, 32, 100, 111, 46, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 32, 32, 39, 39, 100, 32, 110, 32, 97, 39, 39, 61, 46, 32, 48, 32, 50, 32, 54, 32, 123, 32, 123, 46, 32, 99, 10, 32, 32, 99, 61, 46, 32, 100, 44, 39, 39, 32, 39, 39, 44, 40, 39, 39, 58, 39, 39, 35, 126, 50, 61, 35, 97, 41, 44, 34, 58, 110, 43, 49, 10, 32, 32, 116, 61, 46,
    32, 49, 51, 33, 58, 50, 39, 39, 39, 39, 10, 32, 32, 105, 102, 46, 32, 35, 116, 32, 100, 111, 46, 32, 116, 61, 46, 32, 60, 59, 46, 95, 50, 32, 116, 44, 32, 39, 39, 59, 39, 39, 32, 45, 46, 32, 123, 58, 116, 32, 101, 110, 100, 46, 10, 32, 32, 116, 61, 46, 32, 126, 46, 32, 116, 44, 32, 60, 99, 10, 32, 32, 49, 51, 33, 58, 51, 32, 125, 58, 32, 59, 32, 116, 32, 44, 38, 46, 62, 32, 39, 39, 59, 39, 39, 10, 101, 110, 100, 46, 10, 41, 10, 10, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 39, 39, 122, 39, 39, 10, 99, 117, 116, 115, 61, 58, 32, 50, 32, 58, 32, 48, 10, 105, 102, 46, 32, 110, 61, 49, 32, 100, 111, 46, 32, 91, 58, 32, 117, 32, 40, 35, 64, 91,
    32, 43, 32, 69, 46, 32, 105, 46, 32, 49, 58, 41, 32, 123, 46, 32, 93, 10, 101, 108, 115, 101, 105, 102, 46, 32, 110, 61, 95, 49, 32, 100, 111, 46, 32, 91, 58, 32, 117, 32, 40, 69, 46, 32, 105, 46, 32, 49, 58, 41, 32, 123, 46, 32, 93, 10, 101, 108, 115, 101, 105, 102, 46, 32, 110, 61, 32, 50, 32, 100, 111, 46, 32, 91, 58, 32, 117, 32, 40, 69, 46, 32, 105, 46, 32, 49, 58, 41, 32, 125, 46, 32, 93, 10, 101, 108, 115, 101, 105, 102, 46, 32, 49, 32, 100, 111, 46, 32, 91, 58, 32, 117, 32, 40, 35, 64, 91, 32, 43, 32, 69, 46, 32, 105, 46, 32, 49, 58, 41, 32, 125, 46, 32, 93, 10, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 117, 116, 61, 58, 32, 39, 39, 32, 39, 39, 38, 36, 58, 32, 58, 40, 91, 58, 32, 45, 46, 38, 97, 58, 32, 60, 59, 46, 95, 50, 64, 44, 126, 41, 10, 100, 101, 98, 61, 58, 32, 35, 126, 32, 40, 43, 46, 32, 49, 58, 32, 124, 46, 32, 40, 62, 32, 60, 47, 92, 41, 41, 64, 40, 39, 39, 32, 39, 39, 38, 126, 58, 41, 10, 100, 101, 98, 99, 61, 58, 32, 35, 126, 34, 49, 32, 91, 58, 32, 40, 43, 46, 32, 40, 49, 58, 32, 124, 46, 32, 40, 62, 32, 60, 47, 92, 41, 41, 41, 32, 39, 39, 32, 39, 39, 38, 40, 43, 46, 47, 32, 46, 126, 58, 41, 10, 100, 101, 108, 115,
    116, 114, 105, 110, 103, 61, 58, 32, 52, 32, 58, 32, 39, 39, 59, 40, 120, 32, 69, 46, 114, 41, 32, 60, 64, 40, 40, 35, 120, 41, 38, 125, 46, 41, 32, 59, 46, 49, 32, 114, 61, 46, 32, 120, 44, 121, 39, 39, 10, 100, 101, 116, 97, 98, 61, 58, 32, 39, 39, 32, 39, 39, 32, 73, 46, 64, 40, 61, 38, 84, 65, 66, 64, 93, 41, 125, 32, 93, 10, 100, 108, 98, 61, 58, 32, 125, 46, 126, 32, 61, 38, 39, 39, 32, 39, 39, 32, 105, 46, 32, 48, 58, 10, 100, 108, 116, 98, 61, 58, 32, 35, 126, 32, 91, 58, 32, 40, 43, 46, 47, 92, 32, 42, 46, 32, 43, 46, 47, 92, 46, 41, 32, 39, 39, 32, 39, 39, 38, 126, 58, 10, 100, 116, 98, 61, 58, 32, 35, 126, 32, 91, 58, 32, 43, 46, 47, 92, 46,
    32, 39, 39, 32, 39, 39, 38, 126, 58, 10, 106, 111, 105, 110, 115, 116, 114, 105, 110, 103, 61, 58, 32, 39, 39, 39, 39, 38, 36, 58, 32, 58, 32, 40, 35, 64, 91, 32, 125, 46, 32, 60, 64, 91, 32, 59, 64, 44, 46, 32, 93, 41, 10, 108, 106, 117, 115, 116, 61, 58, 32, 40, 124, 46, 126, 32, 43, 47, 64, 40, 42, 46, 47, 92, 41, 64, 40, 39, 39, 32, 39, 39, 38, 61, 41, 41, 34, 49, 10, 114, 106, 117, 115, 116, 61, 58, 32, 40, 124, 46, 126, 32, 45, 64, 40, 43, 47, 41, 64, 40, 42, 46, 47, 92, 46, 41, 64, 40, 39, 39, 32, 39, 39, 38, 61, 41, 41, 34, 49, 10, 115, 112, 108, 105, 116, 115, 116, 114, 105, 110, 103, 61, 58, 32, 35, 64, 91, 32, 125, 46, 101, 97, 99, 104,
    32, 91, 32, 40, 69, 46, 32, 60, 59, 46, 49, 32, 93, 41, 32, 44, 10, 115, 115, 61, 58, 32, 73, 46, 32, 64, 32, 69, 46, 10, 100, 114, 111, 112, 116, 111, 61, 58, 32, 93, 32, 99, 117, 116, 115, 32, 50, 10, 100, 114, 111, 112, 97, 102, 116, 101, 114, 61, 58, 32, 93, 32, 99, 117, 116, 115, 32, 49, 10, 116, 97, 107, 101, 116, 111, 61, 58, 32, 93, 32, 99, 117, 116, 115, 32, 95, 49, 10, 116, 97, 107, 101, 97, 102, 116, 101, 114, 61, 58, 32, 93, 32, 99, 117, 116, 115, 32, 95, 50, 10, 99, 104, 97, 114, 115, 117, 98, 61, 58, 32, 52, 32, 58, 32, 48, 10, 39, 39, 102, 32, 116, 39, 39, 61, 46, 32, 124, 58, 32, 95, 50, 32, 93, 92, 32, 120, 10, 108, 61, 46, 32,
    102, 32, 105, 46, 34, 49, 32, 48, 32, 121, 10, 120, 61, 46, 32, 108, 32, 123, 32, 116, 44, 39, 39, 63, 39, 39, 10, 99, 61, 46, 32, 108, 32, 61, 32, 35, 102, 10, 99, 32, 125, 32, 120, 32, 44, 58, 32, 121, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 104, 111, 112, 115, 116, 114, 105, 110, 103, 61, 58, 32, 51, 32, 58, 32, 48, 10, 40, 39, 39, 32, 39, 39, 59, 39, 39, 34, 34, 39, 39, 41, 32, 99, 104,
    111, 112, 115, 116, 114, 105, 110, 103, 32, 121, 10, 58, 10, 100, 97, 116, 61, 46, 32, 121, 10, 39, 39, 102, 100, 32, 115, 100, 39, 39, 61, 46, 32, 50, 123, 46, 32, 98, 111, 120, 111, 112, 101, 110, 32, 120, 10, 97, 115, 115, 101, 114, 116, 46, 32, 49, 32, 61, 32, 35, 102, 100, 10, 105, 102, 46, 32, 35, 115, 100, 32, 100, 111, 46, 10, 32, 32, 105, 102, 46, 32, 49, 61, 35, 126, 46, 115, 100, 32, 100, 111, 46, 32, 115, 100, 61, 46, 32, 44, 123, 46, 115, 100, 10, 32, 32, 101, 108, 115, 101, 46, 10, 32, 32, 32, 32, 115, 61, 46, 32, 123, 46, 40, 39, 39, 124, 39, 39, 61, 102, 100, 41, 123, 32, 39, 39, 124, 96, 39, 39, 10, 32, 32, 32, 32, 100, 97,
    116, 61, 46, 32, 100, 97, 116, 32, 114, 112, 108, 99, 32, 40, 123, 46, 115, 100, 41, 59, 115, 59, 40, 123, 58, 115, 100, 41, 59, 115, 10, 32, 32, 32, 32, 115, 100, 61, 46, 32, 115, 10, 32, 32, 101, 110, 100, 46, 10, 32, 32, 100, 97, 116, 61, 46, 32, 100, 97, 116, 44, 102, 100, 10, 32, 32, 98, 61, 46, 32, 100, 97, 116, 32, 101, 46, 32, 102, 100, 10, 32, 32, 99, 61, 46, 32, 100, 97, 116, 32, 101, 46, 32, 115, 100, 10, 32, 32, 100, 61, 46, 32, 126, 58, 47, 92, 32, 99, 10, 32, 32, 102, 109, 115, 107, 61, 46, 32, 98, 32, 62, 32, 100, 10, 32, 32, 115, 109, 115, 107, 61, 46, 32, 40, 62, 32, 40, 48, 32, 44, 32, 125, 58, 41, 41, 32, 99, 10, 32, 32, 115,
    109, 115, 107, 61, 46, 32, 45, 46, 32, 115, 109, 115, 107, 32, 43, 46, 32, 99, 32, 42, 46, 32, 49, 124, 46, 102, 109, 115, 107, 10, 32, 32, 121, 61, 46, 32, 115, 109, 115, 107, 35, 121, 44, 102, 100, 10, 32, 32, 102, 109, 115, 107, 61, 46, 32, 48, 58, 94, 58, 40, 44, 64, 49, 58, 32, 45, 58, 32, 93, 41, 32, 115, 109, 115, 107, 35, 102, 109, 115, 107, 10, 32, 32, 102, 109, 115, 107, 32, 60, 59, 46, 95, 50, 32, 121, 10, 101, 108, 115, 101, 46, 10, 32, 32, 60, 59, 46, 95, 50, 32, 100, 97, 116, 44, 102, 100, 10, 101, 110, 100, 46, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48,
    41, 32, 39, 100, 108, 116, 98, 115, 61, 58, 32, 76, 70, 38, 36, 58, 32, 58, 32, 40, 52, 32, 58, 32, 48, 41, 10, 116, 120, 116, 61, 46, 32, 40, 123, 46, 120, 41, 44, 32, 121, 10, 97, 61, 46, 32, 116, 120, 116, 32, 126, 58, 32, 39, 39, 32, 39, 39, 10, 98, 61, 46, 32, 40, 97, 32, 35, 32, 116, 120, 116, 41, 32, 101, 46, 32, 120, 10, 99, 61, 46, 32, 98, 32, 43, 46, 32, 125, 46, 32, 98, 44, 32, 49, 10, 100, 61, 46, 32, 126, 58, 32, 47, 92, 32, 97, 32, 35, 94, 58, 95, 49, 32, 99, 32, 126, 58, 32, 125, 58, 32, 48, 44, 32, 99, 10, 125, 46, 32, 40, 97, 32, 62, 58, 32, 100, 41, 32, 35, 32, 116, 120, 116, 10, 41, 10, 100, 113, 117, 111, 116, 101, 61, 58, 32, 40,
    39, 39, 34, 39, 39, 38, 44, 64, 40, 44, 38, 39, 39, 34, 39, 39, 41, 41, 64, 32, 40, 35, 126, 32, 62, 58, 64, 40, 61, 38, 39, 39, 34, 39, 39, 41, 41, 10, 100, 116, 98, 115, 61, 58, 32, 51, 32, 58, 32, 48, 10, 67, 82, 76, 70, 32, 100, 116, 98, 115, 32, 121, 10, 58, 10, 116, 120, 116, 61, 46, 32, 121, 32, 44, 32, 123, 46, 120, 10, 98, 108, 107, 61, 46, 32, 116, 120, 116, 32, 126, 58, 32, 39, 39, 32, 39, 39, 10, 110, 100, 120, 61, 46, 32, 43, 47, 92, 32, 98, 108, 107, 10, 98, 61, 46, 32, 98, 108, 107, 32, 60, 32, 125, 46, 32, 40, 116, 120, 116, 32, 101, 46, 32, 120, 41, 44, 32, 48, 10, 109, 115, 107, 61, 46, 32, 98, 108, 107, 32, 62, 58, 32, 110, 100,
    120, 32, 101, 46, 32, 98, 32, 35, 32, 110, 100, 120, 10, 125, 58, 32, 109, 115, 107, 32, 35, 32, 116, 120, 116, 10, 41, 10, 114, 112, 108, 99, 61, 58, 32, 115, 116, 114, 105, 110, 103, 114, 101, 112, 108, 97, 99, 101, 126, 10, 102, 115, 116, 114, 105, 110, 103, 114, 101, 112, 108, 97, 99, 101, 61, 58, 32, 52, 32, 58, 32, 48, 10, 110, 102, 61, 46, 32, 39, 39, 110, 111, 32, 109, 97, 116, 99, 104, 32, 102, 111, 117, 110, 100, 39, 39, 10, 121, 61, 46, 32, 98, 111, 120, 111, 112, 101, 110, 32, 121, 10, 116, 114, 121, 46, 32, 115, 105, 122, 101, 61, 46, 32, 49, 33, 58, 52, 32, 121, 32, 99, 97, 116, 99, 104, 46, 32, 110, 102, 32, 114, 101, 116,
    117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 115, 105, 122, 101, 61, 48, 32, 100, 111, 46, 32, 110, 102, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 111, 108, 100, 61, 46, 32, 102, 114, 101, 97, 100, 115, 32, 121, 10, 110, 101, 119, 61, 46, 32, 120, 32, 115, 116, 114, 105, 110, 103, 114, 101, 112, 108, 97, 99, 101, 32, 111, 108, 100, 10, 105, 102, 46, 32, 111, 108, 100, 32, 45, 58, 32, 110, 101, 119, 32, 100, 111, 46, 32, 110, 102, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 110, 101, 119, 32, 102, 119, 114, 105, 116, 101, 115, 32, 121, 10, 99, 110, 116, 61, 46, 32, 43, 47,
    32, 40, 48, 32, 112, 105, 99, 107, 32, 120, 41, 32, 69, 46, 32, 111, 108, 100, 10, 40, 34, 58, 99, 110, 116, 41, 44, 39, 39, 32, 114, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116, 39, 39, 44, 40, 40, 49, 126, 58, 99, 110, 116, 41, 35, 39, 39, 115, 39, 39, 41, 44, 39, 39, 32, 109, 97, 100, 101, 39, 39, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 113, 117, 111, 116, 101, 61, 58, 32, 40, 39, 39, 39, 39, 39, 39, 39, 39, 38, 44, 64, 40, 44,
    38, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 64, 32, 40, 35, 126, 32, 62, 58, 64, 40, 61, 38, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 10, 110, 111, 115, 61, 46, 32, 105, 46, 64, 35, 64, 93, 32, 101, 46, 32, 35, 64, 91, 32, 40, 123, 126, 94, 58, 97, 58, 38, 48, 64, 40, 44, 38, 95, 49, 41, 64, 40, 93, 73, 46, 43, 41, 32, 123, 32, 95, 49, 44, 126, 93, 41, 32, 73, 46, 64, 69, 46, 10, 115, 112, 108, 105, 116, 110, 111, 115, 116, 114, 105, 110, 103, 61, 58, 32, 35, 64, 91, 32, 125, 46, 101, 97, 99, 104, 32, 91, 32, 40, 110, 111, 115, 32, 102, 46, 32, 60, 59, 46, 49, 32, 93, 41, 32, 44, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 117, 116, 112, 97, 114, 97, 61, 58, 32, 51, 32, 58, 32, 48, 10, 116, 120, 116, 61, 46, 32, 116, 111, 112, 97, 114, 97, 32, 121, 10, 116, 120, 116, 61, 46, 32, 116, 120, 116, 44, 76, 70, 32, 45, 46, 32, 123, 58, 116, 120, 116, 10, 98, 61, 46, 32, 40, 125, 46, 98, 44, 48, 41, 32, 60, 32, 98, 61, 46, 32, 116, 120, 116, 61, 76, 70, 10, 98, 32, 60, 59, 46, 95, 50, 32, 116, 120, 116, 10, 41, 10, 102, 111, 108, 100, 116, 101, 120, 116, 61, 58, 32, 52, 32, 58, 32, 48, 10, 105, 102,
    46, 32, 48, 32, 101, 46, 32, 36, 121, 32, 100, 111, 46, 32, 39, 39, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 121, 61, 46, 32, 59, 32, 120, 38, 102, 111, 108, 100, 112, 97, 114, 97, 32, 101, 97, 99, 104, 32, 99, 117, 116, 112, 97, 114, 97, 32, 121, 10, 121, 32, 125, 46, 126, 32, 45, 32, 40, 76, 70, 32, 126, 58, 32, 124, 46, 121, 41, 32, 105, 46, 32, 49, 10, 41, 10, 102, 111, 108, 100, 112, 97, 114, 97, 61, 58, 32, 52, 32, 58, 32, 48, 10, 105, 102, 46, 32, 48, 61, 35, 121, 32, 100, 111, 46, 32, 76, 70, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 114, 61, 46, 32, 39, 39, 39, 39, 10, 120, 49,
    61, 46, 32, 62, 58, 32, 120, 10, 116, 120, 116, 61, 46, 32, 121, 10, 119, 104, 105, 108, 101, 46, 10, 32, 32, 105, 110, 100, 61, 46, 32, 39, 39, 32, 39, 39, 32, 105, 46, 126, 32, 124, 46, 32, 120, 49, 123, 46, 116, 120, 116, 10, 32, 32, 115, 61, 46, 32, 116, 120, 116, 32, 123, 46, 126, 32, 110, 100, 120, 61, 46, 32, 120, 49, 32, 45, 32, 62, 58, 32, 120, 49, 32, 124, 32, 105, 110, 100, 10, 32, 32, 115, 61, 46, 32, 40, 43, 46, 47, 92, 46, 115, 32, 126, 58, 32, 39, 39, 32, 39, 39, 41, 32, 35, 32, 115, 10, 32, 32, 114, 61, 46, 32, 114, 44, 32, 115, 44, 32, 76, 70, 10, 32, 32, 35, 116, 120, 116, 61, 46, 32, 40, 110, 100, 120, 32, 43, 32, 105, 110,
    100, 60, 120, 49, 41, 32, 125, 46, 32, 116, 120, 116, 10, 100, 111, 46, 32, 101, 110, 100, 46, 10, 114, 10, 41, 10, 116, 111, 112, 97, 114, 97, 61, 58, 32, 51, 32, 58, 32, 48, 10, 105, 102, 46, 32, 48, 61, 35, 121, 32, 100, 111, 46, 32, 39, 39, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 98, 61, 46, 32, 121, 61, 76, 70, 10, 99, 61, 46, 32, 98, 32, 43, 46, 32, 121, 61, 39, 39, 32, 39, 39, 10, 98, 61, 46, 32, 98, 32, 62, 32, 40, 49, 44, 125, 58, 98, 41, 32, 43, 46, 32, 125, 46, 99, 44, 48, 10, 39, 39, 32, 39, 39, 32, 40, 73, 46, 32, 98, 41, 32, 125, 32, 121, 10, 41, 10, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 60, 39, 39, 106, 39, 39, 10, 65, 108, 112, 104, 97, 61, 58, 32, 97, 46, 32, 123, 126, 32, 44, 32, 40, 97, 46, 105, 46, 39, 39,
    65, 97, 39, 39, 41, 32, 43, 47, 32, 105, 46, 50, 54, 10, 78, 117, 109, 61, 58, 32, 97, 46, 32, 123, 126, 32, 40, 97, 46, 105, 46, 39, 39, 48, 39, 39, 41, 32, 43, 32, 105, 46, 49, 48, 10, 65, 108, 112, 104, 97, 78, 117, 109, 61, 58, 32, 65, 108, 112, 104, 97, 44, 78, 117, 109, 10, 66, 111, 120, 101, 115, 61, 58, 32, 40, 40, 49, 54, 43, 105, 46, 49, 49, 41, 32, 123, 32, 97, 46, 41, 44, 58, 39, 39, 43, 43, 43, 43, 43, 43, 43, 43, 43, 124, 45, 39, 39, 10, 83, 99, 114, 105, 112, 116, 69, 120, 116, 61, 58, 32, 39, 39, 46, 105, 106, 115, 39, 39, 10, 80, 114, 111, 106, 69, 120, 116, 61, 58, 32, 39, 39, 46, 106, 112, 114, 111, 106, 39, 39, 10, 10, 101, 120,
    116, 110, 111, 110, 101, 61, 58, 32, 123, 46, 126, 32, 105, 58, 38, 39, 39, 46, 39, 39, 10, 101, 120, 116, 112, 114, 111, 106, 61, 58, 32, 44, 32, 40, 80, 114, 111, 106, 69, 120, 116, 32, 35, 126, 32, 39, 39, 46, 39, 39, 38, 101, 46, 32, 60, 32, 48, 32, 60, 32, 35, 41, 10, 101, 120, 116, 115, 114, 99, 61, 58, 32, 44, 32, 40, 39, 39, 46, 105, 106, 115, 39, 39, 32, 35, 126, 32, 39, 39, 46, 39, 39, 38, 101, 46, 32, 60, 32, 48, 32, 60, 32, 35, 41, 10, 10, 97, 100, 100, 102, 110, 97, 109, 101, 61, 58, 32, 44, 32, 40, 101, 46, 38, 39, 39, 47, 92, 39, 39, 32, 105, 58, 32, 49, 58, 41, 32, 125, 46, 32, 93, 10, 98, 111, 120, 100, 114, 97, 119, 61, 58, 32,
    51, 32, 58, 32, 39, 39, 57, 33, 58, 55, 32, 121, 32, 123, 32, 66, 111, 120, 101, 115, 39, 39, 10, 104, 111, 115, 116, 99, 109, 100, 61, 58, 32, 91, 58, 32, 50, 33, 58, 48, 32, 39, 39, 40, 39, 39, 32, 44, 32, 44, 38, 39, 39, 32, 124, 124, 32, 116, 114, 117, 101, 41, 39, 39, 10, 102, 112, 97, 116, 104, 61, 58, 32, 91, 58, 32, 125, 58, 32, 43, 46, 47, 92, 46, 64, 58, 61, 38, 39, 39, 47, 39, 39, 32, 35, 32, 93, 10, 109, 97, 120, 114, 101, 99, 101, 110, 116, 61, 58, 32, 51, 32, 58, 32, 39, 39, 40, 82, 101, 99, 101, 110, 116, 77, 97, 120, 32, 60, 46, 32, 35, 114, 41, 32, 123, 46, 32, 114, 61, 46, 32, 126, 46, 121, 39, 39, 10, 112, 97, 99, 107, 61, 58,
    32, 91, 58, 32, 40, 44, 46, 32, 34, 46, 38, 46, 62, 41, 32, 59, 58, 32, 58, 58, 93, 10, 112, 100, 101, 102, 61, 58, 32, 51, 32, 58, 32, 39, 39, 48, 32, 48, 36, 40, 123, 46, 34, 49, 32, 121, 41, 61, 58, 32, 123, 58, 34, 49, 32, 121, 39, 39, 10, 115, 101, 108, 100, 105, 114, 61, 58, 32, 35, 126, 32, 39, 39, 45, 100, 39, 39, 38, 45, 58, 34, 49, 32, 64, 32, 40, 49, 32, 52, 38, 123, 34, 49, 41, 32, 64, 32, 62, 32, 64, 32, 40, 52, 38, 123, 34, 49, 41, 10, 115, 112, 97, 116, 104, 61, 58, 32, 35, 126, 32, 91, 58, 32, 42, 46, 47, 92, 46, 32, 39, 39, 47, 39, 39, 38, 126, 58, 10, 116, 101, 114, 109, 76, 70, 61, 58, 32, 44, 32, 40, 48, 32, 60, 32, 35, 41, 32, 35,
    32, 76, 70, 32, 45, 46, 32, 123, 58, 10, 116, 101, 114, 109, 115, 101, 112, 61, 58, 32, 44, 32, 40, 48, 32, 60, 32, 35, 41, 32, 35, 32, 39, 39, 47, 39, 39, 32, 45, 46, 32, 123, 58, 10, 116, 111, 108, 105, 115, 116, 61, 58, 32, 125, 46, 64, 59, 64, 58, 40, 76, 70, 38, 44, 101, 97, 99, 104, 41, 10, 114, 101, 109, 115, 101, 112, 61, 58, 32, 125, 46, 126, 32, 91, 58, 32, 45, 32, 39, 39, 47, 39, 39, 32, 61, 32, 123, 58, 10, 10, 99, 111, 99, 108, 97, 115, 115, 32, 39, 39, 106, 99, 111, 109, 112, 97, 114, 101, 39, 39, 10, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 77, 65, 88, 80, 70, 88, 61, 58, 32, 49, 48, 48, 10, 77, 65, 88, 76, 67, 83, 61, 58, 32, 42, 58, 32, 77, 65, 88, 80, 70, 88, 10, 99, 105, 110, 61, 58, 32, 101, 46, 32, 44, 10, 102, 109, 116, 48,
    61, 58, 32, 39, 39, 112, 60, 48, 32, 91, 62, 113, 60, 93, 32, 62, 39, 39, 32, 38, 32, 40, 56, 33, 58, 48, 41, 10, 102, 109, 116, 49, 61, 58, 32, 39, 39, 112, 60, 49, 32, 91, 62, 113, 60, 93, 32, 62, 39, 39, 32, 38, 32, 40, 56, 33, 58, 48, 41, 10, 108, 99, 115, 61, 58, 32, 42, 32, 42, 32, 49, 32, 43, 32, 62, 46, 47, 92, 64, 58, 40, 95, 49, 38, 124, 46, 41, 64, 58, 40, 62, 46, 47, 92, 34, 49, 64, 58, 40, 95, 49, 38, 124, 46, 34, 49, 41, 41, 10, 109, 105, 110, 100, 120, 61, 58, 32, 125, 46, 64, 123, 46, 64, 47, 58, 126, 64, 40, 43, 47, 34, 49, 32, 44, 46, 32, 93, 41, 10, 114, 101, 109, 108, 116, 119, 115, 61, 58, 32, 51, 32, 58, 32, 48, 10, 121, 61, 46,
    32, 121, 44, 32, 76, 70, 10, 100, 97, 116, 61, 46, 32, 60, 59, 46, 95, 50, 32, 121, 10, 109, 115, 107, 61, 46, 32, 67, 82, 32, 61, 32, 123, 58, 32, 38, 62, 32, 100, 97, 116, 10, 100, 97, 116, 61, 46, 32, 40, 45, 109, 115, 107, 41, 32, 125, 46, 32, 101, 97, 99, 104, 32, 100, 97, 116, 10, 102, 110, 61, 46, 32, 35, 126, 32, 40, 91, 58, 32, 40, 43, 46, 47, 92, 32, 42, 46, 32, 43, 46, 47, 92, 46, 41, 32, 45, 46, 64, 40, 101, 46, 38, 40, 39, 39, 32, 39, 39, 44, 84, 65, 66, 41, 41, 41, 10, 100, 97, 116, 61, 46, 32, 102, 110, 32, 101, 97, 99, 104, 32, 100, 97, 116, 10, 100, 97, 116, 61, 46, 32, 100, 97, 116, 32, 44, 101, 97, 99, 104, 32, 109, 115, 107, 123,
    39, 39, 39, 39, 59, 67, 82, 10, 125, 58, 32, 59, 32, 100, 97, 116, 32, 44, 101, 97, 99, 104, 32, 76, 70, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 109, 112, 61, 58, 32, 52, 32, 58, 32, 48, 10, 115, 101, 112, 61, 46, 32, 40, 40, 76, 70, 32, 99, 105, 110, 32, 120, 41, 32, 43, 46, 32, 76, 70, 32, 99, 105, 110, 32, 121, 41, 32, 123, 32, 67, 82, 76, 70, 10, 105, 102, 46, 32,
    50, 61, 35, 36, 120, 32, 100, 111, 46, 32, 120, 61, 46, 32, 60, 64, 100, 116, 98, 34, 49, 32, 120, 10, 101, 108, 115, 101, 46, 32, 120, 61, 46, 32, 60, 59, 46, 95, 50, 32, 120, 44, 115, 101, 112, 32, 45, 46, 32, 123, 58, 120, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 50, 61, 35, 36, 121, 32, 100, 111, 46, 32, 121, 61, 46, 32, 60, 64, 100, 116, 98, 34, 49, 32, 121, 10, 101, 108, 115, 101, 46, 32, 121, 61, 46, 32, 60, 59, 46, 95, 50, 32, 121, 44, 115, 101, 112, 32, 45, 46, 32, 123, 58, 121, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 120, 32, 45, 58, 32, 121, 32, 100, 111, 46, 32, 39, 39, 110, 111, 32, 100, 105, 102, 102, 101, 114, 101, 110,
    99, 101, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 88, 89, 61, 58, 32, 120, 44, 121, 10, 65, 88, 61, 58, 32, 88, 61, 58, 32, 88, 89, 32, 105, 46, 32, 120, 10, 65, 89, 61, 58, 32, 89, 61, 58, 32, 88, 89, 32, 105, 46, 32, 121, 10, 78, 88, 61, 58, 32, 105, 46, 35, 120, 10, 78, 89, 61, 58, 32, 105, 46, 35, 121, 10, 83, 88, 61, 58, 32, 83, 89, 61, 58, 32, 39, 39, 39, 39, 10, 119, 104, 105, 108, 101, 46, 32, 99, 111, 109, 112, 101, 110, 100, 39, 39, 39, 39, 32, 100, 111, 46, 32, 99, 111, 109, 112, 108, 99, 115, 39, 39, 39, 39, 32, 101, 110, 100, 46, 10, 115, 120, 61, 46, 32, 47, 58, 126, 32, 83, 88, 10, 115, 121, 61, 46,
    32, 47, 58, 126, 32, 83, 89, 10, 120, 61, 46, 32, 40, 102, 109, 116, 48, 32, 115, 120, 41, 32, 44, 101, 97, 99, 104, 32, 40, 115, 120, 32, 123, 32, 65, 88, 41, 32, 123, 32, 88, 89, 10, 121, 61, 46, 32, 40, 102, 109, 116, 49, 32, 115, 121, 41, 32, 44, 101, 97, 99, 104, 32, 40, 115, 121, 32, 123, 32, 65, 89, 41, 32, 123, 32, 88, 89, 10, 114, 61, 46, 32, 40, 120, 44, 121, 41, 32, 47, 58, 32, 40, 115, 120, 44, 46, 48, 41, 44, 115, 121, 44, 46, 49, 10, 125, 58, 32, 59, 32, 114, 32, 44, 101, 97, 99, 104, 32, 76, 70, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 109, 112, 101, 110, 100, 61, 58, 32, 51, 32, 58,
    32, 48, 10, 111, 108, 100, 61, 46, 32, 48, 32, 48, 10, 108, 101, 110, 61, 46, 32, 40, 35, 88, 41, 44, 35, 89, 10, 10, 119, 104, 105, 108, 101, 46, 32, 45, 46, 32, 108, 101, 110, 32, 45, 58, 32, 111, 108, 100, 32, 100, 111, 46, 10, 32, 32, 111, 108, 100, 61, 46, 32, 108, 101, 110, 10, 32, 32, 116, 61, 46, 32, 60, 46, 47, 108, 101, 110, 10, 32, 32, 109, 61, 46, 32, 48, 32, 105, 46, 126, 32, 40, 116, 32, 123, 46, 32, 88, 41, 32, 61, 32, 116, 32, 123, 46, 32, 89, 10, 32, 32, 88, 61, 58, 32, 109, 32, 125, 46, 32, 88, 10, 32, 32, 89, 61, 58, 32, 109, 32, 125, 46, 32, 89, 10, 32, 32, 116, 61, 46, 32, 109, 32, 45, 32, 116, 10, 32, 32, 110, 61, 46, 32, 45,
    32, 43, 47, 32, 42, 46, 47, 92, 46, 32, 40, 116, 32, 123, 46, 32, 88, 41, 32, 61, 32, 116, 32, 123, 46, 32, 89, 10, 32, 32, 88, 61, 58, 32, 110, 32, 125, 46, 32, 88, 10, 32, 32, 89, 61, 58, 32, 110, 32, 125, 46, 32, 89, 10, 32, 32, 78, 88, 61, 58, 32, 109, 32, 125, 46, 32, 110, 32, 125, 46, 32, 78, 88, 10, 32, 32, 78, 89, 61, 58, 32, 109, 32, 125, 46, 32, 110, 32, 125, 46, 32, 78, 89, 10, 32, 32, 109, 61, 46, 32, 88, 32, 101, 46, 32, 89, 10, 32, 32, 105, 102, 46, 32, 48, 32, 101, 46, 32, 109, 32, 100, 111, 46, 10, 32, 32, 32, 32, 83, 88, 61, 58, 32, 83, 88, 44, 40, 45, 46, 109, 41, 35, 78, 88, 10, 32, 32, 32, 32, 88, 61, 58, 32, 109, 32, 35, 32, 88, 10,
    32, 32, 32, 32, 78, 88, 61, 58, 32, 109, 32, 35, 32, 78, 88, 10, 32, 32, 101, 110, 100, 46, 10, 32, 32, 109, 61, 46, 32, 89, 32, 101, 46, 32, 88, 10, 32, 32, 105, 102, 46, 32, 48, 32, 101, 46, 32, 109, 32, 100, 111, 46, 10, 32, 32, 32, 32, 83, 89, 61, 58, 32, 83, 89, 44, 40, 45, 46, 109, 41, 35, 78, 89, 10, 32, 32, 32, 32, 89, 61, 58, 32, 109, 32, 35, 32, 89, 10, 32, 32, 32, 32, 78, 89, 61, 58, 32, 109, 32, 35, 32, 78, 89, 10, 32, 32, 101, 110, 100, 46, 10, 32, 32, 108, 101, 110, 61, 46, 32, 40, 35, 88, 41, 44, 35, 89, 10, 101, 110, 100, 46, 10, 105, 102, 46, 32, 45, 46, 32, 48, 32, 101, 46, 32, 108, 101, 110, 32, 100, 111, 46, 32, 49, 32, 114, 101,
    116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 83, 88, 61, 58, 32, 83, 88, 44, 78, 88, 10, 83, 89, 61, 58, 32, 83, 89, 44, 78, 89, 10, 48, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 109, 112, 108, 99, 115, 61, 58, 32, 51, 32, 58, 32, 48, 10, 108, 120, 61, 46, 32, 35, 88, 10, 108, 121, 61, 46, 32, 35, 89, 10, 105, 102, 46, 32, 77, 65, 88, 76, 67, 83, 32, 60, 32, 108, 120, 32, 42, 32, 108, 121, 32, 100, 111, 46, 10, 32, 32, 115, 101, 108, 101, 99, 116, 46, 32, 77, 65, 88, 80, 70, 88, 32, 60, 32, 108, 120, 44, 108, 121, 10, 32, 32, 99, 97, 115, 101, 46, 32, 48, 32, 49, 32, 100, 111, 46, 10, 32, 32, 32, 32, 108, 121, 61, 46, 32, 60, 46, 32, 77, 65, 88, 76, 67, 83, 32, 37, 32, 108, 120, 10, 32, 32, 99, 97,
    115, 101, 46, 32, 49, 32, 48, 32, 100, 111, 46, 10, 32, 32, 32, 32, 108, 120, 61, 46, 32, 60, 46, 32, 77, 65, 88, 76, 67, 83, 32, 37, 32, 108, 121, 10, 32, 32, 99, 97, 115, 101, 46, 32, 100, 111, 46, 10, 32, 32, 32, 32, 108, 120, 61, 46, 32, 108, 121, 61, 46, 32, 77, 65, 88, 80, 70, 88, 10, 32, 32, 101, 110, 100, 46, 10, 101, 110, 100, 46, 10, 97, 61, 46, 32, 108, 120, 32, 123, 46, 32, 88, 10, 98, 61, 46, 32, 108, 121, 32, 123, 46, 32, 89
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 41632);
allocate([10, 109, 61, 46, 32, 40, 40, 98, 32, 61, 47, 32, 97, 41, 44, 46, 48, 41, 44, 48, 10, 99, 109, 61, 46, 32, 108, 99, 115, 32, 94, 58, 95, 32, 109, 10, 108, 101, 110, 61, 46, 32, 62, 46, 47, 32, 44, 99, 109, 10, 114, 99, 61, 46, 32, 49, 32, 43, 32, 109, 105, 110, 100, 120, 32, 40, 36, 99, 109, 41, 32, 35, 58, 32, 73, 46, 32, 108, 101, 110, 32, 61, 32, 44, 99, 109, 10, 99, 109, 61, 46, 32, 44, 32, 114, 99, 32, 123, 46, 32, 99, 109, 10, 109, 115, 107, 61, 46, 32, 40, 49, 43, 105, 46, 108, 101, 110, 41, 32, 61, 47, 32, 99, 109, 10, 110, 100, 120, 61, 46, 32, 60, 64, 73, 46, 34, 49, 32, 109, 115, 107, 10, 112, 111, 115, 61, 46, 32, 59, 32,
    40, 60, 114, 99, 41, 32, 35, 58, 32, 101, 97, 99, 104, 32, 110, 100, 120, 10, 112, 111, 115, 61, 46, 32, 40, 43, 47, 34, 49, 32, 112, 111, 115, 41, 44, 46, 112, 111, 115, 10, 112, 111, 115, 61, 46, 32, 40, 40, 35, 32, 38, 62, 32, 110, 100, 120, 41, 32, 35, 32, 105, 46, 108, 101, 110, 41, 44, 46, 112, 111, 115, 10, 112, 111, 115, 61, 46, 32, 47, 58, 126, 32, 112, 111, 115, 10, 39, 39, 105, 98, 32, 105, 97, 39, 39, 61, 46, 32, 124, 58, 32, 50, 32, 125, 46, 34, 49, 32, 40, 126, 58, 123, 46, 34, 49, 32, 112, 111, 115, 41, 35, 112, 111, 115, 10, 110, 61, 46, 32, 49, 32, 43, 32, 123, 58, 32, 105, 97, 10, 83, 88, 61, 58, 32, 83, 88, 44, 40, 60, 60, 60,
    105, 97, 41, 32, 123, 32, 110, 32, 123, 46, 32, 78, 88, 10, 88, 61, 58, 32, 110, 32, 125, 46, 32, 88, 10, 78, 88, 61, 58, 32, 110, 32, 125, 46, 32, 78, 88, 10, 110, 61, 46, 32, 49, 32, 43, 32, 123, 58, 32, 105, 98, 10, 83, 89, 61, 58, 32, 83, 89, 44, 40, 60, 60, 60, 105, 98, 41, 32, 123, 32, 110, 32, 123, 46, 32, 78, 89, 10, 89, 61, 58, 32, 110, 32, 125, 46, 32, 89, 10, 78, 89, 61, 58, 32, 110, 32, 125, 46, 32, 78, 89, 10, 48, 10, 41, 10, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 33, 58, 49, 49, 48, 41, 32, 39, 99, 111, 109, 112, 97, 114, 101, 61, 58, 32, 52, 32, 58, 32, 48, 10, 105, 102, 46, 32, 120, 32, 45, 58, 32, 121, 32, 100, 111, 46, 32, 39, 39, 110, 111, 32, 100, 105, 102, 102, 101, 114, 101, 110, 99, 101, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 48, 61, 35, 120, 32, 100, 111, 46, 32, 39, 39, 101, 109, 112, 116, 121, 32, 108, 101, 102, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 105, 102, 46, 32, 48, 61, 35, 121, 32, 100,
    111, 46, 32, 39, 39, 101, 109, 112, 116, 121, 32, 114, 105, 103, 104, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 39, 39, 32, 114, 101, 116, 117, 114, 110, 46, 32, 101, 110, 100, 46, 10, 97, 61, 46, 32, 99, 111, 110, 101, 119, 32, 39, 39, 106, 99, 111, 109, 112, 97, 114, 101, 39, 39, 10, 114, 61, 46, 32, 120, 32, 99, 111, 109, 112, 95, 95, 97, 32, 121, 10, 99, 111, 101, 114, 97, 115, 101, 32, 97, 10, 114, 10, 41, 10, 102, 99, 111, 109, 112, 97, 114, 101, 61, 58, 32, 51, 32, 58, 32, 48, 10, 40, 39, 39, 39, 39, 59, 48, 41, 32, 102, 99, 111, 109, 112, 32, 121, 10, 58, 10, 40, 120, 59, 48, 41, 32, 102, 99, 111, 109, 112, 32, 121, 10, 41,
    10, 102, 99, 111, 109, 112, 97, 114, 101, 115, 61, 58, 32, 51, 32, 58, 32, 48, 10, 40, 39, 39, 39, 39, 59, 49, 41, 32, 102, 99, 111, 109, 112, 32, 121, 10, 58, 10, 40, 120, 59, 49, 41, 32, 102, 99, 111, 109, 112, 32, 121, 10, 41, 10, 99, 111, 109, 112, 97, 114, 101, 95, 122, 95, 61, 58, 32, 99, 111, 109, 112, 97, 114, 101, 95, 106, 99, 111, 109, 112, 97, 114, 101, 95, 10, 102, 99, 111, 109, 112, 97, 114, 101, 95, 122, 95, 61, 58, 32, 102, 99, 111, 109, 112, 97, 114, 101, 95, 106, 99, 111, 109, 112, 97, 114, 101, 95, 10, 102, 99, 111, 109, 112, 97, 114, 101, 115, 95, 122, 95, 61, 58, 32, 102, 99, 111, 109, 112, 97, 114, 101, 115, 95, 106,
    99, 111, 109, 112, 97, 114, 101, 95, 10, 10, 99, 111, 99, 117, 114, 114, 101, 110, 116, 32, 60, 39, 39, 98, 97, 115, 101, 39, 39, 39
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 51872);
allocate([240, 63, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 89, 64, 0, 0, 0, 0, 0, 64, 143, 64, 0, 0, 0, 0, 0, 136, 195, 64, 0, 0, 0, 0, 0, 106, 248, 64, 0, 0, 0, 0, 128, 132, 46, 65, 0, 0, 0, 0, 208, 18, 99, 65, 0, 0, 0, 0, 132, 215, 151, 65, 0, 0, 0, 0, 101, 205, 205, 65, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 154, 153, 153, 153, 153, 153, 185, 63, 123, 20, 174, 71, 225, 122, 132, 63, 252, 169, 241, 210, 77, 98, 80, 63, 45, 67, 28, 235, 226, 54, 26, 63, 241, 104, 227, 136, 181, 248, 228, 62, 141, 237, 181, 160, 247, 198, 176, 62, 72, 175, 188, 154, 242, 215,
    122, 62, 58, 140, 48, 226, 142, 121, 69, 62, 149, 214, 38, 232, 11, 46, 17, 62, 255, 253, 3, 48, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 2, 3, 4, 5, 6, 7, 32, 32, 32, 11, 12, 32, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57, 95, 49, 50, 51, 52, 53, 54, 140, 172, 144, 156, 188, 164, 148, 180, 152, 130, 128, 0, 0, 0, 0, 0, 32, 32, 32, 32, 0, 0, 0, 0, 61, 60, 62, 136, 138, 149, 0, 0, 130, 131, 132, 133, 43, 137,
    42, 139, 45, 37, 143, 94, 144, 124, 33, 91, 93, 205, 211, 216, 200, 232, 0, 0, 140, 141, 0, 0, 0, 0, 0, 0, 48, 32, 111, 117, 116, 112, 117, 116, 95, 106, 102, 101, 95, 32, 40, 49, 53, 33, 58, 49, 56, 41, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 93, 131, 133, 140, 45, 137, 141, 211, 205, 0, 0, 0, 0, 0, 0, 37, 43, 45, 91, 93, 150, 151, 212, 140, 165, 192, 142, 62, 60, 144, 94, 133, 131, 141, 137, 143, 139, 172, 157, 161, 160, 177, 176, 0, 37, 43, 45, 91, 93, 150, 151, 212, 140, 165, 192, 142, 60, 62, 94, 144, 131, 133, 137, 141, 139, 143, 157, 172, 160, 161, 176, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 43, 61, 130, 132, 136,
    138, 149, 0, 0, 0, 0, 0, 0, 0, 0, 95, 112, 137, 0, 255, 9, 47, 15, 10, 0, 0, 0, 100, 0, 0, 0, 232, 3, 0, 0, 16, 39, 0, 0, 160, 134, 1, 0, 64, 66, 15, 0, 128, 150, 152, 0, 0, 225, 245, 5, 5, 0, 0, 0, 25, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 5, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 130, 132, 43, 136, 137, 42, 138, 139, 141, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 25, 182, 111, 252, 140, 120, 226, 63, 45, 250, 106, 2, 244, 252, 228, 191, 67, 112, 162, 143, 94, 129, 165, 191, 191, 63, 180, 32, 35, 81, 197, 63, 141, 64, 195, 3, 241, 154, 165, 191, 49, 62, 72, 40, 175, 180, 131, 191, 63, 96, 127, 82, 156, 145, 125, 63, 73, 163, 227, 44, 17, 23, 83, 191, 228, 78,
    241, 230, 79, 54, 44, 191, 230, 5, 218, 140, 167, 200, 32, 63, 3, 133, 71, 175, 232, 28, 245, 190, 153, 60, 192, 31, 212, 250, 180, 190, 138, 95, 189, 157, 80, 2, 179, 62, 211, 108, 109, 102, 134, 153, 139, 190, 159, 126, 155, 178, 183, 68, 58, 62, 150, 70, 207, 241, 195, 123, 53, 62, 253, 228, 75, 246, 76, 75, 20, 190, 216, 7, 183, 250, 118, 174, 220, 61, 219, 69, 207, 160, 11, 29, 161, 61, 114, 125, 247, 13, 58, 66, 144, 189, 192, 110, 72, 239, 171, 241, 97, 61, 213, 62, 48, 182, 139, 49, 23, 189, 55, 180, 30, 176, 198, 81, 248, 188, 133, 120, 221, 68, 92, 56, 217, 60, 188, 137, 216, 151, 178, 210, 156, 60, 0, 0, 96, 4, 0, 0, 4, 0, 255,
    253, 3, 48, 255, 255, 255, 255, 218, 10, 0, 0, 68, 9, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 255, 253, 111, 52, 0, 0, 4, 0, 0, 0, 4, 0, 255, 253, 3, 48, 218, 10, 0, 0, 68, 9, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 255, 253, 111, 52, 255, 253, 3, 48, 0, 0, 4, 0, 255, 253, 3, 48, 48, 6, 0, 0, 104, 12, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 255, 253, 111, 52, 255, 253, 7, 48, 0, 0, 8, 0, 255, 255, 255, 255, 46, 12, 0, 0, 98, 9, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 255, 253, 111, 52, 255, 253, 7, 48, 0, 0, 16, 0, 255, 253, 7, 48, 152, 9, 0, 0, 108, 2, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 255, 253, 111, 52, 255, 253, 7, 48, 0, 0, 4, 0, 0, 0, 4, 0, 238, 1, 0, 0, 44, 7, 0, 0,
    1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 96, 4, 255, 253, 31, 48, 255, 253, 31, 48, 255, 255, 255, 255, 20, 12, 0, 0, 36, 4, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 255, 253, 3, 50, 0, 0, 32, 0, 255, 253, 31, 48, 255, 255, 255, 255, 58, 12, 0, 0, 42, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 255, 253, 31, 48, 0, 0, 0, 8, 255, 255, 255, 255, 126, 0, 0, 0, 170, 7, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 166, 9, 0, 0, 178, 4, 0, 0, 64, 8, 0, 0, 152, 6, 0, 0, 188, 6, 0, 0, 48, 3, 0, 0, 208, 6, 0, 0, 230, 6, 0, 0, 30, 11, 0, 0, 146, 3, 0, 0, 104, 2, 0, 0, 116, 6, 0, 0, 118, 12, 0, 0, 226, 5, 0, 0, 62, 5, 0, 0, 34, 3, 0, 0, 172, 9, 0, 0, 170, 4, 0, 0, 50,
    8, 0, 0, 148, 6, 0, 0, 184, 6, 0, 0, 52, 3, 0, 0, 206, 6, 0, 0, 234, 6, 0, 0, 40, 11, 0, 0, 142, 3, 0, 0, 100, 2, 0, 0, 110, 6, 0, 0, 112, 12, 0, 0, 224, 5, 0, 0, 68, 5, 0, 0, 162, 1, 0, 0, 80, 0, 0, 0, 24, 6, 0, 0, 78, 9, 0, 0, 234, 2, 0, 0, 120, 7, 0, 0, 62, 1, 0, 0, 172, 11, 0, 0, 34, 7, 0, 0, 192, 10, 0, 0, 184, 5, 0, 0, 254, 1, 0, 0, 224, 9, 0, 0, 132, 7, 0, 0, 174, 11, 0, 0, 96, 2, 0, 0, 224, 6, 0, 0, 116, 7, 0, 0, 156, 9, 0, 0, 6, 4, 0, 0, 148, 11, 0, 0, 138, 5, 0, 0, 42, 8, 0, 0, 156, 2, 0, 0, 50, 0, 0, 0, 254, 6, 0, 0, 116, 9, 0, 0, 244, 10, 0, 0, 120, 4, 0, 0, 106, 11, 0, 0, 216, 7, 0, 0, 140, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 128, 64, 32, 16, 8, 4, 2, 1, 0, 128, 224, 55, 121, 195, 65, 67, 23, 110, 5, 181, 181, 184, 147, 70, 245, 249, 63, 233, 3, 79, 56, 77, 50, 29, 48, 249, 72, 119, 130, 90, 60, 191, 115, 127, 221, 79, 21, 117, 224, 1, 0, 0, 216, 1, 0, 0, 228, 1, 0, 0, 224, 11, 0, 0, 222, 11, 0, 0, 226, 11, 0, 0, 64, 0, 0, 0, 76, 0, 0, 0, 14, 0, 0, 0, 170, 6, 0, 0, 164, 6, 0, 0, 168, 6, 0, 0, 58, 11, 0, 0, 50, 11, 0, 0, 56, 11, 0, 0, 100, 8, 0, 0, 98, 8, 0, 0, 102, 8, 0, 0, 94, 5, 0, 0, 96, 5, 0, 0, 92, 5, 0, 0, 146, 11, 0, 0, 150, 11, 0, 0, 192, 5, 0, 0, 178, 12, 0, 0, 182, 12, 0, 0, 176, 12, 0, 0, 140,
    10, 0, 0, 134, 10, 0, 0, 142, 10, 0, 0, 234, 5, 0, 0, 228, 5, 0, 0, 232, 5, 0, 0, 162, 8, 0, 0, 156, 8, 0, 0, 160, 8, 0, 0, 56, 2, 0, 0, 62, 2, 0, 0, 54, 2, 0, 0, 106, 8, 0, 0, 110, 8, 0, 0, 108, 8, 0, 0, 62, 6, 0, 0, 126, 9, 0, 0, 112, 9, 0, 0, 56, 7, 0, 0, 50, 7, 0, 0, 60, 7, 0, 0, 230, 2, 0, 0, 224, 2, 0, 0, 228, 2, 0, 0, 174, 5, 0, 0, 164, 10, 0, 0, 170, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 8, 0, 0, 138, 4, 0, 0, 118, 8, 0, 0, 26, 0, 0, 0, 36, 0, 0, 0, 34, 0, 0, 0, 92, 3, 0, 0, 98, 3, 0, 0, 88, 3, 0, 0, 84, 6, 0, 0, 100,
    5, 0, 0, 102, 5, 0, 0, 252, 0, 0, 0, 244, 0, 0, 0, 248, 0, 0, 0, 210, 10, 0, 0, 206, 10, 0, 0, 208, 10, 0, 0, 46, 10, 0, 0, 50, 10, 0, 0, 48, 10, 0, 0, 208, 8, 0, 0, 182, 3, 0, 0, 174, 3, 0, 0, 56, 8, 0, 0, 68, 8, 0, 0, 136, 11, 0, 0, 8, 5, 0, 0, 254, 4, 0, 0, 250, 3, 0, 0, 122, 9, 0, 0, 110, 9, 0, 0, 124, 9, 0, 0, 16, 12, 0, 0, 8, 12, 0, 0, 14, 12, 0, 0, 194, 5, 0, 0, 200, 5, 0, 0, 62, 8, 0, 0, 80, 12, 0, 0, 84, 12, 0, 0, 158, 4, 0, 0, 242, 3, 0, 0, 248, 3, 0, 0, 238, 3, 0, 0, 196, 7, 0, 0, 186, 7, 0, 0, 194, 7, 0, 0, 200, 12, 0, 0, 196, 12, 0, 0, 202, 12, 0, 0, 148, 2, 0, 0, 140, 2, 0, 0, 146, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 1, 0, 0, 152, 1, 0, 0, 120, 2, 0, 0, 32, 5, 0, 0, 28, 5, 0, 0, 38, 5, 0, 0, 188, 9, 0, 0, 180, 9, 0, 0, 184, 9, 0, 0, 178, 3, 0, 0, 184, 3, 0, 0, 176, 3, 0, 0, 36, 1, 0, 0, 40, 1, 0, 0, 34, 1, 0, 0, 6, 9, 0, 0, 8, 9, 0, 0, 2, 9, 0, 0, 82, 3, 0, 0, 72, 3, 0, 0, 84, 3, 0, 0, 60, 11, 0, 0, 48, 11, 0, 0, 54, 11, 0, 0, 90, 1, 0, 0, 86, 1, 0, 0, 88, 1, 0, 0, 0, 5, 0, 0, 2, 4, 0, 0, 252, 4, 0, 0, 254, 10, 0, 0, 4, 11, 0, 0, 0, 11, 0, 0, 6, 12, 0, 0, 18, 12, 0, 0, 4, 12, 0, 0, 108, 0, 0, 0, 98, 0, 0, 0, 250, 1, 0, 0, 38, 8, 0, 0, 30, 8, 0, 0, 36, 8, 0, 0, 72, 11, 0, 0, 68, 11, 0, 0, 70, 11, 0, 0,
    124, 1, 0, 0, 128, 1, 0, 0, 116, 1, 0, 0, 74, 7, 0, 0, 78, 7, 0, 0, 76, 7, 0, 0, 180, 8, 0, 0, 96, 1, 0, 0, 178, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 10, 0, 0, 40, 10, 0, 0, 36, 10, 0, 0, 182, 7, 0, 0, 172, 5, 0, 0, 164, 5, 0, 0, 234, 7, 0, 0, 20, 10, 0, 0, 236, 7, 0, 0, 220, 7, 0, 0, 224, 7, 0, 0, 218, 7, 0, 0, 176, 10, 0, 0, 186, 10, 0, 0, 174, 10, 0, 0, 190, 9, 0, 0, 200, 9, 0, 0, 194, 9, 0, 0, 30, 6, 0, 0, 14, 6, 0, 0, 22, 6, 0, 0, 120, 10, 0, 0, 116, 10, 0, 0, 122, 10, 0, 0, 182, 0, 0, 0, 174, 0, 0, 0, 180, 0, 0,
    0, 180, 11, 0, 0, 184, 11, 0, 0, 182, 11, 0, 0, 82, 5, 0, 0, 86, 5, 0, 0, 76, 5, 0, 0, 176, 11, 0, 0, 0, 10, 0, 0, 248, 9, 0, 0, 16, 10, 0, 0, 198, 5, 0, 0, 14, 10, 0, 0, 244, 1, 0, 0, 242, 1, 0, 0, 248, 1, 0, 0, 164, 4, 0, 0, 160, 4, 0, 0, 162, 4, 0, 0, 90, 8, 0, 0, 94, 8, 0, 0, 92, 8, 0, 0, 46, 2, 0, 0, 48, 2, 0, 0, 42, 2, 0, 0, 136, 6, 0, 0, 142, 6, 0, 0, 134, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 7, 0, 0, 158, 7, 0, 0, 154, 7, 0, 0, 74, 3, 0, 0, 80, 3, 0, 0, 76, 3, 0, 0, 68, 0, 0, 0, 74, 0, 0, 0, 72, 0, 0, 0, 138, 10,
    0, 0, 178, 11, 0, 0, 154, 11, 0, 0, 228, 0, 0, 0, 230, 0, 0, 0, 224, 0, 0, 0, 40, 5, 0, 0, 48, 5, 0, 0, 46, 5, 0, 0, 254, 11, 0, 0, 250, 11, 0, 0, 86, 8, 0, 0, 216, 5, 0, 0, 222, 5, 0, 0, 220, 5, 0, 0, 48, 1, 0, 0, 50, 1, 0, 0, 46, 1, 0, 0, 126, 4, 0, 0, 122, 4, 0, 0, 128, 4, 0, 0, 164, 12, 0, 0, 166, 12, 0, 0, 160, 12, 0, 0, 42, 10, 0, 0, 34, 10, 0, 0, 38, 10, 0, 0, 152, 12, 0, 0, 146, 12, 0, 0, 148, 12, 0, 0, 148, 9, 0, 0, 202, 6, 0, 0, 160, 9, 0, 0, 164, 1, 0, 0, 172, 1, 0, 0, 158, 1, 0, 0, 18, 5, 0, 0, 16, 5, 0, 0, 22, 5, 0, 0, 102, 0, 0, 0, 116, 0, 0, 0, 100, 0, 0, 0, 68, 10, 0, 0, 58, 10, 0, 0, 64, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 10, 0, 0, 26, 10, 0, 0, 30, 10, 0, 0, 132, 5, 0, 0, 136, 5, 0, 0, 130, 5, 0, 0, 18, 3, 0, 0, 8, 3, 0, 0, 14, 3, 0, 0, 70, 8, 0, 0, 78, 8, 0, 0, 76, 8, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0, 0, 22, 3, 0, 0, 30, 3, 0, 0, 228, 4, 0, 0, 166, 1, 0, 0, 170, 1, 0, 0, 160, 1, 0, 0, 46, 4, 0, 0, 48, 4, 0, 0, 108, 12, 0, 0, 220, 8, 0, 0, 228, 8, 0, 0, 124, 2, 0, 0, 150, 10, 0, 0, 166, 10, 0, 0, 6, 8, 0, 0, 154, 3, 0, 0, 158, 3, 0, 0, 156, 3, 0, 0, 238, 0, 0, 0, 250, 0, 0, 0, 242, 0, 0, 0, 56, 6, 0, 0, 54, 6, 0, 0, 58, 6, 0, 0, 208, 2, 0, 0, 40, 9, 0, 0, 214, 2, 0, 0, 206, 7, 0, 0, 202,
    7, 0, 0, 204, 7, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 90, 0, 0, 0, 76, 10, 0, 0, 80, 10, 0, 0, 70, 10, 0, 0, 66, 11, 0, 0, 62, 11, 0, 0, 64, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 6, 0, 0, 192, 6, 0, 0, 194, 6, 0, 0, 198, 2, 0, 0, 192, 2, 0, 0, 194, 2, 0, 0, 44, 5, 0, 0, 50, 5, 0, 0, 42, 5, 0, 0, 108, 10, 0, 0, 100, 10, 0, 0, 110, 10, 0, 0, 64, 2, 0, 0, 124, 0, 0, 0, 128, 0, 0, 0, 32, 12, 0, 0, 28, 12, 0, 0, 30, 12, 0, 0, 212, 4, 0, 0, 32, 3, 0, 0, 26, 3, 0, 0, 106, 7, 0, 0, 112, 7, 0, 0, 244, 6, 0, 0, 102, 10, 0, 0, 106, 10,
    0, 0, 180, 10, 0, 0, 110, 1, 0, 0, 102, 1, 0, 0, 108, 1, 0, 0, 156, 7, 0, 0, 152, 7, 0, 0, 162, 7, 0, 0, 234, 9, 0, 0, 206, 9, 0, 0, 74, 12, 0, 0, 142, 12, 0, 0, 102, 11, 0, 0, 144, 12, 0, 0, 44, 4, 0, 0, 50, 4, 0, 0, 40, 4, 0, 0, 6, 7, 0, 0, 14, 7, 0, 0, 8, 7, 0, 0, 176, 5, 0, 0, 200, 7, 0, 0, 214, 7, 0, 0, 198, 11, 0, 0, 192, 11, 0, 0, 200, 11, 0, 0, 220, 3, 0, 0, 212, 3, 0, 0, 222, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 11, 0, 0, 42, 11, 0, 0, 28, 11, 0, 0, 60, 8, 0, 0, 66, 8, 0, 0, 134, 11, 0, 0, 86, 9, 0, 0, 82, 9, 0,
    0, 84, 9, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 66, 0, 0, 0, 214, 4, 0, 0, 218, 4, 0, 0, 216, 4, 0, 0, 222, 1, 0, 0, 226, 1, 0, 0, 218, 1, 0, 0, 242, 11, 0, 0, 240, 11, 0, 0, 246, 11, 0, 0, 214, 5, 0, 0, 210, 5, 0, 0, 212, 5, 0, 0, 138, 6, 0, 0, 132, 6, 0, 0, 140, 6, 0, 0, 230, 3, 0, 0, 234, 3, 0, 0, 228, 3, 0, 0, 38, 12, 0, 0, 42, 12, 0, 0, 40, 12, 0, 0, 24, 2, 0, 0, 30, 2, 0, 0, 26, 2, 0, 0, 80, 11, 0, 0, 74, 11, 0, 0, 82, 11, 0, 0, 190, 4, 0, 0, 182, 4, 0, 0, 186, 4, 0, 0, 4, 6, 0, 0, 0, 6, 0, 0, 8, 6, 0, 0, 84, 4, 0, 0, 92, 4, 0, 0, 82, 4, 0, 0, 52, 12, 0, 0, 64, 12, 0, 0, 56, 12, 0, 0, 178, 2, 0, 0, 184, 2, 0, 0, 182, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 6, 0, 0, 64, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 7, 0, 0, 56, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 112, 8, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 6, 0, 0, 236, 1, 0, 0, 208, 12, 0, 0, 0, 1, 0, 0, 72, 7, 0, 0, 2, 10, 0, 0, 216, 12, 0, 0, 162, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 20, 1, 0, 0, 62, 7, 0, 0, 246, 4, 0, 0, 228, 10, 0, 0, 128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 9, 0, 0, 216, 11, 0, 0, 22, 9, 0, 0, 232, 9, 0, 0, 226, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 5, 0, 0, 80, 8, 0, 0, 32, 2, 0, 0, 220, 4, 0, 0, 104, 11, 0, 0, 198, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 9, 0, 0, 188, 1, 0, 0, 160, 6, 0, 0, 28, 9, 0, 0, 84, 2, 0, 0, 10, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 6, 0, 0,
    246, 2, 0, 0, 242, 10, 0, 0, 116, 11, 0, 0, 158, 12, 0, 0, 60, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 7, 0, 0, 68, 1, 0, 0, 22, 11, 0, 0, 114, 10, 0, 0, 56, 4, 0, 0, 218, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 6, 0, 0, 50, 6, 0, 0, 52, 0, 0, 0, 138, 2, 0, 0, 74, 6, 0, 0, 238, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 12, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 6, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 9, 0, 0, 70, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 11, 0, 0, 84, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 7, 0, 0, 192, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 6, 0, 0, 244, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 7, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 6, 0, 0, 52, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 58, 32, 42, 32, 40, 48, 32, 50, 37, 51, 41, 38, 112, 46, 0, 118, 0, 0, 0, 0, 0, 0, 0, 60, 40, 123, 91, 0, 0, 0, 0, 99, 111, 110, 116, 105, 110, 117, 101, 46, 0, 0, 0, 0, 0, 0, 0, 51, 32, 58, 32, 40, 39, 103, 61, 58, 112, 46, 38, 121, 64, 58, 40, 40, 0, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 97, 32, 117, 110, 105, 113,
    117, 101, 0, 114, 111, 111, 116, 32, 97, 116, 111, 109, 0, 0, 0, 0, 0, 0, 0, 48, 46, 53, 106, 95, 48, 46, 53, 38, 42, 0, 0, 0, 0, 0, 0, 42, 32, 61, 47, 126, 64, 40, 105, 46, 64, 36, 41, 0, 0, 0, 0, 117, 46, 0, 0, 0, 0, 0, 0, 95, 46, 0, 0, 0, 0, 0, 0, 32, 97, 46, 0, 0, 0, 0, 0, 62, 41, 125, 93, 0, 0, 0, 0, 99, 97, 116, 99, 104, 116, 46, 0, 36, 38, 49, 38, 36, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 97, 32, 105, 110, 100, 101, 120, 0, 0, 115, 110, 32, 110, 111, 110, 45, 110, 101, 103, 97, 116, 105, 118, 101, 0, 115, 58, 32, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 32, 97, 58, 0, 0, 0, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 0, 0, 0, 0, 0, 99, 97, 116, 99, 104,
    100, 46, 0, 52, 32, 58, 32, 39, 43, 47, 120, 42, 121, 40, 91, 58, 43, 47, 47, 46, 42, 47, 41, 94, 58, 40, 105, 46, 35, 120, 41, 32, 49, 39, 0, 115, 99, 104, 101, 99, 107, 32, 97, 32, 114, 97, 110, 107, 0, 0, 0, 115, 110, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 0, 40, 45, 32, 126, 58, 41, 38, 46, 113, 58, 0, 0, 0, 0, 0, 0, 51, 32, 58, 39, 40, 45, 40, 33, 45, 121, 34, 95, 41, 37, 49, 101, 95, 51, 38, 42, 32, 33, 34, 48, 32, 68, 58, 49, 32, 93, 41, 94, 58, 95, 32, 60, 46, 38, 49, 55, 48, 94, 58, 40, 45, 58, 43, 41, 94, 46, 121, 39, 32, 58, 46, 32, 33, 0, 0, 0, 0, 0, 0, 0, 120, 32, 121, 125, 40, 49, 43, 62, 46, 47, 121, 41, 36, 48, 0, 0, 117, 58, 32,
    0, 0, 0, 0, 0, 110, 46, 0, 0, 0, 0, 0, 0, 32, 95, 46, 0, 0, 0, 0, 0, 112, 105, 110, 105, 116, 32, 102, 97, 105, 108, 101, 100, 59, 32, 101, 114, 114, 111, 114, 32, 37, 104, 104, 105, 10, 0, 0, 0, 0, 0, 0, 0, 105, 110, 102, 105, 110, 105, 116, 121, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 99, 97, 116, 99, 104, 46, 0, 0, 43, 47, 47, 46, 0, 0, 0, 0, 32, 32, 32, 32, 32, 50, 38, 124, 32, 32, 42, 32, 120, 32, 116, 46, 0, 0, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 120, 32, 109, 105, 115, 115, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 115, 110, 32, 97, 116, 111, 109, 0, 125, 58, 64, 59, 64, 40, 44, 38, 39, 32, 39, 38, 46, 62, 34,
    49, 41, 32, 58, 46, 32, 59, 58, 0, 43, 47, 32, 46, 42, 0, 0, 0, 109, 110, 117, 118, 120, 121, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 95, 95, 0, 0, 0, 0, 0, 0, 32, 32, 95, 46, 0, 0, 0, 0, 91, 58, 37, 108, 105, 93, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 46, 0, 0, 0, 0, 0, 99, 97, 115, 101, 46, 0, 0, 0, 120, 98, 105, 110, 0, 0, 0, 0, 48, 38, 61, 64, 40, 50, 38, 124, 41, 32, 42, 32, 120, 32, 116, 46, 0, 0, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 109, 105, 115, 115, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 99, 32, 110, 111, 110, 45, 110, 101, 103, 97, 116, 105, 118, 101, 0, 0, 101, 118, 105, 110, 105, 116, 32, 102, 97, 105, 108, 101, 100, 59, 32, 101,
    114, 114, 111, 114, 32, 37, 104, 104, 105, 10, 0, 0, 0, 0, 0, 0, 47, 58, 64, 124, 46, 0, 0, 0, 118, 97, 108, 117, 101, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 40, 123, 46, 32, 61, 47, 32, 42, 47, 64, 125, 46, 64, 36, 32, 124, 32, 93, 41, 64, 40, 105, 46, 64, 36, 41, 0, 0, 0, 0, 0, 0, 116, 105, 109, 101, 32, 108, 105, 109, 105, 116, 0, 0, 0, 0, 0, 0, 115, 121, 115, 116, 101, 109, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 115, 98, 105, 110, 115, 101, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 114, 102, 99, 113, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 117, 32, 111, 114, 100, 101,
    114, 0, 117, 32, 115, 117, 99, 99, 101, 115, 115, 111, 114, 0, 0, 0, 0, 0, 115, 116, 97, 99, 107, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 115, 112, 101, 108, 108, 105, 110, 103, 32, 101, 114, 114, 111, 114, 0, 0, 117, 32, 112, 114, 101, 100, 101, 99, 101, 115, 115, 111, 114, 0, 0, 0, 109, 46, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 115, 101, 99, 117, 114, 105, 116, 121, 32, 118, 105, 111, 108, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 117, 32, 114, 105, 103, 104, 116, 0, 58, 32, 0, 0, 0, 0, 0, 0, 101, 44, 46, 45, 42, 0, 0, 0, 98, 114, 101, 97, 107, 46, 0, 0, 48, 32, 49, 112, 49, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 101, 32, 109, 105, 115, 115,
    105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 99, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 0, 0, 114, 101, 97, 100, 45, 111, 110, 108, 121, 32, 100, 97, 116, 97, 0, 0, 117, 32, 108, 101, 102, 116, 0, 0, 40, 60, 34, 49, 41, 0, 0, 0, 114, 97, 110, 107, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 47, 58, 64, 120, 64, 40, 105, 46, 64, 35, 41, 32, 123, 32, 93, 0, 114, 46, 47, 34, 49, 34, 95, 32, 58, 46, 32, 42, 46, 0, 0, 0, 49, 36, 46, 0, 0, 0, 0, 0, 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 0, 0, 106, 55, 48, 49, 47, 50, 48, 49, 49, 45, 48, 50, 45, 50, 51, 47, 49, 53, 58, 50, 53, 0, 0, 0, 117, 32, 99, 111, 108, 111, 114, 0, 43,
    45, 126, 50, 106, 49, 0, 0, 40, 124, 58, 61, 47, 93, 41, 64, 40, 105, 46, 64, 36, 41, 0, 0, 111, 112, 101, 110, 32, 113, 117, 111, 116, 101, 0, 0, 0, 0, 0, 0, 117, 47, 104, 32, 109, 105, 115, 109, 97, 116, 99, 104, 0, 0, 0, 0, 49, 62, 46, 123, 46, 64, 47, 58, 34, 49, 124, 121, 45, 47, 40, 105, 46, 33, 93, 41, 0, 0, 0, 0, 43, 45, 126, 50, 46, 49, 0, 0, 110, 111, 110, 45, 117, 110, 105, 113, 117, 101, 32, 115, 112, 97, 114, 115, 101, 32, 101, 108, 101, 109, 101, 110, 116, 115, 0, 0, 0, 0, 0, 0, 117, 32, 104, 97, 115, 104, 0, 0, 37, 58, 121, 42, 33, 0, 0, 0, 43, 45, 126, 50, 0, 0, 0, 0, 110, 111, 110, 99, 101, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 117,
    32, 105, 110, 100, 101, 120, 47, 108, 101, 110, 103, 116, 104, 0, 0, 78, 97, 78, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 32, 58, 32, 0, 0, 0, 0, 0, 36, 115, 58, 32, 39, 32, 39, 0, 108, 111, 99, 97, 108, 101, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 117, 32, 105, 110, 100, 101, 120, 32, 97, 108, 105, 103, 110, 109, 101, 110, 116, 0, 0, 0, 0, 0, 0, 0, 34, 48, 32, 68, 58, 49, 32, 93, 41, 94, 58, 95, 91, 0, 0, 0, 108, 105, 109, 105, 116, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 117, 32, 105, 110, 100, 101, 120, 0, 45, 121, 34, 95, 41, 37, 49, 101, 95, 51, 38, 42, 32, 0, 0, 0, 105, 110, 112, 117, 116, 95, 106, 102, 101, 95, 39, 39, 0, 0, 0, 0,
    36, 48, 120, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 116, 104, 110, 0, 0, 0, 0, 0, 108, 101, 110, 103, 116, 104, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 32, 95, 95, 0, 0, 0, 0, 0, 104, 32, 102, 117, 108, 108, 0, 0, 91, 37, 108, 105, 93, 0, 0, 0, 51, 32, 58, 39, 40, 45, 40, 0, 63, 98, 100, 109, 110, 112, 113, 114, 115, 0, 0, 0, 0, 0, 0, 0, 120, 115, 113, 114, 116, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 97, 32, 109, 105, 115, 115, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 48, 32, 48, 106, 49, 0, 0, 0, 99, 32, 97, 116, 111, 109, 0, 0, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 101, 114, 114, 111, 114, 0, 104, 32, 105, 110, 100, 101, 120, 0, 36, 38, 120,
    64, 62, 58, 64, 40, 121, 38, 40, 60, 46, 64, 94, 46, 41, 41, 64, 40, 49, 38, 62, 46, 41, 64, 40, 62, 46, 47, 41, 64, 58, 124, 64, 44, 32, 35, 58, 32, 93, 0, 0, 0, 0, 0, 0, 0, 105, 110, 112, 117, 116, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 0, 40, 112, 58, 64, 105, 46, 64, 35, 32, 42, 47, 32, 46, 94, 32, 93, 41, 34, 49, 0, 0, 0, 0, 0, 106, 46, 47, 34, 49, 34, 95, 32, 58, 46, 32, 43, 46, 0, 0, 0, 105, 110, 100, 101, 120, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 99, 32, 98, 111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 35, 104, 0, 42, 47, 64, 40, 94, 47, 41, 34, 50, 0, 0, 0, 0, 0, 0, 0, 46, 46, 46, 0, 0, 0, 0, 0, 36, 97, 58, 0, 0, 0, 0, 0, 40, 124, 46,
    61, 47, 93, 41, 64, 40, 105, 46, 64, 36, 41, 0, 0, 105, 108, 108, 45, 102, 111, 114, 109, 101, 100, 32, 110, 117, 109, 98, 101, 114, 0, 0, 0, 0, 0, 0, 0, 108, 97, 98, 101, 108, 95, 0, 0, 104, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 0, 0, 120, 38, 42, 64, 40, 94, 38, 40, 120, 45, 49, 41, 41, 0, 0, 0, 93, 32, 124, 58, 126, 32, 120, 32, 67, 46, 94, 58, 95, 49, 32, 105, 46, 64, 35, 64, 36, 0, 0, 0, 117, 58, 32, 39, 39, 0, 0, 0, 105, 108, 108, 45, 102, 111, 114, 109, 101, 100, 32, 110, 97, 109, 101, 0, 103, 111, 116, 111, 95, 0, 0, 0, 40, 94, 46, 120, 41, 38, 42, 64, 121, 0, 0, 0, 0, 0, 0, 0, 95, 50, 38, 43, 94, 58, 40, 48, 38, 112, 58, 41, 94, 58,
    95, 0, 105, 46, 64, 40, 48, 38, 44, 41, 64, 40, 50, 38, 125, 46, 41, 64, 36, 0, 0, 0, 0, 0, 0, 0, 40, 94, 47, 105, 46, 64, 35, 41, 32, 43, 47, 32, 46, 42, 32, 93, 0, 0, 0, 0, 0, 0, 0, 0, 102, 105, 108, 101, 32, 110, 117, 109, 98, 101, 114, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 102, 111, 114, 95, 0, 0, 0, 0, 115, 110, 32, 98, 111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 35, 115, 0, 0, 0, 0, 0, 0, 0, 0, 40, 45, 120, 41, 38, 37, 64, 40, 42, 32, 42, 58, 64, 94, 46, 41, 0, 0, 0, 0, 0, 0, 0, 0, 105, 46, 34, 49, 38, 49, 0, 0, 42, 42, 108, 111, 99, 97, 108, 42, 42, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 102, 105, 108, 101, 32, 110, 97, 109, 101, 32, 101,
    114, 114, 111, 114, 0, 40, 123, 38, 48, 32, 49, 32, 48, 32, 95, 49, 64, 40, 52, 38, 124, 41, 32, 37, 32, 93, 41, 32, 42, 32, 40, 91, 58, 32, 42, 47, 32, 40, 49, 38, 43, 32, 37, 32, 50, 38, 43, 41, 64, 40, 105, 46, 64, 60, 46, 38, 46, 45, 58, 41, 41, 34, 48, 0, 0, 0, 0, 0, 0, 119, 104, 105, 108, 115, 116, 46, 0, 115, 32, 108, 105, 116, 101, 114, 97, 108, 0, 0, 0, 0, 0, 0, 0, 40, 37, 120, 41, 38, 37, 0, 0, 40, 37, 32, 124, 46, 33, 46, 49, 41, 32, 94, 34, 95, 49, 32, 36, 38, 49, 32, 95, 49, 64, 35, 0, 39, 58, 39, 59, 32, 0, 0, 0, 123, 97, 46, 0, 0, 0, 0, 0, 102, 105, 108, 101, 32, 97, 99, 99, 101, 115, 115, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 119,
    104, 105, 108, 101, 46, 0, 0, 40, 50, 38, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 93, 41, 32, 42, 32, 40, 91, 58, 32, 42, 47, 32, 40, 49, 38, 43, 32, 37, 32, 50, 38, 43, 41, 64, 40, 105, 46, 64, 60, 46, 38, 46, 45, 58, 41, 41, 34, 48, 0, 0, 0, 0, 0, 0, 103, 97, 32, 98, 105, 116, 32, 97, 114, 114, 97, 121, 32, 115, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 40, 45, 120, 41, 38, 37, 64, 42, 58, 0, 0, 0, 0, 0, 0, 0, 42, 32, 49, 38, 40, 124, 46, 33, 46, 49, 41, 0, 0, 0, 0, 0, 100, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 116, 114, 121, 46, 0, 0, 0, 0, 50, 38, 124, 64, 62, 58, 32, 37, 32, 33, 0, 0, 0, 0, 0, 0, 99, 32, 98,
    111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 35, 117, 0, 120, 32, 42, 32, 62, 58, 64, 94, 46, 0, 0, 0, 0, 0, 0, 0, 37, 108, 105, 32, 0, 0, 0, 0, 40, 45, 32, 124, 46, 33, 46, 48, 41, 32, 42, 34, 95, 49, 32, 36, 38, 49, 32, 95, 49, 64, 35, 0, 105, 110, 112, 117, 116, 95, 106, 102, 101, 95, 39, 32, 32, 32, 32, 32, 32, 39, 0, 0, 0, 0, 0, 0, 106, 112, 114, 120, 32, 122, 110, 0, 99, 111, 110, 116, 114, 111, 108, 32, 101, 114, 114, 111, 114, 0, 0, 0, 116, 104, 114, 111, 119, 46, 0, 0, 50, 38, 124, 32, 32, 32, 32, 37, 32, 93, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 120, 32, 115, 104, 97, 112, 101, 0, 0, 117, 32, 35, 99, 111, 108, 117, 109, 110, 115,
    0, 0, 0, 0, 0, 0, 45, 58, 64, 37, 64, 37, 58, 0, 43, 32, 49, 38, 40, 124, 46, 33, 46, 48, 41, 0, 0, 0, 0, 0, 37, 48, 53, 108, 105, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 115, 114, 113, 112, 110, 109, 100, 98, 108, 99, 0, 0, 0, 0, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 37, 108, 105, 0, 0, 0, 0, 0, 97, 115, 115, 101, 114, 116, 46, 0, 32, 32, 95, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 115, 104, 97, 112, 101, 0, 0, 0, 0, 48, 32, 48, 46, 53, 0, 0, 0, 97, 114, 103, 32, 108, 101, 110, 103, 116, 104, 0, 0, 0, 0, 0, 0, 98, 114, 101, 97, 107, 0, 0, 0, 50, 38, 124, 32, 32, 32, 32, 37, 32, 33, 0, 0, 0, 0, 0, 0, 115, 99,
    104, 101, 99, 107, 32, 120, 32, 114, 97, 110, 107, 0, 0, 0, 117, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 0, 0, 45, 32, 64, 37, 64, 42, 58, 0, 32, 126, 58, 124, 46, 33, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 0, 0, 97, 46, 32, 0, 0, 0, 0, 0, 97, 116, 116, 101, 110, 116, 105, 111, 110, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 0, 0, 0, 0, 0, 115, 101, 108, 101, 99, 116, 46, 0, 123, 38, 49, 32, 48, 32, 95, 49, 32, 48, 64, 40, 52, 38, 124, 41, 32, 37, 32, 33, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 115, 111, 114, 116, 101, 100, 0, 49, 114, 50, 0, 0, 0, 0, 0, 126, 58, 49, 38, 40, 124, 46, 33, 46, 48, 41, 0, 0, 0,
    0, 0, 37, 48, 52, 108, 105, 0, 0, 0, 91, 45, 37, 108, 105, 93, 32, 0, 44, 97, 46, 0, 0, 0, 0, 0, 95, 105, 110, 100, 101, 120, 0, 0, 46, 106, 115, 0, 0, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 114, 101, 116, 117, 114, 110, 46, 0, 123, 38, 48, 32, 49, 32, 48, 32, 95, 49, 64, 40, 52, 38, 124, 41, 32, 37, 32, 93, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 105, 110, 100, 101, 120, 0, 0, 103, 97, 112, 32, 98, 111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 102, 102, 0, 0, 0, 0, 0, 0, 0, 45, 64, 94, 46, 64, 40, 50, 38, 111, 46, 41, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 61, 32, 124,
    46, 33, 46, 49, 0, 0, 0, 0, 0, 0, 0, 0, 49, 32, 50, 32, 52, 32, 53, 32, 54, 0, 0, 0, 0, 0, 0, 0, 98, 105, 110, 100, 100, 0, 0, 0, 100, 116, 97, 98, 0, 0, 0, 0, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 123, 38, 48, 32, 49, 32, 48, 32, 95, 49, 64, 40, 52, 38, 124, 41, 32, 37, 32, 33, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 110, 101, 103, 97, 116, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 103, 97, 112, 32, 110, 111, 110, 45, 110, 101, 103, 97, 116, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 120, 38, 42, 64, 94, 46, 0, 0, 61, 32, 49, 38, 40, 124, 46, 33, 46, 49, 41, 0, 0, 0, 0, 0, 40, 43, 47, 120, 35, 121,
    41, 38, 42, 64, 94, 46, 0, 0, 0, 0, 37, 48, 46, 54, 103, 0, 0, 0, 110, 97, 110, 0, 0, 0, 0, 0, 105, 102, 46, 0, 0, 0, 0, 0, 40, 94, 46, 120, 41, 38, 94, 32, 37, 32, 33, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 117, 110, 105, 113, 117, 101, 0, 103, 97, 112, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 50, 38, 43, 94, 58, 40, 48, 38, 112, 58, 41, 94, 58, 95, 0, 0, 32, 37, 32, 124, 46, 33, 46, 49, 0, 0, 0, 0, 0, 0, 0, 0, 37, 38, 40, 49, 45, 120, 41, 64, 40, 94, 38, 40, 120, 45, 49, 41, 64, 40, 55, 38, 111, 46, 41, 32, 32, 32, 32, 32, 32, 32, 41, 32, 43, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 38, 40, 120, 45, 50, 41, 64,
    40, 55, 38, 111, 46, 41, 32, 100, 46, 32, 95, 49, 32, 0, 0, 0, 0, 42, 47, 64, 40, 43, 47, 41, 0, 97, 109, 112, 0, 0, 0, 0, 0, 123, 32, 120, 64, 40, 105, 46, 64, 62, 58, 64, 40, 62, 46, 47, 41, 64, 44, 41, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 47, 97, 32, 108, 101, 110, 103, 116, 104, 0, 0, 0, 0, 0, 0, 0, 37, 32, 49, 38, 40, 124, 46, 33, 46, 49, 41, 0, 0, 0, 0, 0, 37, 38, 40, 120, 45, 49, 41, 64, 40, 94, 38, 40, 120, 45, 49, 41, 64, 40, 51, 38, 111, 46, 41, 32, 32, 32, 32, 32, 32, 32, 41, 32, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 94, 38, 40, 120, 45, 50, 41, 64, 40, 51, 38, 111, 46, 41, 32, 100, 46, 32, 95, 49, 32, 0, 0, 0, 0,
    115, 121, 109, 102, 114, 101, 101, 104, 0, 0, 0, 0, 0, 0, 0, 0, 37, 64, 33, 0, 0, 0, 0, 0, 98, 97, 115, 101, 0, 0, 0, 0, 60, 59, 46, 95, 49, 32, 0, 0, 117, 110, 112, 97, 114, 115, 101, 109, 32, 122, 110, 0, 0, 0, 0, 0, 111, 102, 120, 97, 115, 115, 111, 99, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 43, 43, 43, 43, 43, 43, 43, 124, 45, 0, 0, 0, 0, 0, 106, 116, 115, 112, 114, 105, 110, 116, 102, 101, 68, 58, 32, 100, 101, 99, 112, 116, 0, 0, 0, 0, 0, 0, 102, 111, 114, 46, 0, 0, 0, 0, 91, 58, 32, 43, 47, 47, 46, 32, 42, 47, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 47, 120, 32, 116, 97, 108, 108, 121, 0, 0, 0, 0, 0, 0, 0, 0, 102, 102, 32, 110, 111, 110, 45, 110,
    101, 103, 97, 116, 105, 118, 101, 0, 32, 45, 32, 124, 46, 33, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 32, 58, 32, 39, 39, 0, 0, 0, 37, 38, 120, 32, 32, 32, 32, 64, 40, 94, 38, 40, 120, 45, 49, 41, 64, 40, 50, 38, 111, 46, 41, 32, 42, 32, 49, 38, 111, 46, 41, 32, 43, 32, 40, 40, 120, 45, 49, 41, 37, 120, 41, 38, 42, 64, 40, 94, 38, 40, 120, 45, 50, 41, 64, 40, 50, 38, 111, 46, 41, 32, 100, 46, 32, 95, 49, 41, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 60, 59, 46, 40, 95, 49, 41, 32, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 115, 101, 118, 0, 0, 0, 121, 46, 0, 0, 0, 0, 0, 0, 106, 116, 102, 109, 116, 97, 108, 108, 99, 111, 108, 58, 32, 109, 111, 100, 101, 0, 0, 0, 0, 0, 0, 0, 102, 99, 97,
    115, 101, 46, 0, 0, 124, 46, 33, 46, 48, 34, 48, 32, 49, 0, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 116, 121, 112, 101, 0, 0, 0, 102, 102, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 0, 0, 45, 32, 49, 38, 40, 124, 46, 33, 46, 48, 41, 0, 0, 0, 0, 0, 37, 38, 40, 45, 120, 32, 41, 64, 40, 94, 38, 40, 120, 45, 49, 41, 64, 40, 49, 38, 111, 46, 41, 32, 42, 32, 50, 38, 111, 46, 41, 32, 43, 32, 40, 40, 120, 45, 49, 41, 37, 120, 41, 38, 42, 64, 40, 94, 38, 40, 120, 45, 50, 41, 64, 40, 49, 38, 111, 46, 41, 32, 100, 46, 32, 95, 49, 41, 0, 0, 0, 0, 37, 37, 45, 37, 108, 105, 46, 37, 108, 105, 101, 0, 0, 0, 0, 0, 114, 111, 117, 110, 100, 73, 68,
    58, 32, 115, 105, 103, 110, 0, 0, 0, 101, 110, 100, 46, 0, 0, 0, 0, 48, 32, 95, 49, 114, 50, 32, 49, 114, 50, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 105, 32, 114, 97, 110, 107, 0, 0, 0, 102, 102, 32, 97, 116, 111, 109, 0, 51, 32, 58, 32, 39, 40, 45, 32, 45, 38, 98, 64, 40, 42, 94, 46, 41, 32, 37, 32, 62, 58, 64, 94, 46, 41, 94, 58, 95, 32, 93, 49, 62, 46, 98, 61, 46, 94, 46, 121, 39, 32, 34, 32, 48, 32, 58, 46, 32, 40, 94, 126, 41, 0, 0, 0, 40, 93, 32, 42, 32, 94, 38, 120, 64, 94, 46, 41, 32, 45, 32, 120, 38, 42, 32, 64, 40, 94, 38, 40, 120, 45, 49, 41, 64, 94, 46, 32, 100, 46, 32, 95, 49, 41, 0, 0, 45, 47, 32, 46, 42, 0, 0, 0, 91, 58, 32, 45, 47,
    34, 49, 32, 123, 46, 34, 50, 32, 42, 32, 124, 46, 34, 49, 64, 58, 40, 123, 58, 34, 50, 41, 0, 0, 0, 0, 0, 41, 44, 60, 0, 0, 0, 0, 0, 120, 46, 0, 0, 0, 0, 0, 0, 37, 37, 45, 32, 37, 108, 105, 46, 37, 108, 105, 101, 0, 0, 0, 0, 114, 111, 117, 110, 100, 73, 68, 58, 32, 102, 113, 99, 0, 0, 0, 0, 101, 108, 115, 101, 105, 102, 46, 0, 32, 95, 0, 0, 0, 0, 0, 0, 91, 32, 123, 32, 120, 64, 58, 40, 105, 46, 64, 62, 58, 64, 40, 62, 46, 47, 41, 64, 44, 41, 0, 0, 115, 99, 104, 101, 99, 107, 32, 101, 47, 120, 32, 116, 121, 112, 101, 0, 114, 111, 111, 116, 32, 98, 111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 99, 0, 0, 0, 0, 0, 0, 0, 83, 84, 65, 67, 75, 95, 69, 82, 82, 79, 82,
    95, 73, 78, 70, 79, 95, 98, 97, 115, 101, 95, 0, 0, 60, 46, 64, 45, 58, 64, 35, 32, 123, 46, 32, 93, 32, 58, 46, 32, 40, 44, 126, 41, 0, 0, 0, 0, 100, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 58, 32, 0, 0, 37, 48, 50, 108, 105, 0, 0, 0, 46, 105, 106, 115, 0, 0, 0, 0, 45, 64, 106, 46, 64, 114, 46, 0, 100, 116, 111, 97, 0, 0, 0, 0, 117, 110, 98, 105, 110, 114, 0, 0, 37, 108, 105, 103, 0, 0, 0, 0, 115, 112, 101, 108, 108, 99, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 120, 101, 118, 49, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 114, 97, 110, 107, 0, 0, 0, 0, 0, 48, 32, 48, 32, 49, 0, 0, 0, 40, 60, 0, 0, 0, 0, 0, 0, 112, 111, 119, 111, 112, 0, 0, 0, 105, 110,
    100, 101, 120, 111, 102, 115, 117, 98, 0, 0, 0, 0, 0, 0, 37, 37, 37, 108, 105, 46, 37, 108, 105, 102, 0, 0, 0, 0, 0, 0, 106, 116, 102, 109, 116, 112, 114, 101, 99, 111, 109, 112, 58, 32, 99, 101, 108, 108, 32, 108, 101, 110, 103, 116, 104, 0, 0, 0, 0, 0, 0, 0, 101, 108, 115, 101, 46, 0, 0, 0, 48, 38, 61, 64, 40, 120, 38, 124, 41, 32, 42, 32, 121, 64, 60, 46, 64, 40, 37, 38, 120, 41, 0, 0, 115, 99, 104, 101, 99, 107, 32, 101, 32, 116, 121, 112, 101, 0, 0, 0, 114, 111, 111, 116, 32, 110, 111, 110, 45, 110, 101, 103, 97, 116, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 62, 64, 123, 46, 32, 58, 46, 32, 40, 59, 126, 41, 0, 0, 0, 0, 40, 93, 42, 94, 46, 41, 32, 45,
    32, 93, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 118, 46, 0, 0, 0, 0, 0, 0, 101, 37, 108, 105, 0, 0, 0, 0, 106, 116, 102, 109, 116, 112, 114, 101, 99, 111, 109, 112, 58, 32, 100, 32, 111, 111, 98, 0, 0, 0, 0, 0, 100, 111, 46, 0, 0, 0, 0, 0, 41, 32, 116, 46, 41, 64, 105, 46, 39, 59, 39, 103, 32, 43, 58, 94, 58, 40, 103, 32, 126, 58, 32, 103, 64, 43, 58, 41, 94, 58, 95, 32, 93, 32, 49, 39, 41, 32, 34, 32, 48, 0, 0, 0, 0, 0, 0, 0, 115, 99, 104, 101, 99, 107, 32, 101, 32, 114, 97, 110, 107, 0, 0, 0, 114, 111, 111, 116, 32, 105, 110, 116, 101, 103, 101, 114, 0, 0, 0, 0, 123, 46, 32, 58, 46, 32, 40, 44, 58, 126, 41, 0, 0, 0, 0, 0, 48, 106, 95, 49, 38, 42, 0, 0, 49,
    112, 95, 49, 38, 42, 0, 0
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 112638);
}

var ctlz_i8 = allocate([8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
], "i8", ALLOC_DYNAMIC);


initAllocate();




console.log('HEAP8: ' + HEAP8[99]);
function runPostSets() {}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(0 == tempDoublePtr % 8);

function copyTempFloat(a) {
    HEAP8[tempDoublePtr] = HEAP8[a];
    HEAP8[tempDoublePtr + 1] = HEAP8[a + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[a + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[a + 3]
}

function copyTempDouble(a) {
    HEAP8[tempDoublePtr] = HEAP8[a];
    HEAP8[tempDoublePtr + 1] = HEAP8[a + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[a + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[a + 3];
    HEAP8[tempDoublePtr + 4] = HEAP8[a + 4];
    HEAP8[tempDoublePtr + 5] = HEAP8[a + 5];
    HEAP8[tempDoublePtr + 6] = HEAP8[a + 6];
    HEAP8[tempDoublePtr + 7] = HEAP8[a + 7]
}

function _memset(a, f, d) {
    var a = a | 0,
        f = f | 0,
        d = d | 0,
        c = 0,
        b = 0,
        e = 0,
        g = 0,
        c = a + d | 0;
    if (20 <= (d | 0)) {
        f &= 255;
        g = a & 3;
        b = f | f << 8 | f << 16 | f << 24;
        e = c & -4;
        if (g)
            for (g = a + 4 - g | 0;
                (a | 0) < (g | 0);) HEAP8[a] = f, a = a + 1 | 0;
        for (;
            (a | 0) < (e | 0);) HEAP32[a >> 2] = b, a = a + 4 | 0
    }
    for (;
        (a | 0) < (c | 0);) HEAP8[a] = f, a = a + 1 | 0;
    return a - d | 0
}
var _llvm_memset_p0i8_i32 = _memset;

function _emscripten_memcpy_big(a, f, d) {
    HEAPU8.set(HEAPU8.subarray(f, f + d), a);
    return a
}

function _memcpy(a, f, d) {
    var a = a | 0,
        f = f | 0,
        d = d | 0,
        c = 0;
    if (4096 <= (d | 0)) return _emscripten_memcpy_big(a | 0, f | 0, d | 0) | 0;
    c = a | 0;
    if ((a & 3) == (f & 3)) {
        for (; a & 3;) {
            if (0 == (d | 0)) return c | 0;
            HEAP8[a] = HEAP8[f];
            a = a + 1 | 0;
            f = f + 1 | 0;
            d = d - 1 | 0
        }
        for (; 4 <= (d | 0);) HEAP32[a >> 2] = HEAP32[f >> 2], a = a + 4 | 0, f = f + 4 | 0, d = d - 4 | 0
    }
    for (; 0 < (d | 0);) HEAP8[a] = HEAP8[f], a = a + 1 | 0, f = f + 1 | 0, d = d - 1 | 0;
    return c | 0
}
var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

function _llvm_lifetime_start() {}

function _llvm_lifetime_end() {}

function _strchr(a, f) {
    a--;
    do {
        a++;
        var d = HEAP8[a];
        if (d == f) return a
    } while (d);
    return 0
}

function _memchr(a, f, d) {
    for (var f = unSign(f), c = 0; c < d; c++) {
        if (HEAP8[a] == f) return a;
        a++
    }
    return 0
}

function _memmove(a, f, d) {
    var a = a | 0,
        f = f | 0,
        d = d | 0,
        c = 0;
    if ((f | 0) < (a | 0) & (a | 0) < (f + d | 0)) {
        c = a;
        f = f + d | 0;
        for (a = a + d | 0; 0 < (d | 0);) a = a - 1 | 0, f = f - 1 | 0, d = d - 1 | 0, HEAP8[a] = HEAP8[f];
        a = c
    } else _memcpy(a, f, d) | 0;
    return a | 0
}
var _llvm_memmove_p0i8_p0i8_i32 = _memmove;

function _fmod(a, f) {
    return a % f
}

function _strlen(a) {
    for (var a = a | 0, f = 0, f = a; HEAP8[f];) f = f + 1 | 0;
    return f - a | 0
}

function __reallyNegative(a) {
    return 0 > a || 0 === a && -Infinity === 1 / a
}

function __formatString(a, f) {
    function d(a) {
        var c;
        "double" === a ? c = HEAPF64[f + b >> 3] : "i64" == a ? (c = [HEAP32[f + b >> 2], HEAP32[f + (b + 8) >> 2]], b += 8) : (a = "i32", c = HEAP32[f + b >> 2]);
        b += Math.max(Runtime.getNativeFieldSize(a), Runtime.getAlignSize(a, null, !0));
        return c
    }
    for (var c = a, b = 0, e = [], g, h;;) {
        var j = c;
        g = HEAP8[c];
        if (0 === g) break;
        h = HEAP8[c + 1 | 0];
        if (37 == g) {
            var i = !1,
                l = !1,
                k = !1,
                m = !1,
                n = !1;
            a: for (;;) {
                switch (h) {
                    case 43:
                        i = !0;
                        break;
                    case 45:
                        l = !0;
                        break;
                    case 35:
                        k = !0;
                        break;
                    case 48:
                        if (m) break a;
                        else {
                            m = !0;
                            break
                        }
                    case 32:
                        n = !0;
                        break;
                    default:
                        break a
                }
                c++;
                h = HEAP8[c + 1 | 0]
            }
            var p = 0;
            if (42 == h) p = d("i32"), c++, h = HEAP8[c + 1 | 0];
            else
                for (; 48 <= h && 57 >= h;) p = 10 * p + (h - 48), c++, h = HEAP8[c + 1 | 0];
            var q = !1,
                r = -1;
            if (46 == h) {
                r = 0;
                q = !0;
                c++;
                h = HEAP8[c + 1 | 0];
                if (42 == h) r = d("i32"), c++;
                else
                    for (;;) {
                        h = HEAP8[c + 1 | 0];
                        if (48 > h || 57 < h) break;
                        r = 10 * r + (h - 48);
                        c++
                    }
                h = HEAP8[c + 1 | 0]
            }
            0 > r && (r = 6, q = !1);
            var s;
            switch (String.fromCharCode(h)) {
                case "h":
                    h = HEAP8[c + 2 | 0];
                    104 == h ? (c++, s = 1) : s = 2;
                    break;
                case "l":
                    h = HEAP8[c + 2 | 0];
                    108 == h ? (c++, s = 8) : s = 4;
                    break;
                case "L":
                case "q":
                case "j":
                    s = 8;
                    break;
                case "z":
                case "t":
                case "I":
                    s = 4;
                    break;
                default:
                    s = null
            }
            s && c++;
            h = HEAP8[c + 1 | 0];
            switch (String.fromCharCode(h)) {
                case "d":
                case "i":
                case "u":
                case "o":
                case "x":
                case "X":
                case "p":
                    j = 100 == h || 105 == h;
                    s = s || 4;
                    var t = g = d("i" + 8 * s),
                        u;
                    8 == s && (g = Runtime.makeBigInt(g[0], g[1], 117 == h));
                    if (4 >= s) {
                        var w = Math.pow(256, s) - 1;
                        g = (j ? reSign : unSign)(g & w, 8 * s)
                    }
                    w = Math.abs(g);
                    j = "";
                    if (100 == h || 105 == h) u = 8 == s && i64Math ? i64Math.stringify(t[0], t[1], null) : reSign(g, 8 * s, 1).toString(10);
                    else if (117 == h) u = 8 == s && i64Math ? i64Math.stringify(t[0], t[1], !0) : unSign(g, 8 * s, 1).toString(10), g = Math.abs(g);
                    else if (111 == h) u = (k ? "0" : "") + w.toString(8);
                    else if (120 == h || 88 == h) {
                        j = k && 0 != g ? "0x" : "";
                        if (8 == s && i64Math)
                            if (t[1]) {
                                u = (t[1] >>> 0).toString(16);
                                for (k = (t[0] >>> 0).toString(16); 8 > k.length;) k = "0" + k;
                                u += k
                            } else u = (t[0] >>> 0).toString(16);
                        else if (0 > g) {
                            g = -g;
                            u = (w - 1).toString(16);
                            t = [];
                            for (k = 0; k < u.length; k++) t.push((15 - parseInt(u[k], 16)).toString(16));
                            for (u = t.join(""); u.length < 2 * s;) u = "f" + u
                        } else u = w.toString(16);
                        88 == h && (j = j.toUpperCase(), u = u.toUpperCase())
                    } else 112 == h && (0 === w ? u = "(nil)" : (j = "0x", u = w.toString(16)));
                    if (q)
                        for (; u.length <
                            r;) u = "0" + u;
                    0 <= g && (i ? j = "+" + j : n && (j = " " + j));
                    "-" == u.charAt(0) && (j = "-" + j, u = u.substr(1));
                    for (; j.length + u.length < p;) l ? u += " " : m ? u = "0" + u : j = " " + j;
                    u = j + u;
                    u.split("").forEach(function(a) {
                        e.push(a.charCodeAt(0))
                    });
                    break;
                case "f":
                case "F":
                case "e":
                case "E":
                case "g":
                case "G":
                    g = d("double");
                    if (isNaN(g)) u = "nan", m = !1;
                    else if (isFinite(g)) {
                        q = !1;
                        s = Math.min(r, 20);
                        if (103 == h || 71 == h) q = !0, r = r || 1, s = parseInt(g.toExponential(s).split("e")[1], 10), r > s && -4 <= s ? (h = (103 == h ? "f" : "F").charCodeAt(0), r -= s + 1) : (h = (103 == h ? "e" : "E").charCodeAt(0),
                            r--), s = Math.min(r, 20);
                        if (101 == h || 69 == h) u = g.toExponential(s), /[eE][-+]\d$/.test(u) && (u = u.slice(0, -1) + "0" + u.slice(-1));
                        else if (102 == h || 70 == h) u = g.toFixed(s), 0 === g && __reallyNegative(g) && (u = "-" + u);
                        j = u.split("e");
                        if (q && !k)
                            for (; 1 < j[0].length && -1 != j[0].indexOf(".") && ("0" == j[0].slice(-1) || "." == j[0].slice(-1));) j[0] = j[0].slice(0, -1);
                        else
                            for (k && -1 == u.indexOf(".") && (j[0] += "."); r > s++;) j[0] += "0";
                        u = j[0] + (1 < j.length ? "e" + j[1] : "");
                        69 == h && (u = u.toUpperCase());
                        0 <= g && (i ? u = "+" + u : n && (u = " " + u))
                    } else u = (0 > g ? "-" : "") + "inf",
                        m = !1;
                    for (; u.length < p;) u = l ? u + " " : m && ("-" == u[0] || "+" == u[0]) ? u[0] + "0" + u.slice(1) : (m ? "0" : " ") + u;
                    97 > h && (u = u.toUpperCase());
                    u.split("").forEach(function(a) {
                        e.push(a.charCodeAt(0))
                    });
                    break;
                case "s":
                    m = (i = d("i8*")) ? _strlen(i) : 6;
                    q && (m = Math.min(m, r));
                    if (!l)
                        for (; m < p--;) e.push(32);
                    if (i)
                        for (k = 0; k < m; k++) e.push(HEAPU8[i++ | 0]);
                    else e = e.concat(intArrayFromString("(null)".substr(0, m), !0));
                    if (l)
                        for (; m < p--;) e.push(32);
                    break;
                case "c":
                    for (l && e.push(d("i8")); 0 < --p;) e.push(32);
                    l || e.push(d("i8"));
                    break;
                case "n":
                    l = d("i32*");
                    HEAP32[l >> 2] = e.length;
                    break;
                case "%":
                    e.push(g);
                    break;
                default:
                    for (k = j; k < c + 2; k++) e.push(HEAP8[k])
            }
            c += 2
        } else e.push(g), c += 1
    }
    return e
}

function _snprintf(a, f, d, c) {
    d = __formatString(d, c);
    c = void 0 === f ? d.length : Math.min(d.length, Math.max(f - 1, 0));
    if (0 > a) var a = -a,
        b = _malloc(c + 1),
        a = HEAP32[a >> 2] = b;
    for (b = 0; b < c; b++) HEAP8[a + b | 0] = d[b];
    if (c < f || void 0 === f) HEAP8[a + b | 0] = 0;
    return d.length
}

function _sprintf(a, f, d) {
    return _snprintf(a, void 0, f, d)
}

function _strcpy(a, f) {
    var a = a | 0,
        f = f | 0,
        d = 0;
    do HEAP8[a + d | 0] = HEAP8[f + d | 0], d = d + 1 | 0; while (HEAP8[f + (d - 1) | 0]);
    return a | 0
}
var ___errno_state = 0;

function ___setErrNo(a) {
    return HEAP32[___errno_state >> 2] = a
}

function ___errno_location() {
    return ___errno_state
}

function _longjmp(a, f) {
    throw {
        longjmp: !0,
        id: HEAP32[a >> 2],
        value: f || 1
    };
}

function ___fpclassify(a) {
    return isNaN(a) ? 0 : !isFinite(a) ? 1 : 0 == a ? 2 : 4
}
var ___fpclassifyl = ___fpclassify,
    ERRNO_CODES = {
        EPERM: 1,
        ENOENT: 2,
        ESRCH: 3,
        EINTR: 4,
        EIO: 5,
        ENXIO: 6,
        E2BIG: 7,
        ENOEXEC: 8,
        EBADF: 9,
        ECHILD: 10,
        EAGAIN: 11,
        EWOULDBLOCK: 11,
        ENOMEM: 12,
        EACCES: 13,
        EFAULT: 14,
        ENOTBLK: 15,
        EBUSY: 16,
        EEXIST: 17,
        EXDEV: 18,
        ENODEV: 19,
        ENOTDIR: 20,
        EISDIR: 21,
        EINVAL: 22,
        ENFILE: 23,
        EMFILE: 24,
        ENOTTY: 25,
        ETXTBSY: 26,
        EFBIG: 27,
        ENOSPC: 28,
        ESPIPE: 29,
        EROFS: 30,
        EMLINK: 31,
        EPIPE: 32,
        EDOM: 33,
        ERANGE: 34,
        ENOMSG: 42,
        EIDRM: 43,
        ECHRNG: 44,
        EL2NSYNC: 45,
        EL3HLT: 46,
        EL3RST: 47,
        ELNRNG: 48,
        EUNATCH: 49,
        ENOCSI: 50,
        EL2HLT: 51,
        EDEADLK: 35,
        ENOLCK: 37,
        EBADE: 52,
        EBADR: 53,
        EXFULL: 54,
        ENOANO: 55,
        EBADRQC: 56,
        EBADSLT: 57,
        EDEADLOCK: 35,
        EBFONT: 59,
        ENOSTR: 60,
        ENODATA: 61,
        ETIME: 62,
        ENOSR: 63,
        ENONET: 64,
        ENOPKG: 65,
        EREMOTE: 66,
        ENOLINK: 67,
        EADV: 68,
        ESRMNT: 69,
        ECOMM: 70,
        EPROTO: 71,
        EMULTIHOP: 72,
        EDOTDOT: 73,
        EBADMSG: 74,
        ENOTUNIQ: 76,
        EBADFD: 77,
        EREMCHG: 78,
        ELIBACC: 79,
        ELIBBAD: 80,
        ELIBSCN: 81,
        ELIBMAX: 82,
        ELIBEXEC: 83,
        ENOSYS: 38,
        ENOTEMPTY: 39,
        ENAMETOOLONG: 36,
        ELOOP: 40,
        EOPNOTSUPP: 95,
        EPFNOSUPPORT: 96,
        ECONNRESET: 104,
        ENOBUFS: 105,
        EAFNOSUPPORT: 97,
        EPROTOTYPE: 91,
        ENOTSOCK: 88,
        ENOPROTOOPT: 92,
        ESHUTDOWN: 108,
        ECONNREFUSED: 111,
        EADDRINUSE: 98,
        ECONNABORTED: 103,
        ENETUNREACH: 101,
        ENETDOWN: 100,
        ETIMEDOUT: 110,
        EHOSTDOWN: 112,
        EHOSTUNREACH: 113,
        EINPROGRESS: 115,
        EALREADY: 114,
        EDESTADDRREQ: 89,
        EMSGSIZE: 90,
        EPROTONOSUPPORT: 93,
        ESOCKTNOSUPPORT: 94,
        EADDRNOTAVAIL: 99,
        ENETRESET: 102,
        EISCONN: 106,
        ENOTCONN: 107,
        ETOOMANYREFS: 109,
        EUSERS: 87,
        EDQUOT: 122,
        ESTALE: 116,
        ENOTSUP: 95,
        ENOMEDIUM: 123,
        EILSEQ: 84,
        EOVERFLOW: 75,
        ECANCELED: 125,
        ENOTRECOVERABLE: 131,
        EOWNERDEAD: 130,
        ESTRPIPE: 86
    },
    ERRNO_MESSAGES = {
        "0": "Success",
        1: "Not super-user",
        2: "No such file or directory",
        3: "No such process",
        4: "Interrupted system call",
        5: "I/O error",
        6: "No such device or address",
        7: "Arg list too long",
        8: "Exec format error",
        9: "Bad file number",
        10: "No children",
        11: "No more processes",
        12: "Not enough core",
        13: "Permission denied",
        14: "Bad address",
        15: "Block device required",
        16: "Mount device busy",
        17: "File exists",
        18: "Cross-device link",
        19: "No such device",
        20: "Not a directory",
        21: "Is a directory",
        22: "Invalid argument",
        23: "Too many open files in system",
        24: "Too many open files",
        25: "Not a typewriter",
        26: "Text file busy",
        27: "File too large",
        28: "No space left on device",
        29: "Illegal seek",
        30: "Read only file system",
        31: "Too many links",
        32: "Broken pipe",
        33: "Math arg out of domain of func",
        34: "Math result not representable",
        35: "File locking deadlock error",
        36: "File or path name too long",
        37: "No record locks available",
        38: "Function not implemented",
        39: "Directory not empty",
        40: "Too many symbolic links",
        42: "No message of desired type",
        43: "Identifier removed",
        44: "Channel number out of range",
        45: "Level 2 not synchronized",
        46: "Level 3 halted",
        47: "Level 3 reset",
        48: "Link number out of range",
        49: "Protocol driver not attached",
        50: "No CSI structure available",
        51: "Level 2 halted",
        52: "Invalid exchange",
        53: "Invalid request descriptor",
        54: "Exchange full",
        55: "No anode",
        56: "Invalid request code",
        57: "Invalid slot",
        59: "Bad font file fmt",
        60: "Device not a stream",
        61: "No data (for no delay io)",
        62: "Timer expired",
        63: "Out of streams resources",
        64: "Machine is not on the network",
        65: "Package not installed",
        66: "The object is remote",
        67: "The link has been severed",
        68: "Advertise error",
        69: "Srmount error",
        70: "Communication error on send",
        71: "Protocol error",
        72: "Multihop attempted",
        73: "Cross mount point (not really error)",
        74: "Trying to read unreadable message",
        75: "Value too large for defined data type",
        76: "Given log. name not unique",
        77: "f.d. invalid for this operation",
        78: "Remote address changed",
        79: "Can   access a needed shared lib",
        80: "Accessing a corrupted shared lib",
        81: ".lib section in a.out corrupted",
        82: "Attempting to link in too many libs",
        83: "Attempting to exec a shared library",
        84: "Illegal byte sequence",
        86: "Streams pipe error",
        87: "Too many users",
        88: "Socket operation on non-socket",
        89: "Destination address required",
        90: "Message too long",
        91: "Protocol wrong type for socket",
        92: "Protocol not available",
        93: "Unknown protocol",
        94: "Socket type not supported",
        95: "Not supported",
        96: "Protocol family not supported",
        97: "Address family not supported by protocol family",
        98: "Address already in use",
        99: "Address not available",
        100: "Network interface is not configured",
        101: "Network is unreachable",
        102: "Connection reset by network",
        103: "Connection aborted",
        104: "Connection reset by peer",
        105: "No buffer space available",
        106: "Socket is already connected",
        107: "Socket is not connected",
        108: "Can't send after socket shutdown",
        109: "Too many references",
        110: "Connection timed out",
        111: "Connection refused",
        112: "Host is down",
        113: "Host is unreachable",
        114: "Socket already connected",
        115: "Connection already in progress",
        116: "Stale file handle",
        122: "Quota exceeded",
        123: "No medium (in tape drive)",
        125: "Operation canceled",
        130: "Previous owner died",
        131: "State not recoverable"
    },
    PATH = {
        splitPath: function(a) {
            return /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1)
        },
        normalizeArray: function(a, f) {
            for (var d = 0, c = a.length - 1; 0 <= c; c--) {
                var b = a[c];
                "." === b ? a.splice(c, 1) : ".." === b ? (a.splice(c, 1), d++) : d && (a.splice(c, 1), d--)
            }
            if (f)
                for (; d--; d) a.unshift("..");
            return a
        },
        normalize: function(a) {
            var f = "/" === a.charAt(0),
                d = "/" === a.substr(-1),
                a = PATH.normalizeArray(a.split("/").filter(function(a) {
                    return !!a
                }), !f).join("/");
            !a && !f && (a = ".");
            a && d && (a += "/");
            return (f ? "/" : "") + a
        },
        dirname: function(a) {
            var f = PATH.splitPath(a),
                a = f[0],
                f = f[1];
            if (!a && !f) return ".";
            f && (f = f.substr(0, f.length - 1));
            return a + f
        },
        basename: function(a) {
            if ("/" === a) return "/";
            var f = a.lastIndexOf("/");
            return -1 === f ? a : a.substr(f + 1)
        },
        extname: function(a) {
            return PATH.splitPath(a)[3]
        },
        join: function() {
            var a = Array.prototype.slice.call(arguments, 0);
            return PATH.normalize(a.join("/"))
        },
        join2: function(a, f) {
            return PATH.normalize(a + "/" + f)
        },
        resolve: function() {
            for (var a =
                    "", f = !1, d = arguments.length - 1; - 1 <= d && !f; d--) {
                var c = 0 <= d ? arguments[d] : FS.cwd();
                if ("string" !== typeof c) throw new TypeError("Arguments to path.resolve must be strings");
                c && (a = c + "/" + a, f = "/" === c.charAt(0))
            }
            a = PATH.normalizeArray(a.split("/").filter(function(a) {
                return !!a
            }), !f).join("/");
            return (f ? "/" : "") + a || "."
        },
        relative: function(a, f) {
            function d(a) {
                for (var b = 0; b < a.length && "" === a[b]; b++);
                for (var c = a.length - 1; 0 <= c && "" === a[c]; c--);
                return b > c ? [] : a.slice(b, c - b + 1)
            }
            for (var a = PATH.resolve(a).substr(1), f = PATH.resolve(f).substr(1),
                    c = d(a.split("/")), b = d(f.split("/")), e = Math.min(c.length, b.length), g = e, h = 0; h < e; h++)
                if (c[h] !== b[h]) {
                    g = h;
                    break
                }
            e = [];
            for (h = g; h < c.length; h++) e.push("..");
            e = e.concat(b.slice(g));
            return e.join("/")
        }
    },
    TTY = {
        ttys: [],
        init: function() {},
        shutdown: function() {},
        register: function(a, f) {
            TTY.ttys[a] = {
                input: [],
                output: [],
                ops: f
            };
            FS.registerDevice(a, TTY.stream_ops)
        },
        stream_ops: {
            open: function(a) {
                var f = TTY.ttys[a.node.rdev];
                if (!f) throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
                a.tty = f;
                a.seekable = !1
            },
            close: function(a) {
                a.tty.output.length &&
                    a.tty.ops.put_char(a.tty, 10)
            },
            read: function(a, f, d, c) {
                if (!a.tty || !a.tty.ops.get_char) throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
                for (var b = 0, e = 0; e < c; e++) {
                    var g;
                    try {
                        g = a.tty.ops.get_char(a.tty)
                    } catch (h) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                    if (void 0 === g && 0 === b) throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    if (null === g || void 0 === g) break;
                    b++;
                    f[d + e] = g
                }
                b && (a.node.timestamp = Date.now());
                return b
            },
            write: function(a, f, d, c) {
                if (!a.tty || !a.tty.ops.put_char) throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
                for (var b = 0; b <
                    c; b++) try {
                    a.tty.ops.put_char(a.tty, f[d + b])
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                c && (a.node.timestamp = Date.now());
                return b
            }
        },
        default_tty_ops: {
            get_char: function(a) {
                if (!a.input.length) {
                    var f = null;
                    if (ENVIRONMENT_IS_NODE) {
                        if (f = process.stdin.read(), !f) {
                            if (process.stdin._readableState && process.stdin._readableState.ended) return null;
                            return
                        }
                    } else "undefined" != typeof window && "function" == typeof window.prompt ? (f = window.prompt("Input: "), null !== f && (f += "\n")) : "function" == typeof readline && (f = readline(),
                        null !== f && (f += "\n"));
                    if (!f) return null;
                    a.input = intArrayFromString(f, !0)
                }
                return a.input.shift()
            },
            put_char: function(a, f) {
                null === f || 10 === f ? (Module.print(a.output.join("")), a.output = []) : a.output.push(TTY.utf8.processCChar(f))
            }
        },
        default_tty1_ops: {
            put_char: function(a, f) {
                null === f || 10 === f ? (Module.printErr(a.output.join("")), a.output = []) : a.output.push(TTY.utf8.processCChar(f))
            }
        }
    },
    MEMFS = {
        ops_table: null,
        CONTENT_OWNING: 1,
        CONTENT_FLEXIBLE: 2,
        CONTENT_FIXED: 3,
        mount: function() {
            return MEMFS.createNode(null, "/", 16895,
                0)
        },
        createNode: function(a, f, d, c) {
            if (FS.isBlkdev(d) || FS.isFIFO(d)) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            MEMFS.ops_table || (MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            });
            d = FS.createNode(a, f, d, c);
            FS.isDir(d.mode) ? (d.node_ops = MEMFS.ops_table.dir.node, d.stream_ops =
                MEMFS.ops_table.dir.stream, d.contents = {}) : FS.isFile(d.mode) ? (d.node_ops = MEMFS.ops_table.file.node, d.stream_ops = MEMFS.ops_table.file.stream, d.contents = [], d.contentMode = MEMFS.CONTENT_FLEXIBLE) : FS.isLink(d.mode) ? (d.node_ops = MEMFS.ops_table.link.node, d.stream_ops = MEMFS.ops_table.link.stream) : FS.isChrdev(d.mode) && (d.node_ops = MEMFS.ops_table.chrdev.node, d.stream_ops = MEMFS.ops_table.chrdev.stream);
            d.timestamp = Date.now();
            a && (a.contents[f] = d);
            return d
        },
        ensureFlexible: function(a) {
            a.contentMode !== MEMFS.CONTENT_FLEXIBLE &&
                (a.contents = Array.prototype.slice.call(a.contents), a.contentMode = MEMFS.CONTENT_FLEXIBLE)
        },
        node_ops: {
            getattr: function(a) {
                var f = {};
                f.dev = FS.isChrdev(a.mode) ? a.id : 1;
                f.ino = a.id;
                f.mode = a.mode;
                f.nlink = 1;
                f.uid = 0;
                f.gid = 0;
                f.rdev = a.rdev;
                f.size = FS.isDir(a.mode) ? 4096 : FS.isFile(a.mode) ? a.contents.length : FS.isLink(a.mode) ? a.link.length : 0;
                f.atime = new Date(a.timestamp);
                f.mtime = new Date(a.timestamp);
                f.ctime = new Date(a.timestamp);
                f.blksize = 4096;
                f.blocks = Math.ceil(f.size / f.blksize);
                return f
            },
            setattr: function(a, f) {
                void 0 !==
                    f.mode && (a.mode = f.mode);
                void 0 !== f.timestamp && (a.timestamp = f.timestamp);
                if (void 0 !== f.size) {
                    MEMFS.ensureFlexible(a);
                    var d = a.contents;
                    if (f.size < d.length) d.length = f.size;
                    else
                        for (; f.size > d.length;) d.push(0)
                }
            },
            lookup: function() {
                throw FS.genericErrors[ERRNO_CODES.ENOENT];
            },
            mknod: function(a, f, d, c) {
                return MEMFS.createNode(a, f, d, c)
            },
            rename: function(a, f, d) {
                if (FS.isDir(a.mode)) {
                    var c;
                    try {
                        c = FS.lookupNode(f, d)
                    } catch (b) {}
                    if (c)
                        for (var e in c.contents) throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                }
                delete a.parent.contents[a.name];
                a.name = d;
                f.contents[d] = a;
                a.parent = f
            },
            unlink: function(a, f) {
                delete a.contents[f]
            },
            rmdir: function(a, f) {
                var d = FS.lookupNode(a, f),
                    c;
                for (c in d.contents) throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                delete a.contents[f]
            },
            readdir: function(a) {
                var f = [".", ".."],
                    d;
                for (d in a.contents) a.contents.hasOwnProperty(d) && f.push(d);
                return f
            },
            symlink: function(a, f, d) {
                a = MEMFS.createNode(a, f, 41471, 0);
                a.link = d;
                return a
            },
            readlink: function(a) {
                if (!FS.isLink(a.mode)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                return a.link
            }
        },
        stream_ops: {
            read: function(a, f, d, c, b) {
                a = a.node.contents;
                if (b >= a.length) return 0;
                c = Math.min(a.length - b, c);
                assert(0 <= c);
                if (8 < c && a.subarray) f.set(a.subarray(b, b + c), d);
                else
                    for (var e = 0; e < c; e++) f[d + e] = a[b + e];
                return c
            },
            write: function(a, f, d, c, b, e) {
                var g = a.node;
                g.timestamp = Date.now();
                a = g.contents;
                if (c && 0 === a.length && 0 === b && f.subarray) return e && 0 === d ? (g.contents = f, g.contentMode = f.buffer === HEAP8.buffer ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED) : (g.contents = new Uint8Array(f.subarray(d, d + c)), g.contentMode = MEMFS.CONTENT_FIXED),
                    c;
                MEMFS.ensureFlexible(g);
                for (a = g.contents; a.length < b;) a.push(0);
                for (e = 0; e < c; e++) a[b + e] = f[d + e];
                return c
            },
            llseek: function(a, f, d) {
                1 === d ? f += a.position : 2 === d && FS.isFile(a.node.mode) && (f += a.node.contents.length);
                if (0 > f) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                a.ungotten = [];
                return a.position = f
            },
            allocate: function(a, f, d) {
                MEMFS.ensureFlexible(a.node);
                a = a.node.contents;
                for (f += d; f > a.length;) a.push(0)
            },
            mmap: function(a, f, d, c, b, e, g) {
                if (!FS.isFile(a.node.mode)) throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
                a = a.node.contents;
                if (!(g & 2) && (a.buffer === f || a.buffer === f.buffer)) b = !1, c = a.byteOffset;
                else {
                    if (0 < b || b + c < a.length) a = a.subarray ? a.subarray(b, b + c) : Array.prototype.slice.call(a, b, b + c);
                    b = !0;
                    c = _malloc(c);
                    if (!c) throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
                    f.set(a, c)
                }
                return {
                    ptr: c,
                    allocated: b
                }
            }
        }
    },
    IDBFS = {
        dbs: {},
        indexedDB: function() {
            return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
        },
        DB_VERSION: 21,
        DB_STORE_NAME: "FILE_DATA",
        mount: function(a) {
            return MEMFS.mount.apply(null, arguments)
        },
        syncfs: function(a,
            f, d) {
            IDBFS.getLocalSet(a, function(c, b) {
                if (c) return d(c);
                IDBFS.getRemoteSet(a, function(a, c) {
                    if (a) return d(a);
                    IDBFS.reconcile(f ? c : b, f ? b : c, d)
                })
            })
        },
        getDB: function(a, f) {
            var d = IDBFS.dbs[a];
            if (d) return f(null, d);
            var c;
            try {
                c = IDBFS.indexedDB().open(a, IDBFS.DB_VERSION)
            } catch (b) {
                return f(b)
            }
            c.onupgradeneeded = function(a) {
                var b = a.target.result,
                    a = a.target.transaction;
                (b.objectStoreNames.contains(IDBFS.DB_STORE_NAME) ? a.objectStore(IDBFS.DB_STORE_NAME) : b.createObjectStore(IDBFS.DB_STORE_NAME)).createIndex("timestamp",
                    "timestamp", {
                        unique: !1
                    })
            };
            c.onsuccess = function() {
                d = c.result;
                IDBFS.dbs[a] = d;
                f(null, d)
            };
            c.onerror = function() {
                f(this.error)
            }
        },
        getLocalSet: function(a, f) {
            function d(a) {
                return "." !== a && ".." !== a
            }

            function c(a) {
                return function(b) {
                    return PATH.join2(a, b)
                }
            }
            for (var b = {}, e = FS.readdir(a.mountpoint).filter(d).map(c(a.mountpoint)); e.length;) {
                var g = e.pop(),
                    h;
                try {
                    h = FS.stat(g)
                } catch (j) {
                    return f(j)
                }
                FS.isDir(h.mode) && e.push.apply(e, FS.readdir(g).filter(d).map(c(g)));
                b[g] = {
                    timestamp: h.mtime
                }
            }
            return f(null, {
                type: "local",
                entries: b
            })
        },
        getRemoteSet: function(a, f) {
            var d = {};
            IDBFS.getDB(a.mountpoint, function(a, b) {
                if (a) return f(a);
                var e = b.transaction([IDBFS.DB_STORE_NAME], "readonly");
                e.onerror = function() {
                    f(this.error)
                };
                e.objectStore(IDBFS.DB_STORE_NAME).index("timestamp").openKeyCursor().onsuccess = function(a) {
                    a = a.target.result;
                    if (!a) return f(null, {
                        type: "remote",
                        db: b,
                        entries: d
                    });
                    d[a.primaryKey] = {
                        timestamp: a.key
                    };
                    a.continue()
                }
            })
        },
        loadLocalEntry: function(a, f) {
            var d, c;
            try {
                c = FS.lookupPath(a).node, d = FS.stat(a)
            } catch (b) {
                return f(b)
            }
            return FS.isDir(d.mode) ?
                f(null, {
                    timestamp: d.mtime,
                    mode: d.mode
                }) : FS.isFile(d.mode) ? f(null, {
                    timestamp: d.mtime,
                    mode: d.mode,
                    contents: c.contents
                }) : f(Error("node type not supported"))
        },
        storeLocalEntry: function(a, f, d) {
            try {
                if (FS.isDir(f.mode)) FS.mkdir(a, f.mode);
                else if (FS.isFile(f.mode)) FS.writeFile(a, f.contents, {
                    encoding: "binary",
                    canOwn: !0
                });
                else return d(Error("node type not supported"));
                FS.utime(a, f.timestamp, f.timestamp)
            } catch (c) {
                return d(c)
            }
            d(null)
        },
        removeLocalEntry: function(a, f) {
            try {
                FS.lookupPath(a);
                var d = FS.stat(a);
                FS.isDir(d.mode) ?
                    FS.rmdir(a) : FS.isFile(d.mode) && FS.unlink(a)
            } catch (c) {
                return f(c)
            }
            f(null)
        },
        loadRemoteEntry: function(a, f, d) {
            a = a.get(f);
            a.onsuccess = function(a) {
                d(null, a.target.result)
            };
            a.onerror = function() {
                d(this.error)
            }
        },
        storeRemoteEntry: function(a, f, d, c) {
            a = a.put(d, f);
            a.onsuccess = function() {
                c(null)
            };
            a.onerror = function() {
                c(this.error)
            }
        },
        removeRemoteEntry: function(a, f, d) {
            a = a.delete(f);
            a.onsuccess = function() {
                d(null)
            };
            a.onerror = function() {
                d(this.error)
            }
        },
        reconcile: function(a, f, d) {
            function c(a) {
                if (a) {
                    if (!c.errored) return c.errored = !0, d(a)
                } else if (++h >= b) return d(null)
            }
            var b = 0,
                e = [];
            Object.keys(a.entries).forEach(function(c) {
                var d = a.entries[c],
                    g = f.entries[c];
                if (!g || d.timestamp > g.timestamp) e.push(c), b++
            });
            var g = [];
            Object.keys(f.entries).forEach(function(c) {
                a.entries[c] || (g.push(c), b++)
            });
            if (!b) return d(null);
            var h = 0,
                j = ("remote" === a.type ? a.db : f.db).transaction([IDBFS.DB_STORE_NAME], "readwrite"),
                i = j.objectStore(IDBFS.DB_STORE_NAME);
            j.onerror = function() {
                c(this.error)
            };
            e.sort().forEach(function(a) {
                "local" === f.type ? IDBFS.loadRemoteEntry(i,
                    a,
                    function(b, d) {
                        if (b) return c(b);
                        IDBFS.storeLocalEntry(a, d, c)
                    }) : IDBFS.loadLocalEntry(a, function(b, d) {
                    if (b) return c(b);
                    IDBFS.storeRemoteEntry(i, a, d, c)
                })
            });
            g.sort().reverse().forEach(function(a) {
                "local" === f.type ? IDBFS.removeLocalEntry(a, c) : IDBFS.removeRemoteEntry(i, a, c)
            })
        }
    },
    NODEFS = {
        isWindows: !1,
        staticInit: function() {
            NODEFS.isWindows = !!process.platform.match(/^win/)
        },
        mount: function(a) {
            assert(ENVIRONMENT_IS_NODE);
            return NODEFS.createNode(null, "/", NODEFS.getMode(a.opts.root), 0)
        },
        createNode: function(a,
            f, d) {
            if (!FS.isDir(d) && !FS.isFile(d) && !FS.isLink(d)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            a = FS.createNode(a, f, d);
            a.node_ops = NODEFS.node_ops;
            a.stream_ops = NODEFS.stream_ops;
            return a
        },
        getMode: function(a) {
            var f;
            try {
                f = fs.lstatSync(a), NODEFS.isWindows && (f.mode |= (f.mode & 146) >> 1)
            } catch (d) {
                if (!d.code) throw d;
                throw new FS.ErrnoError(ERRNO_CODES[d.code]);
            }
            return f.mode
        },
        realPath: function(a) {
            for (var f = []; a.parent !== a;) f.push(a.name), a = a.parent;
            f.push(a.mount.opts.root);
            f.reverse();
            return PATH.join.apply(null,
                f)
        },
        flagsToPermissionStringMap: {
            "0": "r",
            1: "r+",
            2: "r+",
            64: "r",
            65: "r+",
            66: "r+",
            129: "rx+",
            193: "rx+",
            514: "w+",
            577: "w",
            578: "w+",
            705: "wx",
            706: "wx+",
            1024: "a",
            1025: "a",
            1026: "a+",
            1089: "a",
            1090: "a+",
            1153: "ax",
            1154: "ax+",
            1217: "ax",
            1218: "ax+",
            4096: "rs",
            4098: "rs+"
        },
        flagsToPermissionString: function(a) {
            return a in NODEFS.flagsToPermissionStringMap ? NODEFS.flagsToPermissionStringMap[a] : a
        },
        node_ops: {
            getattr: function(a) {
                var a = NODEFS.realPath(a),
                    f;
                try {
                    f = fs.lstatSync(a)
                } catch (d) {
                    if (!d.code) throw d;
                    throw new FS.ErrnoError(ERRNO_CODES[d.code]);
                }
                NODEFS.isWindows && !f.blksize && (f.blksize = 4096);
                NODEFS.isWindows && !f.blocks && (f.blocks = (f.size + f.blksize - 1) / f.blksize | 0);
                return {
                    dev: f.dev,
                    ino: f.ino,
                    mode: f.mode,
                    nlink: f.nlink,
                    uid: f.uid,
                    gid: f.gid,
                    rdev: f.rdev,
                    size: f.size,
                    atime: f.atime,
                    mtime: f.mtime,
                    ctime: f.ctime,
                    blksize: f.blksize,
                    blocks: f.blocks
                }
            },
            setattr: function(a, f) {
                var d = NODEFS.realPath(a);
                try {
                    void 0 !== f.mode && (fs.chmodSync(d, f.mode), a.mode = f.mode);
                    if (void 0 !== f.timestamp) {
                        var c = new Date(f.timestamp);
                        fs.utimesSync(d, c, c)
                    }
                    void 0 !== f.size && fs.truncateSync(d,
                        f.size)
                } catch (b) {
                    if (!b.code) throw b;
                    throw new FS.ErrnoError(ERRNO_CODES[b.code]);
                }
            },
            lookup: function(a, f) {
                var d = PATH.join2(NODEFS.realPath(a), f),
                    d = NODEFS.getMode(d);
                return NODEFS.createNode(a, f, d)
            },
            mknod: function(a, f, d, c) {
                a = NODEFS.createNode(a, f, d, c);
                f = NODEFS.realPath(a);
                try {
                    FS.isDir(a.mode) ? fs.mkdirSync(f, a.mode) : fs.writeFileSync(f, "", {
                        mode: a.mode
                    })
                } catch (b) {
                    if (!b.code) throw b;
                    throw new FS.ErrnoError(ERRNO_CODES[b.code]);
                }
                return a
            },
            rename: function(a, f, d) {
                a = NODEFS.realPath(a);
                f = PATH.join2(NODEFS.realPath(f),
                    d);
                try {
                    fs.renameSync(a, f)
                } catch (c) {
                    if (!c.code) throw c;
                    throw new FS.ErrnoError(ERRNO_CODES[c.code]);
                }
            },
            unlink: function(a, f) {
                var d = PATH.join2(NODEFS.realPath(a), f);
                try {
                    fs.unlinkSync(d)
                } catch (c) {
                    if (!c.code) throw c;
                    throw new FS.ErrnoError(ERRNO_CODES[c.code]);
                }
            },
            rmdir: function(a, f) {
                var d = PATH.join2(NODEFS.realPath(a), f);
                try {
                    fs.rmdirSync(d)
                } catch (c) {
                    if (!c.code) throw c;
                    throw new FS.ErrnoError(ERRNO_CODES[c.code]);
                }
            },
            readdir: function(a) {
                a = NODEFS.realPath(a);
                try {
                    return fs.readdirSync(a)
                } catch (f) {
                    if (!f.code) throw f;
                    throw new FS.ErrnoError(ERRNO_CODES[f.code]);
                }
            },
            symlink: function(a, f, d) {
                a = PATH.join2(NODEFS.realPath(a), f);
                try {
                    fs.symlinkSync(d, a)
                } catch (c) {
                    if (!c.code) throw c;
                    throw new FS.ErrnoError(ERRNO_CODES[c.code]);
                }
            },
            readlink: function(a) {
                a = NODEFS.realPath(a);
                try {
                    return fs.readlinkSync(a)
                } catch (f) {
                    if (!f.code) throw f;
                    throw new FS.ErrnoError(ERRNO_CODES[f.code]);
                }
            }
        },
        stream_ops: {
            open: function(a) {
                var f = NODEFS.realPath(a.node);
                try {
                    FS.isFile(a.node.mode) && (a.nfd = fs.openSync(f, NODEFS.flagsToPermissionString(a.flags)))
                } catch (d) {
                    if (!d.code) throw d;
                    throw new FS.ErrnoError(ERRNO_CODES[d.code]);
                }
            },
            close: function(a) {
                try {
                    FS.isFile(a.node.mode) && a.nfd && fs.closeSync(a.nfd)
                } catch (f) {
                    if (!f.code) throw f;
                    throw new FS.ErrnoError(ERRNO_CODES[f.code]);
                }
            },
            read: function(a, f, d, c, b) {
                var e = new Buffer(c),
                    g;
                try {
                    g = fs.readSync(a.nfd, e, 0, c, b)
                } catch (h) {
                    throw new FS.ErrnoError(ERRNO_CODES[h.code]);
                }
                if (0 < g)
                    for (a = 0; a < g; a++) f[d + a] = e[a];
                return g
            },
            write: function(a, f, d, c, b) {
                var f = new Buffer(f.subarray(d, d + c)),
                    e;
                try {
                    e = fs.writeSync(a.nfd, f, 0, c, b)
                } catch (g) {
                    throw new FS.ErrnoError(ERRNO_CODES[g.code]);
                }
                return e
            },
            llseek: function(a, f, d) {
                if (1 === d) f += a.position;
                else if (2 === d && FS.isFile(a.node.mode)) try {
                    var c = fs.fstatSync(a.nfd),
                        f = f + c.size
                } catch (b) {
                    throw new FS.ErrnoError(ERRNO_CODES[b.code]);
                }
                if (0 > f) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                return a.position = f
            }
        }
    };
_stdin = allocate(1, "i32*", ALLOC_STATIC);
_stdout = allocate(1, "i32*", ALLOC_STATIC);
_stderr = allocate(1, "i32*", ALLOC_STATIC);

function _fflush() {}
var FS = {
    root: null,
    mounts: [],
    devices: [null],
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: !1,
    ignorePermissions: !0,
    ErrnoError: null,
    genericErrors: {},
    handleFSError: function(a) {
        if (!(a instanceof FS.ErrnoError)) throw a + " : " + stackTrace();
        return ___setErrNo(a.errno)
    },
    lookupPath: function(a, f) {
        var a = PATH.resolve(FS.cwd(), a),
            f = f || {},
            d = {
                follow_mount: !0,
                recurse_count: 0
            },
            c;
        for (c in d) void 0 === f[c] && (f[c] = d[c]);
        if (8 < f.recurse_count) throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        var d = PATH.normalizeArray(a.split("/").filter(function(a) {
                return !!a
            }), !1),
            b = FS.root;
        c = "/";
        for (var e = 0; e < d.length; e++) {
            var g = e === d.length - 1;
            if (g && f.parent) break;
            b = FS.lookupNode(b, d[e]);
            c = PATH.join2(c, d[e]);
            if (FS.isMountpoint(b) && (!g || g && f.follow_mount)) b = b.mounted.root;
            if (!g || f.follow)
                for (g = 0; FS.isLink(b.mode);)
                    if (b = FS.readlink(c), c = PATH.resolve(PATH.dirname(c), b), b = FS.lookupPath(c, {
                            recurse_count: f.recurse_count
                        }).node, 40 < g++) throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        return {
            path: c,
            node: b
        }
    },
    getPath: function(a) {
        for (var f;;) {
            if (FS.isRoot(a)) return a = a.mount.mountpoint, !f ? a : "/" !== a[a.length - 1] ? a + "/" + f : a + f;
            f = f ? a.name + "/" + f : a.name;
            a = a.parent
        }
    },
    hashName: function(a, f) {
        for (var d = 0, c = 0; c < f.length; c++) d = (d << 5) - d + f.charCodeAt(c) | 0;
        return (a + d >>> 0) % FS.nameTable.length
    },
    hashAddNode: function(a) {
        var f = FS.hashName(a.parent.id, a.name);
        a.name_next = FS.nameTable[f];
        FS.nameTable[f] = a
    },
    hashRemoveNode: function(a) {
        var f = FS.hashName(a.parent.id, a.name);
        if (FS.nameTable[f] === a) FS.nameTable[f] = a.name_next;
        else
            for (f = FS.nameTable[f]; f;) {
                if (f.name_next === a) {
                    f.name_next = a.name_next;
                    break
                }
                f =
                    f.name_next
            }
    },
    lookupNode: function(a, f) {
        var d = FS.mayLookup(a);
        if (d) throw new FS.ErrnoError(d);
        d = FS.hashName(a.id, f);
        for (d = FS.nameTable[d]; d; d = d.name_next) {
            var c = d.name;
            if (d.parent.id === a.id && c === f) return d
        }
        return FS.lookup(a, f)
    },
    createNode: function(a, f, d, c) {
        FS.FSNode || (FS.FSNode = function(a, c, d, f) {
            a || (a = this);
            this.parent = a;
            this.mount = a.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = c;
            this.mode = d;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = f
        }, FS.FSNode.prototype = {}, Object.defineProperties(FS.FSNode.prototype, {
            read: {
                get: function() {
                    return 365 === (this.mode & 365)
                },
                set: function(a) {
                    a ? this.mode |= 365 : this.mode &= -366
                }
            },
            write: {
                get: function() {
                    return 146 === (this.mode & 146)
                },
                set: function(a) {
                    a ? this.mode |= 146 : this.mode &= -147
                }
            },
            isFolder: {
                get: function() {
                    return FS.isDir(this.mode)
                }
            },
            isDevice: {
                get: function() {
                    return FS.isChrdev(this.mode)
                }
            }
        }));
        a = new FS.FSNode(a, f, d, c);
        FS.hashAddNode(a);
        return a
    },
    destroyNode: function(a) {
        FS.hashRemoveNode(a)
    },
    isRoot: function(a) {
        return a === a.parent
    },
    isMountpoint: function(a) {
        return !!a.mounted
    },
    isFile: function(a) {
        return 32768 === (a & 61440)
    },
    isDir: function(a) {
        return 16384 === (a & 61440)
    },
    isLink: function(a) {
        return 40960 === (a & 61440)
    },
    isChrdev: function(a) {
        return 8192 === (a & 61440)
    },
    isBlkdev: function(a) {
        return 24576 === (a & 61440)
    },
    isFIFO: function(a) {
        return 4096 === (a & 61440)
    },
    isSocket: function(a) {
        return 49152 === (a & 49152)
    },
    flagModes: {
        r: 0,
        rs: 1052672,
        "r+": 2,
        w: 577,
        wx: 705,
        xw: 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        a: 1089,
        ax: 1217,
        xa: 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    modeStringToFlags: function(a) {
        var f = FS.flagModes[a];
        if ("undefined" === typeof f) throw Error("Unknown file open mode: " + a);
        return f
    },
    flagsToPermissionString: function(a) {
        var f = ["r", "w", "rw"][a & 2097155];
        a & 512 && (f += "w");
        return f
    },
    nodePermissions: function(a, f) {
        return FS.ignorePermissions ? 0 : -1 !== f.indexOf("r") && !(a.mode & 292) || -1 !== f.indexOf("w") && !(a.mode & 146) || -1 !== f.indexOf("x") && !(a.mode & 73) ? ERRNO_CODES.EACCES : 0
    },
    mayLookup: function(a) {
        return FS.nodePermissions(a, "x")
    },
    mayCreate: function(a, f) {
        try {
            return FS.lookupNode(a, f), ERRNO_CODES.EEXIST
        } catch (d) {}
        return FS.nodePermissions(a,
            "wx")
    },
    mayDelete: function(a, f, d) {
        var c;
        try {
            c = FS.lookupNode(a, f)
        } catch (b) {
            return b.errno
        }
        if (a = FS.nodePermissions(a, "wx")) return a;
        if (d) {
            if (!FS.isDir(c.mode)) return ERRNO_CODES.ENOTDIR;
            if (FS.isRoot(c) || FS.getPath(c) === FS.cwd()) return ERRNO_CODES.EBUSY
        } else if (FS.isDir(c.mode)) return ERRNO_CODES.EISDIR;
        return 0
    },
    mayOpen: function(a, f) {
        return !a ? ERRNO_CODES.ENOENT : FS.isLink(a.mode) ? ERRNO_CODES.ELOOP : FS.isDir(a.mode) && (0 !== (f & 2097155) || f & 512) ? ERRNO_CODES.EISDIR : FS.nodePermissions(a, FS.flagsToPermissionString(f))
    },
    MAX_OPEN_FDS: 4096,
    nextfd: function(a, f) {
        for (var f = f || FS.MAX_OPEN_FDS, d = a || 0; d <= f; d++)
            if (!FS.streams[d]) return d;
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
    },
    getStream: function(a) {
        return FS.streams[a]
    },
    createStream: function(a, f, d) {
        FS.FSStream || (FS.FSStream = function() {}, FS.FSStream.prototype = {}, Object.defineProperties(FS.FSStream.prototype, {
            object: {
                get: function() {
                    return this.node
                },
                set: function(a) {
                    this.node = a
                }
            },
            isRead: {
                get: function() {
                    return 1 !== (this.flags & 2097155)
                }
            },
            isWrite: {
                get: function() {
                    return 0 !==
                        (this.flags & 2097155)
                }
            },
            isAppend: {
                get: function() {
                    return this.flags & 1024
                }
            }
        }));
        if (a.__proto__) a.__proto__ = FS.FSStream.prototype;
        else {
            var c = new FS.FSStream,
                b;
            for (b in a) c[b] = a[b];
            a = c
        }
        f = FS.nextfd(f, d);
        a.fd = f;
        return FS.streams[f] = a
    },
    closeStream: function(a) {
        FS.streams[a] = null
    },
    getStreamFromPtr: function(a) {
        return FS.streams[a - 1]
    },
    getPtrForStream: function(a) {
        return a ? a.fd + 1 : 0
    },
    chrdev_stream_ops: {
        open: function(a) {
            var f = FS.getDevice(a.node.rdev);
            a.stream_ops = f.stream_ops;
            a.stream_ops.open && a.stream_ops.open(a)
        },
        llseek: function() {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
    },
    major: function(a) {
        return a >> 8
    },
    minor: function(a) {
        return a & 255
    },
    makedev: function(a, f) {
        return a << 8 | f
    },
    registerDevice: function(a, f) {
        FS.devices[a] = {
            stream_ops: f
        }
    },
    getDevice: function(a) {
        return FS.devices[a]
    },
    getMounts: function(a) {
        for (var f = [], a = [a]; a.length;) {
            var d = a.pop();
            f.push(d);
            a.push.apply(a, d.mounts)
        }
        return f
    },
    syncfs: function(a, f) {
        function d(a) {
            if (a) {
                if (!d.errored) return d.errored = !0, f(a)
            } else ++b >= c.length && f(null)
        }
        "function" === typeof a &&
            (f = a, a = !1);
        var c = FS.getMounts(FS.root.mount),
            b = 0;
        c.forEach(function(b) {
            if (!b.type.syncfs) return d(null);
            b.type.syncfs(b, a, d)
        })
    },
    mount: function(a, f, d) {
        var c = "/" === d,
            b = !d,
            e;
        if (c && FS.root) throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        if (!c && !b) {
            e = FS.lookupPath(d, {
                follow_mount: !1
            });
            d = e.path;
            e = e.node;
            if (FS.isMountpoint(e)) throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            if (!FS.isDir(e.mode)) throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        f = {
            type: a,
            opts: f,
            mountpoint: d,
            mounts: []
        };
        a = a.mount(f);
        a.mount = f;
        f.root = a;
        c ?
            FS.root = a : e && (e.mounted = f, e.mount && e.mount.mounts.push(f));
        return a
    },
    unmount: function(a) {
        a = FS.lookupPath(a, {
            follow_mount: !1
        });
        if (!FS.isMountpoint(a.node)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        var a = a.node,
            f = a.mounted,
            d = FS.getMounts(f);
        Object.keys(FS.nameTable).forEach(function(a) {
            for (a = FS.nameTable[a]; a;) {
                var b = a.name_next; - 1 !== d.indexOf(a.mount) && FS.destroyNode(a);
                a = b
            }
        });
        a.mounted = null;
        f = a.mount.mounts.indexOf(f);
        assert(-1 !== f);
        a.mount.mounts.splice(f, 1)
    },
    lookup: function(a, f) {
        return a.node_ops.lookup(a,
            f)
    },
    mknod: function(a, f, d) {
        var c = FS.lookupPath(a, {
                parent: !0
            }).node,
            a = PATH.basename(a),
            b = FS.mayCreate(c, a);
        if (b) throw new FS.ErrnoError(b);
        if (!c.node_ops.mknod) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        return c.node_ops.mknod(c, a, f, d)
    },
    create: function(a, f) {
        f = (void 0 !== f ? f : 438) & 4095;
        f |= 32768;
        return FS.mknod(a, f, 0)
    },
    mkdir: function(a, f) {
        f = (void 0 !== f ? f : 511) & 1023;
        f |= 16384;
        return FS.mknod(a, f, 0)
    },
    mkdev: function(a, f, d) {
        "undefined" === typeof d && (d = f, f = 438);
        return FS.mknod(a, f | 8192, d)
    },
    symlink: function(a, f) {
        var d =
            FS.lookupPath(f, {
                parent: !0
            }).node,
            c = PATH.basename(f),
            b = FS.mayCreate(d, c);
        if (b) throw new FS.ErrnoError(b);
        if (!d.node_ops.symlink) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        return d.node_ops.symlink(d, c, a)
    },
    rename: function(a, f) {
        var d = PATH.dirname(a),
            c = PATH.dirname(f),
            b = PATH.basename(a),
            e = PATH.basename(f),
            g, h, j;
        try {
            g = FS.lookupPath(a, {
                parent: !0
            }), h = g.node, g = FS.lookupPath(f, {
                parent: !0
            }), j = g.node
        } catch (i) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (h.mount !== j.mount) throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        g = FS.lookupNode(h, b);
        c = PATH.relative(a, c);
        if ("." !== c.charAt(0)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        c = PATH.relative(f, d);
        if ("." !== c.charAt(0)) throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        var l;
        try {
            l = FS.lookupNode(j, e)
        } catch (k) {}
        if (g !== l) {
            d = FS.isDir(g.mode);
            if (b = FS.mayDelete(h, b, d)) throw new FS.ErrnoError(b);
            if (b = l ? FS.mayDelete(j, e, d) : FS.mayCreate(j, e)) throw new FS.ErrnoError(b);
            if (!h.node_ops.rename) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            if (FS.isMountpoint(g) || l && FS.isMountpoint(l)) throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            if (j !== h && (b = FS.nodePermissions(h, "w"))) throw new FS.ErrnoError(b);
            FS.hashRemoveNode(g);
            try {
                h.node_ops.rename(g, j, e)
            } catch (m) {
                throw m;
            } finally {
                FS.hashAddNode(g)
            }
        }
    },
    rmdir: function(a) {
        var f = FS.lookupPath(a, {
                parent: !0
            }).node,
            a = PATH.basename(a),
            d = FS.lookupNode(f, a),
            c = FS.mayDelete(f, a, !0);
        if (c) throw new FS.ErrnoError(c);
        if (!f.node_ops.rmdir) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        if (FS.isMountpoint(d)) throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        f.node_ops.rmdir(f, a);
        FS.destroyNode(d)
    },
    readdir: function(a) {
        a =
            FS.lookupPath(a, {
                follow: !0
            }).node;
        if (!a.node_ops.readdir) throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        return a.node_ops.readdir(a)
    },
    unlink: function(a) {
        var f = FS.lookupPath(a, {
                parent: !0
            }).node,
            a = PATH.basename(a),
            d = FS.lookupNode(f, a),
            c = FS.mayDelete(f, a, !1);
        if (c) throw c === ERRNO_CODES.EISDIR && (c = ERRNO_CODES.EPERM), new FS.ErrnoError(c);
        if (!f.node_ops.unlink) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        if (FS.isMountpoint(d)) throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        f.node_ops.unlink(f, a);
        FS.destroyNode(d)
    },
    readlink: function(a) {
        a = FS.lookupPath(a).node;
        if (!a.node_ops.readlink) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        return a.node_ops.readlink(a)
    },
    stat: function(a, f) {
        var d = FS.lookupPath(a, {
            follow: !f
        }).node;
        if (!d.node_ops.getattr) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        return d.node_ops.getattr(d)
    },
    lstat: function(a) {
        return FS.stat(a, !0)
    },
    chmod: function(a, f, d) {
        a = "string" === typeof a ? FS.lookupPath(a, {
            follow: !d
        }).node : a;
        if (!a.node_ops.setattr) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        a.node_ops.setattr(a, {
            mode: f & 4095 | a.mode & -4096,
            timestamp: Date.now()
        })
    },
    lchmod: function(a, f) {
        FS.chmod(a, f, !0)
    },
    fchmod: function(a, f) {
        var d = FS.getStream(a);
        if (!d) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        FS.chmod(d.node, f)
    },
    chown: function(a, f, d, c) {
        a = "string" === typeof a ? FS.lookupPath(a, {
            follow: !c
        }).node : a;
        if (!a.node_ops.setattr) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        a.node_ops.setattr(a, {
            timestamp: Date.now()
        })
    },
    lchown: function(a, f, d) {
        FS.chown(a, f, d, !0)
    },
    fchown: function(a, f, d) {
        a = FS.getStream(a);
        if (!a) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        FS.chown(a.node, f, d)
    },
    truncate: function(a, f) {
        if (0 > f) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        var d;
        d = "string" === typeof a ? FS.lookupPath(a, {
            follow: !0
        }).node : a;
        if (!d.node_ops.setattr) throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        if (FS.isDir(d.mode)) throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        if (!FS.isFile(d.mode)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        var c = FS.nodePermissions(d, "w");
        if (c) throw new FS.ErrnoError(c);
        d.node_ops.setattr(d, {
            size: f,
            timestamp: Date.now()
        })
    },
    ftruncate: function(a, f) {
        var d =
            FS.getStream(a);
        if (!d) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        if (0 === (d.flags & 2097155)) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        FS.truncate(d.node, f)
    },
    utime: function(a, f, d) {
        a = FS.lookupPath(a, {
            follow: !0
        }).node;
        a.node_ops.setattr(a, {
            timestamp: Math.max(f, d)
        })
    },
    open: function(a, f, d, c, b) {
        var f = "string" === typeof f ? FS.modeStringToFlags(f) : f,
            d = f & 64 ? ("undefined" === typeof d ? 438 : d) & 4095 | 32768 : 0,
            e;
        if ("object" === typeof a) e = a;
        else {
            a = PATH.normalize(a);
            try {
                e = FS.lookupPath(a, {
                    follow: !(f & 131072)
                }).node
            } catch (g) {}
        }
        if (f &
            64)
            if (e) {
                if (f & 128) throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            } else e = FS.mknod(a, d, 0);
        if (!e) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        FS.isChrdev(e.mode) && (f &= -513);
        if (d = FS.mayOpen(e, f)) throw new FS.ErrnoError(d);
        f & 512 && FS.truncate(e, 0);
        f &= -641;
        c = FS.createStream({
            node: e,
            path: FS.getPath(e),
            flags: f,
            seekable: !0,
            position: 0,
            stream_ops: e.stream_ops,
            ungotten: [],
            error: !1
        }, c, b);
        c.stream_ops.open && c.stream_ops.open(c);
        Module.logReadFiles && !(f & 1) && (FS.readFiles || (FS.readFiles = {}), a in FS.readFiles || (FS.readFiles[a] =
            1, Module.printErr("read file: " + a)));
        return c
    },
    close: function(a) {
        try {
            a.stream_ops.close && a.stream_ops.close(a)
        } catch (f) {
            throw f;
        } finally {
            FS.closeStream(a.fd)
        }
    },
    llseek: function(a, f, d) {
        if (!a.seekable || !a.stream_ops.llseek) throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        return a.stream_ops.llseek(a, f, d)
    },
    read: function(a, f, d, c, b) {
        if (0 > c || 0 > b) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        if (1 === (a.flags & 2097155)) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        if (FS.isDir(a.node.mode)) throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        if (!a.stream_ops.read) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        var e = !0;
        if ("undefined" === typeof b) b = a.position, e = !1;
        else if (!a.seekable) throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        f = a.stream_ops.read(a, f, d, c, b);
        e || (a.position += f);
        return f
    },
    write: function(a, f, d, c, b, e) {
        if (0 > c || 0 > b) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        if (0 === (a.flags & 2097155)) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        if (FS.isDir(a.node.mode)) throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        if (!a.stream_ops.write) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        var g = !0;
        if ("undefined" === typeof b) b = a.position, g = !1;
        else if (!a.seekable) throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        a.flags & 1024 && FS.llseek(a, 0, 2);
        f = a.stream_ops.write(a, f, d, c, b, e);
        g || (a.position += f);
        return f
    },
    allocate: function(a, f, d) {
        if (0 > f || 0 >= d) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        if (0 === (a.flags & 2097155)) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        if (!FS.isFile(a.node.mode) && !FS.isDir(node.mode)) throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        if (!a.stream_ops.allocate) throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        a.stream_ops.allocate(a, f, d)
    },
    mmap: function(a, f, d, c, b, e, g) {
        if (1 === (a.flags & 2097155)) throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        if (!a.stream_ops.mmap) throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        return a.stream_ops.mmap(a, f, d, c, b, e, g)
    },
    ioctl: function(a, f, d) {
        if (!a.stream_ops.ioctl) throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        return a.stream_ops.ioctl(a, f, d)
    },
    readFile: function(a, f) {
        f = f || {};
        f.flags = f.flags || "r";
        f.encoding = f.encoding || "binary";
        if ("utf8" !== f.encoding && "binary" !== f.encoding) throw Error('Invalid encoding type "' +
            f.encoding + '"');
        var d, c = FS.open(a, f.flags),
            b = FS.stat(a).size,
            e = new Uint8Array(b);
        FS.read(c, e, 0, b, 0);
        if ("utf8" === f.encoding) {
            d = "";
            for (var g = new Runtime.UTF8Processor, h = 0; h < b; h++) d += g.processCChar(e[h])
        } else "binary" === f.encoding && (d = e);
        FS.close(c);
        return d
    },
    writeFile: function(a, f, d) {
        d = d || {};
        d.flags = d.flags || "w";
        d.encoding = d.encoding || "utf8";
        if ("utf8" !== d.encoding && "binary" !== d.encoding) throw Error('Invalid encoding type "' + d.encoding + '"');
        a = FS.open(a, d.flags, d.mode);
        if ("utf8" === d.encoding) {
            var c = new Runtime.UTF8Processor,
                f = new Uint8Array(c.processJSString(f));
            FS.write(a, f, 0, f.length, 0, d.canOwn)
        } else "binary" === d.encoding && FS.write(a, f, 0, f.length, 0, d.canOwn);
        FS.close(a)
    },
    cwd: function() {
        return FS.currentPath
    },
    chdir: function(a) {
        a = FS.lookupPath(a, {
            follow: !0
        });
        if (!FS.isDir(a.node.mode)) throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        var f = FS.nodePermissions(a.node, "x");
        if (f) throw new FS.ErrnoError(f);
        FS.currentPath = a.path
    },
    createDefaultDirectories: function() {
        FS.mkdir("/tmp")
    },
    createDefaultDevices: function() {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
            read: function() {
                return 0
            },
            write: function() {
                return 0
            }
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp")
    },
    createStandardStreams: function() {
        Module.stdin ? FS.createDevice("/dev", "stdin", Module.stdin) : FS.symlink("/dev/tty", "/dev/stdin");
        Module.stdout ? FS.createDevice("/dev",
            "stdout", null, Module.stdout) : FS.symlink("/dev/tty", "/dev/stdout");
        Module.stderr ? FS.createDevice("/dev", "stderr", null, Module.stderr) : FS.symlink("/dev/tty1", "/dev/stderr");
        var a = FS.open("/dev/stdin", "r");
        HEAP32[_stdin >> 2] = FS.getPtrForStream(a);
        assert(0 === a.fd, "invalid handle for stdin (" + a.fd + ")");
        a = FS.open("/dev/stdout", "w");
        HEAP32[_stdout >> 2] = FS.getPtrForStream(a);
        assert(1 === a.fd, "invalid handle for stdout (" + a.fd + ")");
        a = FS.open("/dev/stderr", "w");
        HEAP32[_stderr >> 2] = FS.getPtrForStream(a);
        assert(2 ===
            a.fd, "invalid handle for stderr (" + a.fd + ")")
    },
    ensureErrnoError: function() {
        FS.ErrnoError || (FS.ErrnoError = function(a) {
            this.errno = a;
            for (var f in ERRNO_CODES)
                if (ERRNO_CODES[f] === a) {
                    this.code = f;
                    break
                }
            this.message = ERRNO_MESSAGES[a]
        }, FS.ErrnoError.prototype = Error(), FS.ErrnoError.prototype.constructor = FS.ErrnoError, [ERRNO_CODES.ENOENT].forEach(function(a) {
            FS.genericErrors[a] = new FS.ErrnoError(a);
            FS.genericErrors[a].stack = "<generic error, no stack>"
        }))
    },
    staticInit: function() {
        FS.ensureErrnoError();
        FS.nameTable =
            Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices()
    },
    init: function(a, f, d) {
        assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
        FS.init.initialized = !0;
        FS.ensureErrnoError();
        Module.stdin = a || Module.stdin;
        Module.stdout = f || Module.stdout;
        Module.stderr = d || Module.stderr;
        FS.createStandardStreams()
    },
    quit: function() {
        FS.init.initialized = !1;
        for (var a = 0; a < FS.streams.length; a++) {
            var f = FS.streams[a];
            f && FS.close(f)
        }
    },
    getMode: function(a, f) {
        var d = 0;
        a && (d |= 365);
        f && (d |= 146);
        return d
    },
    joinPath: function(a, f) {
        var d = PATH.join.apply(null, a);
        f && "/" == d[0] && (d = d.substr(1));
        return d
    },
    absolutePath: function(a, f) {
        return PATH.resolve(f, a)
    },
    standardizePath: function(a) {
        return PATH.normalize(a)
    },
    findObject: function(a, f) {
        var d = FS.analyzePath(a, f);
        if (d.exists) return d.object;
        ___setErrNo(d.error);
        return null
    },
    analyzePath: function(a, f) {
        try {
            var d = FS.lookupPath(a, {
                    follow: !f
                }),
                a = d.path
        } catch (c) {}
        var b = {
            isRoot: !1,
            exists: !1,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: !1,
            parentPath: null,
            parentObject: null
        };
        try {
            d = FS.lookupPath(a, {
                parent: !0
            }), b.parentExists = !0, b.parentPath = d.path, b.parentObject = d.node, b.name = PATH.basename(a), d = FS.lookupPath(a, {
                follow: !f
            }), b.exists = !0, b.path = d.path, b.object = d.node, b.name = d.node.name, b.isRoot = "/" === d.path
        } catch (e) {
            b.error = e.errno
        }
        return b
    },
    createFolder: function(a, f, d, c) {
        a = PATH.join2("string" === typeof a ? a : FS.getPath(a), f);
        d = FS.getMode(d, c);
        return FS.mkdir(a, d)
    },
    createPath: function(a, f) {
        for (var a = "string" === typeof a ? a : FS.getPath(a), d = f.split("/").reverse(); d.length;) {
            var c = d.pop();
            if (c) {
                var b = PATH.join2(a, c);
                try {
                    FS.mkdir(b)
                } catch (e) {}
                a = b
            }
        }
        return b
    },
    createFile: function(a, f, d, c, b) {
        a = PATH.join2("string" === typeof a ? a : FS.getPath(a), f);
        c = FS.getMode(c, b);
        return FS.create(a, c)
    },
    createDataFile: function(a, f, d, c, b, e) {
        a = f ? PATH.join2("string" === typeof a ? a : FS.getPath(a), f) : a;
        c = FS.getMode(c, b);
        b = FS.create(a, c);
        if (d) {
            if ("string" ===
                typeof d) {
                for (var a = Array(d.length), f = 0, g = d.length; f < g; ++f) a[f] = d.charCodeAt(f);
                d = a
            }
            FS.chmod(b, c | 146);
            a = FS.open(b, "w");
            FS.write(a, d, 0, d.length, 0, e);
            FS.close(a);
            FS.chmod(b, c)
        }
        return b
    },
    createDevice: function(a, f, d, c) {
        a = PATH.join2("string" === typeof a ? a : FS.getPath(a), f);
        f = FS.getMode(!!d, !!c);
        FS.createDevice.major || (FS.createDevice.major = 64);
        var b = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(b, {
            open: function(a) {
                a.seekable = !1
            },
            close: function() {
                c && (c.buffer && c.buffer.length) && c(10)
            },
            read: function(a,
                b, c, f) {
                for (var i = 0, l = 0; l < f; l++) {
                    var k;
                    try {
                        k = d()
                    } catch (m) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                    if (void 0 === k && 0 === i) throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    if (null === k || void 0 === k) break;
                    i++;
                    b[c + l] = k
                }
                i && (a.node.timestamp = Date.now());
                return i
            },
            write: function(a, b, d, f) {
                for (var i = 0; i < f; i++) try {
                    c(b[d + i])
                } catch (l) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                f && (a.node.timestamp = Date.now());
                return i
            }
        });
        return FS.mkdev(a, f, b)
    },
    createLink: function(a, f, d) {
        a = PATH.join2("string" === typeof a ? a : FS.getPath(a),
            f);
        return FS.symlink(d, a)
    },
    forceLoadFile: function(a) {
        if (a.isDevice || a.isFolder || a.link || a.contents) return !0;
        var f = !0;
        if ("undefined" !== typeof XMLHttpRequest) throw Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        if (Module.read) try {
            a.contents = intArrayFromString(Module.read(a.url), !0)
        } catch (d) {
            f = !1
        } else throw Error("Cannot load without read() or XMLHttpRequest.");
        f || ___setErrNo(ERRNO_CODES.EIO);
        return f
    },
    createLazyFile: function(a, f, d, c, b) {
        if ("undefined" !== typeof XMLHttpRequest) {
            if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var e = function() {
                this.lengthKnown = !1;
                this.chunks = []
            };
            e.prototype.get = function(a) {
                if (!(a > this.length - 1 || 0 > a)) {
                    var b = a % this.chunkSize;
                    return this.getter(Math.floor(a / this.chunkSize))[b]
                }
            };
            e.prototype.setDataGetter = function(a) {
                this.getter =
                    a
            };
            e.prototype.cacheLength = function() {
                var a = new XMLHttpRequest;
                a.open("HEAD", d, !1);
                a.send(null);
                if (!(200 <= a.status && 300 > a.status || 304 === a.status)) throw Error("Couldn't load " + d + ". Status: " + a.status);
                var b = Number(a.getResponseHeader("Content-length")),
                    c, e = 1048576;
                if (!((c = a.getResponseHeader("Accept-Ranges")) && "bytes" === c)) e = b;
                var f = this;
                f.setDataGetter(function(a) {
                    var c = a * e,
                        g = (a + 1) * e - 1,
                        g = Math.min(g, b - 1);
                    if ("undefined" === typeof f.chunks[a]) {
                        var h = f.chunks;
                        if (c > g) throw Error("invalid range (" + c + ", " +
                            g + ") or no bytes requested!");
                        if (g > b - 1) throw Error("only " + b + " bytes available! programmer error!");
                        var j = new XMLHttpRequest;
                        j.open("GET", d, !1);
                        b !== e && j.setRequestHeader("Range", "bytes=" + c + "-" + g);
                        "undefined" != typeof Uint8Array && (j.responseType = "arraybuffer");
                        j.overrideMimeType && j.overrideMimeType("text/plain; charset=x-user-defined");
                        j.send(null);
                        if (!(200 <= j.status && 300 > j.status || 304 === j.status)) throw Error("Couldn't load " + d + ". Status: " + j.status);
                        c = void 0 !== j.response ? new Uint8Array(j.response || []) : intArrayFromString(j.responseText || "", !0);
                        h[a] = c
                    }
                    if ("undefined" === typeof f.chunks[a]) throw Error("doXHR failed!");
                    return f.chunks[a]
                });
                this._length = b;
                this._chunkSize = e;
                this.lengthKnown = !0
            };
            e = new e;
            Object.defineProperty(e, "length", {
                get: function() {
                    this.lengthKnown || this.cacheLength();
                    return this._length
                }
            });
            Object.defineProperty(e, "chunkSize", {
                get: function() {
                    this.lengthKnown || this.cacheLength();
                    return this._chunkSize
                }
            });
            e = {
                isDevice: !1,
                contents: e
            }
        } else e = {
            isDevice: !1,
            url: d
        };
        var g = FS.createFile(a,
            f, e, c, b);
        e.contents ? g.contents = e.contents : e.url && (g.contents = null, g.url = e.url);
        var h = {};
        Object.keys(g.stream_ops).forEach(function(a) {
            var b = g.stream_ops[a];
            h[a] = function() {
                if (!FS.forceLoadFile(g)) throw new FS.ErrnoError(ERRNO_CODES.EIO);
                return b.apply(null, arguments)
            }
        });
        h.read = function(a, b, c, d, e) {
            if (!FS.forceLoadFile(g)) throw new FS.ErrnoError(ERRNO_CODES.EIO);
            a = a.node.contents;
            if (e >= a.length) return 0;
            d = Math.min(a.length - e, d);
            assert(0 <= d);
            if (a.slice)
                for (var f = 0; f < d; f++) b[c + f] = a[e + f];
            else
                for (f = 0; f <
                    d; f++) b[c + f] = a.get(e + f);
            return d
        };
        g.stream_ops = h;
        return g
    },
    createPreloadedFile: function(a, f, d, c, b, e, g, h, j) {
        function i(d) {
            function i(d) {
                h || FS.createDataFile(a, f, d, c, b, j);
                e && e();
                removeRunDependency("cp " + l)
            }
            var n = !1;
            Module.preloadPlugins.forEach(function(a) {
                !n && a.canHandle(l) && (a.handle(d, l, i, function() {
                    g && g();
                    removeRunDependency("cp " + l)
                }), n = !0)
            });
            n || i(d)
        }
        Browser.init();
        var l = f ? PATH.resolve(PATH.join2(a, f)) : a;
        addRunDependency("cp " + l);
        "string" == typeof d ? Browser.asyncLoad(d, function(a) {
            i(a)
        }, g) : i(d)
    },
    indexedDB: function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
    },
    DB_NAME: function() {
        return "EM_FS_" + window.location.pathname
    },
    DB_VERSION: 20,
    DB_STORE_NAME: "FILE_DATA",
    saveFilesToDB: function(a, f, d) {
        var f = f || function() {},
            d = d || function() {},
            c = FS.indexedDB();
        try {
            var b = c.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return d(e)
        }
        b.onupgradeneeded = function() {
            console.log("creating db");
            b.result.createObjectStore(FS.DB_STORE_NAME)
        };
        b.onsuccess = function() {
            var c = b.result.transaction([FS.DB_STORE_NAME],
                    "readwrite"),
                e = c.objectStore(FS.DB_STORE_NAME),
                j = 0,
                i = 0,
                l = a.length;
            a.forEach(function(a) {
                a = e.put(FS.analyzePath(a).object.contents, a);
                a.onsuccess = function() {
                    j++;
                    j + i == l && (0 == i ? f() : d())
                };
                a.onerror = function() {
                    i++;
                    j + i == l && (0 == i ? f() : d())
                }
            });
            c.onerror = d
        };
        b.onerror = d
    },
    loadFilesFromDB: function(a, f, d) {
        var f = f || function() {},
            d = d || function() {},
            c = FS.indexedDB();
        try {
            var b = c.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return d(e)
        }
        b.onupgradeneeded = d;
        b.onsuccess = function() {
            var c = b.result;
            try {
                var e = c.transaction([FS.DB_STORE_NAME],
                    "readonly")
            } catch (j) {
                d(j);
                return
            }
            var i = e.objectStore(FS.DB_STORE_NAME),
                l = 0,
                k = 0,
                m = a.length;
            a.forEach(function(a) {
                var b = i.get(a);
                b.onsuccess = function() {
                    FS.analyzePath(a).exists && FS.unlink(a);
                    FS.createDataFile(PATH.dirname(a), PATH.basename(a), b.result, !0, !0, !0);
                    l++;
                    l + k == m && (0 == k ? f() : d())
                };
                b.onerror = function() {
                    k++;
                    l + k == m && (0 == k ? f() : d())
                }
            });
            e.onerror = d
        };
        b.onerror = d
    }
};

function _mkport() {
    throw "TODO";
}
var SOCKFS = {
    mount: function() {
        return FS.createNode(null, "/", 16895, 0)
    },
    createSocket: function(a, f, d) {
        d && assert(1 == f == (6 == d));
        a = {
            family: a,
            type: f,
            protocol: d,
            server: null,
            peers: {},
            pending: [],
            recv_queue: [],
            sock_ops: SOCKFS.websocket_sock_ops
        };
        f = SOCKFS.nextname();
        d = FS.createNode(SOCKFS.root, f, 49152, 0);
        d.sock = a;
        f = FS.createStream({
            path: f,
            node: d,
            flags: FS.modeStringToFlags("r+"),
            seekable: !1,
            stream_ops: SOCKFS.stream_ops
        });
        a.stream = f;
        return a
    },
    getSocket: function(a) {
        a = FS.getStream(a);
        return !a || !FS.isSocket(a.node.mode) ?
            null : a.node.sock
    },
    stream_ops: {
        poll: function(a) {
            a = a.node.sock;
            return a.sock_ops.poll(a)
        },
        ioctl: function(a, f, d) {
            a = a.node.sock;
            return a.sock_ops.ioctl(a, f, d)
        },
        read: function(a, f, d, c) {
            a = a.node.sock;
            c = a.sock_ops.recvmsg(a, c);
            if (!c) return 0;
            f.set(c.buffer, d);
            return c.buffer.length
        },
        write: function(a, f, d, c) {
            a = a.node.sock;
            return a.sock_ops.sendmsg(a, f, d, c)
        },
        close: function(a) {
            a = a.node.sock;
            a.sock_ops.close(a)
        }
    },
    nextname: function() {
        SOCKFS.nextname.current || (SOCKFS.nextname.current = 0);
        return "socket[" + SOCKFS.nextname.current++ +
            "]"
    },
    websocket_sock_ops: {
        createPeer: function(a, f, d) {
            var c;
            "object" === typeof f && (c = f, d = f = null);
            if (c)
                if (c._socket) f = c._socket.remoteAddress, d = c._socket.remotePort;
                else {
                    d = /ws[s]?:\/\/([^:]+):(\d+)/.exec(c.url);
                    if (!d) throw Error("WebSocket URL must be in the format ws(s)://address:port");
                    f = d[1];
                    d = parseInt(d[2], 10)
                } else try {
                var b = ENVIRONMENT_IS_NODE ? {
                    headers: {
                        "websocket-protocol": ["binary"]
                    }
                } : ["binary"];
                c = new(ENVIRONMENT_IS_NODE ? require("ws") : window.WebSocket)("ws://" + f + ":" + d, b);
                c.binaryType = "arraybuffer"
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
            f = {
                addr: f,
                port: d,
                socket: c,
                dgram_send_queue: []
            };
            SOCKFS.websocket_sock_ops.addPeer(a, f);
            SOCKFS.websocket_sock_ops.handlePeerEvents(a, f);
            2 === a.type && "undefined" !== typeof a.sport && f.dgram_send_queue.push(new Uint8Array([255, 255, 255, 255, 112, 111, 114, 116, (a.sport & 65280) >> 8, a.sport & 255]));
            return f
        },
        getPeer: function(a, f, d) {
            return a.peers[f + ":" + d]
        },
        addPeer: function(a, f) {
            a.peers[f.addr + ":" + f.port] = f
        },
        removePeer: function(a, f) {
            delete a.peers[f.addr + ":" + f.port]
        },
        handlePeerEvents: function(a, f) {
            function d(b) {
                assert("string" !==
                    typeof b && void 0 !== b.byteLength);
                var b = new Uint8Array(b),
                    d = c;
                c = !1;
                d && 10 === b.length && 255 === b[0] && 255 === b[1] && 255 === b[2] && 255 === b[3] && 112 === b[4] && 111 === b[5] && 114 === b[6] && 116 === b[7] ? (b = b[8] << 8 | b[9], SOCKFS.websocket_sock_ops.removePeer(a, f), f.port = b, SOCKFS.websocket_sock_ops.addPeer(a, f)) : a.recv_queue.push({
                    addr: f.addr,
                    port: f.port,
                    data: b
                })
            }
            var c = !0,
                b = function() {
                    try {
                        for (var a = f.dgram_send_queue.shift(); a;) f.socket.send(a), a = f.dgram_send_queue.shift()
                    } catch (b) {
                        f.socket.close()
                    }
                };
            ENVIRONMENT_IS_NODE ? (f.socket.on("open",
                b), f.socket.on("message", function(a, b) {
                b.binary && d((new Uint8Array(a)).buffer)
            }), f.socket.on("error", function() {})) : (f.socket.onopen = b, f.socket.onmessage = function(a) {
                d(a.data)
            })
        },
        poll: function(a) {
            if (1 === a.type && a.server) return a.pending.length ? 65 : 0;
            var f = 0,
                d = 1 === a.type ? SOCKFS.websocket_sock_ops.getPeer(a, a.daddr, a.dport) : null;
            if (a.recv_queue.length || !d || d && d.socket.readyState === d.socket.CLOSING || d && d.socket.readyState === d.socket.CLOSED) f |= 65;
            if (!d || d && d.socket.readyState === d.socket.OPEN) f |= 4;
            if (d &&
                d.socket.readyState === d.socket.CLOSING || d && d.socket.readyState === d.socket.CLOSED) f |= 16;
            return f
        },
        ioctl: function(a, f, d) {
            switch (f) {
                case 21531:
                    return f = 0, a.recv_queue.length && (f = a.recv_queue[0].data.length), HEAP32[d >> 2] = f, 0;
                default:
                    return ERRNO_CODES.EINVAL
            }
        },
        close: function(a) {
            if (a.server) {
                try {
                    a.server.close()
                } catch (f) {}
                a.server = null
            }
            for (var d = Object.keys(a.peers), c = 0; c < d.length; c++) {
                var b = a.peers[d[c]];
                try {
                    b.socket.close()
                } catch (e) {}
                SOCKFS.websocket_sock_ops.removePeer(a, b)
            }
            return 0
        },
        bind: function(a,
            f, d) {
            if ("undefined" !== typeof a.saddr || "undefined" !== typeof a.sport) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            a.saddr = f;
            a.sport = d || _mkport();
            if (2 === a.type) {
                a.server && (a.server.close(), a.server = null);
                try {
                    a.sock_ops.listen(a, 0)
                } catch (c) {
                    if (!(c instanceof FS.ErrnoError)) throw c;
                    if (c.errno !== ERRNO_CODES.EOPNOTSUPP) throw c;
                }
            }
        },
        connect: function(a, f, d) {
            if (a.server) throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
            if ("undefined" !== typeof a.daddr && "undefined" !== typeof a.dport) {
                var c = SOCKFS.websocket_sock_ops.getPeer(a,
                    a.daddr, a.dport);
                if (c) {
                    if (c.socket.readyState === c.socket.CONNECTING) throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
                    throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
                }
            }
            f = SOCKFS.websocket_sock_ops.createPeer(a, f, d);
            a.daddr = f.addr;
            a.dport = f.port;
            throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },
        listen: function(a) {
            if (!ENVIRONMENT_IS_NODE) throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
            if (a.server) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            var f = require("ws").Server;
            a.server = new f({
                host: a.saddr,
                port: a.sport
            });
            a.server.on("connection", function(d) {
                if (1 === a.type) {
                    var c = SOCKFS.createSocket(a.family, a.type, a.protocol),
                        d = SOCKFS.websocket_sock_ops.createPeer(c, d);
                    c.daddr = d.addr;
                    c.dport = d.port;
                    a.pending.push(c)
                } else SOCKFS.websocket_sock_ops.createPeer(a, d)
            });
            a.server.on("closed", function() {
                a.server = null
            });
            a.server.on("error", function() {})
        },
        accept: function(a) {
            if (!a.server) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            var f = a.pending.shift();
            f.stream.flags = a.stream.flags;
            return f
        },
        getname: function(a, f) {
            var d, c;
            if (f) {
                if (void 0 ===
                    a.daddr || void 0 === a.dport) throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                d = a.daddr;
                c = a.dport
            } else d = a.saddr || 0, c = a.sport || 0;
            return {
                addr: d,
                port: c
            }
        },
        sendmsg: function(a, f, d, c, b, e) {
            if (2 === a.type) {
                if (void 0 === b || void 0 === e) b = a.daddr, e = a.dport;
                if (void 0 === b || void 0 === e) throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            } else b = a.daddr, e = a.dport;
            var g = SOCKFS.websocket_sock_ops.getPeer(a, b, e);
            if (1 === a.type) {
                if (!g || g.socket.readyState === g.socket.CLOSING || g.socket.readyState === g.socket.CLOSED) throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                if (g.socket.readyState === g.socket.CONNECTING) throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            f = f instanceof Array || f instanceof ArrayBuffer ? f.slice(d, d + c) : f.buffer.slice(f.byteOffset + d, f.byteOffset + d + c);
            if (2 === a.type && (!g || g.socket.readyState !== g.socket.OPEN)) {
                if (!g || g.socket.readyState === g.socket.CLOSING || g.socket.readyState === g.socket.CLOSED) g = SOCKFS.websocket_sock_ops.createPeer(a, b, e);
                g.dgram_send_queue.push(f);
                return c
            }
            try {
                return g.socket.send(f), c
            } catch (h) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
        },
        recvmsg: function(a, f) {
            if (1 === a.type && a.server) throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            var d = a.recv_queue.shift();
            if (!d) {
                if (1 === a.type) {
                    if (d = SOCKFS.websocket_sock_ops.getPeer(a, a.daddr, a.dport)) {
                        if (d.socket.readyState === d.socket.CLOSING || d.socket.readyState === d.socket.CLOSED) return null;
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    }
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                }
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            var c = d.data.byteLength || d.data.length,
                b = d.data.byteOffset || 0,
                e = d.data.buffer ||
                d.data,
                g = Math.min(f, c),
                h = {
                    buffer: new Uint8Array(e, b, g),
                    addr: d.addr,
                    port: d.port
                };
            1 === a.type && g < c && (d.data = new Uint8Array(e, b + g, c - g), a.recv_queue.unshift(d));
            return h
        }
    }
};

function _send(a, f, d) {
    return !SOCKFS.getSocket(a) ? (___setErrNo(ERRNO_CODES.EBADF), -1) : _write(a, f, d)
}

function _pwrite(a, f, d, c) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.write(a, HEAP8, f, d, c)
    } catch (b) {
        return FS.handleFSError(b), -1
    }
}

function _write(a, f, d) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.write(a, HEAP8, f, d)
    } catch (c) {
        return FS.handleFSError(c), -1
    }
}

function _fileno(a) {
    return FS.getStreamFromPtr(a).fd
}

function _fwrite(a, f, d, c) {
    d *= f;
    if (0 == d) return 0;
    var b = _fileno(c),
        a = _write(b, a, d);
    if (-1 == a) {
        if (f = FS.getStreamFromPtr(c)) f.error = !0;
        return 0
    }
    return Math.floor(a / f)
}

function _fprintf(a, f, d) {
    d = __formatString(f, d);
    f = Runtime.stackSave();
    a = _fwrite(allocate(d, "i8", ALLOC_STACK), 1, d.length, a);
    Runtime.stackRestore(f);
    return a
}

function _printf(a, f) {
    return _fprintf(HEAP32[_stdout >> 2], a, f)
}

function _munmap(a, f) {
    _mmap.mappings || (_mmap.mappings = {});
    var d = _mmap.mappings[a];
    if (!d) return 0;
    f == d.num && (_mmap.mappings[a] = null, d.allocated && _free(d.malloc));
    return 0
}

function _close(a) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.close(a), 0
    } catch (f) {
        return FS.handleFSError(f), -1
    }
}

function _unlink(a) {
    a = Pointer_stringify(a);
    try {
        return FS.unlink(a), 0
    } catch (f) {
        return FS.handleFSError(f), -1
    }
}

function __exit(a) {
    Module.exit(a)
}

function _exit(a) {
    __exit(a)
}
var _floor = Math_floor;

function _open(a, f, d) {
    d = HEAP32[d >> 2];
    a = Pointer_stringify(a);
    try {
        return FS.open(a, f, d).fd
    } catch (c) {
        return FS.handleFSError(c), -1
    }
}

function _mmap(a, f, d, c, b, e) {
    var g, h = !1;
    _mmap.mappings || (_mmap.mappings = {});
    if (-1 == b) {
        g = _malloc(f);
        if (!g) return -1;
        _memset(g, 0, f);
        h = !0
    } else {
        b = FS.getStream(b);
        if (!b) return -1;
        try {
            var j = FS.mmap(b, HEAPU8, a, f, e, d, c);
            g = j.ptr;
            h = j.allocated
        } catch (i) {
            return FS.handleFSError(i), -1
        }
    }
    _mmap.mappings[g] = {
        malloc: g,
        num: f,
        allocated: h
    };
    return g
}
var _ceil = Math_ceil;

function _fputs(a, f) {
    var d = _fileno(f);
    return _write(d, a, _strlen(a))
}

function _recv(a, f, d) {
    return !SOCKFS.getSocket(a) ? (___setErrNo(ERRNO_CODES.EBADF), -1) : _read(a, f, d)
}

function _pread(a, f, d, c) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.read(a, HEAP8, f, d, c)
    } catch (b) {
        return FS.handleFSError(b), -1
    }
}

function _read(a, f, d) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.read(a, HEAP8, f, d)
    } catch (c) {
        return FS.handleFSError(c), -1
    }
}

function _fread(a, f, d, c) {
    d *= f;
    if (0 == d) return 0;
    var b = 0,
        c = FS.getStreamFromPtr(c);
    if (!c) return ___setErrNo(ERRNO_CODES.EBADF), 0;
    for (; c.ungotten.length && 0 < d;) HEAP8[a++ | 0] = c.ungotten.pop(), d--, b++;
    a = _read(c.fd, a, d);
    if (-1 == a) return c && (c.error = !0), 0;
    b += a;
    b < d && (c.eof = !0);
    return Math.floor(b / f)
}

function _fgetc(a) {
    var f = FS.getStreamFromPtr(a);
    if (!f || f.eof || f.error) return -1;
    a = _fread(_fgetc.ret, 1, 1, a);
    return 0 == a ? -1 : -1 == a ? (f.error = !0, -1) : HEAPU8[_fgetc.ret | 0]
}

function _fgets(a, f, d) {
    var c = FS.getStreamFromPtr(d);
    if (!c || c.error || c.eof) return 0;
    for (var b, e = 0; e < f - 1 && 10 != b; e++) {
        b = _fgetc(d);
        if (-1 == b) {
            if (c.error || c.eof && 0 == e) return 0;
            if (c.eof) break
        }
        HEAP8[a + e | 0] = b
    }
    HEAP8[a + e | 0] = 0;
    return a
}

function _qsort(a, f, d, c) {
    if (!(0 == f || 0 == d)) {
        for (var b = [], e = 0; e < f; e++) b.push(e);
        b.sort(function(b, e) {
            return getFUNCTION_TABLE(c)(a + b * d, a + e * d)
        });
        var g = _malloc(f * d);
        _memcpy(g, a, f * d);
        for (e = 0; e < f; e++) b[e] != e && _memcpy(a + e * d, g + b[e] * d, d);
        _free(g)
    }
}

function _isspace(a) {
    return 32 == a || 9 <= a && 13 >= a
}

function __parseInt(a, f, d, c, b, e, g) {
    for (; _isspace(HEAP8[a]);) a++;
    var h = 1;
    45 == HEAP8[a] ? (h = -1, a++) : 43 == HEAP8[a] && a++;
    if (d) {
        if (16 == d && 48 == HEAP8[a] && (120 == HEAP8[a + 1 | 0] || 88 == HEAP8[a + 1 | 0])) a += 2
    } else 48 == HEAP8[a] && (120 == HEAP8[a + 1 | 0] || 88 == HEAP8[a + 1 | 0] ? (d = 16, a += 2) : (d = 8, a++));
    d || (d = 10);
    for (var j, i = 0; 0 != (j = HEAP8[a]) && !(j = parseInt(String.fromCharCode(j), d), isNaN(j));) i = i * d + j, a++;
    i *= h;
    f && (HEAP32[f >> 2] = a);
    g && (Math.abs(i) > b ? (i = b, ___setErrNo(ERRNO_CODES.ERANGE)) : i = unSign(i, e));
    if (i > b || i < c) i = i > b ? b : c, ___setErrNo(ERRNO_CODES.ERANGE);
    return 64 == e ? (tempRet0 = (tempDouble = i, 1 <= Math_abs(tempDouble) ? 0 < tempDouble ? Math_min(Math_floor(tempDouble / 4294967296), 4294967295) >>> 0 : ~~Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0), i >>> 0) : i
}

function _strtol(a, f, d) {
    return __parseInt(a, f, d, -2147483648, 2147483647, 32)
}
var _sqrt = Math_sqrt,
    _log = Math_log,
    _exp = Math_exp,
    _llvm_pow_f64 = Math_pow,
    _sin = Math_sin,
    _cos = Math_cos,
    _tan = Math_tan;

function _sinh(a) {
    a = Math.pow(Math.E, a);
    return (a - 1 / a) / 2
}

function _cosh(a) {
    a = Math.pow(Math.E, a);
    return (a + 1 / a) / 2
}

function _tanh(a) {
    return _sinh(a) / _cosh(a)
}
var _asin = Math_asin,
    _acos = Math_acos,
    _atan = Math_atan,
    _llvm_memset_p0i8_i64 = _memset,
    _atan2 = Math_atan2;

function _llvm_trap() {
    abort("trap!")
}
var ___tm_current = allocate(44, "i8", ALLOC_STATIC),
    ___tm_timezone = allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC),
    _tzname = allocate(8, "i32*", ALLOC_STATIC),
    _daylight = allocate(1, "i32*", ALLOC_STATIC),
    _timezone = allocate(1, "i32*", ALLOC_STATIC);

function _tzset() {
    if (!_tzset.called) {
        _tzset.called = !0;
        HEAP32[_timezone >> 2] = 60 * -(new Date).getTimezoneOffset();
        var a = new Date(2E3, 6, 1);
        HEAP32[_daylight >> 2] = Number((new Date(2E3, 0, 1)).getTimezoneOffset() != a.getTimezoneOffset());
        var a = allocate(intArrayFromString("GMT"), "i8", ALLOC_NORMAL),
            f = allocate(intArrayFromString("GMT"), "i8", ALLOC_NORMAL);
        HEAP32[_tzname >> 2] = a;
        HEAP32[_tzname + 4 >> 2] = f
    }
}

function _localtime_r(a, f) {
    _tzset();
    var d = new Date(1E3 * HEAP32[a >> 2]);
    HEAP32[f >> 2] = d.getSeconds();
    HEAP32[f + 4 >> 2] = d.getMinutes();
    HEAP32[f + 8 >> 2] = d.getHours();
    HEAP32[f + 12 >> 2] = d.getDate();
    HEAP32[f + 16 >> 2] = d.getMonth();
    HEAP32[f + 20 >> 2] = d.getFullYear() - 1900;
    HEAP32[f + 24 >> 2] = d.getDay();
    var c = new Date(d.getFullYear(), 0, 1),
        b = Math.floor((d.getTime() - c.getTime()) / 864E5);
    HEAP32[f + 28 >> 2] = b;
    HEAP32[f + 36 >> 2] = 60 * c.getTimezoneOffset();
    d = Number(c.getTimezoneOffset() != d.getTimezoneOffset());
    HEAP32[f + 32 >> 2] = d;
    HEAP32[f + 40 >>
        2] = ___tm_timezone;
    return f
}

function _localtime(a) {
    return _localtime_r(a, ___tm_current)
}
var _setjmp = void 0;

function _strspn(a, f) {
    for (var d = a, c, b, e;;) {
        b = HEAP8[d];
        if (!b) return d - a;
        for (c = f;;) {
            e = HEAP8[c];
            if (!e || e == b) break;
            c++
        }
        if (!e) return d - a;
        d++
    }
}

function _log10(a) {
    return Math.log(a) / Math.LN10
}

function _lseek(a, f, d) {
    a = FS.getStream(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    try {
        return FS.llseek(a, f, d)
    } catch (c) {
        return FS.handleFSError(c), -1
    }
}

function _fsetpos(a, f) {
    a = FS.getStreamFromPtr(a);
    if (!a) return ___setErrNo(ERRNO_CODES.EBADF), -1;
    if (FS.isChrdev(a.node.mode)) return ___setErrNo(ERRNO_CODES.EPIPE), -1;
    a.position = HEAP32[f >> 2];
    var d = HEAP32[f + 4 >> 2];
    a.eof = Boolean(d & 1);
    a.error = Boolean(d & 2);
    return 0
}

function _clearerr(a) {
    if (a = FS.getStreamFromPtr(a)) a.eof = !1, a.error = !1
}

function _ferror(a) {
    a = FS.getStreamFromPtr(a);
    return Number(a && a.error)
}

function _feof(a) {
    a = FS.getStreamFromPtr(a);
    return Number(a && a.eof)
}

function _fseek(a, f, d) {
    var c = _fileno(a);
    if (-1 == _lseek(c, f, d)) return -1;
    a = FS.getStreamFromPtr(a);
    a.eof = !1;
    return 0
}

function _ftell(a) {
    a = FS.getStreamFromPtr(a);
    return !a ? (___setErrNo(ERRNO_CODES.EBADF), -1) : FS.isChrdev(a.node.mode) ? (___setErrNo(ERRNO_CODES.ESPIPE), -1) : a.position
}

function _gettimeofday(a) {
    var f = Date.now();
    HEAP32[a >> 2] = Math.floor(f / 1E3);
    HEAP32[a + 4 >> 2] = Math.floor(1E3 * (f - 1E3 * Math.floor(f / 1E3)));
    return 0
}

function _usleep(a) {
    a /= 1E3;
    if (ENVIRONMENT_IS_WEB && window.performance && window.performance.now)
        for (var f = window.performance.now(); window.performance.now() - f < a;);
    else
        for (f = Date.now(); Date.now() - f < a;);
    return 0
}

function _sleep(a) {
    return _usleep(1E6 * a)
}
var _fabs = Math_abs;

function _abort() {
    Module.abort()
}

function _sbrk(a) {
    var f = _sbrk;
    f.called || (DYNAMICTOP = alignMemoryPage(DYNAMICTOP), f.called = !0, assert(Runtime.dynamicAlloc), f.alloc = Runtime.dynamicAlloc, Runtime.dynamicAlloc = function() {
        abort("cannot dynamically allocate, sbrk now has control")
    });
    var d = DYNAMICTOP;
    0 != a && f.alloc(a);
    return d
}

function _sysconf(a) {
    switch (a) {
        case 30:
            return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
            return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
            return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
            return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
            return 1024;
        case 31:
        case 42:
        case 72:
            return 32;
        case 87:
        case 26:
        case 33:
            return 2147483647;
        case 34:
        case 1:
            return 47839;
        case 38:
        case 36:
            return 99;
        case 43:
        case 37:
            return 2048;
        case 0:
            return 2097152;
        case 3:
            return 65536;
        case 28:
            return 32768;
        case 44:
            return 32767;
        case 75:
            return 16384;
        case 39:
            return 1E3;
        case 89:
            return 700;
        case 71:
            return 256;
        case 40:
            return 255;
        case 2:
            return 100;
        case 180:
            return 64;
        case 25:
            return 20;
        case 5:
            return 16;
        case 6:
            return 6;
        case 73:
            return 4;
        case 84:
            return 1
    }
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1
}

function _time(a) {
    var f = Math.floor(Date.now() / 1E3);
    a && (HEAP32[a >> 2] = f);
    return f
}

function _copysign(a, f) {
    return __reallyNegative(a) === __reallyNegative(f) ? a : -a
}
var _copysignl = _copysign,
    _fmodl = _fmod,
    Browser = {
        mainLoop: {
            scheduler: null,
            method: "",
            shouldPause: !1,
            paused: !1,
            queue: [],
            pause: function() {
                Browser.mainLoop.shouldPause = !0
            },
            resume: function() {
                Browser.mainLoop.paused && (Browser.mainLoop.paused = !1, Browser.mainLoop.scheduler());
                Browser.mainLoop.shouldPause = !1
            },
            updateStatus: function() {
                if (Module.setStatus) {
                    var a = Module.statusMessage || "Please wait...",
                        f = Browser.mainLoop.remainingBlockers,
                        d = Browser.mainLoop.expectedBlockers;
                    f ? f < d ? Module.setStatus(a + " (" + (d - f) + "/" +
                        d + ")") : Module.setStatus(a) : Module.setStatus("")
                }
            }
        },
        isFullScreen: !1,
        pointerLock: !1,
        moduleContextCreatedCallbacks: [],
        workers: [],
        init: function() {
            function a() {
                Browser.pointerLock = document.pointerLockElement === d || document.mozPointerLockElement === d || document.webkitPointerLockElement === d
            }
            Module.preloadPlugins || (Module.preloadPlugins = []);
            if (!Browser.initted && !ENVIRONMENT_IS_WORKER) {
                Browser.initted = !0;
                try {
                    new Blob, Browser.hasBlobConstructor = !0
                } catch (f) {
                    Browser.hasBlobConstructor = !1, console.log("warning: no blob constructor, cannot create blobs with mimetypes")
                }
                Browser.BlobBuilder =
                    "undefined" != typeof MozBlobBuilder ? MozBlobBuilder : "undefined" != typeof WebKitBlobBuilder ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
                Browser.URLObject = "undefined" != typeof window ? window.URL ? window.URL : window.webkitURL : void 0;
                !Module.noImageDecoding && "undefined" === typeof Browser.URLObject && (console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."), Module.noImageDecoding = !0);
                Module.preloadPlugins.push({
                    canHandle: function(a) {
                        return !Module.noImageDecoding &&
                            /\.(jpg|jpeg|png|bmp)$/i.test(a)
                    },
                    handle: function(a, b, d, f) {
                        var h = null;
                        if (Browser.hasBlobConstructor) try {
                            h = new Blob([a], {
                                type: Browser.getMimetype(b)
                            }), h.size !== a.length && (h = new Blob([(new Uint8Array(a)).buffer], {
                                type: Browser.getMimetype(b)
                            }))
                        } catch (j) {
                            Runtime.warnOnce("Blob constructor present but fails: " + j + "; falling back to blob builder")
                        }
                        h || (h = new Browser.BlobBuilder, h.append((new Uint8Array(a)).buffer), h = h.getBlob());
                        var i = Browser.URLObject.createObjectURL(h),
                            l = new Image;
                        l.onload = function() {
                            assert(l.complete,
                                "Image " + b + " could not be decoded");
                            var f = document.createElement("canvas");
                            f.width = l.width;
                            f.height = l.height;
                            f.getContext("2d").drawImage(l, 0, 0);
                            Module.preloadedImages[b] = f;
                            Browser.URLObject.revokeObjectURL(i);
                            d && d(a)
                        };
                        l.onerror = function() {
                            console.log("Image " + i + " could not be decoded");
                            f && f()
                        };
                        l.src = i
                    }
                });
                Module.preloadPlugins.push({
                    canHandle: function(a) {
                        return !Module.noAudioDecoding && a.substr(-4) in {
                            ".ogg": 1,
                            ".wav": 1,
                            ".mp3": 1
                        }
                    },
                    handle: function(a, b, d, f) {
                        function h(f) {
                            i || (i = !0, Module.preloadedAudios[b] =
                                f, d && d(a))
                        }

                        function j() {
                            i || (i = !0, Module.preloadedAudios[b] = new Audio, f && f())
                        }
                        var i = !1;
                        if (Browser.hasBlobConstructor) {
                            try {
                                var l = new Blob([a], {
                                    type: Browser.getMimetype(b)
                                })
                            } catch (k) {
                                return j()
                            }
                            var l = Browser.URLObject.createObjectURL(l),
                                m = new Audio;
                            m.addEventListener("canplaythrough", function() {
                                h(m)
                            }, !1);
                            m.onerror = function() {
                                if (!i) {
                                    console.log("warning: browser could not fully decode audio " + b + ", trying slower base64 approach");
                                    for (var d = "data:audio/x-" + b.substr(-3) + ";base64,", e = "", f = 0, g = 0, j = 0; j < a.length; j++) {
                                        f =
                                            f << 8 | a[j];
                                        for (g += 8; 6 <= g;) var k = f >> g - 6 & 63,
                                            g = g - 6,
                                            e = e + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" [k]
                                    }
                                    2 == g ? (e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" [(f & 3) << 4], e += "==") : 4 == g && (e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" [(f & 15) << 2], e += "=");
                                    m.src = d + e;
                                    h(m)
                                }
                            };
                            m.src = l;
                            Browser.safeSetTimeout(function() {
                                h(m)
                            }, 1E4)
                        } else return j()
                    }
                });
                var d = Module.canvas;
                d.requestPointerLock = d.requestPointerLock || d.mozRequestPointerLock || d.webkitRequestPointerLock;
                d.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock || function() {};
                d.exitPointerLock = d.exitPointerLock.bind(document);
                document.addEventListener("pointerlockchange", a, !1);
                document.addEventListener("mozpointerlockchange", a, !1);
                document.addEventListener("webkitpointerlockchange", a, !1);
                Module.elementPointerLock && d.addEventListener("click", function(a) {
                    !Browser.pointerLock && d.requestPointerLock && (d.requestPointerLock(), a.preventDefault())
                }, !1)
            }
        },
        createContext: function(a,
            f, d, c) {
            function b(a) {
                g = a.statusMessage || g
            }
            var e, g = "?";
            try {
                if (f) {
                    var h = {
                        antialias: !1,
                        alpha: !1
                    };
                    if (c)
                        for (var j in c) h[j] = c[j];
                    a.addEventListener("webglcontextcreationerror", b, !1);
                    try {
                        ["experimental-webgl", "webgl"].some(function(b) {
                            return e = a.getContext(b, h)
                        })
                    } finally {
                        a.removeEventListener("webglcontextcreationerror", b, !1)
                    }
                } else e = a.getContext("2d");
                if (!e) throw ":(";
            } catch (i) {
                return Module.print("Could not create canvas: " + [g, i]), null
            }
            f && (a.style.backgroundColor = "black", a.addEventListener("webglcontextlost",
                function() {
                    alert("WebGL context lost. You will need to reload the page.")
                }, !1));
            d && (GLctx = Module.ctx = e, Module.useWebGL = f, Browser.moduleContextCreatedCallbacks.forEach(function(a) {
                a()
            }), Browser.init());
            return e
        },
        destroyContext: function() {},
        fullScreenHandlersInstalled: !1,
        lockPointer: void 0,
        resizeCanvas: void 0,
        requestFullScreen: function(a, f) {
            function d() {
                Browser.isFullScreen = !1;
                (document.webkitFullScreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.mozFullscreenElement ||
                    document.fullScreenElement || document.fullscreenElement) === c ? (c.cancelFullScreen = document.cancelFullScreen || document.mozCancelFullScreen || document.webkitCancelFullScreen, c.cancelFullScreen = c.cancelFullScreen.bind(document), Browser.lockPointer && c.requestPointerLock(), Browser.isFullScreen = !0, Browser.resizeCanvas && Browser.setFullScreenCanvasSize()) : Browser.resizeCanvas && Browser.setWindowedCanvasSize();
                if (Module.onFullScreen) Module.onFullScreen(Browser.isFullScreen)
            }
            Browser.lockPointer = a;
            Browser.resizeCanvas =
                f;
            "undefined" === typeof Browser.lockPointer && (Browser.lockPointer = !0);
            "undefined" === typeof Browser.resizeCanvas && (Browser.resizeCanvas = !1);
            var c = Module.canvas;
            Browser.fullScreenHandlersInstalled || (Browser.fullScreenHandlersInstalled = !0, document.addEventListener("fullscreenchange", d, !1), document.addEventListener("mozfullscreenchange", d, !1), document.addEventListener("webkitfullscreenchange", d, !1));
            c.requestFullScreen = c.requestFullScreen || c.mozRequestFullScreen || (c.webkitRequestFullScreen ? function() {
                    c.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)
                } :
                null);
            c.requestFullScreen()
        },
        requestAnimationFrame: function(a) {
            "undefined" === typeof window ? setTimeout(a, 1E3 / 60) : (window.requestAnimationFrame || (window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || window.setTimeout), window.requestAnimationFrame(a))
        },
        safeCallback: function(a) {
            return function() {
                if (!ABORT) return a.apply(null, arguments)
            }
        },
        safeRequestAnimationFrame: function(a) {
            return Browser.requestAnimationFrame(function() {
                ABORT ||
                    a()
            })
        },
        safeSetTimeout: function(a, f) {
            return setTimeout(function() {
                ABORT || a()
            }, f)
        },
        safeSetInterval: function(a, f) {
            return setInterval(function() {
                ABORT || a()
            }, f)
        },
        getMimetype: function(a) {
            return {
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                png: "image/png",
                bmp: "image/bmp",
                ogg: "audio/ogg",
                wav: "audio/wav",
                mp3: "audio/mpeg"
            }[a.substr(a.lastIndexOf(".") + 1)]
        },
        getUserMedia: function(a) {
            window.getUserMedia || (window.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia);
            window.getUserMedia(a)
        },
        getMovementX: function(a) {
            return a.movementX ||
                a.mozMovementX || a.webkitMovementX || 0
        },
        getMovementY: function(a) {
            return a.movementY || a.mozMovementY || a.webkitMovementY || 0
        },
        getMouseWheelDelta: function(a) {
            return Math.max(-1, Math.min(1, "DOMMouseScroll" === a.type ? a.detail : -a.wheelDelta))
        },
        mouseX: 0,
        mouseY: 0,
        mouseMovementX: 0,
        mouseMovementY: 0,
        calculateMouseEvent: function(a) {
            if (Browser.pointerLock) "mousemove" != a.type && "mozMovementX" in a ? Browser.mouseMovementX = Browser.mouseMovementY = 0 : (Browser.mouseMovementX = Browser.getMovementX(a), Browser.mouseMovementY = Browser.getMovementY(a)),
                "undefined" != typeof SDL ? (Browser.mouseX = SDL.mouseX + Browser.mouseMovementX, Browser.mouseY = SDL.mouseY + Browser.mouseMovementY) : (Browser.mouseX += Browser.mouseMovementX, Browser.mouseY += Browser.mouseMovementY);
            else {
                var f = Module.canvas.getBoundingClientRect(),
                    d, c;
                d = "undefined" !== typeof window.scrollX ? window.scrollX : window.pageXOffset;
                c = "undefined" !== typeof window.scrollY ? window.scrollY : window.pageYOffset;
                if ("touchstart" == a.type || "touchend" == a.type || "touchmove" == a.type)
                    if (a = a.touches.item(0)) d = a.pageX - (d +
                        f.left), c = a.pageY - (c + f.top);
                    else return;
                else d = a.pageX - (d + f.left), c = a.pageY - (c + f.top);
                a = Module.canvas.height;
                d *= Module.canvas.width / f.width;
                c *= a / f.height;
                Browser.mouseMovementX = d - Browser.mouseX;
                Browser.mouseMovementY = c - Browser.mouseY;
                Browser.mouseX = d;
                Browser.mouseY = c
            }
        },
        xhrLoad: function(a, f, d) {
            var c = new XMLHttpRequest;
            c.open("GET", a, !0);
            c.responseType = "arraybuffer";
            c.onload = function() {
                200 == c.status || 0 == c.status && c.response ? f(c.response) : d()
            };
            c.onerror = d;
            c.send(null)
        },
        asyncLoad: function(a, f, d, c) {
            Browser.xhrLoad(a,
                function(b) {
                    assert(b, 'Loading data file "' + a + '" failed (no arrayBuffer).');
                    f(new Uint8Array(b));
                    c || removeRunDependency("al " + a)
                },
                function() {
                    if (d) d();
                    else throw 'Loading data file "' + a + '" failed.';
                });
            c || addRunDependency("al " + a)
        },
        resizeListeners: [],
        updateResizeListeners: function() {
            var a = Module.canvas;
            Browser.resizeListeners.forEach(function(f) {
                f(a.width, a.height)
            })
        },
        setCanvasSize: function(a, f, d) {
            var c = Module.canvas;
            c.width = a;
            c.height = f;
            d || Browser.updateResizeListeners()
        },
        windowedWidth: 0,
        windowedHeight: 0,
        setFullScreenCanvasSize: function() {
            var a = Module.canvas;
            this.windowedWidth = a.width;
            this.windowedHeight = a.height;
            a.width = screen.width;
            a.height = screen.height;
            "undefined" != typeof SDL && (a = HEAPU32[SDL.screen + 0 * Runtime.QUANTUM_SIZE >> 2], HEAP32[SDL.screen + 0 * Runtime.QUANTUM_SIZE >> 2] = a | 8388608);
            Browser.updateResizeListeners()
        },
        setWindowedCanvasSize: function() {
            var a = Module.canvas;
            a.width = this.windowedWidth;
            a.height = this.windowedHeight;
            "undefined" != typeof SDL && (a = HEAPU32[SDL.screen + 0 * Runtime.QUANTUM_SIZE >> 2],
                HEAP32[SDL.screen + 0 * Runtime.QUANTUM_SIZE >> 2] = a & -8388609);
            Browser.updateResizeListeners()
        }
    },
    ___errno_state = Runtime.staticAlloc(4);
HEAP32[___errno_state >> 2] = 0;
FS.staticInit();
__ATINIT__.unshift({
    func: function() {
        !Module.noFSInit && !FS.init.initialized && FS.init()
    }
});
__ATMAIN__.push({
    func: function() {
        FS.ignorePermissions = !1
    }
});
__ATEXIT__.push({
    func: function() {
        FS.quit()
    }
});
Module.FS_createFolder = FS.createFolder;
Module.FS_createPath = FS.createPath;
Module.FS_createDataFile = FS.createDataFile;
Module.FS_createPreloadedFile = FS.createPreloadedFile;
Module.FS_createLazyFile = FS.createLazyFile;
Module.FS_createLink = FS.createLink;
Module.FS_createDevice = FS.createDevice;
__ATINIT__.unshift({
    func: function() {
        TTY.init()
    }
});
__ATEXIT__.push({
    func: function() {
        TTY.shutdown()
    }
});
TTY.utf8 = new Runtime.UTF8Processor;
if (ENVIRONMENT_IS_NODE) {
    var fs = require("fs");
    NODEFS.staticInit()
}
__ATINIT__.push({
    func: function() {
        SOCKFS.root = FS.mount(SOCKFS, {}, null)
    }
});
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module.requestFullScreen = function(a, f) {
    Browser.requestFullScreen(a, f)
};
Module.requestAnimationFrame = function(a) {
    Browser.requestAnimationFrame(a)
};
Module.setCanvasSize = function(a, f, d) {
    Browser.setCanvasSize(a, f, d)
};
Module.pauseMainLoop = function() {
    Browser.mainLoop.pause()
};
Module.resumeMainLoop = function() {
    Browser.mainLoop.resume()
};
Module.getUserMedia = function() {
    Browser.getUserMedia()
};

function _jti0(a, f) {
    var d, c, b, e;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    if (0 == (HEAP32[f + 12 >> 2] & 4 | 0)) {
        c = a + 205336;
        b = HEAP32[c >> 2];
        HEAP32[c >> 2] = 0;
        e = _jtccvt(a, 4, f, d);
        HEAP32[c >> 2] = b;
        if (0 == e << 24 >> 24) return e = HEAP32[a + 4408 >> 2], b = HEAP32[e + (HEAP32[e >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), STACKTOP = d, 0;
        b = HEAP32[d >> 2];
        if (0 == (b | 0)) return STACKTOP = d, 0;
        c = b
    } else c = f;
    0 == (HEAP32[c + 24 >> 2] | 0) ? c = HEAP32[c + HEAP32[c >> 2] >> 2] : (c = HEAP32[a + 4408 >> 2], f = HEAP32[c + (HEAP32[c >> 2] + 56) >> 2],
        _jtjsigstr(a, 14, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), c = 0);
    STACKTOP = d;
    return c
}


function _jtpunc(a, f, d, c) {
    return HEAP32[c + (d - 1 << 2) >> 2]
}

function _level(a) {
    var f, d, c, b, e, g, h;
    f = HEAP32[a + 20 >> 2];
    if (0 == (f | 0)) return 0;
    d = HEAP32[a + 12 >> 2];
    if (0 == (d & 32800 | 0)) return 0;
    c = a + HEAP32[a >> 2];
    b = 0 == (d & 32 | 0) ? 0 : 0 != (HEAP32[a + 4 >> 2] & 14 | 0) | 0;
    d = a & -b;
    if (0 < (f | 0))
        if (0 == (d | 0))
            for (a = b = 0;;)
                if (e = _level(HEAP32[c + (a << 2) >> 2]), g = (b | 0) < (e | 0) ? e : b, e = a + 1, (e | 0) < (f | 0)) b = g, a = e;
                else {
                    h = g;
                    break
                } else
        for (b = a = 0;;)
            if (g = _level(HEAP32[c + (b << 2) >> 2] + d), e = (a | 0) < (g | 0) ? g : a, g = b + 1, (g | 0) < (f | 0)) a = e, b = g;
            else {
                h = e;
                break
            } else h = 0;
    return h + 1
}

function _jtmatchsub(a, f, d, c, b, e, g, h, j, i) {
    var l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb,
        $b, na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf,
        Sf, Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei,
        Nk, jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn,
        Pm, Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp,
        jq, un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs,
        ss, cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu,
        Qr, iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz,
        HC, ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG, PC, HB, UD, jC, rD, ZA, ZF, kC, MG, IL, lC, NG, sD, $F, dI, jF, OG, eI, tD, uD, VD, CE,
        WD, mC, IB, kF, JB, xH, DE, vD, XD, zy, KB, BA, lF, mF, nC, $A, wJ, aG, JI, EE, nF, aB, yH, wD, bG, cG, YD, FE, oC, pC, dG, ZD, zH, PG, fI, QG, eG, gI, nz, xD, xJ, KI, LI, AH, fG, oF, BH, pF, yJ, RG, CA, GE, QC, zJ, qC, $D, oy, MI, rC, bB, sB, gG, NI, qF, sC, LB, rF, CH, yD, hG, sF, cB, py, tB, Ow, SG, hI, TG, OI, MB, aE, tF, UG, NB, PI, QI, zD, bE, Uy, uF, tC, cK, cE, dE, RC, iI, DA, EA, dB, AD, uC, AJ, dK, iG, SC, HE, jG, vF, BD, fx, DH, IE, kG, TC, VG, JE, lG, WG, JL, CD, Ay, XG, wF, eE, mG, xF, KE, eA, vC, yF, LE, UC, RI, eB, OK, nG, DD, wC, FA, OB, PB, QB, fB, zF, oG, fE, YG, RB, GA, ME, ED, jI, ZG, NE, gE, xC, SB, PK, EH, OE, PE, pG, AF, BF, yC, FH, $G,
        hE, aH, QE, RE, bH, SI, eK, SE, CF, GH, FD, zC, Fz, HA, oz, fK, TB, qG, iE, HH, fA, UB, IH, cH, jE, DF, VB, VC, TE, kE, EF, gA, hA, uB, UE, WC, gB, BJ, IA, FF, XC, rG, GD, sG, vB, WB, lE, XB, dH, GF, gK, eH, JH, mE, VE, WE, TI, kI, lI, KH, By, gx, ux, HF, fH, mI, tG, YC, ZC, hK, nE, JA, LH, YB, hx, uG, oE, $C, IF, UI, AC, MH, XE, QK, wB, gH, hB, YE, JF, ZB, aD, KF, VI, iA, bD, iB, jB, KA, LF, hH, cD, iK, MF, nI, BC, NH, dD, RK, iH, CJ, oI, DJ, RM, WI, OH, PO, QO, SK, EJ, RO, FJ, TK, pI, KL, XI, jK, PH, QH, NF, kK, vG, RH, $B, CC, UK, VK, LL, jH, SO, ML, wG, xG, IN, JN, GJ, SH, kH, NL, YI, lK, ZI, SM, ZE, OL, TH, PL, qI, aC, KN, eD, QL, $I, mK, WK, XK, OF, pE,
        PQ, LN, RL, qE, lH, HJ, aJ, TM, yG, rI, bJ, cJ, nK, YK, zG, sI, AG, dJ, MN, SL, TL, IJ, tI, JJ, UL, UM, VL, eJ, BG, Hx, mH, uI, ZK, VM, WL, CG, UH, NN, $K, aL, WM, KJ, oK, VH, DG, LA, vI, fD, $E, XL, bL, PF, cL, wI, xI, nH, bC, aF, LJ, fJ, QF, pK, TO, XM, ON, MJ, dL, yI, UO, qK, QQ, NJ, RQ, sS, eL, fL, rK, YM, gL, gJ, YL, hL, tS, uS, sK, OJ, xB, RF, oH, hJ, EG, FG, zI, iJ, iL, DC, jL, tK, kL, lL, mL, SQ, PN, jJ, ZL, TQ, ZM, rE, pH, HD, bF, sE, tE, EC, yB, uE, vS, kJ, $M, nL, vE, wE, $L, PJ, aN, oL, uK, bN, QJ, SF, aM, QN, CU, bM, pL, RN, cM, NP, cN, dM, SN, qL, eM, OP, RJ, PP, qH, GG, cF, lJ, rL, wS, pz, UQ, SJ, TN, UN, fM, Gz, TJ, ID, sL, gM, QP, VO, VQ, hM,
        WQ, gD, tL, iM, RP, mJ, VN, SP, dN, uL, WN, WH, dF, JD, xS, nJ, vK, jM, oJ, eF, XQ, wK, XN, xu, TF, Ov, ps, TP, UP, yS, kM, eN, xK, fN, WO, VP, DU, aX, YN, p_, q_, zS, r_, vL, HG, YQ;
    l = 0;
    k = STACKTOP;
    STACKTOP = STACKTOP + 48 | 0;
    m = k + 8;
    n = k + 16;
    p = k + 24;
    q = k + 32;
    r = k + 40;
    s = HEAP32[e + 24 >> 2];
    t = s - f;
    u = e + 12;
    w = HEAP32[u >> 2];
    v = 0 == (c | 0) | 0 == (b | 0) ? 0 : x = Math_imul(b, c) | 0;
    y = HEAP32[g + 24 >> 2] - d;
    z = g + 12;
    A = HEAP32[z >> 2];
    D = _jtmaxtype(a, w, A);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return B = 0, STACKTOP = k, B;
    G = a + 1152;
    0 != HEAPF64[G >> 3] ? C = 0 : (F = D & 24, E = 0 != (F | 0), C = J = E & 1);
    L = (f | 0) > (d | 0);
    I = HEAP32[(L ? e : g) +
        20 >> 2];
    H = 0 != (v | 0);
    K = (I | 0) / ((H ? v : 1) | 0) & -1;
    N = (t | 0) == (y | 0);
    a: do
        if (N) {
            S = (s | 0) == (f | 0);
            if (!S) {
                T = g + 28 + (d << 2);
                V = e + 28 + (f << 2);
                Q = t << 2;
                P = T;
                M = V;
                R = Q;
                O = M;
                for (aa = P;;) {
                    Z = HEAP8[O];
                    $ = HEAP8[aa];
                    ba = Z << 24 >> 24 == $ << 24 >> 24;
                    if (!ba) {
                        l = 16;
                        break a
                    }
                    ka = R - 1;
                    ea = O + 1;
                    ha = aa + 1;
                    if (da = 0 == (ka | 0)) break;
                    else R = ka, O = ea, aa = ha
                }
            }
            ga = 0 == (K | 0);
            U = (w | 0) == (A | 0);
            ca = ga | U;
            do
                if (ca) X = 0;
                else {
                    Y = w & 805336541;
                    ja = 0 == (Y | 0);
                    if (!ja && (fa = A & 805336541, ia = 0 == (fa | 0), !ia)) {
                        X = 0;
                        break
                    }
                    ra = w & 133122;
                    if (sa = 0 == (ra | 0)) {
                        l = 16;
                        break a
                    }
                    ta = A & 133122;
                    wa = 0 == (ta | 0);
                    X = za = wa & 1
                }
            while (0);
            HEAP8[r] = X;
            Ba = 0 != X << 24 >> 24;
            ua = Ba | ga;
            ya = (e | 0) == (g | 0);
            if (xa = ua | ya) oa = Ba, pa = X;
            else {
                la = D & 1835008;
                qa = 0 == (la | 0);
                if (!qa) {
                    Aa = Da = e;
                    Ea = HEAP32[Aa >> 2];
                    Oa = Sa = g;
                    Ha = HEAP32[Oa >> 2];
                    Ga = HEAP32[u >> 2];
                    Ma = HEAP32[z >> 2];
                    Ia = (Ga | 0) == (Ma | 0);
                    do
                        if (Ia)
                            if (db = Ea + 40, W = Da + db, Xa = HEAP8[W], Ta = Ha + 40, fb = Sa + Ta, mb = HEAP8[fb], ma = Xa << 24 >> 24 == mb << 24 >> 24) {
                                Na = Ea + 8;
                                Ua = $a = Da + Na;
                                Pa = HEAP32[Ua >> 2];
                                bb = Ha + 8;
                                Ja = La = Sa + bb;
                                Qa = HEAP32[Ja >> 2];
                                Ya = 0 == (Pa | 0);
                                lb = 0 == (Qa | 0);
                                Ca = Ya & lb;
                                if (!Ca) {
                                    if (gb = Ya | lb) {
                                        ab = 0;
                                        break
                                    }
                                    Fa = _jtmatchsub(a, 0, 0, 1, 1, Pa, Qa, q, 0, 1);
                                    if (Za = 0 ==
                                        Fa << 24 >> 24) {
                                        ab = 0;
                                        break
                                    }
                                }
                                qb = Ea + 12;
                                ub = ib = Da + qb;
                                eb = HEAP32[ub >> 2];
                                rb = Ha + 12;
                                Ka = wb = Sa + rb;
                                Va = HEAP32[Ka >> 2];
                                nb = 0 == (eb | 0);
                                ob = 0 == (Va | 0);
                                cb = nb & ob;
                                if (!cb) {
                                    if (Wa = nb | ob) {
                                        ab = 0;
                                        break
                                    }
                                    yb = _jtmatchsub(a, 0, 0, 1, 1, eb, Va, q, 0, 1);
                                    if (Cb = 0 == yb << 24 >> 24) {
                                        ab = 0;
                                        break
                                    }
                                }
                                Pb = Ea + 16;
                                Zb = zb = Da + Pb;
                                ac = HEAP32[Zb >> 2];
                                Hb = Ha + 16;
                                Qb = Ib = Sa + Hb;
                                Rb = HEAP32[Qb >> 2];
                                Ob = 0 == (ac | 0);
                                Bb = 0 == (Rb | 0);
                                xb = Ob & Bb;
                                dc = xb & 1;
                                tb = Ob | Bb;
                                oc = Ob ? dc : 0;
                                tb ? ab = oc : (Mb = _jtmatchsub(a, 0, 0, 1, 1, ac, Rb, q, 0, 1), Tb = 0 != Mb << 24 >> 24, ab = Ra = Tb & 1)
                            } else ab = 0;
                    else ab = 0; while (0);
                    B = sb = (Nb = 0 != ab << 24 >>
                        24) ? i : j;
                    STACKTOP = k;
                    return B
                }
                Ab = (D | 0) == (w | 0);
                do
                    if (Ab)
                        if (Eb = 0 == C << 24 >> 24) Lb = e;
                        else {
                            if (vb = 0 == (e | 0)) return B = 0, STACKTOP = k, B;
                            wc = HEAP32[u >> 2];
                            Ec = e + 20;
                            yc = HEAP32[Ec >> 2];
                            if (Db = 0 == (yc | 0)) Lb = e;
                            else if (bc = wc & 24, pb = 0 == (bc | 0)) Lb = e;
                            else if (Fb = wc >>> 4, jb = Fb & 1, gc = yc << jb, ic = HEAP32[31130], vc = HEAP32[31131], hc = 0 < (gc | 0)) {
                                uc = e;
                                Ac = HEAP32[uc >> 2];
                                xc = e;
                                Tc = jc = cd = xc + Ac;
                                for (Fc = 0;;) {
                                    Bc = HEAP32[Tc >> 2];
                                    if (ec = (ic | 0) == (Bc | 0))
                                        if (Xb = Tc + 4, sc = HEAP32[Xb >> 2], nc = (vc | 0) == (sc | 0)) HEAP32[Xb >> 2] = 0, HEAP32[Tc >> 2] = 0;
                                    tc = Tc + 8;
                                    Ub = Fc + 1;
                                    if ($c = (Ub | 0) < (gc |
                                            0)) Tc = tc, Fc = Ub;
                                    else {
                                        Lb = e;
                                        break
                                    }
                                }
                            } else Lb = e
                        } else {
                    ad = D & 64;
                    (qc = 0 == (ad | 0)) ? (Uc = a + 205336, rc = HEAP32[Uc >> 2], HEAP32[Uc >> 2] = 0, kb = _jtccvt(a, D, e, m), HEAP32[Uc >> 2] = rc, (Jb = 0 == kb << 24 >> 24) ? ($b = a + 4408, kc = Vb = na = HEAP32[$b >> 2], va = HEAP32[kc >> 2], Wc = va + 12, fc = Yb = Vb + Wc, Kb = HEAP32[fc >> 2], Gb = Kb + 20, gd = HEAP32[Gb >> 2], Gc = mc = Kb, dd = HEAP32[Gc >> 2], kd = mc + dd, _jtjsigstr(a, 3, gd, kd), Fd = 0) : Fd = Vc = HEAP32[m >> 2]) : (Hd = a + 205764, bd = HEAP32[Hd >> 2], HEAP32[Hd >> 2] = 3, cc = a + 205336, Ic = HEAP32[cc >> 2], HEAP32[cc >> 2] = 0, fd = _jtccvt(a, 64, e, k), HEAP32[cc >> 2] = Ic, (xd =
                        0 == fd << 24 >> 24) ? (Xc = a + 4408, Sb = Wb = Wd = HEAP32[Xc >> 2], pc = HEAP32[Sb >> 2], zc = pc + 12, Yc = hd = Wb + zc, Ad = HEAP32[Yc >> 2], Gd = Ad + 20, hb = HEAP32[Gd >> 2], ed = ld = Ad, Jc = HEAP32[ed >> 2], Oc = ld + Jc, _jtjsigstr(a, 3, hb, Oc), Pc = 0) : Pc = ke = HEAP32[k >> 2], HEAP32[Hd >> 2] = bd, Fd = Pc);
                    if (Ed = 0 == (Fd | 0)) return B = 0, STACKTOP = k, B;
                    Lb = Fd
                } while (0);
                pd = (D | 0) == (A | 0);
                do
                    if (pd)
                        if (id = 0 == C << 24 >> 24) Cc = g;
                        else {
                            if (Qc = 0 == (g | 0)) return B = 0, STACKTOP = k, B;
                            Zc = HEAP32[z >> 2];
                            vd = g + 20;
                            $d = HEAP32[vd >> 2];
                            if (je = 0 == ($d | 0)) Cc = g;
                            else if (Kc = Zc & 24, Bd = 0 == (Kc | 0)) Cc = g;
                            else if (od = Zc >>> 4, Vd =
                                od & 1, Zd = $d << Vd, Jd = HEAP32[31130], Md = HEAP32[31131], Cd = 0 < (Zd | 0)) {
                                fe = g;
                                Xd = HEAP32[fe >> 2];
                                qd = g;
                                Dd = Mc = Od = qd + Xd;
                                for (Td = 0;;) {
                                    le = HEAP32[Dd >> 2];
                                    if (me = (Jd | 0) == (le | 0))
                                        if (wd = Dd + 4, Ie = HEAP32[wd >> 2], xe = (Md | 0) == (Ie | 0)) HEAP32[wd >> 2] = 0, HEAP32[Dd >> 2] = 0;
                                    ye = Dd + 8;
                                    Fe = Td + 1;
                                    if (nf = (Fe | 0) < (Zd | 0)) Dd = ye, Td = Fe;
                                    else {
                                        Cc = g;
                                        break
                                    }
                                }
                            } else Cc = g
                        } else {
                    Je = D & 64;
                    (Id = 0 == (Je | 0)) ? (Qe = a + 205336, sd = HEAP32[Qe >> 2], HEAP32[Qe >> 2] = 0, ge = _jtccvt(a, D, g, p), HEAP32[Qe >> 2] = sd, (ud = 0 == ge << 24 >> 24) ? (md = a + 4408, Dc = ae = de = HEAP32[md >> 2], Nc = HEAP32[Dc >> 2], yd = Nc + 12, Sc =
                        jd = ae + yd, lc = HEAP32[Sc >> 2], nd = lc + 20, Rc = HEAP32[nd >> 2], Kd = Hc = lc, Rd = HEAP32[Kd >> 2], Nd = Hc + Rd, _jtjsigstr(a, 3, Rc, Nd), be = 0) : be = zd = HEAP32[p >> 2]) : (we = a + 205764, Lc = HEAP32[we >> 2], HEAP32[we >> 2] = 3, rd = a + 205336, se = HEAP32[rd >> 2], HEAP32[rd >> 2] = 0, Ud = _jtccvt(a, 64, g, n), HEAP32[rd >> 2] = se, (Cf = 0 == Ud << 24 >> 24) ? (td = a + 4408, Pd = pe = Te = HEAP32[td >> 2], Me = HEAP32[Pd >> 2], Sd = Me + 12, qe = $e = pe + Sd, Ce = HEAP32[qe >> 2], cf = Ce + 20, sf = HEAP32[cf >> 2], kf = Ue = Ce, Re = HEAP32[kf >> 2], ce = Ue + Re, _jtjsigstr(a, 3, sf, ce), De = 0) : De = Ge = HEAP32[n >> 2], HEAP32[we >> 2] = Lc, be = De);
                    if (He = 0 == (be | 0)) return B = 0, STACKTOP = k, B;
                    Cc = be
                } while (0);
                Yd = (We = 0 != (f | 0)) ? K : 0;
                Se = Ne = Lb;
                Ee = HEAP32[Se >> 2];
                Ld = Ne + Ee;
                Qd = (he = 0 != (d | 0)) ? K : 0;
                Ke = re = Cc;
                Ae = HEAP32[Ke >> 2];
                te = re + Ae;
                ff = (ie = 0 != C << 24 >> 24) ? 0 : D;
                switch (ff | 0) {
                    case 16:
                        ue = Ld;
                        Oe = te;
                        ne = 1 == (b | 0);
                        ze = 0 < (c | 0);
                        do
                            if (ne) {
                                if (ze) {
                                    vf = 0 < (K | 0);
                                    lf = Oe;
                                    Xe = ue;
                                    for (Be = 0;;) {
                                        hf = h + Be;
                                        HEAP8[hf] = i;
                                        b: do
                                            if (vf) {
                                                for (af = 0;;) {
                                                    zf = Xe + (af << 4);
                                                    uf = HEAPF64[zf >> 3];
                                                    ve = Xe + (af << 4) + 8;
                                                    If = HEAPF64[ve >> 3];
                                                    Df = lf + (af << 4);
                                                    Ef = HEAPF64[Df >> 3];
                                                    Gf = lf + (af << 4) + 8;
                                                    of = HEAPF64[Gf >> 3];
                                                    Lf = _jtzeq(a, uf, If, Ef, of);
                                                    pf = 0 == Lf << 24 >> 24;
                                                    bf = af + 1;
                                                    if (pf) break;
                                                    if (Bf = (bf | 0) < (K | 0)) af = bf;
                                                    else break b
                                                }
                                                HEAP8[hf] = j
                                            }
                                        while (0);
                                        Pf = Xe + (Yd << 4);
                                        Ye = lf + (Qd << 4);
                                        Hf = Be + 1;
                                        if (jf = (Hf | 0) < (c | 0)) lf = Ye, Xe = Pf, Be = Hf;
                                        else break
                                    }
                                }
                            } else if (L) {
                            if (ze) {
                                mf = 0 < (b | 0);
                                Le = 0 < (K | 0);
                                Ve = Math_imul(Yd, b) | 0;
                                df = 0;
                                wf = Oe;
                                Yf = ue;
                                for (Jf = 0;;) {
                                    if (mf) {
                                        Qf = Jf + b;
                                        Sf = 0;
                                        Mf = Yf;
                                        for (ee = Jf;;) {
                                            oe = h + ee;
                                            HEAP8[oe] = i;
                                            b: do
                                                if (Le) {
                                                    for (rf = 0;;) {
                                                        Ff = Mf + (rf << 4);
                                                        xf = HEAPF64[Ff >> 3];
                                                        Pe = Mf + (rf << 4) + 8;
                                                        qf = HEAPF64[Pe >> 3];
                                                        yf = wf + (rf << 4);
                                                        Nf = HEAPF64[yf >> 3];
                                                        Zf = wf + (rf << 4) + 8;
                                                        tg = HEAPF64[Zf >> 3];
                                                        Ze = _jtzeq(a, xf,
                                                            qf, Nf, tg);
                                                        gf = 0 == Ze << 24 >> 24;
                                                        ef = rf + 1;
                                                        if (gf) break;
                                                        if (Kf = (ef | 0) < (K | 0)) rf = ef;
                                                        else break b
                                                    }
                                                    HEAP8[oe] = j
                                                }
                                            while (0);
                                            bg = Mf + (Yd << 4);
                                            lg = ee + 1;
                                            Rf = Sf + 1;
                                            if (Ug = (Rf | 0) < (b | 0)) Sf = Rf, Mf = bg, ee = lg;
                                            else break
                                        }
                                        Jg = Vf = Yf + (Ve << 4);
                                        hg = Qf
                                    } else Jg = Yf, hg = Jf;
                                    Lg = wf + (Qd << 4);
                                    $f = df + 1;
                                    if (ah = ($f | 0) < (c | 0)) df = $f, wf = Lg, Yf = Jg, Jf = hg;
                                    else break
                                }
                            }
                        } else if (ze) {
                            nh = 0 < (b | 0);
                            dh = 0 < (K | 0);
                            mg = Math_imul(Qd, b) | 0;
                            yh = 0;
                            Bg = Oe;
                            ig = ue;
                            for (ng = 0;;) {
                                if (nh) {
                                    Ng = ng + b;
                                    Ch = 0;
                                    Dg = Bg;
                                    for (Vg = ng;;) {
                                        pg = h + Vg;
                                        HEAP8[pg] = i;
                                        b: do
                                            if (dh) {
                                                for (zg = 0;;) {
                                                    Pg = ig + (zg << 4);
                                                    cg = HEAPF64[Pg >> 3];
                                                    dg = ig + (zg << 4) + 8;
                                                    qg = HEAPF64[dg >> 3];
                                                    vg = Dg + (zg << 4);
                                                    bh = HEAPF64[vg >> 3];
                                                    Zg = Dg + (zg << 4) + 8;
                                                    Eg = HEAPF64[Zg >> 3];
                                                    wg = _jtzeq(a, cg, qg, bh, Eg);
                                                    vh = 0 == wg << 24 >> 24;
                                                    Kh = zg + 1;
                                                    if (vh) break;
                                                    if ($g = (Kh | 0) < (K | 0)) zg = Kh;
                                                    else break b
                                                }
                                                HEAP8[pg] = j
                                            }
                                        while (0);
                                        Ag = Dg + (Qd << 4);
                                        Lh = Vg + 1;
                                        xg = Ch + 1;
                                        if (Mg = (xg | 0) < (b | 0)) Ch = xg, Dg = Ag, Vg = Lh;
                                        else break
                                    }
                                    Sg = rg = Bg + (mg << 4);
                                    jg = Ng
                                } else Sg = Bg, jg = ng;
                                Uh = ig + (Yd << 4);
                                Of = yh + 1;
                                if (Tg = (Of | 0) < (c | 0)) yh = Of, Bg = Sg, ig = Uh, ng = jg;
                                else break
                            }
                        }
                        while (0);
                        if (!H) return B = i, STACKTOP = k, B;
                        qi = v - 1;
                        eg = h + qi;
                        B = gi = HEAP8[eg];
                        STACKTOP = k;
                        return B;
                    case 64:
                        kg = Ld;
                        Qg = te;
                        Wg = 1 == (b | 0);
                        wi = 0 < (c | 0);
                        do
                            if (Wg) {
                                if (wi) {
                                    zh = 0 < (K | 0);
                                    Wf = Qg;
                                    di = kg;
                                    for (ch = 0;;) {
                                        Mh = h + ch;
                                        HEAP8[Mh] = i;
                                        b: do
                                            if (zh) {
                                                for (Fg = 0;;) {
                                                    Rg = di + (Fg << 2);
                                                    Vh = HEAP32[Rg >> 2];
                                                    Gg = Wf + (Fg << 2);
                                                    eh = HEAP32[Gg >> 2];
                                                    kh = _jtequ(a, Vh, eh);
                                                    fh = 0 == kh << 24 >> 24;
                                                    Wh = Fg + 1;
                                                    if (fh) break;
                                                    if (qh = (Wh | 0) < (K | 0)) Fg = Wh;
                                                    else break b
                                                }
                                                HEAP8[Mh] = j
                                            }
                                        while (0);
                                        og = di + (Yd << 2);
                                        Og = Wf + (Qd << 2);
                                        Kg = ch + 1;
                                        if (Ih = (Kg | 0) < (c | 0)) Wf = Og, di = og, ch = Kg;
                                        else break
                                    }
                                }
                            } else if (L) {
                            if (wi) {
                                ai = 0 < (b | 0);
                                wh = 0 < (K | 0);
                                Xh = Math_imul(Yd, b) | 0;
                                Nh = 0;
                                Jh = Qg;
                                lj = kg;
                                for (gh = 0;;) {
                                    if (ai) {
                                        rh =
                                            gh + b;
                                        Ph = 0;
                                        hi = lj;
                                        for (sh = gh;;) {
                                            fg = h + sh;
                                            HEAP8[fg] = i;
                                            b: do
                                                if (wh) {
                                                    for (Yi = 0;;) {
                                                        mj = hi + (Yi << 2);
                                                        xi = HEAP32[mj >> 2];
                                                        Hi = Jh + (Yi << 2);
                                                        Ii = HEAP32[Hi >> 2];
                                                        lh = _jtequ(a, xi, Ii);
                                                        yg = 0 == lh << 24 >> 24;
                                                        vj = Yi + 1;
                                                        if (yg) break;
                                                        if (Ji = (vj | 0) < (K | 0)) Yi = vj;
                                                        else break b
                                                    }
                                                    HEAP8[fg] = j
                                                }
                                            while (0);
                                            Xj = hi + (Yd << 2);
                                            yi = sh + 1;
                                            hh = Ph + 1;
                                            if (Aj = (hh | 0) < (b | 0)) Ph = hh, hi = Xj, sh = yi;
                                            else break
                                        }
                                        Hj = ih = lj + (Xh << 2);
                                        zi = rh
                                    } else Hj = lj, zi = gh;
                                    ni = Jh + (Qd << 2);
                                    ti = Nh + 1;
                                    if (Cg = (ti | 0) < (c | 0)) Nh = ti, Jh = ni, lj = Hj, gh = zi;
                                    else break
                                }
                            }
                        } else if (wi) {
                            Ah = 0 < (b | 0);
                            th = 0 < (K | 0);
                            oh = Math_imul(Qd, b) | 0;
                            Hg = 0;
                            bi = Qg;
                            ui = kg;
                            for (gj = 0;;) {
                                if (Ah) {
                                    rj = gj + b;
                                    Ki = 0;
                                    Pj = bi;
                                    for (Zi = gj;;) {
                                        ii = h + Zi;
                                        HEAP8[ii] = i;
                                        b: do
                                            if (th) {
                                                for (mh = 0;;) {
                                                    ji = ui + (mh << 2);
                                                    vi = HEAP32[ji >> 2];
                                                    Qh = Pj + (mh << 2);
                                                    Ij = HEAP32[Qh >> 2];
                                                    ik = _jtequ(a, vi, Ij);
                                                    hj = 0 == ik << 24 >> 24;
                                                    Xg = mh + 1;
                                                    if (hj) break;
                                                    if (Li = (Xg | 0) < (K | 0)) mh = Xg;
                                                    else break b
                                                }
                                                HEAP8[ii] = j
                                            }
                                        while (0);
                                        ph = Pj + (Qd << 2);
                                        al = Zi + 1;
                                        oi = Ki + 1;
                                        if (Yh = (oi | 0) < (b | 0)) Ki = oi, Pj = ph, Zi = al;
                                        else break
                                    }
                                    ki = ek = bi + (oh << 2);
                                    ci = rj
                                } else ki = bi, ci = gj;
                                Rh = ui + (Yd << 2);
                                Bj = Hg + 1;
                                if (wj = (Bj | 0) < (c | 0)) Hg = Bj, bi = ki, ui = Rh, gj = ci;
                                else break
                            }
                        }
                        while (0);
                        if (!H) return B =
                            i, STACKTOP = k, B;
                        Cj = v - 1;
                        Qi = h + Cj;
                        B = Ri = HEAP8[Qi];
                        STACKTOP = k;
                        return B;
                    case 32:
                        Qj = Lb + 12;
                        Dh = HEAP32[Qj >> 2];
                        Vk = Dh & 32;
                        (Sh = 0 == (Vk | 0)) ? Dj = 0: (xj = Lb + 4, Eh = HEAP32[xj >> 2], Rj = Eh & 14, Ai = 0 != (Rj | 0), Vi = Ai & 1, Dj = Yg = Vi << 1);
                        ri = Cc + 12;
                        Fh = HEAP32[ri >> 2];
                        fk = Fh & 32;
                        (Ei = 0 == (fk | 0)) ? Nk = 0: (jk = Cc + 4, qk = HEAP32[jk >> 2], nj = qk & 14, pi = 0 != (nj | 0), Nk = yj = pi & 1);
                        Ig = Nk | Dj;
                        if (3 == (Ig | 0)) {
                            Th = Ld;
                            ij = te;
                            Ej = 1 == (b | 0);
                            Yj = 0 < (c | 0);
                            do
                                if (Ej) {
                                    if (Yj) {
                                        $i = 0 < (K | 0);
                                        Ik = Lb;
                                        zk = Cc;
                                        sj = Th;
                                        Fj = ij;
                                        for (Jj = 0;;) {
                                            Wk = h + Jj;
                                            HEAP8[Wk] = i;
                                            b: do
                                                if ($i) {
                                                    for (Fi = 0;;) {
                                                        jj = sj + (Fi << 2);
                                                        Ak = HEAP32[jj >>
                                                            2];
                                                        Wi = jl = Ak + Ik;
                                                        tk = Fj + (Fi << 2);
                                                        ei = HEAP32[tk >> 2];
                                                        zj = Bk = ei + zk;
                                                        kj = _jtmatchsub(a, 0, 0, 1, 1, Wi, zj, r, 0, 1);
                                                        Bi = 0 == kj << 24 >> 24;
                                                        Ck = Fi + 1;
                                                        if (Bi) break;
                                                        if (ol = (Ck | 0) < (K | 0)) Fi = Ck;
                                                        else break b
                                                    }
                                                    HEAP8[Wk] = j
                                                }
                                            while (0);
                                            Ci = sj + (Yd << 2);
                                            Sj = Fj + (Qd << 2);
                                            Kj = Jj + 1;
                                            if (Zj = (Kj | 0) < (c | 0)) sj = Ci, Fj = Sj, Jj = Kj;
                                            else break
                                        }
                                    }
                                } else if (L) {
                                if (Yj) {
                                    Tj = 0 < (b | 0);
                                    bl = 0 < (K | 0);
                                    Jk = Lb;
                                    Ui = Cc;
                                    fi = Math_imul(Yd, b) | 0;
                                    xh = Th;
                                    oj = ij;
                                    for (gk = Dk = 0;;) {
                                        if (Tj) {
                                            cl = gk + b;
                                            uk = xh;
                                            sg = 0;
                                            for (Lj = gk;;) {
                                                ul = h + Lj;
                                                HEAP8[ul] = i;
                                                b: do
                                                    if (bl) {
                                                        for (pj = 0;;) {
                                                            tf = uk + (pj << 2);
                                                            Xi = HEAP32[tf >> 2];
                                                            Si = $j = Xi +
                                                                Jk;
                                                            gg = oj + (pj << 2);
                                                            Kk = HEAP32[gg >> 2];
                                                            ag = Gh = Kk + Ui;
                                                            jh = _jtmatchsub(a, 0, 0, 1, 1, Si, ag, r, 0, 1);
                                                            Hh = 0 == jh << 24 >> 24;
                                                            Af = pj + 1;
                                                            if (Hh) break;
                                                            if (Mi = (Af | 0) < (K | 0)) pj = Af;
                                                            else break b
                                                        }
                                                        HEAP8[ul] = j
                                                    }
                                                while (0);
                                                kl = uk + (Yd << 2);
                                                si = Lj + 1;
                                                Ok = sg + 1;
                                                if (Zh = (Ok | 0) < (b | 0)) uk = kl, sg = Ok, Lj = si;
                                                else break
                                            }
                                            Lk = dl = xh + (fi << 2);
                                            li = cl
                                        } else Lk = xh, li = gk;
                                        Uj = oj + (Qd << 2);
                                        fm = Dk + 1;
                                        if (Di = (fm | 0) < (c | 0)) xh = Lk, oj = Uj, Dk = fm, gk = li;
                                        else break
                                    }
                                }
                            } else if (Yj) {
                                Mk = 0 < (b | 0);
                                qj = 0 < (K | 0);
                                Pk = Lb;
                                vl = Cc;
                                Mj = Math_imul(Qd, b) | 0;
                                ak = Th;
                                mi = ij;
                                for (Gi = Jl = 0;;) {
                                    if (Mk) {
                                        Nj = Jl + b;
                                        Oh = mi;
                                        fl = Jl;
                                        for (ll =
                                            0;;) {
                                            vk = h + fl;
                                            HEAP8[vk] = i;
                                            b: do
                                                if (qj) {
                                                    for (bk = 0;;) {
                                                        Vj = ak + (bk << 2);
                                                        ck = HEAP32[Vj >> 2];
                                                        rk = ml = ck + Pk;
                                                        pl = Oh + (bk << 2);
                                                        Kl = HEAP32[pl >> 2];
                                                        wl = Qk = Kl + vl;
                                                        Ek = _jtmatchsub(a, 0, 0, 1, 1, rk, wl, r, 0, 1);
                                                        sk = 0 == Ek << 24 >> 24;
                                                        Bl = bk + 1;
                                                        if (sk) break;
                                                        if (aj = (Bl | 0) < (K | 0)) bk = Bl;
                                                        else break b
                                                    }
                                                    HEAP8[vk] = j
                                                }
                                            while (0);
                                            kk = Oh + (Qd << 2);
                                            Ni = fl + 1;
                                            Oi = ll + 1;
                                            if (lk = (Oi | 0) < (b | 0)) Oh = kk, fl = Ni, ll = Oi;
                                            else break
                                        }
                                        nk = mk = mi + (Mj << 2);
                                        Fl = Nj
                                    } else nk = mi, Fl = Jl;
                                    Xk = ak + (Yd << 2);
                                    bj = Gi + 1;
                                    if (Ll = (bj | 0) < (c | 0)) ak = Xk, mi = nk, Jl = Fl, Gi = bj;
                                    else break
                                }
                            }
                            while (0);
                            if (!H) return B = i, STACKTOP = k,
                                B;
                            $h = v - 1;
                            gl = h + $h;
                            B = Bh = HEAP8[gl]
                        } else if (1 == (Ig | 0)) {
                            cj = Ld;
                            Fk = te;
                            Rk = 1 == (b | 0);
                            dj = 0 < (c | 0);
                            do
                                if (Rk) {
                                    if (dj) {
                                        ql = 0 < (K | 0);
                                        Sk = Cc;
                                        ej = cj;
                                        xl = Fk;
                                        for (dk = 0;;) {
                                            Gl = h + dk;
                                            HEAP8[Gl] = i;
                                            b: do
                                                if (ql) {
                                                    for (hk = 0;;) {
                                                        nl = ej + (hk << 2);
                                                        ok = Yk = HEAP32[nl >> 2];
                                                        Wj = xl + (hk << 2);
                                                        Rl = HEAP32[Wj >> 2];
                                                        Vl = pk = Rl + Sk;
                                                        rl = _jtmatchsub(a, 0, 0, 1, 1, ok, Vl, r, 0, 1);
                                                        Zk = 0 == rl << 24 >> 24;
                                                        Gj = hk + 1;
                                                        if (Zk) break;
                                                        if (Cl = (Gj | 0) < (K | 0)) hk = Gj;
                                                        else break b
                                                    }
                                                    HEAP8[Gl] = j
                                                }
                                            while (0);
                                            Gk = ej + (Yd << 2);
                                            gm = xl + (Qd << 2);
                                            hl = dk + 1;
                                            if (sl = (hl | 0) < (c | 0)) ej = Gk, xl = gm, dk = hl;
                                            else break
                                        }
                                    }
                                } else if (L) {
                                if (dj) {
                                    Xf =
                                        0 < (b | 0);
                                    mm = 0 < (K | 0);
                                    $k = Cc;
                                    Dl = Math_imul(Yd, b) | 0;
                                    tl = cj;
                                    bm = Fk;
                                    for (ug = Ti = 0;;) {
                                        if (Xf) {
                                            Tf = ug + b;
                                            uh = tl;
                                            Uf = 0;
                                            for (tj = ug;;) {
                                                uj = h + tj;
                                                HEAP8[uj] = i;
                                                b: do
                                                    if (mm) {
                                                        for (Sl = 0;;) {
                                                            il = uh + (Sl << 2);
                                                            yn = Wl = HEAP32[il >> 2];
                                                            im = bm + (Sl << 2);
                                                            Im = HEAP32[im >> 2];
                                                            Xl = zl = Im + $k;
                                                            vm = _jtmatchsub(a, 0, 0, 1, 1, yn, Xl, r, 0, 1);
                                                            Tl = 0 == vm << 24 >> 24;
                                                            Ml = Sl + 1;
                                                            if (Tl) break;
                                                            if (kn = (Ml | 0) < (K | 0)) Sl = Ml;
                                                            else break b
                                                        }
                                                        HEAP8[uj] = j
                                                    }
                                                while (0);
                                                nm = uh + (Yd << 2);
                                                Fn = tj + 1;
                                                Nl = Uf + 1;
                                                if (Gn = (Nl | 0) < (b | 0)) uh = nm, Uf = Nl, tj = Fn;
                                                else break
                                            }
                                            Hl = Pm = tl + (Dl << 2);
                                            Op = Tf
                                        } else Hl = tl, Op = ug;
                                        Hn = bm + (Qd << 2);
                                        uo =
                                            Ti + 1;
                                        if (Ol = (uo | 0) < (c | 0)) tl = Hl, bm = Hn, Ti = uo, ug = Op;
                                        else break
                                    }
                                }
                            } else if (dj) {
                                Do = 0 < (b | 0);
                                Xn = 0 < (K | 0);
                                io = Cc;
                                ln = Math_imul(Qd, b) | 0;
                                qm = cj;
                                el = Fk;
                                for (mn = Il = 0;;) {
                                    if (Do) {
                                        $m = mn + b;
                                        Jm = el;
                                        om = 0;
                                        for (zm = mn;;) {
                                            Am = h + zm;
                                            HEAP8[Am] = i;
                                            b: do
                                                if (Xn) {
                                                    for (Eo = 0;;) {
                                                        jo = qm + (Eo << 2);
                                                        Fo = hm = HEAP32[jo >> 2];
                                                        ko = Jm + (Eo << 2);
                                                        pm = HEAP32[ko >> 2];
                                                        Km = Bm = pm + io;
                                                        Cm = _jtmatchsub(a, 0, 0, 1, 1, Fo, Km, r, 0, 1);
                                                        rm = 0 == Cm << 24 >> 24;
                                                        Lm = Eo + 1;
                                                        if (rm) break;
                                                        if (Tm = (Lm | 0) < (K | 0)) Eo = Lm;
                                                        else break b
                                                    }
                                                    HEAP8[Am] = j
                                                }
                                            while (0);
                                            Qm = Jm + (Qd << 2);
                                            an = zm + 1;
                                            wk = om + 1;
                                            if (Go = (wk | 0) < (b | 0)) Jm = Qm, om =
                                                wk, zm = an;
                                            else break
                                        }
                                        on = nn = el + (ln << 2);
                                        cm = $m
                                    } else on = el, cm = mn;
                                    In = qm + (Yd << 2);
                                    bp = Il + 1;
                                    if (Dp = (bp | 0) < (c | 0)) qm = In, el = on, Il = bp, mn = cm;
                                    else break
                                }
                            }
                            while (0);
                            if (!H) return B = i, STACKTOP = k, B;
                            lo = v - 1;
                            bn = h + lo;
                            B = cn = HEAP8[bn]
                        } else if (2 == (Ig | 0)) {
                            Um = Ld;
                            Ro = te;
                            Yn = 1 == (b | 0);
                            Yl = 0 < (c | 0);
                            do
                                if (Yn) {
                                    if (Yl) {
                                        pn = 0 < (K | 0);
                                        Hk = Lb;
                                        vo = Um;
                                        Ho = Ro;
                                        for (Pp = 0;;) {
                                            vp = h + Pp;
                                            HEAP8[vp] = i;
                                            b: do
                                                if (pn) {
                                                    for (mo = 0;;) {
                                                        Io = vo + (mo << 2);
                                                        hp = HEAP32[Io >> 2];
                                                        sm = Vm = hp + Hk;
                                                        Zn = Ho + (mo << 2);
                                                        Mm = Oj = HEAP32[Zn >> 2];
                                                        Yp = _jtmatchsub(a, 0, 0, 1, 1, sm, Mm, r, 0, 1);
                                                        Tq = 0 == Yp << 24 >> 24;
                                                        Dm = mo + 1;
                                                        if (Tq) break;
                                                        if (Zl = (Dm | 0) < (K | 0)) mo = Dm;
                                                        else break b
                                                    }
                                                    HEAP8[vp] = j
                                                }
                                            while (0);
                                            dn = vo + (Yd << 2);
                                            Nm = Ho + (Qd << 2);
                                            Rm = Pp + 1;
                                            if (jm = (Rm | 0) < (c | 0)) vo = dn, Ho = Nm, Pp = Rm;
                                            else break
                                        }
                                    }
                                } else if (L) {
                                if (Yl) {
                                    Ep = 0 < (b | 0);
                                    cp = 0 < (K | 0);
                                    So = Lb;
                                    Jo = Math_imul(Yd, b) | 0;
                                    Jn = Um;
                                    Ko = Ro;
                                    for (Em = $n = 0;;) {
                                        if (Ep) {
                                            dm = Em + b;
                                            To = Jn;
                                            Kn = 0;
                                            for (El = Em;;) {
                                                rq = h + El;
                                                HEAP8[rq] = i;
                                                b: do
                                                    if (cp) {
                                                        for (Zp = 0;;) {
                                                            Bq = To + (Zp << 2);
                                                            zn = HEAP32[Bq >> 2];
                                                            no = wp = zn + So;
                                                            ip = Ko + (Zp << 2);
                                                            Lo = Er = HEAP32[ip >> 2];
                                                            sq = _jtmatchsub(a, 0, 0, 1, 1, no, Lo, r, 0, 1);
                                                            An = 0 == sq << 24 >> 24;
                                                            jp = Zp + 1;
                                                            if (An) break;
                                                            if (Mo = (jp | 0) < (K |
                                                                    0)) Zp = jp;
                                                            else break b
                                                        }
                                                        HEAP8[rq] = j
                                                    }
                                                while (0);
                                                Ln = To + (Yd << 2);
                                                kp = El + 1;
                                                en = Kn + 1;
                                                if (Bn = (en | 0) < (b | 0)) To = Ln, Kn = en, El = kp;
                                                else break
                                            }
                                            gq = Mn = Jn + (Jo << 2);
                                            Nn = dm
                                        } else gq = Jn, Nn = Em;
                                        Hq = Ko + (Qd << 2);
                                        dp = $n + 1;
                                        if (wo = (dp | 0) < (c | 0)) Jn = gq, Ko = Hq, $n = dp, Em = Nn;
                                        else break
                                    }
                                }
                            } else if (Yl) {
                                Fp = 0 < (b | 0);
                                fn = 0 < (K | 0);
                                On = Lb;
                                ao = Math_imul(Qd, b) | 0;
                                Qp = Um;
                                gn = Ro;
                                for (um = tm = 0;;) {
                                    if (Fp) {
                                        xo = um + b;
                                        No = gn;
                                        Gp = 0;
                                        for ($l = um;;) {
                                            lp = h + $l;
                                            HEAP8[lp] = i;
                                            b: do
                                                if (fn) {
                                                    for (km = 0;;) {
                                                        am = Qp + (km << 2);
                                                        mp = HEAP32[am >> 2];
                                                        Ar = Fm = mp + On;
                                                        hq = No + (km << 2);
                                                        Hp = iq = HEAP32[hq >> 2];
                                                        hn = _jtmatchsub(a,
                                                            0, 0, 1, 1, Ar, Hp, r, 0, 1);
                                                        Pn = 0 == hn << 24 >> 24;
                                                        yo = km + 1;
                                                        if (Pn) break;
                                                        if (np = (yo | 0) < (K | 0)) km = yo;
                                                        else break b
                                                    }
                                                    HEAP8[lp] = j
                                                }
                                            while (0);
                                            qn = No + (Qd << 2);
                                            tq = $l + 1;
                                            rn = Gp + 1;
                                            if ($p = (rn | 0) < (b | 0)) No = qn, Gp = rn, $l = tq;
                                            else break
                                        }
                                        Rp = Uq = gn + (ao << 2);
                                        Cq = xo
                                    } else Rp = gn, Cq = um;
                                    sn = Qp + (Yd << 2);
                                    Qn = tm + 1;
                                    if (uq = (Qn | 0) < (c | 0)) Qp = sn, gn = Rp, tm = Qn, um = Cq;
                                    else break
                                }
                            }
                            while (0);
                            if (!H) return B = i, STACKTOP = k, B;
                            Iq = v - 1;
                            Uo = h + Iq;
                            B = Rn = HEAP8[Uo]
                        } else {
                            Vo = Ld;
                            Sn = te;
                            Ip = 1 == (b | 0);
                            ep = 0 < (c | 0);
                            do
                                if (Ip) {
                                    if (ep) {
                                        Cn = 0 < (K | 0);
                                        Pi = Vo;
                                        xk = Sn;
                                        for (Tk = 0;;) {
                                            yl = h + Tk;
                                            HEAP8[yl] = i;
                                            b: do
                                                if (Cn) {
                                                    for (yk =
                                                        0;;) {
                                                        tn = Pi + (yk << 2);
                                                        lm = HEAP32[tn >> 2];
                                                        Tn = xk + (yk << 2);
                                                        vq = HEAP32[Tn >> 2];
                                                        Dn = _jtmatchsub(a, 0, 0, 1, 1, lm, vq, r, 0, 1);
                                                        oo = 0 == Dn << 24 >> 24;
                                                        Wo = yk + 1;
                                                        if (oo) break;
                                                        if (wm = (Wo | 0) < (K | 0)) yk = Wo;
                                                        else break b
                                                    }
                                                    HEAP8[yl] = j
                                                }
                                            while (0);
                                            Pl = Pi + (Yd << 2);
                                            Sp = xk + (Qd << 2);
                                            Vq = Tk + 1;
                                            if (Tp = (Vq | 0) < (c | 0)) Pi = Pl, xk = Sp, Tk = Vq;
                                            else break
                                        }
                                    }
                                } else if (L) {
                                if (ep) {
                                    Oo = 0 < (b | 0);
                                    fp = 0 < (K | 0);
                                    jq = Math_imul(Yd, b) | 0;
                                    un = Vo;
                                    Ul = Sn;
                                    for (rr = op = 0;;) {
                                        if (Oo) {
                                            Up = rr + b;
                                            bo = un;
                                            Po = 0;
                                            for (Un = rr;;) {
                                                Jq = h + Un;
                                                HEAP8[Jq] = i;
                                                b: do
                                                    if (fp) {
                                                        for (aq = 0;;) {
                                                            xp = bo + (aq << 2);
                                                            Gm = HEAP32[xp >> 2];
                                                            kq = Ul + (aq << 2);
                                                            co = HEAP32[kq >> 2];
                                                            pp = _jtmatchsub(a, 0, 0, 1, 1, Gm, co, r, 0, 1);
                                                            En = 0 == pp << 24 >> 24;
                                                            Kq = aq + 1;
                                                            if (En) break;
                                                            if (eo = (Kq | 0) < (K | 0)) aq = Kq;
                                                            else break b
                                                        }
                                                        HEAP8[Jq] = j
                                                    }
                                                while (0);
                                                dr = bo + (Yd << 2);
                                                Ql = Un + 1;
                                                Wq = Po + 1;
                                                if (kr = (Wq | 0) < (b | 0)) bo = dr, Po = Wq, Un = Ql;
                                                else break
                                            }
                                            yp = Xo = un + (jq << 2);
                                            Jp = Up
                                        } else yp = un, Jp = rr;
                                        qp = Ul + (Qd << 2);
                                        Yo = op + 1;
                                        if (Wm = (Yo | 0) < (c | 0)) un = yp, Ul = qp, op = Yo, rr = Jp;
                                        else break
                                    }
                                }
                            } else if (ep) {
                                Vn = 0 < (b | 0);
                                Vp = 0 < (K | 0);
                                Zo = Math_imul(Qd, b) | 0;
                                lq = Vo;
                                Kp = Sn;
                                for (Lp = sr = 0;;) {
                                    if (Vn) {
                                        mq = Lp + b;
                                        zo = Kp;
                                        fo = 0;
                                        for (Br = Lp;;) {
                                            rp = h + Br;
                                            HEAP8[rp] = i;
                                            b: do
                                                if (Vp) {
                                                    for (nq =
                                                        0;;) {
                                                        Xq = lq + (nq << 2);
                                                        Yr = HEAP32[Xq >> 2];
                                                        Dq = zo + (nq << 2);
                                                        Cr = HEAP32[Dq >> 2];
                                                        lr = _jtmatchsub(a, 0, 0, 1, 1, Yr, Cr, r, 0, 1);
                                                        tr = 0 == lr << 24 >> 24;
                                                        wq = nq + 1;
                                                        if (tr) break;
                                                        if (Lq = (wq | 0) < (K | 0)) nq = wq;
                                                        else break b
                                                    }
                                                    HEAP8[rp] = j
                                                }
                                            while (0);
                                            oq = zo + (Qd << 2);
                                            er = Br + 1;
                                            bq = fo + 1;
                                            if (mr = (bq | 0) < (b | 0)) zo = oq, fo = bq, Br = er;
                                            else break
                                        }
                                        po = Yq = Kp + (Zo << 2);
                                        qo = mq
                                    } else po = Kp, qo = Lp;
                                    fr = lq + (Yd << 2);
                                    $o = sr + 1;
                                    if (Xm = ($o | 0) < (c | 0)) lq = fr, Kp = po, sr = $o, Lp = qo;
                                    else break
                                }
                            }
                            while (0);
                            if (!H) return B = i, STACKTOP = k, B;
                            gp = v - 1;
                            go = h + gp;
                            B = Ym = HEAP8[go]
                        }
                        STACKTOP = k;
                        return B;
                    case 8:
                        ro = Ld;
                        ap =
                            te;
                        ho = 1 == (b | 0);
                        Zm = 0 < (c | 0);
                        do
                            if (ho) {
                                if (Zm) {
                                    Ao = 0 < (K | 0);
                                    Wn = ap;
                                    so = ro;
                                    for (fj = 0;;) {
                                        Mq = h + fj;
                                        HEAP8[Mq] = i;
                                        b: do
                                            if (Ao) {
                                                sp = HEAPF64[14142];
                                                for (tp = 0;;) {
                                                    Zq = so + (tp << 3);
                                                    Uk = HEAPF64[Zq >> 3];
                                                    zp = Wn + (tp << 3);
                                                    em = HEAPF64[zp >> 3];
                                                    to = Uk == em;
                                                    if (!to) {
                                                        vn = 0 < Uk;
                                                        Hm = 0 < em;
                                                        if (xm = vn ^ Hm) break;
                                                        vn ? (wn = Uk > em) ? (Ap = Uk - em, ym = Uk, jn = Ap) : (Om = em - Uk, ym = em, jn = Om) : (Mp = Uk < em) ? (xn = -0 - Uk, Bo = em - Uk, ym = xn, jn = Bo) : (Zr = -0 - em, Ur = Uk - em, ym = Zr, jn = Ur);
                                                        Qo = HEAPF64[G >> 3];
                                                        Wp = ym * Qo;
                                                        xq = jn > Wp;
                                                        Fr = ym == sp;
                                                        if (Eq = xq | Fr) break
                                                    }
                                                    yq = tp + 1;
                                                    if (qs = (yq | 0) < (K | 0)) tp = yq;
                                                    else break b
                                                }
                                                HEAP8[Mq] =
                                                    j
                                            }
                                        while (0);
                                        Lr = so + (Yd << 3);
                                        ur = Wn + (Qd << 3);
                                        cq = fj + 1;
                                        if (is = (cq | 0) < (c | 0)) Wn = ur, so = Lr, fj = cq;
                                        else break
                                    }
                                }
                            } else if (L) {
                            if (Zm) {
                                Fq = 0 < (b | 0);
                                nr = 0 < (K | 0);
                                Bp = Math_imul(Yd, b) | 0;
                                Gr = 0;
                                Gq = ap;
                                pq = ro;
                                for (Mr = 0;;) {
                                    if (Fq) {
                                        $q = Mr + b;
                                        vr = 0;
                                        Nq = pq;
                                        for (js = Mr;;) {
                                            Hr = h + js;
                                            HEAP8[Hr] = i;
                                            b: do
                                                if (nr) {
                                                    Np = HEAPF64[14142];
                                                    for (qq = 0;;) {
                                                        Oq = Nq + (qq << 3);
                                                        ar = HEAPF64[Oq >> 3];
                                                        zq = Gq + (qq << 3);
                                                        wr = HEAPF64[zq >> 3];
                                                        br = ar == wr;
                                                        if (!br) {
                                                            Al = 0 < ar;
                                                            Co = 0 < wr;
                                                            if (dq = Al ^ Co) break;
                                                            Al ? (Aq = ar > wr) ? (Vr = ar - wr, eq = ar, Xp = Vr) : (fq = wr - ar, eq = wr, Xp = fq) : ($r = ar < wr) ? (Ir = -0 - ar, Nr = wr - ar, eq = Ir, Xp =
                                                                Nr) : (Rr = -0 - wr, Pq = ar - wr, eq = Rr, Xp = Pq);
                                                            Or = HEAPF64[G >> 3];
                                                            Es = eq * Or;
                                                            ks = Xp > Es;
                                                            gr = eq == Np;
                                                            if (ls = ks | gr) break
                                                        }
                                                        dt = qq + 1;
                                                        if (ms = (dt | 0) < (K | 0)) qq = dt;
                                                        else break b
                                                    }
                                                    HEAP8[Hr] = j
                                                }
                                            while (0);
                                            Qq = Nq + (Yd << 3);
                                            as = js + 1;
                                            Jr = vr + 1;
                                            if (Wr = (Jr | 0) < (b | 0)) vr = Jr, Nq = Qq, js = as;
                                            else break
                                        }
                                        nt = bs = pq + (Bp << 3);
                                        Rq = $q
                                    } else nt = pq, Rq = Mr;
                                    or = Gq + (Qd << 3);
                                    hr = Gr + 1;
                                    if (Dr = (hr | 0) < (c | 0)) Gr = hr, Gq = or, pq = nt, Mr = Rq;
                                    else break
                                }
                            }
                        } else if (Zm) {
                            Fs = 0 < (b | 0);
                            Kr = 0 < (K | 0);
                            As = Math_imul(Qd, b) | 0;
                            Gs = 0;
                            ir = ap;
                            pr = ro;
                            for (Xr = 0;;) {
                                if (Fs) {
                                    Vs = Xr + b;
                                    Bs = 0;
                                    Ws = ir;
                                    for (rs = Xr;;) {
                                        Js = h + rs;
                                        HEAP8[Js] =
                                            i;
                                        b: do
                                            if (Kr) {
                                                Cp = HEAPF64[14142];
                                                for (Sr = 0;;) {
                                                    cs = pr + (Sr << 3);
                                                    ss = HEAPF64[cs >> 3];
                                                    cr = Ws + (Sr << 3);
                                                    jr = HEAPF64[cr >> 3];
                                                    et = ss == jr;
                                                    if (!et) {
                                                        Wt = 0 < ss;
                                                        ku = 0 < jr;
                                                        if (Xt = Wt ^ ku) break;
                                                        Wt ? (ft = ss > jr) ? (Ps = ss - jr, Xs = ss, Cs = Ps) : (Dt = jr - ss, Xs = jr, Cs = Dt) : (vt = ss < jr) ? (ot = -0 - ss, ns = jr - ss, Xs = ot, Cs = ns) : (Ks = -0 - jr, Ds = ss - jr, Xs = Ks, Cs = Ds);
                                                        Tr = HEAPF64[G >> 3];
                                                        Ys = Xs * Tr;
                                                        lu = Cs > Ys;
                                                        Yt = Xs == Cp;
                                                        if (Nt = lu | Yt) break
                                                    }
                                                    xt = Sr + 1;
                                                    if (xr = (xt | 0) < (K | 0)) Sr = xt;
                                                    else break b
                                                }
                                                HEAP8[Js] = j
                                            }
                                        while (0);
                                        qr = Ws + (Qd << 3);
                                        Zs = rs + 1;
                                        Et = Bs + 1;
                                        if (Ku = (Et | 0) < (b | 0)) Bs = Et, Ws = qr, rs = Zs;
                                        else break
                                    }
                                    Qs =
                                        gt = ir + (As << 3);
                                    xs = Vs
                                } else Qs = ir, xs = Xr;
                                pt = pr + (Yd << 3);
                                $s = Gs + 1;
                                if (Zt = ($s | 0) < (c | 0)) Gs = $s, ir = Qs, pr = pt, Xr = xs;
                                else break
                            }
                        }
                        while (0);
                        if (!H) return B = i, STACKTOP = k, B;
                        qt = v - 1;
                        ds = h + qt;
                        B = yt = HEAP8[ds];
                        STACKTOP = k;
                        return B;
                    case 128:
                        ys = Ld;
                        Lu = te;
                        us = 1 == (b | 0);
                        at = 0 < (c | 0);
                        do
                            if (us) {
                                if (at) {
                                    zs = 0 < (K | 0);
                                    Rs = Lu;
                                    Pr = ys;
                                    for (os = 0;;) {
                                        $t = h + os;
                                        HEAP8[$t] = i;
                                        b: do
                                            if (zs) {
                                                for (Ls = 0;;) {
                                                    Ss = Pr + (Ls << 3);
                                                    ht = HEAP32[Ss >> 2];
                                                    wt = Rs + (Ls << 3);
                                                    yu = HEAP32[wt >> 2];
                                                    kv = _jtequ(a, ht, yu);
                                                    if (Ft = 0 == kv << 24 >> 24) break;
                                                    uv = Pr + (Ls << 3) + 4;
                                                    au = HEAP32[uv >> 2];
                                                    rt = Rs + (Ls << 3) + 4;
                                                    mu =
                                                        HEAP32[rt >> 2];
                                                    vv = _jtequ(a, au, mu);
                                                    wv = 0 == vv << 24 >> 24;
                                                    Mu = Ls + 1;
                                                    if (wv) break;
                                                    if (Sm = (Mu | 0) < (K | 0)) Ls = Mu;
                                                    else break b
                                                }
                                                HEAP8[$t] = j
                                            }
                                        while (0);
                                        es = Pr + (Yd << 3);
                                        vs = Rs + (Qd << 3);
                                        bu = os + 1;
                                        if (it = (bu | 0) < (c | 0)) Rs = vs, Pr = es, os = bu;
                                        else break
                                    }
                                }
                            } else if (L) {
                            if (at) {
                                Ot = 0 < (b | 0);
                                qw = 0 < (K | 0);
                                zu = Math_imul(Yd, b) | 0;
                                zt = 0;
                                Gt = Lu;
                                jt = ys;
                                for (cu = 0;;) {
                                    if (Ot) {
                                        nu = cu + b;
                                        Zu = 0;
                                        st = jt;
                                        for (kt = cu;;) {
                                            ws = h + kt;
                                            HEAP8[ws] = i;
                                            b: do
                                                if (qw) {
                                                    for (lt = 0;;) {
                                                        xv = st + (lt << 3);
                                                        qy = HEAP32[xv >> 2];
                                                        Pv = Gt + (lt << 3);
                                                        Nu = HEAP32[Pv >> 2];
                                                        Pt = _jtequ(a, qy, Nu);
                                                        if (cw = 0 == Pt << 24 >> 24) break;
                                                        ou = st +
                                                            (lt << 3) + 4;
                                                        dw = HEAP32[ou >> 2];
                                                        Ou = Gt + (lt << 3) + 4;
                                                        Qv = HEAP32[Ou >> 2];
                                                        At = _jtequ(a, dw, Qv);
                                                        yv = 0 == At << 24 >> 24;
                                                        zv = lt + 1;
                                                        if (yv) break;
                                                        if (lv = (zv | 0) < (K | 0)) lt = zv;
                                                        else break b
                                                    }
                                                    HEAP8[ws] = j
                                                }
                                            while (0);
                                            Pu = st + (Yd << 3);
                                            $u = kt + 1;
                                            Av = Zu + 1;
                                            if (Ms = (Av | 0) < (b | 0)) Zu = Av, st = Pu, kt = $u;
                                            else break
                                        }
                                        Hs = rw = jt + (zu << 3);
                                        du = nu
                                    } else Hs = jt, du = cu;
                                    mt = Gt + (Qd << 3);
                                    Au = zt + 1;
                                    if (Bu = (Au | 0) < (c | 0)) zt = Au, Gt = mt, jt = Hs, cu = du;
                                    else break
                                }
                            }
                        } else if (at) {
                            mv = 0 < (b | 0);
                            Bv = 0 < (K | 0);
                            sw = Math_imul(Qd, b) | 0;
                            av = Lu;
                            Rv = ys;
                            for (pu = Qt = 0;;) {
                                if (mv) {
                                    Ew = pu + b;
                                    bt = av;
                                    yr = 0;
                                    for (Rt = pu;;) {
                                        Cv = h + Rt;
                                        HEAP8[Cv] =
                                            i;
                                        b: do
                                            if (Bv) {
                                                for (Ht = 0;;) {
                                                    qu = Rv + (Ht << 3);
                                                    ix = HEAP32[qu >> 2];
                                                    Fw = bt + (Ht << 3);
                                                    ct = HEAP32[Fw >> 2];
                                                    Sv = _jtequ(a, ix, ct);
                                                    if (Dv = 0 == Sv << 24 >> 24) break;
                                                    Qu = Rv + (Ht << 3) + 4;
                                                    Ru = HEAP32[Qu >> 2];
                                                    Bt = bt + (Ht << 3) + 4;
                                                    Is = HEAP32[Bt >> 2];
                                                    Tv = _jtequ(a, Ru, Is);
                                                    Ev = 0 == Tv << 24 >> 24;
                                                    bv = Ht + 1;
                                                    if (Ev) break;
                                                    if (It = (bv | 0) < (K | 0)) Ht = bv;
                                                    else break b
                                                }
                                                HEAP8[Cv] = j
                                            }
                                        while (0);
                                        Jt = bt + (Qd << 3);
                                        gs = Rt + 1;
                                        Cu = yr + 1;
                                        if (Ts = (Cu | 0) < (b | 0)) bt = Jt, yr = Cu, Rt = gs;
                                        else break
                                    }
                                    Fv = vx = av + (sw << 3);
                                    Su = Ew
                                } else Fv = av, Su = pu;
                                Tu = Rv + (Yd << 3);
                                Du = Qt + 1;
                                if (Pw = (Du | 0) < (c | 0)) av = Fv, Rv = Tu, Qt = Du, pu = Su;
                                else break
                            }
                        }
                        while (0);
                        if (!H) return B = i, STACKTOP = k, B;
                        ru = v - 1;
                        Qw = h + ru;
                        B = Kt = HEAP8[Qw];
                        STACKTOP = k;
                        return B;
                    default:
                        wx = 1 == (D | 0) | 8 == (D | 0) | 16 == (D | 0) ? D : 64 == (D | 0) ? 4 : 128 == (D | 0) ? 8 : 268435456 == (D | 0) ? 12 : 536870912 == (D | 0) ? 24 : 1024 == (D | 0) | 4096 == (D | 0) | 8192 == (D | 0) | 16384 == (D | 0) | 2048 == (D | 0) | 32768 == (D | 0) ? 16 : 262144 == (D | 0) | 524288 == (D | 0) | 1048576 == (D | 0) ? 44 : 4 == (D | 0) | 67108864 == (D | 0) | 134217728 == (D | 0) | 4194304 == (D | 0) | 8388608 == (D | 0) ? 4 : 32 == (D | 0) ? 4 : 16777216 == (D | 0) ? 12 : 65536 == (D | 0) ? 4 : 2 == (D | 0) | 2097152 == (D | 0) | 33554432 == (D | 0) ? 1 : 131072 == (D | 0) ? 2 : -1;
                        hs = Math_imul(wx,
                            K) | 0;
                        up = Math_imul(b, c) | 0;
                        tw = hs & 3;
                        Ix = 0 == (tw | 0);
                        b: do
                            if (Ix) switch (Us = Ld, ts = te, Sq = hs >>> 2, uw = (xx = 7 < hs >>> 0) ? 16 : eu = (vw = 0 != (Sq | 0)) ? 8 : 0, Uv = We ? 2 : 0, ew = he & 1, fw = ew | Uv, Jx = fw | uw, Jx | 0) {
                                case 8:
                                    Uu = HEAP32[Us >> 2];
                                    Vv = HEAP32[ts >> 2];
                                    nv = (su = (Uu | 0) == (Vv | 0)) ? i : j;
                                    HEAP8[h] = nv;
                                    break b;
                                case 9:
                                    gw = HEAP32[Us >> 2];
                                    hw = 0 == i << 24 >> 24;
                                    fu = 0 < (up | 0);
                                    if (hw) {
                                        if (fu) Gv = 0, gu = ts, Qr = h;
                                        else break b;
                                        for (;;)
                                            if (iw = gu + 4, cv = HEAP32[gu >> 2], Hv = (gw | 0) != (cv | 0), tu = Hv & 1, Vu = Qr + 1, HEAP8[Qr] = tu, ww = Gv + 1, Ns = (ww | 0) < (up | 0)) Gv = ww, gu = iw, Qr = Vu;
                                            else break
                                    } else {
                                        if (fu) uu =
                                            0, Lt = ts, St = h;
                                        else break b;
                                        for (;;)
                                            if (Kx = Lt + 4, hu = HEAP32[Lt >> 2], Rw = (gw | 0) == (hu | 0), Wv = Rw & 1, Lx = St + 1, HEAP8[St] = Wv, Iz = uu + 1, Xv = (Iz | 0) < (up | 0)) uu = Iz, Lt = Kx, St = Lx;
                                            else break
                                    }
                                    break;
                                case 11:
                                    iu = 0 == i << 24 >> 24;
                                    ov = 1 == (b | 0);
                                    if (iu) {
                                        if (ov) {
                                            if (Iv = 0 < (c | 0)) pv = 0, Os = ts, tt = Us, Tt = h;
                                            else break b;
                                            for (;;)
                                                if (Sw = tt + 4, jx = HEAP32[tt >> 2], yx = Os + 4, Mx = HEAP32[Os >> 2], Wu = (jx | 0) != (Mx | 0), jw = Wu & 1, Tw = Tt + 1, HEAP8[Tt] = jw, ut = pv + 1, Dy = (ut | 0) < (c | 0)) pv = ut, Os = yx, tt = Sw, Tt = Tw;
                                                else break b
                                        }
                                        xw = (f | 0) < (d | 0);
                                        kx = 0 < (c | 0);
                                        Ey = 0 < (b | 0);
                                        vu = kx & Ey;
                                        if (xw) {
                                            if (vu) Jv = 0, Gw =
                                                ts, dy = Us, kA = h;
                                            else break b;
                                            for (;;) {
                                                Eu = HEAP32[dy >> 2];
                                                Vy = 0;
                                                Wy = Gw;
                                                for (zx = kA;;)
                                                    if (Xy = Wy + 4, Yy = HEAP32[Wy >> 2], Uw = (Eu | 0) != (Yy | 0), Nx = Uw & 1, kw = zx + 1, HEAP8[zx] = Nx, ey = Vy + 1, Fy = (ey | 0) < (b | 0)) Vy = ey, Wy = Xy, zx = kw;
                                                    else break;
                                                fy = dy + 4;
                                                yw = kA + b;
                                                Yv = Gw + (b << 2);
                                                Kv = Jv + 1;
                                                if (Zy = (Kv | 0) < (c | 0)) Jv = Kv, Gw = Yv, dy = fy, kA = yw;
                                                else break
                                            }
                                        } else {
                                            if (vu) Lv = 0, Hw = ts, Xu = Us, Ox = h;
                                            else break b;
                                            for (;;) {
                                                Zv = HEAP32[Hw >> 2];
                                                Ut = 0;
                                                Fu = Xu;
                                                for (Vw = Ox;;)
                                                    if (Px = Fu + 4, Qx = HEAP32[Fu >> 2], Rx = (Qx | 0) != (Zv | 0), ry = Rx & 1, Ax = Vw + 1, HEAP8[Vw] = ry, zr = Ut + 1, qv = (zr | 0) < (b | 0)) Ut = zr, Fu = Px, Vw =
                                                        Ax;
                                                    else break;
                                                lx = Hw + 4;
                                                Sx = Ox + b;
                                                Tx = Xu + (b << 2);
                                                Jz = Lv + 1;
                                                if (sy = (Jz | 0) < (c | 0)) Lv = Jz, Hw = lx, Xu = Tx, Ox = Sx;
                                                else break
                                            }
                                        }
                                    } else {
                                        if (ov) {
                                            if (gy = 0 < (c | 0)) Iw = 0, Ww = ts, dv = Us, zw = h;
                                            else break b;
                                            for (;;)
                                                if (Mt = dv + 4, Ux = HEAP32[dv >> 2], MA = Ww + 4, mx = HEAP32[Ww >> 2], Bx = (Ux | 0) == (mx | 0), Gy = Bx & 1, Vx = zw + 1, HEAP8[zw] = Gy, rv = Iw + 1, Cx = (rv | 0) < (c | 0)) Iw = rv, Ww = MA, dv = Mt, zw = Vx;
                                                else break b
                                        }
                                        Hy = (f | 0) < (d | 0);
                                        lw = 0 < (c | 0);
                                        NA = 0 < (b | 0);
                                        Gu = lw & NA;
                                        if (Hy) {
                                            if (Gu) nx = 0, ty = ts, ox = Us, Iy = h;
                                            else break b;
                                            for (;;) {
                                                Jw = HEAP32[ox >> 2];
                                                Aw = 0;
                                                ev = ty;
                                                for (Wx = Iy;;)
                                                    if (Xx = ev + 4, Xw = HEAP32[ev >>
                                                            2], uy = (Jw | 0) == (Xw | 0), hy = uy & 1, qz = Wx + 1, HEAP8[Wx] = hy, sv = Aw + 1, lA = (sv | 0) < (b | 0)) Aw = sv, ev = Xx, Wx = qz;
                                                    else break;
                                                vy = ox + 4;
                                                px = Iy + b;
                                                wy = ty + (b << 2);
                                                fv = nx + 1;
                                                if (xy = (fv | 0) < (c | 0)) nx = fv, ty = wy, ox = vy, Iy = px;
                                                else break
                                            }
                                        } else {
                                            if (Gu) Dx = 0, mw = ts, Ex = Us, qx = h;
                                            else break b;
                                            for (;;) {
                                                gv = mw + 4;
                                                Kz = HEAP32[mw >> 2];
                                                Ct = 0;
                                                Hu = Ex;
                                                for (mA = qx;;)
                                                    if ($y = Hu + 4, nA = HEAP32[Hu >> 2], Lz = (nA | 0) == (Kz | 0), az = Lz & 1, OA = mA + 1, HEAP8[mA] = az, bz = Ct + 1, rz = (bz | 0) < (b | 0)) Ct = bz, Hu = $y, mA = OA;
                                                    else break;
                                                Jy = qx + b;
                                                Mz = Ex + (b << 2);
                                                rx = Dx + 1;
                                                if (Yw = (rx | 0) < (c | 0)) Dx = rx, mw = gv, Ex = Mz, qx = Jy;
                                                else break
                                            }
                                        }
                                    }
                                    break;
                                case 18:
                                    nw = 0 < (up | 0);
                                    if (!nw) break b;
                                    Iu = 0 == (Sq | 0);
                                    oA = 0;
                                    Ky = Us;
                                    for (Yx = h;;) {
                                        c: do
                                            if (Iu) Nz = i;
                                            else
                                                for (Zx = 0;;) {
                                                    Ly = Ky + (Zx << 2);
                                                    pA = HEAP32[Ly >> 2];
                                                    PA = ts + (Zx << 2);
                                                    Yu = HEAP32[PA >> 2];
                                                    Zw = (pA | 0) == (Yu | 0);
                                                    Mv = Zx + 1;
                                                    if (!Zw) {
                                                        Nz = j;
                                                        break c
                                                    }
                                                    if (QA = (Mv | 0) < (Sq | 0)) Zx = Mv;
                                                    else {
                                                        Nz = i;
                                                        break
                                                    }
                                                }
                                            while (0);$v = Yx + 1;HEAP8[Yx] = Nz;sz = Ky + (Sq << 2);Kw = oA + 1;
                                        if (My = (Kw | 0) < (up | 0)) oA = Kw,
                                        Ky = sz,
                                        Yx = $v;
                                        else break
                                    }
                                    break;
                                case 17:
                                    $x = 0 < (up | 0);
                                    if (!$x) break b;
                                    if (qA = 0 == (Sq | 0)) {
                                        _memset(h, i, up) | 0;
                                        break b
                                    } else Fx = 0, tz = ts, iy = h;
                                    for (;;) {
                                        for (ow = 0;;) {
                                            $w = Us + (ow << 2);
                                            RA = HEAP32[$w >>
                                                2];
                                            kB = tz + (ow << 2);
                                            ND = HEAP32[kB >> 2];
                                            cz = (RA | 0) == (ND | 0);
                                            dz = ow + 1;
                                            if (!cz) {
                                                Oz = j;
                                                break
                                            }
                                            if (HC = (dz | 0) < (Sq | 0)) ow = dz;
                                            else {
                                                Oz = i;
                                                break
                                            }
                                        }
                                        ez = iy + 1;
                                        HEAP8[iy] = Oz;
                                        SA = tz + (Sq << 2);
                                        pw = Fx + 1;
                                        if (rA = (pw | 0) < (up | 0)) Fx = pw, tz = SA, iy = ez;
                                        else break
                                    }
                                    break;
                                case 16:
                                    hv = 0 == (Sq | 0);
                                    c: do
                                        if (hv) Bw = i;
                                        else
                                            for (iv = 0;;) {
                                                fz = Us + (iv << 2);
                                                Pz = HEAP32[fz >> 2];
                                                ax = ts + (iv << 2);
                                                iD = HEAP32[ax >> 2];
                                                Qz = (Pz | 0) == (iD | 0);
                                                bx = iv + 1;
                                                if (!Qz) {
                                                    Bw = j;
                                                    break c
                                                }
                                                if (uz = (bx | 0) < (Sq | 0)) iv = bx;
                                                else {
                                                    Bw = i;
                                                    break
                                                }
                                            }
                                        while (0);
                                    HEAP8[h] = Bw;
                                    break b;
                                case 19:
                                    if (OD = 1 == (b | 0)) {
                                        vz = 0 < (c | 0);
                                        if (!vz) break b;
                                        lB = 0 == (Sq | 0);
                                        cx = 0;
                                        jy = ts;
                                        gz = Us;
                                        for (Ny = h;;) {
                                            c: do
                                                if (lB) BB = i;
                                                else
                                                    for (IC = 0;;) {
                                                        jD = gz + (IC << 2);
                                                        JC = HEAP32[jD >> 2];
                                                        PD = jy + (IC << 2);
                                                        eC = HEAP32[PD >> 2];
                                                        ky = (JC | 0) == (eC | 0);
                                                        Rz = IC + 1;
                                                        if (!ky) {
                                                            BB = j;
                                                            break c
                                                        }
                                                        if (Sz = (Rz | 0) < (Sq | 0)) IC = Rz;
                                                        else {
                                                            BB = i;
                                                            break
                                                        }
                                                    }
                                                while (0);ly = Ny + 1;HEAP8[Ny] = BB;ay = gz + (Sq << 2);kD = jy + (Sq << 2);Oy = cx + 1;
                                            if (AE = (Oy | 0) < (c | 0)) cx = Oy,
                                            jy = kD,
                                            gz = ay,
                                            Ny = ly;
                                            else break b
                                        }
                                    }
                                    Tz = (f | 0) < (d | 0);
                                    by = 0 < (c | 0);
                                    if (Tz) {
                                        if (!by) break b;
                                        Vt = 0 < (b | 0);
                                        wz = 0 == (Sq | 0);
                                        hz = Math_imul(Sq, b) | 0;
                                        Py = 0;
                                        Cw = ts;
                                        Qy = Us;
                                        for (Dw = h;;) {
                                            if (Vt) {
                                                iz = 0;
                                                cy = Cw;
                                                for (mB = Dw;;) {
                                                    c: do
                                                        if (wz) fC =
                                                            i;
                                                        else
                                                            for (Uz = 0;;) {
                                                                lD = Qy + (Uz << 2);
                                                                gC = HEAP32[lD >> 2];
                                                                xz = cy + (Uz << 2);
                                                                hC = HEAP32[xz >> 2];
                                                                iC = (gC | 0) == (hC | 0);
                                                                yz = Uz + 1;
                                                                if (!iC) {
                                                                    fC = j;
                                                                    break c
                                                                }
                                                                if (nB = (yz | 0) < (Sq | 0)) Uz = yz;
                                                                else {
                                                                    fC = i;
                                                                    break
                                                                }
                                                            }
                                                        while (0);CB = mB + 1;HEAP8[mB] = fC;QD = cy + (Sq << 2);dx = iz + 1;
                                                    if (aw = (dx | 0) < (b | 0)) iz = dx,
                                                    cy = QD,
                                                    mB = CB;
                                                    else break
                                                }
                                                oB = Cw + (hz << 2);
                                                Ry = Dw + b;
                                                sA = oB;
                                                jz = Ry
                                            } else sA = Cw, jz = Dw;
                                            DB = Qy + (Sq << 2);
                                            my = Py + 1;
                                            if (iF = (my | 0) < (c | 0)) Py = my, Cw = sA, Qy = DB, Dw = jz;
                                            else break
                                        }
                                    } else {
                                        if (!by) break b;
                                        pB = 0 < (b | 0);
                                        tA = 0 == (Sq | 0);
                                        TA = Math_imul(Sq, b) | 0;
                                        Gx = 0;
                                        Sy = ts;
                                        UA = Us;
                                        for (Ju = h;;) {
                                            if (pB) {
                                                KC =
                                                    0;
                                                LC = UA;
                                                for (EB = Ju;;) {
                                                    c: do
                                                        if (tA) MC = i;
                                                        else
                                                            for (uA = 0;;) {
                                                                RD = LC + (uA << 2);
                                                                VA = HEAP32[RD >> 2];
                                                                NC = Sy + (uA << 2);
                                                                mD = HEAP32[NC >> 2];
                                                                zz = (VA | 0) == (mD | 0);
                                                                vA = uA + 1;
                                                                if (!zz) {
                                                                    MC = j;
                                                                    break c
                                                                }
                                                                if (cI = (vA | 0) < (Sq | 0)) uA = vA;
                                                                else {
                                                                    MC = i;
                                                                    break
                                                                }
                                                            }
                                                        while (0);Vz = EB + 1;HEAP8[EB] = MC;Wz = LC + (Sq << 2);Ty = KC + 1;
                                                    if (Xz = (Ty | 0) < (b | 0)) KC = Ty,
                                                    LC = Wz,
                                                    EB = Vz;
                                                    else break
                                                }
                                                BE = UA + (TA << 2);
                                                nD = Ju + b;
                                                Az = BE;
                                                wA = nD
                                            } else Az = UA, wA = Ju;
                                            oD = Sy + (Sq << 2);
                                            OC = Gx + 1;
                                            if (ex = (OC | 0) < (c | 0)) Gx = OC, Sy = oD, UA = Az, Ju = wA;
                                            else break
                                        }
                                    }
                                    break;
                                case 10:
                                    bw = HEAP32[ts >> 2];
                                    Lw = 0 == i << 24 >> 24;
                                    jv = 0 < (up | 0);
                                    if (Lw) {
                                        if (jv) wu =
                                            0, Yz = Us, sx = h;
                                        else break b;
                                        for (;;)
                                            if (Zz = Yz + 4, Bz = HEAP32[Yz >> 2], $z = (Bz | 0) != (bw | 0), Nv = $z & 1, kz = sx + 1, HEAP8[sx] = Nv, xA = wu + 1, II = (xA | 0) < (up | 0)) wu = xA, Yz = Zz, sx = kz;
                                            else break
                                    } else {
                                        if (jv) yA = 0, Cz = Us, lz = h;
                                        else break b;
                                        for (;;)
                                            if (wH = Cz + 4, XF = HEAP32[Cz >> 2], YF = (XF | 0) == (bw | 0), zA = YF & 1, SD = lz + 1, HEAP8[lz] = zA, tv = yA + 1, FB = (tv | 0) < (up | 0)) yA = tv, Cz = wH, lz = SD;
                                            else break
                                    }
                                    break;
                                default:
                                    break b
                            } else {
                                AA = hs & 1;
                                Dz = 0 == (AA | 0);
                                if (!Dz) {
                                    ny = 1 == (hs | 0);
                                    if (!ny) {
                                        yy = We ? hs : 0;
                                        Mw = he ? hs : 0;
                                        if (ju = 1 == (b | 0)) {
                                            Nw = 0 < (c | 0);
                                            if (!Nw) break;
                                            WA = 0 == (hs | 0);
                                            GB = 0;
                                            pD = h;
                                            aA =
                                                te;
                                            for (qB = Ld;;) {
                                                c: do
                                                    if (WA) mz = i;
                                                    else {
                                                        tx = hs;
                                                        bA = qB;
                                                        for (Ez = aA;;) {
                                                            XA = HEAP8[bA];
                                                            YA = HEAP8[Ez];
                                                            cA = XA << 24 >> 24 == YA << 24 >> 24;
                                                            if (!cA) {
                                                                mz = j;
                                                                break c
                                                            }
                                                            qD = tx - 1;
                                                            TD = bA + 1;
                                                            rB = Ez + 1;
                                                            if (dA = 0 == (qD | 0)) {
                                                                mz = i;
                                                                break
                                                            } else tx = qD, bA = TD, Ez = rB
                                                        }
                                                    }while (0);LG = pD + 1;HEAP8[pD] = mz;PC = qB + yy;HB = aA + Mw;UD = GB + 1;
                                                if (jC = (UD | 0) < (c | 0)) GB = UD,
                                                pD = LG,
                                                aA = HB,
                                                qB = PC;
                                                else break b
                                            }
                                        }
                                        rD = (f | 0) < (d | 0);
                                        ZA = 0 < (c | 0);
                                        if (rD) {
                                            if (!ZA) break;
                                            ZF = 0 < (b | 0);
                                            kC = Math_imul(hs, b) | 0;
                                            MG = 0 == (hs | 0);
                                            IL = 0;
                                            lC = h;
                                            NG = te;
                                            for (sD = Ld;;) {
                                                if (ZF) {
                                                    $F = 0;
                                                    dI = lC;
                                                    for (jF = NG;;) {
                                                        c: do
                                                            if (MG) OG = i;
                                                            else {
                                                                eI = hs;
                                                                tD = sD;
                                                                for (uD = jF;;) {
                                                                    VD = HEAP8[tD];
                                                                    CE = HEAP8[uD];
                                                                    WD = VD << 24 >> 24 == CE << 24 >> 24;
                                                                    if (!WD) {
                                                                        OG = j;
                                                                        break c
                                                                    }
                                                                    mC = eI - 1;
                                                                    IB = tD + 1;
                                                                    kF = uD + 1;
                                                                    if (JB = 0 == (mC | 0)) {
                                                                        OG = i;
                                                                        break
                                                                    } else eI = mC, tD = IB, uD = kF
                                                                }
                                                            }while (0);xH = dI + 1;HEAP8[dI] = OG;DE = jF + hs;vD = $F + 1;
                                                        if (XD = (vD | 0) < (b | 0)) $F = vD,
                                                        dI = xH,
                                                        jF = DE;
                                                        else break
                                                    }
                                                    zy = NG + kC;
                                                    BA = KB = lC + b;
                                                    lF = zy
                                                } else BA = lC, lF = NG;
                                                mF = sD + hs;
                                                nC = IL + 1;
                                                if ($A = (nC | 0) < (c | 0)) IL = nC, lC = BA, NG = lF, sD = mF;
                                                else break b
                                            }
                                        } else {
                                            if (!ZA) break;
                                            wJ = 0 < (b | 0);
                                            aG = Math_imul(hs, b) | 0;
                                            JI = 0 == (hs | 0);
                                            EE = h;
                                            nF = 0;
                                            aB = te;
                                            for (yH = Ld;;) {
                                                if (wJ) {
                                                    wD = EE;
                                                    bG = 0;
                                                    for (cG = yH;;) {
                                                        c: do
                                                            if (JI) YD =
                                                                i;
                                                            else {
                                                                FE = hs;
                                                                oC = cG;
                                                                for (pC = aB;;) {
                                                                    dG = HEAP8[oC];
                                                                    ZD = HEAP8[pC];
                                                                    zH = dG << 24 >> 24 == ZD << 24 >> 24;
                                                                    if (!zH) {
                                                                        YD = j;
                                                                        break c
                                                                    }
                                                                    PG = FE - 1;
                                                                    fI = oC + 1;
                                                                    QG = pC + 1;
                                                                    if (eG = 0 == (PG | 0)) {
                                                                        YD = i;
                                                                        break
                                                                    } else FE = PG, oC = fI, pC = QG
                                                                }
                                                            }while (0);gI = wD + 1;HEAP8[wD] = YD;nz = cG + hs;xD = bG + 1;
                                                        if (xJ = (xD | 0) < (b | 0)) wD = gI,
                                                        bG = xD,
                                                        cG = nz;
                                                        else break
                                                    }
                                                    KI = yH + aG;
                                                    AH = LI = EE + b;
                                                    fG = KI
                                                } else AH = EE, fG = yH;
                                                oF = aB + hs;
                                                BH = nF + 1;
                                                if (pF = (BH | 0) < (c | 0)) EE = AH, nF = BH, aB = oF, yH = fG;
                                                else break b
                                            }
                                        }
                                    }
                                    yJ = We ? 10 : 8;
                                    RG = he & 1;
                                    CA = RG | yJ;
                                    if (8 == (CA | 0)) {
                                        GE = HEAP8[Ld];
                                        QC = HEAP8[te];
                                        qC = (zJ = GE << 24 >> 24 == QC << 24 >> 24) ? i : j;
                                        HEAP8[h] =
                                            qC;
                                        break
                                    } else if (11 == (CA | 0))
                                        if ($D = 0 == i << 24 >> 24, oy = 1 == (b | 0), $D) {
                                            if (oy) {
                                                if (MI = 0 < (c | 0)) rC = Ld, bB = te, sB = 0, gG = h;
                                                else break;
                                                for (;;)
                                                    if (NI = rC + 1, qF = HEAP8[rC], sC = bB + 1, LB = HEAP8[bB], rF = qF << 24 >> 24 != LB << 24 >> 24, CH = rF & 1, yD = gG + 1, HEAP8[gG] = CH, hG = sB + 1, sF = (hG | 0) < (c | 0)) rC = NI, bB = sC, sB = hG, gG = yD;
                                                    else break b
                                            }
                                            cB = (f | 0) < (d | 0);
                                            py = 0 < (c | 0);
                                            if (cB) {
                                                if (!py) break;
                                                tB = 0 < (b | 0);
                                                Ow = Ld;
                                                SG = te;
                                                hI = 0;
                                                for (TG = h;;) {
                                                    OI = Ow + 1;
                                                    MB = HEAP8[Ow];
                                                    if (tB) {
                                                        aE = SG;
                                                        tF = 0;
                                                        for (UG = TG;;)
                                                            if (NB = aE + 1, PI = HEAP8[aE], QI = MB << 24 >> 24 != PI << 24 >> 24, zD = QI & 1, bE = UG + 1, HEAP8[UG] = zD,
                                                                Uy = tF + 1, uF = (Uy | 0) < (b | 0)) aE = NB, tF = Uy, UG = bE;
                                                            else break;
                                                        tC = TG + b;
                                                        cE = cK = SG + b;
                                                        dE = tC
                                                    } else cE = SG, dE = TG;
                                                    RC = hI + 1;
                                                    if (iI = (RC | 0) < (c | 0)) Ow = OI, SG = cE, hI = RC, TG = dE;
                                                    else break b
                                                }
                                            } else {
                                                if (!py) break;
                                                DA = 0 < (b | 0);
                                                EA = Ld;
                                                dB = te;
                                                AD = 0;
                                                for (uC = h;;) {
                                                    AJ = dB + 1;
                                                    dK = HEAP8[dB];
                                                    if (DA) {
                                                        iG = EA;
                                                        SC = 0;
                                                        for (HE = uC;;)
                                                            if (jG = iG + 1, vF = HEAP8[iG], BD = vF << 24 >> 24 != dK << 24 >> 24, fx = BD & 1, DH = HE + 1, HEAP8[HE] = fx, IE = SC + 1, kG = (IE | 0) < (b | 0)) iG = jG, SC = IE, HE = DH;
                                                            else break;
                                                        TC = uC + b;
                                                        JE = VG = EA + b;
                                                        lG = TC
                                                    } else JE = EA, lG = uC;
                                                    WG = AD + 1;
                                                    if (JL = (WG | 0) < (c | 0)) EA = JE, dB = AJ, AD = WG, uC = lG;
                                                    else break b
                                                }
                                            }
                                        } else {
                                            if (oy) {
                                                if (CD =
                                                    0 < (c | 0)) Ay = Ld, XG = te, wF = 0, eE = h;
                                                else break;
                                                for (;;)
                                                    if (mG = Ay + 1, xF = HEAP8[Ay], KE = XG + 1, eA = HEAP8[XG], vC = xF << 24 >> 24 == eA << 24 >> 24, yF = vC & 1, LE = eE + 1, HEAP8[eE] = yF, UC = wF + 1, RI = (UC | 0) < (c | 0)) Ay = mG, XG = KE, wF = UC, eE = LE;
                                                    else break b
                                            }
                                            eB = (f | 0) < (d | 0);
                                            OK = 0 < (c | 0);
                                            if (eB) {
                                                if (!OK) break;
                                                nG = 0 < (b | 0);
                                                DD = Ld;
                                                wC = te;
                                                FA = 0;
                                                for (OB = h;;) {
                                                    PB = DD + 1;
                                                    QB = HEAP8[DD];
                                                    if (nG) {
                                                        fB = wC;
                                                        zF = 0;
                                                        for (oG = OB;;)
                                                            if (fE = fB + 1, YG = HEAP8[fB], RB = QB << 24 >> 24 == YG << 24 >> 24, GA = RB & 1, ME = oG + 1, HEAP8[oG] = GA, ED = zF + 1, jI = (ED | 0) < (b | 0)) fB = fE, zF = ED, oG = ME;
                                                            else break;
                                                        ZG = OB + b;
                                                        gE = NE = wC + b;
                                                        xC = ZG
                                                    } else gE =
                                                        wC, xC = OB;
                                                    SB = FA + 1;
                                                    if (PK = (SB | 0) < (c | 0)) DD = PB, wC = gE, FA = SB, OB = xC;
                                                    else break b
                                                }
                                            } else {
                                                if (!OK) break;
                                                EH = 0 < (b | 0);
                                                OE = Ld;
                                                PE = te;
                                                pG = 0;
                                                for (AF = h;;) {
                                                    BF = PE + 1;
                                                    yC = HEAP8[PE];
                                                    if (EH) {
                                                        FH = OE;
                                                        $G = 0;
                                                        for (hE = AF;;)
                                                            if (aH = FH + 1, QE = HEAP8[FH], RE = QE << 24 >> 24 == yC << 24 >> 24, bH = RE & 1, SI = hE + 1, HEAP8[hE] = bH, eK = $G + 1, SE = (eK | 0) < (b | 0)) FH = aH, $G = eK, hE = SI;
                                                            else break;
                                                        CF = AF + b;
                                                        FD = GH = OE + b;
                                                        zC = CF
                                                    } else FD = OE, zC = AF;
                                                    Fz = pG + 1;
                                                    if (HA = (Fz | 0) < (c | 0)) OE = FD, PE = BF, pG = Fz, AF = zC;
                                                    else break b
                                                }
                                            }
                                        } else if (9 == (CA | 0))
                                        if (oz = HEAP8[Ld], fK = 0 == i << 24 >> 24, TB = 0 < (up | 0), fK) {
                                            if (TB) qG = te,
                                                iE = 0, HH = h;
                                            else break;
                                            for (;;)
                                                if (fA = qG + 1, UB = HEAP8[qG], IH = oz << 24 >> 24 != UB << 24 >> 24, cH = IH & 1, jE = HH + 1, HEAP8[HH] = cH, DF = iE + 1, VB = (DF | 0) < (up | 0)) qG = fA, iE = DF, HH = jE;
                                                else break b
                                        } else {
                                            if (TB) VC = te, TE = 0, kE = h;
                                            else break;
                                            for (;;)
                                                if (EF = VC + 1, gA = HEAP8[VC], hA = oz << 24 >> 24 == gA << 24 >> 24, uB = hA & 1, UE = kE + 1, HEAP8[kE] = uB, WC = TE + 1, gB = (WC | 0) < (up | 0)) VC = EF, TE = WC, kE = UE;
                                                else break b
                                        } else if (10 == (CA | 0))
                                        if (BJ = HEAP8[te], IA = 0 == i << 24 >> 24, FF = 0 < (up | 0), IA) {
                                            if (FF) XC = Ld, rG = 0, GD = h;
                                            else break;
                                            for (;;)
                                                if (sG = XC + 1, vB = HEAP8[XC], WB = vB << 24 >> 24 != BJ << 24 >> 24, lE =
                                                    WB & 1, XB = GD + 1, HEAP8[GD] = lE, dH = rG + 1, GF = (dH | 0) < (up | 0)) XC = sG, rG = dH, GD = XB;
                                                else break b
                                        } else {
                                            if (FF) gK = Ld, eH = 0, JH = h;
                                            else break;
                                            for (;;)
                                                if (mE = gK + 1, VE = HEAP8[gK], WE = VE << 24 >> 24 == BJ << 24 >> 24, TI = WE & 1, kI = JH + 1, HEAP8[JH] = TI, lI = eH + 1, KH = (lI | 0) < (up | 0)) gK = mE, eH = lI, JH = kI;
                                                else break b
                                        } else break
                                }
                                By = Ld;
                                gx = te;
                                ux = hs >>> 1;
                                fH = (HF = 3 < hs >>> 0) ? 16 : tG = (mI = 0 != (ux | 0)) ? 8 : 0;
                                YC = We ? 2 : 0;
                                ZC = he & 1;
                                hK = ZC | YC;
                                nE = hK | fH;
                                switch (nE | 0) {
                                    case 10:
                                        JA = HEAP16[gx >> 1];
                                        LH = 0 == i << 24 >> 24;
                                        YB = 0 < (up | 0);
                                        if (LH) {
                                            if (YB) hx = 0, uG = By, oE = h;
                                            else break b;
                                            for (;;)
                                                if ($C = uG + 2, IF =
                                                    HEAP16[uG >> 1], UI = IF << 16 >> 16 != JA << 16 >> 16, AC = UI & 1, MH = oE + 1, HEAP8[oE] = AC, XE = hx + 1, QK = (XE | 0) < (up | 0)) hx = XE, uG = $C, oE = MH;
                                                else break
                                        } else {
                                            if (YB) wB = 0, gH = By, hB = h;
                                            else break b;
                                            for (;;)
                                                if (YE = gH + 2, JF = HEAP16[gH >> 1], ZB = JF << 16 >> 16 == JA << 16 >> 16, aD = ZB & 1, KF = hB + 1, HEAP8[hB] = aD, VI = wB + 1, iA = (VI | 0) < (up | 0)) wB = VI, gH = YE, hB = KF;
                                                else break
                                        }
                                        break;
                                    case 17:
                                        bD = 0 < (up | 0);
                                        if (!bD) break b;
                                        iB = 0 == (ux | 0);
                                        jB = 0;
                                        KA = gx;
                                        for (LF = h;;) {
                                            c: do
                                                if (iB) hH = i;
                                                else
                                                    for (cD = 0;;) {
                                                        iK = By + (cD << 1);
                                                        MF = HEAP16[iK >> 1];
                                                        nI = KA + (cD << 1);
                                                        BC = HEAP16[nI >> 1];
                                                        NH = MF << 16 >> 16 == BC << 16 >>
                                                            16;
                                                        dD = cD + 1;
                                                        if (!NH) {
                                                            hH = j;
                                                            break c
                                                        }
                                                        if (RK = (dD | 0) < (ux | 0)) cD = dD;
                                                        else {
                                                            hH = i;
                                                            break
                                                        }
                                                    }
                                                while (0);iH = LF + 1;HEAP8[LF] = hH;CJ = KA + (ux << 1);oI = jB + 1;
                                            if (DJ = (oI | 0) < (up | 0)) jB = oI,
                                            KA = CJ,
                                            LF = iH;
                                            else break
                                        }
                                        break;
                                    case 16:
                                        RM = 0 == (ux | 0);
                                        c: do
                                            if (RM) WI = i;
                                            else
                                                for (OH = 0;;) {
                                                    PO = By + (OH << 1);
                                                    QO = HEAP16[PO >> 1];
                                                    SK = gx + (OH << 1);
                                                    EJ = HEAP16[SK >> 1];
                                                    RO = QO << 16 >> 16 == EJ << 16 >> 16;
                                                    FJ = OH + 1;
                                                    if (!RO) {
                                                        WI = j;
                                                        break c
                                                    }
                                                    if (TK = (FJ | 0) < (ux | 0)) OH = FJ;
                                                    else {
                                                        WI = i;
                                                        break
                                                    }
                                                }
                                            while (0);
                                        HEAP8[h] = WI;
                                        break b;
                                    case 8:
                                        pI = HEAP16[By >> 1];
                                        KL = HEAP16[gx >> 1];
                                        jK = (XI = pI << 16 >> 16 == KL << 16 >> 16) ? i : j;
                                        HEAP8[h] = jK;
                                        break b;
                                    case 9:
                                        PH = HEAP16[By >> 1];
                                        QH = 0 == i << 24 >> 24;
                                        NF = 0 < (up | 0);
                                        if (QH) {
                                            if (NF) kK = 0, vG = gx, RH = h;
                                            else break b;
                                            for (;;)
                                                if ($B = vG + 2, CC = HEAP16[vG >> 1], UK = PH << 16 >> 16 != CC << 16 >> 16, VK = UK & 1, LL = RH + 1, HEAP8[RH] = VK, jH = kK + 1, SO = (jH | 0) < (up | 0)) kK = jH, vG = $B, RH = LL;
                                                else break
                                        } else {
                                            if (NF) ML = 0, wG = gx, xG = h;
                                            else break b;
                                            for (;;)
                                                if (IN = wG + 2, JN = HEAP16[wG >> 1], GJ = PH << 16 >> 16 == JN << 16 >> 16, SH = GJ & 1, kH = xG + 1, HEAP8[xG] = SH, NL = ML + 1, YI = (NL | 0) < (up | 0)) ML = NL, wG = IN, xG = kH;
                                                else break
                                        }
                                        break;
                                    case 19:
                                        if (lK = 1 == (b | 0)) {
                                            ZI = 0 < (c | 0);
                                            if (!ZI) break b;
                                            SM =
                                                0 == (ux | 0);
                                            ZE = 0;
                                            OL = gx;
                                            TH = By;
                                            for (PL = h;;) {
                                                c: do
                                                    if (SM) qI = i;
                                                    else
                                                        for (aC = 0;;) {
                                                            KN = TH + (aC << 1);
                                                            eD = HEAP16[KN >> 1];
                                                            QL = OL + (aC << 1);
                                                            $I = HEAP16[QL >> 1];
                                                            mK = eD << 16 >> 16 == $I << 16 >> 16;
                                                            WK = aC + 1;
                                                            if (!mK) {
                                                                qI = j;
                                                                break c
                                                            }
                                                            if (XK = (WK | 0) < (ux | 0)) aC = WK;
                                                            else {
                                                                qI = i;
                                                                break
                                                            }
                                                        }
                                                    while (0);OF = PL + 1;HEAP8[PL] = qI;pE = TH + (ux << 1);PQ = OL + (ux << 1);LN = ZE + 1;
                                                if (RL = (LN | 0) < (c | 0)) ZE = LN,
                                                OL = PQ,
                                                TH = pE,
                                                PL = OF;
                                                else break b
                                            }
                                        }
                                        qE = (f | 0) < (d | 0);
                                        lH = 0 < (c | 0);
                                        if (qE) {
                                            if (!lH) break b;
                                            HJ = 0 < (b | 0);
                                            aJ = 0 == (ux | 0);
                                            TM = Math_imul(ux, b) | 0;
                                            yG = 0;
                                            rI = gx;
                                            bJ = By;
                                            for (cJ = h;;) {
                                                if (HJ) {
                                                    nK = rI;
                                                    YK = 0;
                                                    for (zG =
                                                        cJ;;) {
                                                        c: do
                                                            if (aJ) sI = i;
                                                            else
                                                                for (AG = 0;;) {
                                                                    dJ = bJ + (AG << 1);
                                                                    MN = HEAP16[dJ >> 1];
                                                                    SL = nK + (AG << 1);
                                                                    TL = HEAP16[SL >> 1];
                                                                    IJ = MN << 16 >> 16 == TL << 16 >> 16;
                                                                    tI = AG + 1;
                                                                    if (!IJ) {
                                                                        sI = j;
                                                                        break c
                                                                    }
                                                                    if (JJ = (tI | 0) < (ux | 0)) AG = tI;
                                                                    else {
                                                                        sI = i;
                                                                        break
                                                                    }
                                                                }
                                                            while (0);UL = zG + 1;HEAP8[zG] = sI;UM = nK + (ux << 1);VL = YK + 1;
                                                        if (eJ = (VL | 0) < (b | 0)) nK = UM,
                                                        YK = VL,
                                                        zG = UL;
                                                        else break
                                                    }
                                                    BG = rI + (TM << 1);
                                                    Hx = cJ + b;
                                                    mH = BG;
                                                    uI = Hx
                                                } else mH = rI, uI = cJ;
                                                ZK = bJ + (ux << 1);
                                                VM = yG + 1;
                                                if (WL = (VM | 0) < (c | 0)) yG = VM, rI = mH, bJ = ZK, cJ = uI;
                                                else break
                                            }
                                        } else {
                                            if (!lH) break b;
                                            CG = 0 < (b | 0);
                                            UH = 0 == (ux | 0);
                                            NN = Math_imul(ux, b) | 0;
                                            $K = gx;
                                            aL =
                                                By;
                                            WM = 0;
                                            for (KJ = h;;) {
                                                if (CG) {
                                                    oK = aL;
                                                    VH = 0;
                                                    for (DG = KJ;;) {
                                                        c: do
                                                            if (UH) LA = i;
                                                            else
                                                                for (vI = 0;;) {
                                                                    fD = oK + (vI << 1);
                                                                    $E = HEAP16[fD >> 1];
                                                                    XL = $K + (vI << 1);
                                                                    bL = HEAP16[XL >> 1];
                                                                    PF = $E << 16 >> 16 == bL << 16 >> 16;
                                                                    cL = vI + 1;
                                                                    if (!PF) {
                                                                        LA = j;
                                                                        break c
                                                                    }
                                                                    if (wI = (cL | 0) < (ux | 0)) vI = cL;
                                                                    else {
                                                                        LA = i;
                                                                        break
                                                                    }
                                                                }
                                                            while (0);xI = DG + 1;HEAP8[DG] = LA;nH = oK + (ux << 1);bC = VH + 1;
                                                        if (aF = (bC | 0) < (b | 0)) oK = nH,
                                                        VH = bC,
                                                        DG = xI;
                                                        else break
                                                    }
                                                    LJ = aL + (NN << 1);
                                                    fJ = KJ + b;
                                                    QF = LJ;
                                                    pK = fJ
                                                } else QF = aL, pK = KJ;
                                                TO = $K + (ux << 1);
                                                XM = WM + 1;
                                                if (ON = (XM | 0) < (c | 0)) $K = TO, aL = QF, WM = XM, KJ = pK;
                                                else break
                                            }
                                        }
                                        break;
                                    case 11:
                                        MJ = 0 == i << 24 >> 24;
                                        dL = 1 == (b | 0);
                                        if (MJ) {
                                            if (dL) {
                                                if (yI = 0 < (c | 0)) UO = 0, qK = gx, QQ = By, NJ = h;
                                                else break b;
                                                for (;;)
                                                    if (RQ = QQ + 2, sS = HEAP16[QQ >> 1], eL = qK + 2, fL = HEAP16[qK >> 1], rK = sS << 16 >> 16 != fL << 16 >> 16, YM = rK & 1, gL = NJ + 1, HEAP8[NJ] = YM, gJ = UO + 1, YL = (gJ | 0) < (c | 0)) UO = gJ, qK = eL, QQ = RQ, NJ = gL;
                                                    else break b
                                            }
                                            hL = (f | 0) < (d | 0);
                                            tS = 0 < (c | 0);
                                            if (hL) {
                                                if (!tS) break b;
                                                uS = 0 < (b | 0);
                                                sK = 0;
                                                OJ = gx;
                                                xB = By;
                                                for (RF = h;;) {
                                                    oH = xB + 2;
                                                    hJ = HEAP16[xB >> 1];
                                                    if (uS) {
                                                        EG = 0;
                                                        FG = OJ;
                                                        for (zI = RF;;)
                                                            if (iJ = FG + 2, iL = HEAP16[FG >> 1], DC = hJ << 16 >> 16 != iL << 16 >> 16, jL = DC & 1, tK = zI + 1, HEAP8[zI] = jL, kL = EG + 1, lL = (kL | 0) < (b | 0)) EG =
                                                                kL, FG = iJ, zI = tK;
                                                            else break;
                                                        mL = RF + b;
                                                        PN = SQ = OJ + (b << 1);
                                                        jJ = mL
                                                    } else PN = OJ, jJ = RF;
                                                    ZL = sK + 1;
                                                    if (TQ = (ZL | 0) < (c | 0)) sK = ZL, OJ = PN, xB = oH, RF = jJ;
                                                    else break
                                                }
                                            } else {
                                                if (!tS) break b;
                                                ZM = 0 < (b | 0);
                                                rE = 0;
                                                pH = gx;
                                                HD = By;
                                                for (bF = h;;) {
                                                    sE = pH + 2;
                                                    tE = HEAP16[pH >> 1];
                                                    if (ZM) {
                                                        EC = 0;
                                                        yB = HD;
                                                        for (uE = bF;;)
                                                            if (vS = yB + 2, kJ = HEAP16[yB >> 1], $M = kJ << 16 >> 16 != tE << 16 >> 16, nL = $M & 1, vE = uE + 1, HEAP8[uE] = nL, wE = EC + 1, $L = (wE | 0) < (b | 0)) EC = wE, yB = vS, uE = vE;
                                                            else break;
                                                        PJ = bF + b;
                                                        oL = aN = HD + (b << 1);
                                                        uK = PJ
                                                    } else oL = HD, uK = bF;
                                                    bN = rE + 1;
                                                    if (QJ = (bN | 0) < (c | 0)) rE = bN, pH = sE, HD = oL, bF = uK;
                                                    else break
                                                }
                                            }
                                        } else {
                                            if (dL) {
                                                if (SF =
                                                    0 < (c | 0)) aM = 0, QN = gx, CU = By, bM = h;
                                                else break b;
                                                for (;;)
                                                    if (pL = CU + 2, RN = HEAP16[CU >> 1], cM = QN + 2, NP = HEAP16[QN >> 1], cN = RN << 16 >> 16 == NP << 16 >> 16, dM = cN & 1, SN = bM + 1, HEAP8[bM] = dM, qL = aM + 1, eM = (qL | 0) < (c | 0)) aM = qL, QN = cM, CU = pL, bM = SN;
                                                    else break b
                                            }
                                            OP = (f | 0) < (d | 0);
                                            RJ = 0 < (c | 0);
                                            if (OP) {
                                                if (!RJ) break b;
                                                PP = 0 < (b | 0);
                                                qH = 0;
                                                GG = gx;
                                                cF = By;
                                                for (lJ = h;;) {
                                                    rL = cF + 2;
                                                    wS = HEAP16[cF >> 1];
                                                    if (PP) {
                                                        pz = 0;
                                                        UQ = GG;
                                                        for (SJ = lJ;;)
                                                            if (TN = UQ + 2, UN = HEAP16[UQ >> 1], fM = wS << 16 >> 16 == UN << 16 >> 16, Gz = fM & 1, TJ = SJ + 1, HEAP8[SJ] = Gz, ID = pz + 1, sL = (ID | 0) < (b | 0)) pz = ID, UQ = TN, SJ = TJ;
                                                            else break;
                                                        gM =
                                                            lJ + b;
                                                        VO = QP = GG + (b << 1);
                                                        VQ = gM
                                                    } else VO = GG, VQ = lJ;
                                                    hM = qH + 1;
                                                    if (WQ = (hM | 0) < (c | 0)) qH = hM, GG = VO, cF = rL, lJ = VQ;
                                                    else break
                                                }
                                            } else {
                                                if (!RJ) break b;
                                                gD = 0 < (b | 0);
                                                tL = 0;
                                                iM = gx;
                                                RP = By;
                                                for (mJ = h;;) {
                                                    VN = iM + 2;
                                                    SP = HEAP16[iM >> 1];
                                                    if (gD) {
                                                        dN = 0;
                                                        uL = RP;
                                                        for (WN = mJ;;)
                                                            if (WH = uL + 2, dF = HEAP16[uL >> 1], JD = dF << 16 >> 16 == SP << 16 >> 16, xS = JD & 1, nJ = WN + 1, HEAP8[WN] = xS, vK = dN + 1, jM = (vK | 0) < (b | 0)) dN = vK, uL = WH, WN = nJ;
                                                            else break;
                                                        oJ = mJ + b;
                                                        XQ = eF = RP + (b << 1);
                                                        wK = oJ
                                                    } else XQ = RP, wK = mJ;
                                                    XN = tL + 1;
                                                    if (xu = (XN | 0) < (c | 0)) tL = XN, iM = VN, RP = XQ, mJ = wK;
                                                    else break
                                                }
                                            }
                                        }
                                        break;
                                    case 18:
                                        TF = 0 < (up | 0);
                                        if (!TF) break b;
                                        Ov = 0 == (ux | 0);
                                        ps = 0;
                                        TP = By;
                                        for (UP = h;;) {
                                            c: do
                                                if (Ov) yS = i;
                                                else
                                                    for (kM = 0;;) {
                                                        eN = TP + (kM << 1);
                                                        xK = HEAP16[eN >> 1];
                                                        fN = gx + (kM << 1);
                                                        WO = HEAP16[fN >> 1];
                                                        VP = xK << 16 >> 16 == WO << 16 >> 16;
                                                        DU = kM + 1;
                                                        if (!VP) {
                                                            yS = j;
                                                            break c
                                                        }
                                                        if (aX = (DU | 0) < (ux | 0)) kM = DU;
                                                        else {
                                                            yS = i;
                                                            break
                                                        }
                                                    }
                                                while (0);YN = UP + 1;HEAP8[UP] = yS;p_ = TP + (ux << 1);q_ = ps + 1;
                                            if (zS = (q_ | 0) < (up | 0)) ps = q_,
                                            TP = p_,
                                            UP = YN;
                                            else break
                                        }
                                        break;
                                    default:
                                        break b
                                }
                            }
                            while (0);
                        if (r_ = 0 == (up | 0)) return B = i, STACKTOP = k, B;
                        vL = up - 1;
                        HG = h + vL;
                        B = YQ = HEAP8[HG];
                        STACKTOP = k;
                        return B
                }
            }
        } else l = 16;
    while (0);
    16 == l && (pa = oa = HEAP8[r] = 1);
    _memset(h,
        oa ? j : i, v) | 0;
    B = 0 != pa << 24 >> 24 ? j : i;
    STACKTOP = k;
    return B
}


function _jtshowerr(a) {
    var f, d, c, b, e, g, h, j, i, l, k, m;
    f = STACKTOP;
    STACKTOP = STACKTOP + 4032 | 0;
    d = f + 24;
    c = a + 4400;
    b = HEAP32[c >> 2];
    do
        if (0 != (b | 0) && 0 != (HEAP8[a + 205709] | 0)) {
            e = b + (a + 2396);
            if (0 < (b | 0)) {
                g = a + 205288;
                h = a + 2396;
                for (j = d;;)
                    if (i = HEAP8[h], 10 == i << 24 >> 24 ? (_strcpy(j, g), j += _strlen(g)) : (HEAP8[j] = i, j += 1), i = h + 1, i >>> 0 < e >>> 0) h = i;
                    else {
                        l = j;
                        break
                    }
            } else l = d;
            HEAP8[l] = 0;
            j = f;
            if (0 == (HEAP32[a + 204976 >> 2] | 0)) {
                if (h = HEAP32[a + 205628 >> 2], 0 != (h | 0)) getFUNCTION_TABLE(h)(a, 2, d)
            } else _memcpy(j, 113016, 24) | 0, HEAP8[j] = 50, HEAP32[a + 204972 >> 2] = d,
                h = a + 204545, e = HEAP8[h], g = HEAP32[c >> 2], HEAP8[h] = 0, HEAP32[c >> 2] = 0, i = a + 1040, HEAP8[i] = 1, k = _strlen(j), m = _jtga(a, 2, k, 1, 0), 0 == (m | 0) ? j = 0 : (_memcpy(m + HEAP32[m >> 2], j, k) | 0, j = m), _jtexec1(a, j), HEAP8[i] = 0, HEAP8[h] = e, HEAP32[c >> 2] = g
        }
    while (0);
    HEAP32[c >> 2] = 0;
    STACKTOP = f
}

function _jtmaxtype(a, f, d) {
    var c;
    c = d | f;
    if (0 == (c & 64512 | 0)) return 0 != (c & 16 | 0) ? 16 : 0 != (c & 8 | 0) ? 8 : (f | 0) < (d | 0) ? d : f;
    if (0 == (f | 0)) c = 0;
    else if (0 != (f & 64512 | 0)) c = f;
    else if (0 != (f & 1 | 0)) c = 1024;
    else if (0 != (f & 4 | 0)) c = 4096;
    else if (0 != (f & 8 | 0)) c = 8192;
    else if (0 != (f & 16 | 0)) c = 16384;
    else if (0 != (f & 2 | 0)) c = 2048;
    else if (c = f << 10 & 32768, 0 == (c | 0)) return c = HEAP32[a + 4408 >> 2], f = HEAP32[c + (HEAP32[c >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), 0;
    if (0 == (d | 0)) a = 0;
    else if (0 != (d & 64512 | 0)) a = d;
    else if (0 != (d & 1 | 0)) a = 1024;
    else if (0 !=
        (d & 4 | 0)) a = 4096;
    else if (0 != (d & 8 | 0)) a = 8192;
    else if (0 != (d & 16 | 0)) a = 16384;
    else if (0 != (d & 2 | 0)) a = 2048;
    else if (f = d << 10 & 32768, 0 != (f | 0)) a = f;
    else return f = HEAP32[a + 4408 >> 2], f = HEAP32[f + (HEAP32[f >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]), 0;
    return (c | 0) < (a | 0) ? a : c
}

function _jtwri(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m;
    e = STACKTOP;
    STACKTOP = STACKTOP + 1048 | 0;
    h = g = e + 24;
    j = a + 205288;
    if (0 != (HEAP8[a + 205709] | 0))
        if (i = _strlen(d), l = _strlen(j), k = 1023 - i - l, c = (m = (k | 0) < (c | 0)) ? k - 3 : c, _memcpy(h, d, i) | 0, _memcpy(g + i, b, c) | 0, b = c + i, i = g + b, m ? (HEAP8[i] = HEAP8[119360], HEAP8[i + 1 | 0] = HEAP8[119361], HEAP8[i + 2 | 0] = HEAP8[119362], d = b + (g + 3)) : d = i, _memcpy(d, j, l) | 0, HEAP8[d + l] = 0, l = e, 0 == (HEAP32[a + 204976 >> 2] | 0)) {
            if (d = HEAP32[a + 205628 >> 2], 0 != (d | 0)) getFUNCTION_TABLE(d)(a, f, h)
        } else _memcpy(l, 113016, 24) | 0, HEAP8[l] = f + 48, HEAP32[a +
            204972 >> 2] = h, h = a + 204545, f = HEAP8[h], d = a + 4400, j = HEAP32[d >> 2], HEAP8[h] = 0, HEAP32[d >> 2] = 0, i = a + 1040, HEAP8[i] = 1, g = _strlen(l), b = _jtga(a, 2, g, 1, 0), 0 == (b | 0) ? b = 0 : _memcpy(b + HEAP32[b >> 2], l, g) | 0, _jtexec1(a, b), HEAP8[i] = 0, HEAP8[h] = f, HEAP32[d >> 2] = j;
    STACKTOP = e
}

function _jtbox(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t;
    d = 0;
    if (0 == (f | 0)) return 0;
    b = f + 12;
    if (0 != (HEAP32[b >> 2] & 64512 | 0)) return e = HEAP32[a + 4408 >> 2], g = HEAP32[e + (HEAP32[e >> 2] + 44) >> 2], _jtjsigstr(a, 11, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), 0;
    g = f + 28;
    e = HEAP32[f + 24 >> 2];
    h = HEAP32[a + 205336 >> 2];
    j = 0 == (h | 0) ? e : HEAP32[h + 4 >> 2];
    h = e - j;
    do
        if (0 < (h | 0)) {
            i = 1;
            for (l = 0;;)
                if (k = i * (HEAP32[f + 28 + (l << 2) >> 2] | 0), m = l + 1, (m | 0) < (h | 0)) i = k, l = m;
                else break;
            2147483647 >= k ? (n = k, d = 10) : (l = HEAP32[a + 4408 >> 2], i = HEAP32[l + (HEAP32[l >> 2] + 40) >> 2], _jtjsigstr(a,
                10, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), p = 0)
        } else n = 1, d = 10;
    while (0);
    10 == d && (p = n & -1);
    n = a + 204545;
    if (0 != (HEAP8[n] | 0)) return 0;
    a: do
        if (0 == (p | 0)) {
            do
                if (0 < (j | 0)) {
                    k = 1;
                    for (i = 0;;)
                        if (q = k * (HEAP32[f + 28 + (h + i << 2) >> 2] | 0), l = i + 1, (l | 0) < (j | 0)) k = q, i = l;
                        else break;
                    if (2147483647 >= q) r = q;
                    else {
                        i = HEAP32[a + 4408 >> 2];
                        k = HEAP32[i + (HEAP32[i >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[k + 20 >> 2], k + HEAP32[k >> 2]);
                        if (0 == (HEAP8[n] | 0)) {
                            s = 0;
                            break a
                        } else c = 0;
                        return c
                    }
                } else r = 1;
            while (0);
            s = r & -1
        } else s = (HEAP32[f + 20 >> 2] | 0) / (p | 0) & -1;
    while (0);
    r = HEAP32[b >> 2];
    r = Math_imul(2 == (r | 0) | 2097152 == (r | 0) | 33554432 == (r | 0) ? 1 : 32 == (r | 0) ? 4 : 128 == (r | 0) ? 8 : 262144 == (r | 0) | 524288 == (r | 0) | 1048576 == (r | 0) ? 44 : 536870912 == (r | 0) ? 24 : 65536 == (r | 0) ? 4 : 1024 == (r | 0) | 4096 == (r | 0) | 8192 == (r | 0) | 16384 == (r | 0) | 2048 == (r | 0) | 32768 == (r | 0) ? 16 : 16777216 == (r | 0) ? 12 : 131072 == (r | 0) ? 2 : 64 == (r | 0) ? 4 : 1 == (r | 0) | 8 == (r | 0) | 16 == (r | 0) ? r : 4 == (r | 0) | 67108864 == (r | 0) | 134217728 == (r | 0) | 4194304 == (r | 0) | 8388608 == (r | 0) ? 4 : 268435456 == (r | 0) ? 12 : -1, s) | 0;
    t = f + HEAP32[f >> 2];
    n = _jtga(a, 32, p, h, g);
    if (0 == (n | 0)) return 0;
    g = n + HEAP32[n >> 2];
    if ((e | 0) ==
        (j | 0)) return e = _jttpush(a, f), 0 == (e | 0) ? c = HEAP32[g >> 2] = 0 : (_jttraverse(a, e, 654), q = e + 16, HEAP32[q >> 2] += 1, HEAP32[g >> 2] = e, c = n), c;
    e = _jtga(a, HEAP32[b >> 2], s, j, f + 28 + (h << 2));
    if (0 == (e | 0)) return 0;
    h = e + HEAP32[e >> 2];
    do
        if (0 != (HEAP32[b >> 2] & 32 | 0) && 0 != (HEAP32[f + 4 >> 2] & 14 | 0)) {
            j = h;
            if (0 >= (p | 0)) return c = n;
            q = f;
            if (0 >= (s | 0)) {
                for (k = 0;;) {
                    i = _jtca(a, e);
                    HEAP32[g + (k << 2) >> 2] = i;
                    l = k + 1;
                    if (0 == (i | 0)) {
                        c = 0;
                        d = 53;
                        break
                    }
                    if ((l | 0) < (p | 0)) k = l;
                    else {
                        c = n;
                        d = 53;
                        break
                    }
                }
                if (53 == d) return c
            }
            k = t;
            for (l = 0;;) {
                i = k;
                for (m = 0;;)
                    if (HEAP32[j + (m << 2) >> 2] = HEAP32[i >> 2] +
                        q, m += 1, (m | 0) < (s | 0)) i += 4;
                    else break;
                m = _jtca(a, e);
                HEAP32[g + (l << 2) >> 2] = m;
                i = l + 1;
                if (0 == (m | 0)) {
                    c = 0;
                    d = 53;
                    break
                }
                if ((i | 0) < (p | 0)) k += s << 2, l = i;
                else {
                    c = n;
                    d = 53;
                    break
                }
            }
            if (53 == d) return c
        }
    while (0);
    if (0 < (p | 0)) b = t, j = 0;
    else return n;
    for (;;) {
        _memcpy(h, b, r) | 0;
        t = _jtca(a, e);
        HEAP32[g + (j << 2) >> 2] = t;
        if (0 == (t | 0)) {
            c = 0;
            d = 53;
            break
        }
        t = j + 1;
        if ((t | 0) < (p | 0)) b += r, j = t;
        else {
            c = n;
            d = 53;
            break
        }
    }
    if (53 == d) return c
}


function _jtvlocnl(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r;
    if (0 == (d | 0)) return 0;
    b = HEAP32[d + 20 >> 2];
    e = HEAP32[d + 12 >> 2] & 32;
    if (0 == (b | 0)) {
        if (0 == (e | 0)) return d;
        g = d + HEAP32[d >> 2];
        h = d
    } else if (0 != (e | 0)) g = d + HEAP32[d >> 2], h = d;
    else return h = HEAP32[a + 4408 >> 2], j = HEAP32[h + (HEAP32[h >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j + 20 >> 2], j + HEAP32[j >> 2]), 0;
    e = h & -(0 != (HEAP32[d + 4 >> 2] & 14 | 0) | 0);
    if (0 >= (b | 0)) return d;
    h = 0 == f << 24 >> 24;
    a: do {
        if (0 == (e | 0)) {
            if (h) {
                for (f = 0;;) {
                    j = HEAP32[g + (f << 2) >> 2];
                    if (2 <= (HEAP32[j + 24 >> 2] | 0)) {
                        f = 34;
                        break a
                    }
                    if (0 == (HEAP32[j +
                            20 >> 2] | 0)) {
                        f = 36;
                        break a
                    }
                    if (0 == (HEAP32[j + 12 >> 2] & 2 | 0)) {
                        f = 38;
                        break a
                    }
                    j = f + 1;
                    if ((j | 0) < (b | 0)) f = j;
                    else {
                        c = d;
                        break
                    }
                }
                return c
            }
            for (e = 0;;) {
                f = HEAP32[g + (e << 2) >> 2];
                j = HEAP32[f + 20 >> 2];
                h = f;
                i = HEAP32[f >> 2];
                l = h + i;
                if (2 <= (HEAP32[f + 24 >> 2] | 0)) {
                    f = 34;
                    break a
                }
                if (0 == (j | 0)) {
                    f = 36;
                    break a
                }
                if (0 == (HEAP32[f + 12 >> 2] & 2 | 0)) {
                    f = 38;
                    break a
                }
                if (f = 0 < (j | 0))
                    for (k = 0;;) {
                        m = HEAP8[h + (i + k)];
                        if (95 == m << 24 >> 24) {
                            n = j;
                            p = l;
                            f = 49;
                            break a
                        }
                        m = HEAP8[113216 + (m << 24 >> 24)];
                        if (!(2 == m << 24 >> 24 | 5 == m << 24 >> 24)) {
                            n = j;
                            p = l;
                            f = 49;
                            break a
                        }
                        m = k + 1;
                        if ((m | 0) < (j | 0)) k = m;
                        else break
                    }
                k = HEAP8[l];
                b: do
                    if (5 == (HEAP8[113216 + (k << 24 >> 24)] | 0)) {
                        m = 1 != (j | 0) & 48 == k << 24 >> 24;
                        if (m | f ^ 1)
                            if (m) {
                                n = j;
                                p = l;
                                f = 49;
                                break a
                            } else break;
                        else q = 1, m = k;
                        for (;;) {
                            if (10 <= (m - 48 & 255)) {
                                n = j;
                                p = l;
                                f = 49;
                                break a
                            }
                            if ((q | 0) >= (j | 0)) break b;
                            m = HEAP8[h + (i + q)];
                            q += 1
                        }
                    }
                while (0);
                i = e + 1;
                if ((i | 0) < (b | 0)) e = i;
                else {
                    c = d;
                    break
                }
            }
        } else {
            if (h) {
                for (i = 0;;) {
                    h = HEAP32[g + (i << 2) >> 2] + e;
                    if (2 <= (HEAP32[h + 24 >> 2] | 0)) {
                        f = 34;
                        break a
                    }
                    if (0 == (HEAP32[h + 20 >> 2] | 0)) {
                        f = 36;
                        break a
                    }
                    if (0 == (HEAP32[h + 12 >> 2] & 2 | 0)) {
                        f = 38;
                        break a
                    }
                    h = i + 1;
                    if ((h | 0) < (b | 0)) i = h;
                    else {
                        c = d;
                        break
                    }
                }
                return c
            }
            for (q = 0;;) {
                h =
                    i = HEAP32[g + (q << 2) >> 2] + e;
                j = HEAP32[h + 20 >> 2];
                l = i;
                i = HEAP32[h >> 2];
                k = l + i;
                if (2 <= (HEAP32[h + 24 >> 2] | 0)) {
                    f = 34;
                    break a
                }
                if (0 == (j | 0)) {
                    f = 36;
                    break a
                }
                if (0 == (HEAP32[h + 12 >> 2] & 2 | 0)) {
                    f = 38;
                    break a
                }
                if (h = 0 < (j | 0))
                    for (f = 0;;) {
                        m = HEAP8[l + (i + f)];
                        if (95 == m << 24 >> 24) {
                            n = j;
                            p = k;
                            f = 49;
                            break a
                        }
                        m = HEAP8[113216 + (m << 24 >> 24)];
                        if (!(2 == m << 24 >> 24 | 5 == m << 24 >> 24)) {
                            n = j;
                            p = k;
                            f = 49;
                            break a
                        }
                        m = f + 1;
                        if ((m | 0) < (j | 0)) f = m;
                        else break
                    }
                f = HEAP8[k];
                b: do
                    if (5 == (HEAP8[113216 + (f << 24 >> 24)] | 0)) {
                        m = 1 != (j | 0) & 48 == f << 24 >> 24;
                        if (m | h ^ 1)
                            if (m) {
                                n = j;
                                p = k;
                                f = 49;
                                break a
                            } else break;
                        else r =
                            1, m = f;
                        for (;;) {
                            if (10 <= (m - 48 & 255)) {
                                n = j;
                                p = k;
                                f = 49;
                                break a
                            }
                            if ((r | 0) >= (j | 0)) break b;
                            m = HEAP8[l + (i + r)];
                            r += 1
                        }
                    }
                while (0);
                i = q + 1;
                if ((i | 0) < (b | 0)) q = i;
                else {
                    c = d;
                    break
                }
            }
        }
        return c
    } while (0);
    if (34 == f) return d = HEAP32[a + 4408 >> 2], q = HEAP32[d + (HEAP32[d >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), 0;
    if (36 == f) return q = HEAP32[a + 4408 >> 2], d = HEAP32[q + (HEAP32[q >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), 0;
    if (38 == f) return d = HEAP32[a + 4408 >> 2], q = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[q + 20 >>
        2], q + HEAP32[q >> 2]), 0;
    if (49 == f) return HEAP32[a + 1168 >> 2] = _jtnfs(a, n, p), p = HEAP32[a + 4408 >> 2], n = HEAP32[p + (HEAP32[p >> 2] + 16) >> 2], _jtjsigstr(a, 4, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), 0
}

function _jtvar(a, f, d, c, b, e, g, h) {
    var j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb;
    j = a + 204545;
    i = HEAP8[j];
    if (0 != i << 24 >> 24) {
        l = i << 24 >> 24;
        k = 70 * l & -1;
        m = f << 24 >> 24;
        n = k + m;
        switch (n | 0) {
            case 3545:
                HEAP32[g >>
                    2] = 2234;
                HEAP32[h >> 2] = 1026;
                break;
            case 3382:
                HEAP32[g >> 2] = 664;
                HEAP32[h >> 2] = 1026;
                break;
            case 3817:
                HEAP32[g >> 2] = 2912;
                HEAP32[h >> 2] = 1028;
                break;
            case 3804:
                HEAP32[g >> 2] = 1344;
                HEAP32[h >> 2] = 8224;
                break;
            case 3734:
                HEAP32[g >> 2] = 246;
                HEAP32[h >> 2] = 1028;
                break;
            case 3673:
                HEAP32[g >> 2] = 1390;
                HEAP32[h >> 2] = 1028;
                break;
            case 3624:
                HEAP32[g >> 2] = 962;
                HEAP32[h >> 2] = 1028;
                break;
            case 3542:
                HEAP32[g >> 2] = 894;
                HEAP32[h >> 2] = 1026;
                break;
            case 3664:
                HEAP32[g >> 2] = 158;
                HEAP32[h >> 2] = 67592;
                break;
            case 3380:
                HEAP32[g >> 2] = 880;
                HEAP32[h >> 2] = 1026;
                break;
            case 3543:
                HEAP32[g >>
                    2] = 3192;
                HEAP32[h >> 2] = 1026;
                break;
            case 3747:
                HEAP32[g >> 2] = 1718;
                HEAP32[h >> 2] = 8224;
                break;
            case 3525:
                HEAP32[g >> 2] = 1662;
                HEAP32[h >> 2] = 67592;
                break;
            default:
                return p = 0
        }
        HEAP8[j] = 0;
        q = a + 4400;
        HEAP32[q >> 2] = 0;
        return p = 1
    }
    if (r = 0 != (b & 805336541 | 0))
        if (s = e & 805336541, t = 0 == (s | 0), !t) {
            u = e | b;
            w = u & 805306560;
            v = 0 != (w | 0);
            x = u & 16;
            (y = 0 == (x | 0)) ? v ? (z = u & 536870912, (A = 0 == (z | 0)) ? (B = u & 268435456, (G = 0 == (B | 0)) ? (C = u & 8, (F = 0 == (C | 0)) ? (E = u >>> 7, J = E & 1, D = L = J | 10) : D = 8) : D = 12) : D = 13) : (I = b & 1, (H = 0 == (I | 0)) ? (K = b & 4, T = S = (N = 0 != (K | 0)) ? 3 : 6) : T = 0, V = e & 1, (Q = 0 == (V | 0)) ?
                (P = e >>> 2, M = P & 1, O = R = 2 - M) : O = 0, D = aa = O + T): D = 9;
            Z = f & 255;
            $ = Z + 56;
            ba = HEAP8[$];
            ka = ba & 255;
            ea = 808 + (272 * ka & -1) + (D << 3);
            ha = HEAP32[ea >> 2];
            da = 808 + (272 * ka & -1) + (D << 3) + 4;
            ga = HEAP32[da >> 2];
            HEAP32[g >> 2] = ha;
            HEAP32[h >> 2] = ga;
            U = v ^ 1;
            ca = u & 8;
            X = 0 == (ca | 0);
            if (Y = X | U) return p = 1;
            ja = ga & 8;
            fa = 0 == (ja | 0);
            if (!fa) return p = 1;
            ia = ga + 4;
            HEAP32[h >> 2] = ia;
            return p = 1
        }
    ra = (b | 0) == (e | 0);
    do
        if (ra) sa = 0;
        else {
            if (r && (ta = e & 805336541, wa = 0 == (ta | 0), !wa)) {
                sa = 0;
                break
            }
            za = b & 133122;
            (Ba = 0 == (za | 0)) ? sa = 1: (ua = e & 133122, ya = 0 == (ua | 0), sa = xa = ya & 1)
        }
    while (0);
    HEAP32[h >> 2] = 256;
    0 == (HEAP32[d + 12 >> 2] & 32 | 0) ? oa = 0 : (pa = d + 4, la = HEAP32[pa >> 2], qa = la & 14, Da = 0 != (qa | 0), oa = Aa = Da & 1);
    HEAP32[a + 205348 >> 2] = d & -oa;
    0 == (HEAP32[c + 12 >> 2] & 32 | 0) ? Ea = 0 : (Sa = c + 4, Oa = HEAP32[Sa >> 2], Ha = Oa & 14, Ga = 0 != (Ha | 0), Ea = Ma = Ga & 1);
    HEAP32[a + 205352 >> 2] = c & -Ea;
    Ia = f << 24 >> 24;
    if (-107 == (Ia | 0))(db = 0 == (sa | 0)) ? (W = b & 65536, (Xa = 0 == (W | 0)) ? (fb = b & 32, (mb = 0 == (fb | 0)) ? (ma = b & 2, ab = 0 == (ma | 0), Na = e & 2, $a = 0 != (Na | 0), Ta = ab ? Ua = $a ? 40 : 28 : Pa = $a ? 514 : 524) : Ta = 1332) : Ta = 1850) : Ta = 2584, HEAP32[g >> 2] = Ta, p = 1;
    else if (61 == (Ia | 0))(bb = 0 == (sa | 0)) ? (La = b & 65536, (Ja = 0 == (La |
        0)) ? (Ya = b & 32, (lb = 0 == (Ya | 0)) ? (Ca = b & 2, gb = 0 == (Ca | 0), Fa = e & 2, Za = 0 != (Fa | 0), Qa = gb ? qb = Za ? 2626 : 2642 : ib = Za ? 2236 : 2222) : Qa = 2718) : Qa = 906) : Qa = 2976, HEAP32[g >> 2] = Qa, p = 1;
    else {
        ub = b & 65536;
        eb = 0 == (ub | 0);
        if (!eb && (rb = e & 65536, wb = 0 == (rb | 0), !wb)) return Ka = f & 255, Va = Ka + 56, nb = HEAP8[Va], ob = nb & 255, cb = 904 + (272 * ob & -1), Wa = HEAP32[cb >> 2], (yb = 0 == (Wa | 0)) ? (Cb = a + 4408, Pb = HEAP32[Cb >> 2], zb = HEAP32[Pb >> 2], Zb = zb + 12, ac = Pb + Zb, Hb = HEAP32[ac >> 2], Ib = Hb + 20, Qb = HEAP32[Ib >> 2], Rb = HEAP32[Hb >> 2], Ob = Hb + Rb, _jtjsigstr(a, 3, Qb, Ob), p = 0) : (Bb = 908 + (272 * ob & -1), xb =
            HEAP32[Bb >> 2], HEAP32[g >> 2] = Wa, HEAP32[h >> 2] = xb, p = 1), p;
        dc = a + 4408;
        tb = HEAP32[dc >> 2];
        oc = HEAP32[tb >> 2];
        Mb = oc + 12;
        Tb = tb + Mb;
        Ra = HEAP32[Tb >> 2];
        Nb = Ra + 20;
        sb = HEAP32[Nb >> 2];
        Ab = HEAP32[Ra >> 2];
        Eb = Ra + Ab;
        _jtjsigstr(a, 3, sb, Eb);
        p = 0
    }
    return p
}

function _plusII(a, f, d, c, b, e, g) {
    var h, j, i, l, k, m;
    h = 0;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            j = 0;
            for (i = b;;) {
                c = HEAP32[e >> 2];
                b = c >>> 31;
                l = HEAP32[g >> 2] + c;
                HEAP32[i >> 2] = l;
                if ((b | 0) == (HEAP32[g >> 2] >>> 31 | 0) && (b | 0) != (l >>> 31 | 0)) break;
                l = j + 1;
                if ((l | 0) < (d | 0)) j = l, g += 4, e += 4, i += 4;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a + 204545] = 50)
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i)
            if (0 < (c | 0)) {
                i = b;
                k = e;
                m = 0;
                j = g;
                a: for (;;) {
                    f = j + 4;
                    e = HEAP32[j >> 2];
                    g = e >>> 31;
                    for (j = 0;;) {
                        l = k + (j << 2);
                        b = HEAP32[l >> 2] + e;
                        HEAP32[i + (j << 2) >> 2] = b;
                        if ((g | 0) == (HEAP32[l >> 2] >>> 31 | 0) && (g | 0) != (b >>>
                                31 | 0)) break a;
                        b = j + 1;
                        if ((b | 0) < (c | 0)) j = b;
                        else break
                    }
                    j = m + 1;
                    if ((j | 0) < (d | 0)) i += c << 2, k += c << 2, m = j, j = f;
                    else {
                        h = 26;
                        break
                    }
                }
                26 != h && (HEAP8[a + 204545] = 50)
            } else
                for (f = 0;;)
                    if (e = f + 1, (e | 0) < (d | 0)) f = e;
                    else break
    } else if (i)
        if (0 < (c | 0)) {
            f = b;
            k = 0;
            l = g;
            m = e;
            a: for (;;) {
                e = m + 4;
                g = HEAP32[m >> 2];
                b = g >>> 31;
                for (i = 0;;) {
                    j = l + (i << 2);
                    m = HEAP32[j >> 2] + g;
                    HEAP32[f + (i << 2) >> 2] = m;
                    if ((b | 0) == (HEAP32[j >> 2] >>> 31 | 0) && (b | 0) != (m >>> 31 | 0)) break a;
                    m = i + 1;
                    if ((m | 0) < (c | 0)) i = m;
                    else break
                }
                i = k + 1;
                if ((i | 0) < (d | 0)) f += c << 2, k = i, l += c << 2, m = e;
                else {
                    h = 26;
                    break
                }
            }
            26 != h && (HEAP8[a +
                204545] = 50)
        } else
            for (e = 0;;)
                if (g = e + 1, (g | 0) < (d | 0)) e = g;
                else break
}

function _plusBD(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAPF64[i >> 3] = (HEAP8[j] | 0) + HEAPF64[g >> 3], a = h + 1, (a | 0) < (d | 0)) h = a, g += 8, j += 1, i += 8;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 8;
                i = HEAPF64[j >> 3];
                if (f) {
                    l = a + (c << 3);
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAPF64[e >> 3] = i + (HEAP8[k] | 0), a = j + 1, (a | 0) < (c | 0)) k += 1, j = a, e += 8;
                        else break;
                    k = h + c
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g +
                1;
            if (i) {
                k = HEAP8[g] | 0;
                h = e + (c << 3);
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAPF64[f >> 3] = k + HEAPF64[j >> 3], e = g + 1, (e | 0) < (c | 0)) g = e, j += 8, f += 8;
                    else break;
                a += c << 3
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _jtboxs(a, f) {
    var d, c, b, e, g, h;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    if (2 <= (HEAP32[f + 24 >> 2] | 0)) return b = HEAP32[a + 4408 >> 2], e = HEAP32[b + (HEAP32[b >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[e + 20 >> 2], e + HEAP32[e >> 2]), STACKTOP = d, 0;
    0 == (HEAP32[f + 12 >> 2] & 2 | 0) ? (e = a + 205336, b = HEAP32[e >> 2], HEAP32[e >> 2] = 0, g = _jtccvt(a, 2, f, c), HEAP32[e >> 2] = b, 0 == g << 24 >> 24 ? (g = HEAP32[a + 4408 >> 2], b = HEAP32[g + (HEAP32[g >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[b + 20 >> 2], b + HEAP32[b >> 2]), h = 0) : h = HEAP32[c >> 2]) : h = f;
    if (0 == (h |
            0)) return STACKTOP = d, 0;
    if (11 != (HEAP32[h + 28 >> 2] | 0)) return f = HEAP32[a + 4408 >> 2], c = HEAP32[f + (HEAP32[f >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), STACKTOP = d, 0;
    c = a + 1052;
    f = HEAP32[c >> 2];
    _jttraverse(a, h, 654);
    b = h + 16;
    HEAP32[b >> 2] += 1;
    HEAP32[c >> 2] = h;
    HEAP32[a + 1048 >> 2] = h + HEAP32[h >> 2];
    0 != (f | 0) && (_jttraverse(a, f, 1910), h = f + 16, c = HEAP32[h >> 2] - 1, HEAP32[h >> 2] = c, 0 == (c | 0) && (c = f - 32 + 24, h = HEAP16[c + 4 >> 1], b = h << 16 >> 16, g = HEAP32[124360 + (b << 2) >> 2], e = a + 1056, HEAP32[e >> 2] -= g, 10 < h << 16 >> 16 ? _free(c) : (h = a + 204588 + (b << 2),
        HEAP32[c >> 2] = HEAP32[h >> 2], HEAP32[h >> 2] = c, c = a + 204712 + (b << 2), HEAP32[c >> 2] += g)));
    c = HEAP32[31086];
    STACKTOP = d;
    return c
}


function _jtca(a, f) {
    var d, c, b, e, g, h, j;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 12 >> 2];
    c = f + 20;
    b = _jtga(a, d, HEAP32[c >> 2], HEAP32[f + 24 >> 2], f + 28);
    if (0 == (b | 0)) return 0;
    0 != (HEAP32[f + 4 >> 2] & 14 | 0) && (HEAP32[b + 4 >> 2] = 8);
    if (0 == (d & 64512 | 0)) e = b + HEAP32[b >> 2], g = f + HEAP32[f >> 2], c = HEAP32[c >> 2], _memcpy(e, g, (Math_imul(268435456 == (d | 0) ? 12 : 16777216 == (d | 0) ? 12 : 2 == (d | 0) | 2097152 == (d | 0) | 33554432 == (d | 0) ? 1 : 4 == (d | 0) | 67108864 == (d | 0) | 134217728 == (d | 0) | 4194304 == (d | 0) | 8388608 == (d | 0) ? 4 : 64 == (d | 0) ? 4 : 536870912 == (d | 0) ? 24 : 1024 == (d | 0) | 4096 == (d | 0) | 8192 ==
        (d | 0) | 16384 == (d | 0) | 2048 == (d | 0) | 32768 == (d | 0) ? 16 : 128 == (d | 0) ? 8 : 131072 == (d | 0) ? 2 : 65536 == (d | 0) ? 4 : 1 == (d | 0) | 8 == (d | 0) | 16 == (d | 0) ? d : 32 == (d | 0) ? 4 : 262144 == (d | 0) | 524288 == (d | 0) | 1048576 == (d | 0) ? 44 : -1, c) | 0) + (d >>> 21 & 16)) | 0;
    else {
        c = f;
        g = HEAP32[f >> 2];
        e = b;
        d = HEAP32[b >> 2];
        h = e + d;
        j = _jtca(a, c + (HEAP32[c + g >> 2] + g)) - h;
        HEAP32[h >> 2] = j;
        if (0 == (e + (j + d) | 0)) return 0;
        j = _jtca(a, c + (HEAP32[g + (c + 4) >> 2] + g)) - h;
        HEAP32[d + (e + 4) >> 2] = j;
        if (0 == (e + (j + d) | 0)) return 0;
        j = _jtca(a, c + (HEAP32[g + (c + 8) >> 2] + g)) - h;
        HEAP32[d + (e + 8) >> 2] = j;
        if (0 == (e + (j + d) | 0)) return 0;
        j =
            _jtca(a, c + (HEAP32[g + (c + 12) >> 2] + g)) - h;
        HEAP32[d + (e + 12) >> 2] = j;
        if (0 == (e + (j + d) | 0)) return 0
    }
    return b
}

function _fillv(a, f, d) {
    var c, b, e, g, h, j, i, l;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    128 == (a | 0) ? (e = 8, c = 11) : 2 == (a | 0) | 2097152 == (a | 0) | 33554432 == (a | 0) ? (g = 1, c = 10) : 16777216 == (a | 0) ? (h = 12, c = 23) : 1 == (a | 0) | 8 == (a | 0) | 16 == (a | 0) ? (g = a, c = 10) : 262144 == (a | 0) | 524288 == (a | 0) | 1048576 == (a | 0) ? (g = 44, c = 10) : 4 == (a | 0) | 67108864 == (a | 0) | 134217728 == (a | 0) | 4194304 == (a | 0) | 8388608 == (a | 0) ? (g = 4, c = 10) : 536870912 == (a | 0) ? (j = 24, c = 17) : 131072 == (a | 0) ? (i = 2, c = 21) : 268435456 == (a | 0) ? (j = 12, c = 17) : 32 == (a | 0) ? (h = 4, c = 23) : 1024 == (a | 0) | 4096 == (a | 0) | 8192 == (a | 0) | 16384 ==
        (a | 0) | 2048 == (a | 0) | 32768 == (a | 0) ? (g = 16, c = 10) : 64 == (a | 0) ? (l = 4, c = 14) : 65536 == (a | 0) ? (j = 4, c = 17) : (g = -1, c = 10);
    if (10 == c)
        if (0 != (a & 128 | 0)) e = g, c = 11;
        else if (0 != (a & 64 | 0)) l = g, c = 14;
    else if (0 != (a & 805402077 | 0)) j = g, c = 17;
    else if (0 == (a & 2 | 0)) 0 == (a & 131072 | 0) ? (h = g, c = 23) : (i = g, c = 21);
    else {
        _memset(d, 32, f) | 0;
        STACKTOP = b;
        return
    }
    if (11 == c) {
        g = Math_imul(e, f) | 0;
        a = (e | 0) < (g | 0);
        _memcpy(d, 122568, a ? e : g) | 0;
        if (a)
            for (j = e;;)
                if (e = g - j, _memcpy(d + j, d, (j | 0) < (e | 0) ? j : e) | 0, e = j << 1, (e | 0) < (g | 0)) j = e;
                else break;
        STACKTOP = b
    } else if (14 == c) {
        j = Math_imul(l, f) | 0;
        g = (l | 0) < (j | 0);
        _memcpy(d, 122616, g ? l : j) | 0;
        if (g)
            for (c = l;;)
                if (l = j - c, _memcpy(d + c, d, (c | 0) < (l | 0) ? c : l) | 0, l = c << 1, (l | 0) < (j | 0)) c = l;
                else break;
        STACKTOP = b
    } else if (17 == c) _memset(d, 0, Math_imul(j, f) | 0) | 0, STACKTOP = b;
    else if (21 == c) {
        HEAP16[b >> 1] = 32;
        j = Math_imul(i, f) | 0;
        c = (i | 0) < (j | 0);
        _memcpy(d, b, c ? i : j) | 0;
        if (c)
            for (l = i;;)
                if (i = j - l, _memcpy(d + l, d, (l | 0) < (i | 0) ? l : i) | 0, i = l << 1, (i | 0) < (j | 0)) l = i;
                else break;
        STACKTOP = b
    } else if (23 == c) {
        c = Math_imul(h, f) | 0;
        f = (h | 0) < (c | 0);
        _memcpy(d, 124344, f ? h : c) | 0;
        if (f)
            for (j = h;;)
                if (h = c - j, _memcpy(d + j, d, (j |
                        0) < (h | 0) ? j : h) | 0, h = j << 1, (h | 0) < (c | 0)) j = h;
                else break;
        STACKTOP = b
    }
}

function _jtnameref(a, f) {
    var d, c, b, e, g;
    if (0 == (f | 0)) return 0;
    d = _jtsyrd(a, f, 0);
    c = HEAP32[(0 == (d | 0) ? 123868 : d + 4) >> 2];
    if (0 == (c | 0)) return 0;
    d = HEAP32[c + 12 >> 2];
    if (0 != (d & 805567999 | 0)) return c;
    b = c;
    e = HEAP32[c >> 2];
    c = HEAP32[e + (b + 24) >> 2];
    g = HEAP32[e + (b + 28) >> 2];
    e = HEAP32[e + (b + 32) >> 2];
    if (0 != (HEAP8[a + 204545] | 0)) return 0;
    b = _jtga(a, d, 1, 0, 0);
    if (0 == (b | 0)) return 0;
    d = b;
    a = HEAP32[b >> 2];
    HEAP32[d + a >> 2] = 1300;
    HEAP32[a + (d + 4) >> 2] = 3142;
    HEAP32[a + (d + 8) >> 2] = f;
    HEAP32[a + (d + 12) >> 2] = 0;
    HEAP32[a + (d + 16) >> 2] = 0;
    HEAP32[a + (d + 20) >> 2] = 0;
    HEAP32[a +
        (d + 24) >> 2] = c;
    HEAP32[a + (d + 28) >> 2] = g;
    HEAP32[a + (d + 32) >> 2] = e;
    HEAP32[a + (d + 36) >> 2] = 0;
    HEAP8[a + (d + 40)] = 126;
    return b
}
function _jtsyrd1(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y;
    b = 0;
    do
        if (0 != c << 24 >> 24 && (e = HEAP32[a + 204564 >> 2], !(0 == (e | 0) | 0 == (f | 0))))
            if (g = f, h = HEAP32[f >> 2], j = HEAP8[h + (g + 12)], i = j & 255, l = h + (g + 14), k = (HEAP32[g + h >> 2] >>> 0) % (HEAP32[e + 20 >> 2] >>> 0) & -1, m = HEAP32[e + HEAP32[e >> 2] + ((0 != (k | 0) ? k : 1) << 2) >> 2], 0 == (m | 0)) HEAP32[a + 1172 >> 2] = 0;
            else {
                k = HEAP32[a + 205688 >> 2];
                e = 0 == j << 24 >> 24;
                n = m;
                a: for (;;) {
                    p = k + (24 * n & -1);
                    q = m = HEAP32[p >> 2];
                    r = HEAP32[m >> 2];
                    b: do
                        if (j << 24 >> 24 == (HEAP8[r + (q + 12)] | 0)) {
                            if (e) break a;
                            m = i;
                            s = l;
                            for (t = r + (q + 14);;) {
                                if ((HEAP8[s] |
                                        0) != (HEAP8[t] | 0)) break b;
                                u = m - 1;
                                if (0 == (u | 0)) break a;
                                else m = u, s += 1, t += 1
                            }
                        }
                    while (0);
                    q = HEAP32[k + (24 * n & -1) + 16 >> 2];
                    if (0 == (q | 0)) {
                        b = 12;
                        break
                    } else n = q
                }
                if (12 == b) HEAP32[a + 1172 >> 2] = 0;
                else if (HEAP32[a + 1172 >> 2] = p, 0 != (p | 0)) return w = HEAP32[h + (g + 8) >> 2] = p
            }
    while (0);
    if (0 == (d | 0)) return 0;
    p = d + HEAP32[d >> 2];
    c = a + 205688;
    n = HEAP32[c >> 2];
    k = HEAP32[n + (24 * HEAP32[p >> 2] & -1) + 4 >> 2];
    if (0 == (k | 0)) return 0;
    l = 0 == (f | 0);
    do
        if (!l)
            if (i = f, e = HEAP32[f >> 2], j = HEAP8[e + (i + 12)], q = j & 255, r = e + (i + 14), t = (HEAP32[i + e >> 2] >>> 0) % (HEAP32[d + 20 >> 2] >>> 0) & -1, e = HEAP32[p +
                    ((0 != (t | 0) ? t : 1) << 2) >> 2], 0 == (e | 0)) HEAP32[a + 1172 >> 2] = 0;
            else {
                t = 0 == j << 24 >> 24;
                i = e;
                a: for (;;) {
                    v = n + (24 * i & -1);
                    s = e = HEAP32[v >> 2];
                    m = HEAP32[e >> 2];
                    b: do
                        if (j << 24 >> 24 == (HEAP8[m + (s + 12)] | 0)) {
                            if (t) break a;
                            e = q;
                            u = r;
                            for (x = m + (s + 14);;) {
                                if ((HEAP8[u] | 0) != (HEAP8[x] | 0)) break b;
                                g = e - 1;
                                if (0 == (g | 0)) break a;
                                else e = g, u += 1, x += 1
                            }
                        }
                    while (0);
                    s = HEAP32[n + (24 * i & -1) + 16 >> 2];
                    if (0 == (s | 0)) {
                        b = 27;
                        break
                    } else i = s
                }
                if (27 == b) HEAP32[a + 1172 >> 2] = 0;
                else if (HEAP32[a + 1172 >> 2] = v, 0 != (v | 0)) return w = v
            }
    while (0);
    v = k + HEAP32[k >> 2];
    n = HEAP32[k + 20 >> 2];
    if (0 >= (n | 0)) return 0;
    p = k = f;
    f = a + 1172;
    if (l) {
        for (l = 0;;)
            if (d = HEAP32[v + (l << 2) >> 2], _jtstfind(a, 1, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), d = l + 1, (d | 0) < (n | 0)) l = d;
            else {
                w = 0;
                break
            }
        return w
    }
    e = 0;
    a: for (;;) {
        l = HEAP32[v + (e << 2) >> 2];
        d = _jtstfind(a, 1, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
        do
            if (0 != (d | 0))
                if (l = HEAP32[p >> 2], i = HEAP8[l + (k + 12)], r = i & 255, q = l + (k + 14), t = (HEAP32[k + l >> 2] >>> 0) % (HEAP32[d + 20 >> 2] >>> 0) & -1, l = HEAP32[d + HEAP32[d >> 2] + ((0 != (t | 0) ? t : 1) << 2) >> 2], 0 == (l | 0)) HEAP32[f >> 2] = 0;
                else {
                    t = HEAP32[c >> 2];
                    j = 0 == i << 24 >> 24;
                    g = l;
                    b: for (;;) {
                        y = t + (24 * g & -1);
                        h = l = HEAP32[y >> 2];
                        s = HEAP32[l >> 2];
                        c: do
                            if (i << 24 >> 24 == (HEAP8[s + (h + 12)] | 0)) {
                                if (j) {
                                    b = 43;
                                    break b
                                }
                                l = r;
                                m = q;
                                for (x = s + (h + 14);;) {
                                    if ((HEAP8[m] | 0) != (HEAP8[x] | 0)) break c;
                                    u = l - 1;
                                    if (0 == (u | 0)) {
                                        b = 43;
                                        break b
                                    } else l = u, m += 1, x += 1
                                }
                            }
                        while (0);
                        h = HEAP32[t + (24 * g & -1) + 16 >> 2];
                        if (0 == (h | 0)) {
                            b = 42;
                            break
                        } else g = h
                    }
                    if (42 == b) b = 0, HEAP32[f >> 2] = 0;
                    else if (43 == b && (b = 0, HEAP32[f >> 2] = y, 0 != (y | 0))) {
                        w = y;
                        b = 45;
                        break a
                    }
                }
        while (0);
        d = e + 1;
        if ((d | 0) < (n | 0)) e = d;
        else {
            w = 0;
            b = 45;
            break
        }
    }
    if (45 == b) return w
}

function _jtcoerce2(a, f, d, c) {
    var b, e, g, h, j, i, l;
    b = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    e = b + 8;
    g = HEAP32[f >> 2];
    if (0 == (g | 0)) return STACKTOP = b, 0;
    h = HEAP32[d >> 2];
    if (0 == (h | 0)) return STACKTOP = b, 0;
    j = HEAP32[g + 12 >> 2];
    i = HEAP32[h + 12 >> 2];
    g = _jtmaxtype(a, 0 != (HEAP32[g + 20 >> 2] | 0) ? j : 0, 0 != (HEAP32[h + 20 >> 2] | 0) ? i : 0);
    h = a + 204545;
    if (0 != (HEAP8[h] | 0)) return STACKTOP = b, 0;
    g = _jtmaxtype(a, g, c);
    if (0 != (HEAP8[h] | 0)) return STACKTOP = b, 0;
    if (0 == (g | 0))
        if (c = _jtmaxtype(a, j, i), 0 == (HEAP8[h] | 0)) l = c;
        else return STACKTOP = b, 0;
    else l = g;
    if ((l | 0) != (j | 0)) {
        g =
            HEAP32[f >> 2];
        h = a + 205336;
        c = HEAP32[h >> 2];
        HEAP32[h >> 2] = 0;
        g = _jtccvt(a, l, g, e);
        HEAP32[h >> 2] = c;
        if (0 == g << 24 >> 24) return g = HEAP32[a + 4408 >> 2], c = HEAP32[g + (HEAP32[g >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[c + 20 >> 2], c + HEAP32[c >> 2]), HEAP32[f >> 2] = 0, STACKTOP = b, 0;
        c = HEAP32[e >> 2];
        HEAP32[f >> 2] = c;
        if (0 == (c | 0)) return STACKTOP = b, 0
    }
    if ((l | 0) != (i | 0)) {
        f = HEAP32[d >> 2];
        e = a + 205336;
        j = HEAP32[e >> 2];
        HEAP32[e >> 2] = 0;
        c = _jtccvt(a, l, f, b);
        HEAP32[e >> 2] = j;
        if (0 == c << 24 >> 24) return c = HEAP32[a + 4408 >> 2], j = HEAP32[c + (HEAP32[c >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[j +
            20 >> 2], j + HEAP32[j >> 2]), HEAP32[d >> 2] = 0, STACKTOP = b, 0;
        j = HEAP32[b >> 2];
        HEAP32[d >> 2] = j;
        if (0 == (j | 0)) return STACKTOP = b, 0
    }
    STACKTOP = b;
    return l
}

function _absI(a, f, d, c) {
    var b, e, g;
    b = 0;
    if (0 < (f | 0)) {
        e = 0;
        for (g = d;;) {
            d = HEAP32[c >> 2];
            if (!(-1 < (d | 0))) {
                if (-2147483648 == (d | 0)) break;
                d = -d
            }
            HEAP32[g >> 2] = d;
            d = e + 1;
            if ((d | 0) < (f | 0)) c += 4, e = d, g += 4;
            else {
                b = 7;
                break
            }
        }
        7 != b && (HEAP8[a + 204545] = 50)
    }
}


function _jtobverse(a, f, d) {
    var c, b, e, g, h;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 262144 | 0) && 0 != (HEAP32[d + 12 >> 2] & 262144 | 0)) {
        c = f;
        b = HEAP32[f >> 2];
        e = HEAP32[b + (c + 24) >> 2];
        g = HEAP32[b + (c + 28) >> 2];
        h = HEAP32[b + (c + 32) >> 2];
        if (0 != (HEAP8[a + 204545] | 0)) return 0;
        c = _jtga(a, 262144, 1, 0, 0);
        if (0 == (c | 0)) return 0;
        b = c;
        a = HEAP32[c >> 2];
        HEAP32[b + a >> 2] = 3266;
        HEAP32[a + (b + 4) >> 2] = 3264;
        HEAP32[a + (b + 8) >> 2] = f;
        HEAP32[a + (b + 12) >> 2] = d;
        HEAP32[a + (b + 16) >> 2] = 0;
        HEAP32[a + (b + 20) >> 2] = 0;
        HEAP32[a + (b + 24) >> 2] = e;
        HEAP32[a + (b + 28) >> 2] = g;
        HEAP32[a +
            (b + 32) >> 2] = h;
        HEAP32[a + (b + 36) >> 2] = 0;
        HEAP8[a + (b + 40)] = -102;
        return c
    }
    d = HEAP32[a + 4408 >> 2];
    f = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]);
    return 0
}

function _spellit(a, f) {
    var d, c, b, e;
    d = f + 2;
    HEAP8[d] = 0;
    c = f + 1;
    HEAP8[c] = 0;
    b = a << 24 >> 24; - 1 < a << 24 >> 24 ? HEAP8[f] = a : (e = _strchr(11326, b), 0 != (e | 0) ? (HEAP8[f] = HEAP8[11256 + (e - 11326)], HEAP8[c] = 46) : (e = _strchr(11396, b), 0 != (e | 0) ? (HEAP8[f] = HEAP8[11256 + (e - 11396)], HEAP8[c] = 58) : (e = _strchr(11472, b), 0 != (e | 0) ? (b = e - 11472, HEAP8[f] = HEAP8[b + 11477], HEAP8[c] = HEAP8[b + 11482], HEAP8[d] = HEAP8[b + 11487]) : -23 == a << 24 >> 24 ? HEAP8[f] = 125 : -16 == a << 24 >> 24 && (HEAP8[f] = 44))))
}


function _jtspella(a, f) {
    var d, c, b, e;
    d = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    c = d;
    if (0 == (f | 0)) return STACKTOP = d, 0;
    b = f;
    e = HEAP32[f >> 2];
    f = HEAP8[e + (b + 40)];
    if (-24 == f << 24 >> 24) return b = _jtthorn1(a, HEAP32[e + (b + 16) >> 2]), c = _jtover(a, b, HEAP32[38956]), STACKTOP = d, c;
    b = c;
    _spellit(f, b);
    e = 0 == (HEAP8[c + 2] | 0) ? 0 != (HEAP8[c + 1] | 0) ? 2 : 1 : 3;
    c = _jtga(a, 2, e, 1, 0);
    if (0 == (c | 0)) return STACKTOP = d, 0;
    _memcpy(c + HEAP32[c >> 2], b, e) | 0;
    STACKTOP = d;
    return c
}


function _jtadverse(a, f, d) {
    var c;
    if (0 == (f | 0) | 0 == (d | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 262144 | 0) && 0 != (HEAP32[d + 12 >> 2] & 262144 | 0)) {
        if (0 != (HEAP8[a + 204545] | 0)) return 0;
        a = _jtga(a, 262144, 1, 0, 0);
        if (0 == (a | 0)) return 0;
        c = HEAP32[a >> 2];
        HEAP32[a + c >> 2] = 2980;
        HEAP32[c + (a + 4) >> 2] = 2982;
        HEAP32[c + (a + 8) >> 2] = f;
        HEAP32[c + (a + 12) >> 2] = d;
        HEAP32[c + (a + 16) >> 2] = 0;
        HEAP32[c + (a + 20) >> 2] = 0;
        HEAP32[c + (a + 24) >> 2] = 2147483647;
        HEAP32[c + (a + 28) >> 2] = 2147483647;
        HEAP32[c + (a + 32) >> 2] = 2147483647;
        HEAP32[c + (a + 36) >> 2] = 0;
        HEAP8[c + (a + 40)] = -101;
        return a
    }
    d =
        HEAP32[a + 4408 >> 2];
    f = HEAP32[d + (HEAP32[d >> 2] + 12) >> 2];
    _jtjsigstr(a, 3, HEAP32[f + 20 >> 2], f + HEAP32[f >> 2]);
    return 0
}

function _leafrel(a) {
    var f, d, c, b, e;
    f = 0;
    if (0 == (HEAP32[a + 12 >> 2] & 32 | 0)) return 0;
    c = HEAP32[a + 4 >> 2];
    if (0 != (c & 2 | 0)) return 0;
    if (0 != (c & 12 | 0)) return 1;
    c = a + HEAP32[a >> 2];
    b = HEAP32[a + 20 >> 2];
    if (0 < (b | 0)) e = 0;
    else return 0;
    for (;;) {
        a = e + 1;
        if (0 != _leafrel(HEAP32[c + (e << 2) >> 2]) << 24 >> 24) {
            d = 1;
            f = 7;
            break
        }
        if ((a | 0) < (b | 0)) e = a;
        else {
            d = 0;
            f = 7;
            break
        }
    }
    if (7 == f) return d
}

function _jtfdep(a, f) {
    var d, c, b, e, g, h, j, i, l, k, m, n, p;
    if (0 == (f | 0)) return 0;
    d = f;
    c = HEAP32[f >> 2];
    f = c + (d + 36);
    b = HEAP32[f >> 2];
    if (0 != (b | 0)) return b;
    b = HEAP32[c + (d + 8) >> 2];
    do
        if (0 == (b | 0)) e = 0;
        else if (g = HEAP32[b + 12 >> 2], 0 != (g & 262144 | 0)) e = _jtfdep(a, b);
    else if (0 == (g & 805567999 | 0)) e = 0;
    else if (0 == (HEAP32[c + (d + 20) >> 2] & 256 | 0)) e = 0;
    else if (h = b + HEAP32[b >> 2], j = 0 == (g & 32 | 0) ? 0 : 0 != (HEAP32[b + 4 >> 2] & 14 | 0) | 0, g = b & -j, i = HEAP32[b + 20 >> 2], 0 >= (i | 0)) e = 0;
    else if (0 == (g | 0))
        for (k = l = 0;;)
            if (m = _jtfdep(a, _jtfx(a, HEAP32[h + (l << 2) >> 2])), n = (k | 0) > (m |
                    0) ? k : m, m = l + 1, (m | 0) < (i | 0)) l = m, k = n;
            else {
                e = n;
                break
            } else
        for (l = k = 0;;)
            if (n = _jtfdep(a, _jtfx(a, HEAP32[h + (k << 2) >> 2] + g)), m = (l | 0) > (n | 0) ? l : n, n = k + 1, (n | 0) < (i | 0)) k = n, l = m;
            else {
                e = m;
                break
            } while (0);
    b = HEAP32[c + (d + 12) >> 2];
    if (0 == (b | 0)) b = e;
    else {
        j = HEAP32[b + 12 >> 2];
        do
            if (0 == (j & 262144 | 0))
                if (0 == (j & 805567999 | 0)) p = 0;
                else if (0 == (HEAP32[c + (d + 20) >> 2] & 512 | 0)) p = 0;
        else if (l = b + HEAP32[b >> 2], g = 0 == (j & 32 | 0) ? 0 : 0 != (HEAP32[b + 4 >> 2] & 14 | 0) | 0, k = b & -g, i = HEAP32[b + 20 >> 2], 0 >= (i | 0)) p = 0;
        else if (0 == (k | 0))
            for (h = g = 0;;)
                if (m = _jtfdep(a, _jtfx(a, HEAP32[l + (g <<
                        2) >> 2])), n = (h | 0) > (m | 0) ? h : m, m = g + 1, (m | 0) < (i | 0)) g = m, h = n;
                else {
                    p = n;
                    break
                } else
            for (g = h = 0;;)
                if (n = _jtfdep(a, _jtfx(a, HEAP32[l + (h << 2) >> 2] + k)), m = (g | 0) > (n | 0) ? g : n, n = h + 1, (n | 0) < (i | 0)) h = n, g = m;
                else {
                    p = m;
                    break
                } else p = _jtfdep(a, b);
        while (0);
        b = (e | 0) > (p | 0) ? e : p
    }
    51 == (HEAP8[c + (d + 40)] | 0) ? (p = _jtfdep(a, HEAP32[c + (d + 16) >> 2]), d = (b | 0) > (p | 0) ? b : p) : d = b;
    b = d + 1;
    return HEAP32[f >> 2] = b
}

function _jtic2(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    if (0 == (f | 0) | 0 == (d | 0)) return e = 0, STACKTOP = b, e;
    if (!(2 > (HEAP32[d + 24 >> 2] | 0))) return g =
        a + 4408, h = HEAP32[g >> 2], j = HEAP32[h >> 2], i = j + 56, l = h + i, k = HEAP32[l >> 2], m = k + 20, n = HEAP32[m >> 2], p = HEAP32[k >> 2], q = k + p, _jtjsigstr(a, 14, n, q), e = 0, STACKTOP = b, e;
    r = HEAP32[d + 20 >> 2];
    s = _jti0(a, f);
    if (0 != HEAP8[a + 204545] << 24 >> 24) return e = 0, STACKTOP = b, e;
    t = -1 < (s | 0);
    u = -s;
    if (!(3 > ((t ? s : u) | 0))) return w = a + 4408, v = HEAP32[w >> 2], x = HEAP32[v >> 2], y = x + 12, z = v + y, A = HEAP32[z >> 2], D = A + 20, B = HEAP32[D >> 2], G = HEAP32[A >> 2], C = A + G, _jtjsigstr(a, 3, B, C), e = 0, STACKTOP = b, e;
    2 == (s | 0) ? (F = 4, c = 9) : -3 == (s | 0) | 3 == (s | 0) ? E = 8 : (F = L = (J = -2 == (s | 0)) ? 4 : 2, c = 9);
    9 == c && (E = F);
    if (0 < (s | 0)) {
        I = Math_imul(E, r) | 0;
        H = d + 12;
        K = HEAP32[H >> 2];
        N = K & 4;
        if (S = 0 == (N | 0)) {
            P = a + 205336;
            M = HEAP32[P >> 2];
            HEAP32[P >> 2] = 0;
            R = _jtccvt(a, 4, d, b);
            HEAP32[P >> 2] = M;
            if (O = 0 == R << 24 >> 24) return aa = a + 4408, Z = HEAP32[aa >> 2], $ = HEAP32[Z >> 2], ba = $ + 12, ka = Z + ba, ea = HEAP32[ka >> 2], ha = ea + 20, da = HEAP32[ha >> 2], ga = HEAP32[ea >> 2], U = ea + ga, _jtjsigstr(a, 3, da, U), e = 0, STACKTOP = b, e;
            ca = HEAP32[b >> 2];
            if (X = 0 == (ca | 0)) return e = 0, STACKTOP = b, e;
            T = ca
        } else T = d;
        V = I;
        Q = 2
    } else {
        Y = (r | 0) / (E | 0) & -1;
        ja = 0 == (r | 0);
        if (!ja && (fa = d + 12, ia = HEAP32[fa >> 2], ra = ia & 2, sa = 0 == (ra | 0))) return ta =
            a + 4408, wa = HEAP32[ta >> 2], za = HEAP32[wa >> 2], Ba = za + 12, ua = wa + Ba, ya = HEAP32[ua >> 2], xa = ya + 20, oa = HEAP32[xa >> 2], pa = HEAP32[ya >> 2], la = ya + pa, _jtjsigstr(a, 3, oa, la), e = 0, STACKTOP = b, e;
        qa = (r | 0) % (E | 0) & -1;
        if (Da = 0 == (qa | 0)) T = d, V = Y, Q = 4;
        else return Aa = a + 4408, Ea = HEAP32[Aa >> 2], Sa = HEAP32[Ea >> 2], Oa = Sa + 36, Ha = Ea + Oa, Ga = HEAP32[Ha >> 2], Ma = Ga + 20, Ia = HEAP32[Ma >> 2], db = HEAP32[Ga >> 2], W = Ga + db, _jtjsigstr(a, 9, Ia, W), e = 0, STACKTOP = b, e
    }
    Xa = _jtga(a, Q, V, 1, 0);
    if (0 == (Xa | 0)) return e = 0, STACKTOP = b, e;
    Ta = Xa + HEAP32[Xa >> 2];
    fb = T + HEAP32[T >> 2];
    switch (s | 0) {
        case -3:
            return mb =
                V << 2, _memcpy(Ta, fb, mb) | 0, e = Xa, STACKTOP = b, e;
        case -2:
            if (ma = 0 < (V | 0)) ab = fb, Na = 0, $a = Ta;
            else return e = Xa, STACKTOP = b, e;
            for (;;)
                if (Ua = ab + 4, Pa = HEAP32[ab >> 2], bb = $a + 4, HEAP32[$a >> 2] = Pa, La = Na + 1, Ja = (La | 0) < (V | 0)) ab = Ua, Na = La, $a = bb;
                else {
                    e = Xa;
                    break
                }
            STACKTOP = b;
            return e;
        case 2:
            if (Qa = 0 < (r | 0)) Ya = Ta, lb = fb, Ca = 0;
            else return e = Xa, STACKTOP = b, e;
            for (;;)
                if (gb = lb + 4, Fa = HEAP32[lb >> 2], Za = Ya + 4, HEAP32[Ya >> 2] = Fa, qb = Ca + 1, ib = (qb | 0) < (r | 0)) Ya = Za, lb = gb, Ca = qb;
                else {
                    e = Xa;
                    break
                }
            STACKTOP = b;
            return e;
        case -1:
            ub = 0 < (V | 0);
            if (!ub) return e = Xa, STACKTOP =
                b, e;
            eb = fb;
            rb = Ta;
            for (wb = 0;;)
                if (Ka = eb + 2, Va = HEAP16[eb >> 1], nb = Va << 16 >> 16, ob = rb + 4, HEAP32[rb >> 2] = nb, cb = wb + 1, Wa = (cb | 0) < (V | 0)) eb = Ka, rb = ob, wb = cb;
                else {
                    e = Xa;
                    break
                }
            STACKTOP = b;
            return e;
        case 1:
            yb = 0 < (r | 0);
            if (!yb) return e = Xa, STACKTOP = b, e;
            Cb = Ta;
            Pb = fb;
            for (zb = 0;;)
                if (Zb = Pb + 4, ac = HEAP32[Pb >> 2], Hb = ac & 65535, Ib = Cb + 2, HEAP16[Cb >> 1] = Hb, Qb = zb + 1, Rb = (Qb | 0) < (r | 0)) Cb = Ib, Pb = Zb, zb = Qb;
                else {
                    e = Xa;
                    break
                }
            STACKTOP = b;
            return e;
        case 0:
            Ob = 0 < (V | 0);
            if (!Ob) return e = Xa, STACKTOP = b, e;
            Bb = fb;
            xb = Ta;
            for (dc = 0;;)
                if (tb = Bb + 2, oc = HEAP16[Bb >> 1], Mb = oc & 65535,
                    Tb = xb + 4, HEAP32[xb >> 2] = Mb, Ra = dc + 1, Nb = (Ra | 0) < (V | 0)) Bb = tb, xb = Tb, dc = Ra;
                else {
                    e = Xa;
                    break
                }
            STACKTOP = b;
            return e;
        case 3:
            return _memcpy(Ta, fb, V) | 0, e = Xa, STACKTOP = b, e;
        default:
            return sb = HEAP32[a + 4408 >> 2], Ab = HEAP32[sb + (HEAP32[sb >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[Ab + 20 >> 2], Ab + HEAP32[Ab >> 2]), e = 0, STACKTOP = b, e
    }
}

function _jtbfrom(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd;
    c = 0;
    if (0 == (f | 0) | 0 == (d | 0)) return b = 0;
    e = HEAP32[f + 24 >> 2];
    g = a + 205336;
    h = HEAP32[g >> 2];
    0 == (h | 0) ? (j = d + 24, l = i = HEAP32[j >> 2], k = e, m = i) : (n = HEAP32[h >> 2], p = d + 24, q = HEAP32[p >> 2], r = h + 4, l = s = HEAP32[r >> 2], k = n, m = q);
    t = m - l;
    HEAP32[g >> 2] = 0;
    if ((e | 0) > (k | 0)) return b = u = _jtrank2ex(a, f, d, 0, k, l, 3116);
    w = HEAP32[f + 20 >> 2];
    v = HEAP32[d + 20 >> 2];
    x = d + 28;
    (y = 0 != (l | 0)) ?
    (z = d + 28 + (t << 2), A = HEAP32[z >> 2], (D = 1 < (A | 0)) ? B = A : 1 == (A | 0) ? c = 10 : 0 != (A | 0) ? c = 12 : (G = 0 == (w | 0)) ? B = 0 : c = 12) : c = 10;
    10 == c && (C = HEAP32[f >> 2], F = f + C, E = _memchr(F, 1, w), (J = 0 == (E | 0)) ? B = 1 : c = 12);
    if (12 == c) return L = a + 4408, I = HEAP32[L >> 2], H = HEAP32[I >> 2], K = H + 24, N = I + K, S = HEAP32[N >> 2], T = S + 20, V = HEAP32[T >> 2], Q = HEAP32[S >> 2], P = S + Q, _jtjsigstr(a, 6, V, P), b = 0;
    M = 0 != (B | 0) ? B : 1;
    R = 0 < (t | 0);
    do
        if (R) {
            O = 1;
            for (aa = 0;;)
                if (Z = d + 28 + (aa << 2), $ = HEAP32[Z >> 2], ba = $ | 0, ka = O * ba, ea = aa + 1, ha = (ea | 0) < (t | 0)) O = ka, aa = ea;
                else break;
                (da = 2147483647 < ka) ? (U = a + 4408, Y = X = ca = HEAP32[U >>
                    2], ja = HEAP32[Y >> 2], fa = ja + 40, ra = ia = X + fa, sa = HEAP32[ra >> 2], ta = sa + 20, wa = HEAP32[ta >> 2], Ba = za = sa, ua = HEAP32[Ba >> 2], ya = za + ua, _jtjsigstr(a, 10, wa, ya), xa = 0) : (ga = ka, c = 17)
        } else ga = 1, c = 17;
    while (0);
    17 == c && (xa = oa = ga & -1);
    pa = a + 204545;
    if (0 != HEAP8[pa] << 24 >> 24) return b = 0;
    la = (w | 0) * ((v | 0) / (M | 0) & -1 | 0);
    if (2147483647 < la)
        if (qa = a + 4408, Da = HEAP32[qa >> 2], Aa = HEAP32[Da >> 2], Ea = Aa + 40, Sa = Da + Ea, Oa = HEAP32[Sa >> 2], Ha = Oa + 20, Ga = HEAP32[Ha >> 2], Ma = HEAP32[Oa >> 2], Ia = Oa + Ma, _jtjsigstr(a, 10, Ga, Ia), db = HEAP8[pa], W = 0 == db << 24 >> 24) Xa = 0;
        else return b =
            0;
    else Xa = Ta = la & -1;
    fb = (v | 0) / ((0 != (xa | 0) ? xa : 1) | 0) & -1;
    mb = d + 12;
    ma = HEAP32[mb >> 2];
    ab = (Math_imul(128 == (ma | 0) ? 8 : 32 == (ma | 0) ? 4 : 64 == (ma | 0) ? 4 : 2 == (ma | 0) | 2097152 == (ma | 0) | 33554432 == (ma | 0) ? 1 : 4 == (ma | 0) | 67108864 == (ma | 0) | 134217728 == (ma | 0) | 4194304 == (ma | 0) | 8388608 == (ma | 0) ? 4 : 1 == (ma | 0) | 8 == (ma | 0) | 16 == (ma | 0) ? ma : 131072 == (ma | 0) ? 2 : 262144 == (ma | 0) | 524288 == (ma | 0) | 1048576 == (ma | 0) ? 44 : 1024 == (ma | 0) | 4096 == (ma | 0) | 8192 == (ma | 0) | 16384 == (ma | 0) | 2048 == (ma | 0) | 32768 == (ma | 0) ? 16 : 16777216 == (ma | 0) ? 12 : 65536 == (ma | 0) ? 4 : 268435456 == (ma | 0) ? 12 : 536870912 ==
        (ma | 0) ? 24 : -1, fb) | 0) / (M | 0) & -1;
    Na = Math_imul(ab, M) | 0;
    $a = _jtga(a, ma, Xa, m + e + ((0 < (l | 0)) << 31 >> 31), x);
    if (0 == ($a | 0)) return b = 0;
    _memcpy($a + 28 + (t << 2), f + 28, e << 2) | 0;
    y && (Ua = t + e, Pa = $a + 28 + (Ua << 2), bb = t + 1, La = d + 28 + (bb << 2), Ja = l << 2, Qa = Ja - 4, _memcpy(Pa, La, Qa) | 0);
    Ya = f + HEAP32[f >> 2];
    lb = HEAP32[d >> 2];
    Ca = d + lb;
    gb = $a + HEAP32[$a >> 2];
    Fa = ab << 1;
    Za = 1 == (w | 0);
    qb = Fa | Za & 1;
    a: do switch (qb | 0) {
            case 3:
                ib = 0 < (xa | 0);
                if (!ib) break a;
                ub = HEAP8[Ya];
                eb = ub << 24 >> 24;
                rb = eb + lb;
                Ka = wb = d + rb;
                Va = gb;
                for (nb = 0;;)
                    if (ob = HEAP8[Ka], cb = Va + 1, HEAP8[Va] = ob, Wa = Ka + M, yb = nb +
                        1, Cb = (yb | 0) < (xa | 0)) Ka = Wa, Va = cb, nb = yb;
                    else break;
                break;
            case 2:
                Pb = 0 < (xa | 0);
                if (!Pb) break a;
                zb = 0 < (w | 0);
                Zb = Ca;
                ac = gb;
                for (Hb = 0;;) {
                    if (zb) {
                        Ib = ac;
                        Qb = 0;
                        for (Rb = Ya;;)
                            if (Ob = Rb + 1, Bb = HEAP8[Rb], xb = Bb << 24 >> 24, dc = Zb + xb, tb = HEAP8[dc], oc = Ib + 1, HEAP8[Ib] = tb, Mb = Qb + 1, Tb = (Mb | 0) < (w | 0)) Ib = oc, Qb = Mb, Rb = Ob;
                            else break;
                        Nb = Ra = ac + w
                    } else Nb = ac;
                    sb = Zb + M;
                    Ab = Hb + 1;
                    if (Eb = (Ab | 0) < (xa | 0)) Zb = sb, ac = Nb, Hb = Ab;
                    else break
                }
                break;
            case 8:
                Lb = 0 < (xa | 0);
                if (!Lb) break a;
                vb = gb;
                wc = Ca;
                Ec = 0 < (w | 0);
                yc = 0;
                Db = vb;
                for (bc = wc;;) {
                    if (Ec) {
                        pb = 0;
                        Fb = Db;
                        for (jb = Ya;;)
                            if (gc = jb + 1,
                                ic = HEAP8[jb], vc = ic << 24 >> 24, hc = bc + (vc << 2), uc = HEAP32[hc >> 2], Ac = Fb + 4, HEAP32[Fb >> 2] = uc, xc = pb + 1, cd = (xc | 0) < (w | 0)) pb = xc, Fb = Ac, jb = gc;
                            else break;
                        Tc = jc = Db + (w << 2)
                    } else Tc = Db;
                    Fc = bc + (M << 2);
                    Bc = yc + 1;
                    if (ec = (Bc | 0) < (xa | 0)) yc = Bc, Db = Tc, bc = Fc;
                    else break
                }
                break;
            case 5:
                Xb = 0 < (xa | 0);
                if (!Xb) break a;
                sc = HEAP8[Ya];
                nc = sc << 24 >> 24;
                tc = Ca;
                Ub = tc + (nc << 1);
                $c = gb;
                ad = Ub;
                qc = $c;
                for (Uc = 0;;)
                    if (rc = HEAP16[ad >> 1], kb = qc + 2, HEAP16[qc >> 1] = rc, Jb = ad + (M << 1), $b = Uc + 1, na = ($b | 0) < (xa | 0)) ad = Jb, qc = kb, Uc = $b;
                    else break;
                break;
            case 9:
                Vb = 0 < (xa | 0);
                if (!Vb) break a;
                kc = HEAP8[Ya];
                va = kc << 24 >> 24;
                Wc = Ca;
                Yb = Wc + (va << 2);
                fc = gb;
                Kb = Yb;
                Gb = fc;
                for (gd = 0;;)
                    if (mc = HEAP32[Kb >> 2], Gc = Gb + 4, HEAP32[Gb >> 2] = mc, dd = Kb + (M << 2), kd = gd + 1, Fd = (kd | 0) < (xa | 0)) Kb = dd, Gb = Gc, gd = kd;
                    else break;
                break;
            default:
                Vc = 0 < (xa | 0);
                if (Za) {
                    if (!Vc) break a;
                    Hd = HEAP8[Ya];
                    bd = Hd << 24 >> 24;
                    cc = Math_imul(bd, ab) | 0;
                    Ic = cc + lb;
                    fd = d + Ic;
                    xd = gb;
                    Xc = 0;
                    for (Wd = fd;;)
                        if (_memcpy(xd, Wd, ab) | 0, Wb = xd + ab, Sb = Wd + Na, pc = Xc + 1, zc = (pc | 0) < (xa | 0)) xd = Wb, Xc = pc, Wd = Sb;
                        else break a
                }
                if (!Vc) break a;
                hd = 0 < (w | 0);
                Yc = Math_imul(w, ab) | 0;
                Ad = gb;
                Gd = Ca;
                for (hb = 0;;) {
                    if (hd) {
                        ld =
                            Ad;
                        ed = Ya;
                        for (Jc = 0;;)
                            if (Oc = ed + 1, Pc = HEAP8[ed], ke = Pc << 24 >> 24, Ed = Math_imul(ke, ab) | 0, pd = Gd + Ed, _memcpy(ld, pd, ab) | 0, id = ld + ab, Cc = Jc + 1, Qc = (Cc | 0) < (w | 0)) ld = id, ed = Oc, Jc = Cc;
                            else break;
                        vd = Zc = Ad + Yc
                    } else vd = Ad;
                    $d = Gd + Na;
                    je = hb + 1;
                    if (Kc = (je | 0) < (xa | 0)) Ad = vd, Gd = $d, hb = je;
                    else break
                }
        }
        while (0);
        if (0 == (HEAP32[mb >> 2] & 32 | 0) || 0 == (HEAP32[d + 4 >> 2] & 14 | 0)) return b = $a;
    Bd = d - $a;
    od = $a + 4;
    HEAP32[od >> 2] |= 8;
    Vd = $a + HEAP32[$a >> 2];
    Zd = HEAP32[$a + 20 >> 2];
    if (0 < (Zd | 0)) Jd = 0;
    else return b = $a;
    for (;;)
        if (Md = Vd + (Jd << 2), Cd = HEAP32[Md >> 2], fe = Cd + Bd, HEAP32[Md >>
                2] = fe, Xd = Jd + 1, qd = (Xd | 0) < (Zd | 0)) Jd = Xd;
        else {
            b = $a;
            break
        }
    return b
}

function _eqCC(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP8[j] | 0) == (HEAP8[g] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 1, j += 1, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 1;
                i = HEAP8[j];
                if (f) {
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP8[k] | 0) == i << 24 >> 24 | 0, a = j + 1, (a | 0) < (c | 0)) k += 1, j = a, e += 1;
                        else break;
                    k = h + c
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 1;
            k = HEAP8[g];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = k << 24 >> 24 == (HEAP8[j] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 1, f += 1;
                    else break;
                a += c
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}
function _jtne(a, f, d) {
    return _jtva2(a, f, d, -107)
}

function _jtslash(a, f) {
    var d, c, b, e, g;
    if (0 == (f | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 805567999 | 0)) return d = _jtga(a, 4, 1, 0, 0), 0 == (d | 0) ? c = 0 : (HEAP32[d + HEAP32[d >> 2] >> 2] = 3, c = d), d = _jtevger(a, f, c);
    c = f;
    d = HEAP32[f >> 2];
    b = HEAP8[d + (c + 40)] | 0; - 74 == (b | 0) ? (e = HEAP32[d + (c + 12) >> 2], 0 == (e | 0) ? e = 1038 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? e = 1038 : 62 != (HEAP8[e + (HEAP32[e >> 2] + 40)] | 0) ? e = 1038 : (e = HEAP32[d + (c + 8) >> 2], 0 == (e | 0) ? e = 1038 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? e = 1038 : (g = HEAP8[e + (HEAP32[e >> 2] + 40)], e = 44 == g << 24 >> 24 ? 2564 : -100 != g << 24 >> 24 ? 1038 :
        3276))) : e = 59 == (b | 0) ? 2798 : 44 == (b | 0) ? 2936 : -100 == (b | 0) ? 978 : 1038;
    b = HEAP32[d + (c + 28) >> 2];
    c = _jtga(a, 4, 2, 1, 0);
    0 == (c | 0) ? b = 0 : (d = c, g = HEAP32[c >> 2], HEAP32[d + g >> 2] = b, HEAP32[g + (d + 4) >> 2] = 2147483647, b = c);
    c = _jtqq(a, f, b);
    if (0 == (c | 0) || 0 != (HEAP8[a + 204545] | 0)) return 0;
    b = _jtga(a, 262144, 1, 0, 0);
    if (0 == (b | 0)) return 0;
    a = b;
    d = HEAP32[b >> 2];
    HEAP32[a + d >> 2] = e;
    HEAP32[d + (a + 4) >> 2] = 1268;
    HEAP32[d + (a + 8) >> 2] = f;
    HEAP32[d + (a + 12) >> 2] = 0;
    HEAP32[d + (a + 16) >> 2] = c;
    HEAP32[d + (a + 20) >> 2] = 0;
    HEAP32[d + (a + 24) >> 2] = 2147483647;
    HEAP32[d + (a + 28) >> 2] = 2147483647;
    HEAP32[d + (a + 32) >> 2] = 2147483647;
    HEAP32[d + (a + 36) >> 2] = 0;
    HEAP8[d + (a + 40)] = 47;
    return b
}


function _jtslash(a, f) {
    var d, c, b, e, g;
    if (0 == (f | 0)) return 0;
    if (0 != (HEAP32[f + 12 >> 2] & 805567999 | 0)) return d = _jtga(a, 4, 1, 0, 0), 0 == (d | 0) ? c = 0 : (HEAP32[d + HEAP32[d >> 2] >> 2] = 3, c = d), d = _jtevger(a, f, c);
    c = f;
    d = HEAP32[f >> 2];
    b = HEAP8[d + (c + 40)] | 0; - 74 == (b | 0) ? (e = HEAP32[d + (c + 12) >> 2], 0 == (e | 0) ? e = 1038 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? e = 1038 : 62 != (HEAP8[e + (HEAP32[e >> 2] + 40)] | 0) ? e = 1038 : (e = HEAP32[d + (c + 8) >> 2], 0 == (e | 0) ? e = 1038 : 0 == (HEAP32[e + 12 >> 2] & 1835008 | 0) ? e = 1038 : (g = HEAP8[e + (HEAP32[e >> 2] + 40)], e = 44 == g << 24 >> 24 ? 2564 : -100 != g << 24 >> 24 ? 1038 :
        3276))) : e = 59 == (b | 0) ? 2798 : 44 == (b | 0) ? 2936 : -100 == (b | 0) ? 978 : 1038;
    b = HEAP32[d + (c + 28) >> 2];
    c = _jtga(a, 4, 2, 1, 0);
    0 == (c | 0) ? b = 0 : (d = c, g = HEAP32[c >> 2], HEAP32[d + g >> 2] = b, HEAP32[g + (d + 4) >> 2] = 2147483647, b = c);
    c = _jtqq(a, f, b);
    if (0 == (c | 0) || 0 != (HEAP8[a + 204545] | 0)) return 0;
    b = _jtga(a, 262144, 1, 0, 0);
    if (0 == (b | 0)) return 0;
    a = b;
    d = HEAP32[b >> 2];
    HEAP32[a + d >> 2] = e;
    HEAP32[d + (a + 4) >> 2] = 1268;
    HEAP32[d + (a + 8) >> 2] = f;
    HEAP32[d + (a + 12) >> 2] = 0;
    HEAP32[d + (a + 16) >> 2] = c;
    HEAP32[d + (a + 20) >> 2] = 0;
    HEAP32[d + (a + 24) >> 2] = 2147483647;
    HEAP32[d + (a + 28) >> 2] = 2147483647;
    HEAP32[d + (a + 32) >> 2] = 2147483647;
    HEAP32[d + (a + 36) >> 2] = 0;
    HEAP8[d + (a + 40)] = 47;
    return b
}

function _neCC(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP8[j] | 0) != (HEAP8[g] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 1, j += 1, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 1;
                i = HEAP8[j];
                if (f) {
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP8[k] | 0) != i << 24 >> 24 | 0, a = j + 1, (a | 0) < (c | 0)) k += 1, j = a, e += 1;
                        else break;
                    k = h + c
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b = g + 1;
            k = HEAP8[g];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = k << 24 >> 24 != (HEAP8[j] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 1, f += 1;
                    else break;
                a += c
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}

function _jtnumbpx(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w;
    b = STACKTOP;
    STACKTOP = STACKTOP + 112 | 0;
    e = b;
    g = b + 16;
    h = b + 32;
    j = b + 48;
    i = b + 64;
    l = b + 80;
    k = b + 96;
    m = _memchr(d, 98, f);
    if (0 != (m | 0)) {
        if (0 == _jtnumbpx(a, m - d, d, e) << 24 >> 24) return STACKTOP = b, 0;
        j = m + 1;
        j = i = (n = 45 == (HEAP8[j] | 0)) ? m + 2 : j;
        m = d + f - j;
        l = _memchr(i, 46, m);
        d = (f = 0 != (l | 0)) ? l - j : m;
        if (!n && !((m | 0) > (f & 1 | 0))) return STACKTOP = b, 0;
        j = e;
        k = HEAPF64[j >> 3];
        p = HEAPF64[e + 8 >> 3];
        if (0 == _jtnumb(a, d, i, g, k, p) << 24 >> 24) return STACKTOP = b, 0;
        do
            if (f) {
                i = m - 1 - d;
                0 == k & 0 == p ? q = e = HEAPF64[j >> 3] = 1 :
                    (e = 0, q = k);
                if (0 == _jtnumb(a, i, l + 1, h, q, p) << 24 >> 24) return c = 0, STACKTOP = b, c;
                if (e) 0 != HEAPF64[h >> 3] && (HEAPF64[g >> 3] = HEAPF64[14142]);
                else {
                    e = h;
                    r = h + 8;
                    if (0 < (i | 0))
                        for (s = 0;;)
                            if (_jtzdiv(h, HEAPF64[e >> 3], HEAPF64[r >> 3], q, p), t = s + 1, (t | 0) < (i | 0)) s = t;
                            else {
                                u = e;
                                w = r;
                                break
                            } else u = e, w = r;
                    s = g;
                    i = g + 8;
                    t = HEAPF64[i >> 3] + HEAPF64[w >> 3];
                    HEAPF64[s >> 3] += HEAPF64[u >> 3];
                    HEAPF64[i >> 3] = t
                }
            }
        while (0);
        u = g;
        HEAP32[c >> 2] = HEAP32[u >> 2];
        HEAP32[c + 4 >> 2] = HEAP32[u + 4 >> 2];
        HEAP32[c + 8 >> 2] = HEAP32[u + 8 >> 2];
        HEAP32[c + 12 >> 2] = HEAP32[u + 12 >> 2];
        if (!n) return STACKTOP = b,
            1;
        n = c;
        HEAPF64[n >> 3] = -0 - HEAPF64[n >> 3];
        n = c + 8;
        HEAPF64[n >> 3] = -0 - HEAPF64[n >> 3];
        STACKTOP = b;
        return 1
    }
    n = _memchr(d, 112, f);
    if (0 == (n | 0))
        if (u = _memchr(d, 120, f), 0 != (u | 0)) m = h = u;
        else return c = _jtnumj(a, f, d, c), STACKTOP = b, c;
    else h = 0, m = n;
    if (0 == _jtnumj(a, m - d, d, j) << 24 >> 24) return STACKTOP = b, 0;
    n = m + 1;
    if (0 == _jtnumj(a, d + f - n, n, i) << 24 >> 24) return STACKTOP = b, 0;
    0 == (h | 0) ? (_jtzpow(k, a, HEAPF64[1], HEAPF64[2], HEAPF64[i >> 3], HEAPF64[i + 8 >> 3]), h = HEAPF64[j >> 3], n = HEAPF64[j + 8 >> 3], f = HEAPF64[k >> 3], d = HEAPF64[k + 8 >> 3], k = 0 != h, m = 0 != f, u = 0 != n, g = 0 !=
        d, HEAPF64[c >> 3] = (k & m ? h * f : 0) - (u & g ? n * d : 0), HEAPF64[c + 8 >> 3] = (k & g ? h * d : 0) + (u & m ? n * f : 0)) : (_jtzexp(l, a, HEAPF64[i >> 3], HEAPF64[i + 8 >> 3]), i = HEAPF64[j >> 3], a = HEAPF64[j + 8 >> 3], j = HEAPF64[l >> 3], w = HEAPF64[l + 8 >> 3], l = 0 != i, h = 0 != j, g = l & h ? i * j : 0, u = 0 != a, m = 0 != w, n = u & m ? a * w : 0, m = l & m ? i * w : 0, a = u & h ? a * j : 0, HEAPF64[c >> 3] = g - n, HEAPF64[c + 8 >> 3] = m + a);
    STACKTOP = b;
    return 1
}

function _jtnumj(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    g = e;
    h = e + 8;
    j = _memchr(d, 106, f);
    0 == (j | 0) ? (j = _memchr(d, 97, f), 0 == (j | 0) ? (i = f, m = k = l = 0) : (p = n = j, b = 3)) : (n = 0, p = j, b = 3);
    3 == b && (i = p - d, l = n, k = p, m = 1);
    if (0 == _jtnumd(a, i, d, g) << 24 >> 24) return STACKTOP = e, 0;
    if (m) {
        if (i = k + (0 != (l | 0) ? 2 : 1), 0 == _jtnumd(a, d + f - i, i, h) << 24 >> 24) return STACKTOP = e, 0
    } else HEAPF64[h >> 3] = 0;
    f = HEAPF64[g >> 3];
    if (0 == (l | 0)) return HEAPF64[c >> 3] = f, HEAPF64[c + 8 >> 3] = HEAPF64[h >> 3], STACKTOP = e, 1;
    if (0 > f) return STACKTOP = e, 0;
    g = HEAP8[l +
        1];
    if (114 == g << 24 >> 24) a = HEAPF64[h >> 3];
    else if (100 == g << 24 >> 24) g = 0.017453292519943295 * HEAPF64[h >> 3], a = HEAPF64[h >> 3] = g;
    else return STACKTOP = e, 0; - 6.283185307179586 >= a | 6.283185307179586 <= a && (g = a - 6.283185307179586 * Math_floor(a / 6.283185307179586), a = HEAPF64[h >> 3] = g);
    0 > a && (a += 6.283185307179586, HEAPF64[h >> 3] = a);
    h = a;
    a = 1.5707963267948966 == h | 4.71238898038469 == h ? 0 : f * Math_cos(h);
    HEAPF64[c >> 3] = a;
    f = 3.141592653589793 == h ? 0 : f * Math_sin(h);
    HEAPF64[c + 8 >> 3] = f;
    STACKTOP = e;
    return 1
}

function _llvm_ctlz_i32(a) {
    var f, a = a | 0;
    f = HEAP8[ctlz_i8 + (a >>> 24) | 0];
    if (8 > (f | 0)) return f | 0;
    f = HEAP8[ctlz_i8 + (a >> 16 & 255) | 0];
    if (8 > (f | 0)) return f + 8 | 0;
    f = HEAP8[ctlz_i8 + (a >> 8 & 255) | 0];
    return 8 > (f | 0) ? f + 16 | 0 : HEAP8[ctlz_i8 + (a & 255) | 0] + 24 | 0
}

function _bw0000II(a, f, d, c, b, e, g) {
    g = b;
    if (1 == (c | 0)) 0 >= (d | 0) || _memset(g, 0, d << 2) | 0;
    else if (g = 0 < (d | 0) & 0 < (c | 0), 0 == f << 24 >> 24) {
        if (g) {
            f = c << 2;
            e = 0;
            for (a = b;;)
                if (_memset(a, 0, f) | 0, b = e + 1, (b | 0) < (d | 0)) e = b, a += c << 2;
                else break
        }
    } else if (g) {
        g = c << 2;
        a = 0;
        for (e = b;;)
            if (_memset(e, 0, g) | 0, b = a + 1, (b | 0) < (d | 0)) a = b, e += c << 2;
            else break
    }
}

function _i64Add(a, f, d, c) {
    a |= 0;
    d = a + (d | 0) >>> 0;
    return tempRet0 = (f | 0) + (c | 0) + (d >>> 0 < a >>> 0 | 0) >>> 0, d | 0
}

function _i64Subtract(a, f, d, c) {
    a |= 0;
    d |= 0;
    return tempRet0 = (f | 0) - (c | 0) - (d >>> 0 > a >>> 0 | 0) >>> 0, a - d >>> 0 | 0
}

function _jtdbetx(a, f) {
    var d;
    if (0 == (f | 0)) return 0;
    if (1 != (HEAP32[f + 24 >> 2] | 0)) return d = HEAP32[a + 4408 >> 2], d = HEAP32[d + (HEAP32[d >> 2] + 56) >> 2], _jtjsigstr(a, 14, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), 0;
    if (0 != (HEAP32[f + 20 >> 2] | 0)) return f = HEAP32[a + 4408 >> 2], d = HEAP32[f + (HEAP32[f >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[d + 20 >> 2], d + HEAP32[d >> 2]), 0;
    d = HEAP32[a + 4404 >> 2];
    f = _jtga(a, 2, d, 1, 0);
    if (0 == (f | 0)) return 0;
    _memcpy(f + HEAP32[f >> 2], a + 2396, d) | 0;
    return f
}

function _jtright1(a, f) {
    var d;
    d = _jttpush(a, f);
    if (0 == (d | 0)) return 0;
    _jttraverse(a, d, 654);
    a = d + 16;
    HEAP32[a >> 2] += 1;
    return d
}

function _jtcut1(a, f, d) {
    return _jtcut2(a, HEAP32[31134], f, d)
}


function _jtcut2(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b,
        na, Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf,
        Mf, ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh, Nh, Jh, lj, gh, rh, Ph, hi, sh, fg, Yi, mj, xi, Hi, Ii, lh, yg, vj, Ji, Xj, yi, hh, Aj, ih, Hj, zi, ni, ti, Cg, Ah, th, oh, Hg, bi, ui, gj, rj, Ki, Pj, Zi, ii, mh, ji, vi, Qh, Ij, ik, hj, Xg, Li, ph, al, oi, Yh, ek, ki, ci, Rh, Bj, wj, Cj, Qi, Ri, Qj, Dh, Vk, Sh, Dj, xj, Eh, Rj, Ai, Vi, Yg, ri, Fh, fk, Ei, Nk,
        jk, qk, nj, pi, yj, Ig, Th, ij, Ej, Yj, $i, Ik, zk, sj, Fj, Jj, Wk, Fi, jj, Ak, jl, Wi, tk, ei, Bk, zj, kj, Bi, Ck, ol, Ci, Sj, Kj, Zj, Tj, bl, Jk, Ui, fi, xh, oj, Dk, gk, cl, uk, sg, Lj, ul, pj, tf, Xi, $j, Si, gg, Kk, Gh, ag, jh, Hh, Af, Mi, kl, si, Ok, Zh, dl, Lk, li, Uj, fm, Di, Mk, qj, Pk, vl, Mj, ak, mi, Jl, Gi, Nj, Oh, fl, ll, vk, bk, Vj, ck, ml, rk, pl, Kl, Qk, wl, Ek, sk, Bl, aj, kk, Ni, Oi, lk, mk, nk, Fl, Xk, bj, Ll, $h, gl, Bh, cj, Fk, Rk, dj, ql, Sk, ej, xl, dk, Gl, hk, nl, Yk, ok, Wj, Rl, pk, Vl, rl, Zk, Gj, Cl, Gk, gm, hl, sl, Xf, mm, $k, Dl, tl, bm, Ti, ug, Tf, uh, Uf, tj, uj, Sl, il, Wl, yn, im, Im, zl, Xl, vm, Tl, Ml, kn, nm, Fn, Nl, Gn, Pm,
        Hl, Op, Hn, uo, Ol, Do, Xn, io, ln, qm, el, Il, mn, $m, Jm, om, zm, Am, Eo, jo, hm, Fo, ko, pm, Bm, Km, Cm, rm, Lm, Tm, Qm, an, wk, Go, nn, on, cm, In, bp, Dp, lo, bn, cn, Um, Ro, Yn, Yl, pn, Hk, vo, Ho, Pp, vp, mo, Io, hp, Vm, sm, Zn, Oj, Mm, Yp, Tq, Dm, Zl, dn, Nm, Rm, jm, Ep, cp, So, Jo, Jn, Ko, $n, Em, dm, To, Kn, El, rq, Zp, Bq, zn, wp, no, ip, Er, Lo, sq, An, jp, Mo, Ln, kp, en, Bn, Mn, gq, Nn, Hq, dp, wo, Fp, fn, On, ao, Qp, gn, tm, um, xo, No, Gp, $l, lp, km, am, mp, Fm, Ar, hq, iq, Hp, hn, Pn, yo, np, qn, tq, rn, $p, Uq, Rp, Cq, sn, Qn, uq, Iq, Uo, Rn, Vo, Sn, Ip, ep, Cn, Pi, xk, Tk, yl, yk, tn, lm, Tn, vq, Dn, oo, Wo, wm, Pl, Sp, Vq, Tp, Oo, fp, jq,
        un, Ul, op, rr, Up, bo, Po, Un, Jq, aq, xp, Gm, kq, co, pp, En, Kq, eo, dr, Ql, Wq, kr, Xo, yp, Jp, qp, Yo, Wm, Vn, Vp, Zo, lq, Kp, sr, Lp, mq, zo, fo, Br, rp, nq, Xq, Yr, Dq, Cr, lr, tr, wq, Lq, oq, er, bq, mr, Yq, po, qo, fr, $o, Xm, gp, go, Ym, ro, ap, ho, Zm, Ao, Wn, so, fj, Mq, sp, tp, Zq, Uk, zp, em, to, vn, Hm, xm, wn, Ap, ym, jn, Om, Mp, xn, Bo, Zr, Ur, Qo, Wp, xq, Fr, Eq, yq, qs, Lr, ur, cq, is, Fq, nr, Bp, Gr, Gq, pq, Mr, $q, vr, Nq, js, Hr, Np, qq, Oq, ar, zq, wr, br, Al, Co, dq, Aq, Vr, eq, Xp, fq, $r, Ir, Nr, Rr, Pq, Or, Es, ks, gr, ls, dt, ms, Qq, as, Jr, Wr, bs, nt, Rq, or, hr, Dr, Fs, Kr, As, Gs, ir, pr, Xr, Vs, Bs, Ws, rs, Js, Cp, Sr, cs, ss,
        cr, jr, et, Wt, ku, Xt, ft, Ps, Xs, Cs, Dt, vt, ot, ns, Ks, Ds, Tr, Ys, lu, Yt, Nt, xt, xr, qr, Zs, Et, Ku, gt, Qs, xs, pt, $s, Zt, qt, ds, yt, ys, Lu, us, at, zs, Rs, Pr, os, $t, Ls, Ss, ht, wt, yu, kv, Ft, uv, au, rt, mu, vv, wv, Mu, Sm, es, vs, bu, it, Ot, qw, zu, zt, Gt, jt, cu, nu, Zu, st, kt, ws, lt, xv, qy, Pv, Nu, Pt, cw, ou, dw, Ou, Qv, At, yv, zv, lv, Pu, $u, Av, Ms, rw, Hs, du, mt, Au, Bu, mv, Bv, sw, av, Rv, Qt, pu, Ew, bt, yr, Rt, Cv, Ht, qu, ix, Fw, ct, Sv, Dv, Qu, Ru, Bt, Is, Tv, Ev, bv, It, Jt, gs, Cu, Ts, vx, Fv, Su, Tu, Du, Pw, ru, Qw, Kt, wx, hs, up, tw, Ix, Us, ts, Sq, xx, uw, vw, eu, Uv, ew, fw, Jx, Uu, Vv, su, nv, gw, hw, fu, Gv, gu, Qr,
        iw, cv, Hv, tu, Vu, ww, Ns, uu, Lt, St, Kx, hu, Rw, Wv, Lx, Iz, Xv, iu, ov, Iv, pv, Os, tt, Tt, Sw, jx, yx, Mx, Wu, jw, Tw, ut, Dy, xw, kx, Ey, vu, Jv, Gw, dy, kA, Eu, Vy, Wy, zx, Xy, Yy, Uw, Nx, kw, ey, Fy, fy, yw, Yv, Kv, Zy, Lv, Hw, Xu, Ox, Zv, Ut, Fu, Vw, Px, Qx, Rx, ry, Ax, zr, qv, lx, Sx, Tx, Jz, sy, gy, Iw, Ww, dv, zw, Mt, Ux, MA, mx, Bx, Gy, Vx, rv, Cx, Hy, lw, NA, Gu, nx, ty, ox, Iy, Jw, Aw, ev, Wx, Xx, Xw, uy, hy, qz, sv, lA, vy, px, wy, fv, xy, Dx, mw, Ex, qx, gv, Kz, Ct, Hu, mA, $y, nA, Lz, az, OA, bz, rz, Jy, Mz, rx, Yw, nw, Iu, oA, Ky, Yx, Nz, Zx, Ly, pA, PA, Yu, Zw, Mv, QA, $v, sz, Kw, My, $x, qA, Fx, tz, iy, ow, $w, RA, kB, ND, cz, dz, Oz, HC,
        ez, SA, pw, rA, hv, Bw, iv, fz, Pz, ax, iD, Qz, bx, uz, OD, vz, lB, cx, jy, gz, Ny, BB, IC, jD, JC, PD, eC, ky, Rz, Sz, ly, ay, kD, Oy, AE, Tz, by, Vt, wz, hz, Py, Cw, Qy, Dw, iz, cy, mB, fC, Uz, lD, gC, xz, hC, iC, yz, nB, CB, QD, dx, aw, oB, Ry, sA, jz, DB, my, iF, pB, tA, TA, Gx, Sy, UA, Ju, KC, LC, EB, MC, uA, RD, VA, NC, mD, zz, vA, cI, Vz, Wz, Ty, Xz, BE, nD, Az, wA, oD, OC, ex, bw, Lw, jv, wu, Yz, sx, Zz, Bz, $z, Nv, kz, xA, II, yA, Cz, lz, wH, XF, YF, zA, SD, tv, FB, AA, Dz, ny, yy, Mw, ju, Nw, WA, GB, pD, aA, qB, mz, tx, bA, Ez, XA, YA, cA, qD, TD, rB, dA, LG, PC, HB, UD, jC, rD, ZA, ZF, kC, MG, IL, lC, NG, sD, $F, dI, jF, OG, eI, tD, uD, VD, CE, WD,
        mC, IB, kF, JB, xH, DE, vD, XD, zy, KB, BA, lF, mF, nC, $A, wJ, aG, JI, EE, nF, aB, yH, wD, bG, cG, YD, FE, oC, pC, dG, ZD, zH, PG, fI, QG, eG, gI, nz, xD, xJ, KI, LI, AH, fG, oF, BH, pF, yJ, RG, CA, GE, QC, zJ, qC, $D, oy, MI, rC, bB, sB, gG, NI, qF, sC, LB, rF, CH, yD, hG, sF, cB, py, tB, Ow, SG, hI, TG, OI, MB, aE, tF, UG, NB, PI, QI, zD, bE, Uy, uF, tC, cK, cE, dE, RC, iI, DA, EA, dB, AD, uC, AJ, dK, iG, SC, HE, jG, vF, BD, fx, DH, IE, kG, TC, VG, JE, lG, WG, JL, CD, Ay, XG, wF, eE, mG, xF, KE, eA, vC, yF, LE, UC, RI, eB, OK, nG, DD, wC, FA, OB, PB, QB, fB, zF, oG, fE, YG, RB, GA, ME, ED, jI, ZG, NE, gE, xC, SB, PK, EH, OE, PE, pG, AF, BF, yC, FH, $G, hE,
        aH, QE, RE, bH, SI, eK, SE, CF, GH, FD, zC, Fz, HA, oz, fK, TB, qG, iE, HH, fA, UB, IH, cH, jE, DF, VB, VC, TE, kE, EF, gA, hA, uB, UE, WC, gB, BJ, IA, FF, XC, rG, GD, sG, vB, WB, lE, XB, dH, GF, gK, eH, JH, mE, VE, WE, TI, kI, lI, KH, By, gx, ux, HF, fH, mI, tG, YC, ZC, hK, nE, JA, LH, YB, hx, uG, oE, $C, IF, UI, AC, MH, XE, QK, wB, gH, hB, YE, JF, ZB, aD, KF, VI, iA, bD, iB, jB, KA, LF, hH, cD, iK, MF, nI, BC, NH, dD, RK, iH, CJ, oI, DJ, RM, WI, OH, PO, QO, SK, EJ, RO, FJ, TK, pI, KL, XI, jK, PH, QH, NF, kK, vG, RH, $B, CC, UK, VK, LL, jH, SO, ML, wG, xG, IN, JN, GJ, SH, kH, NL, YI, lK, ZI, SM, ZE, OL, TH, PL, qI, aC, KN, eD, QL, $I, mK, WK, XK, OF, pE, PQ,
        LN, RL, qE, lH, HJ, aJ, TM, yG, rI, bJ, cJ, nK, YK, zG, sI, AG, dJ, MN, SL, TL, IJ, tI, JJ, UL, UM, VL, eJ, BG, Hx, mH, uI, ZK, VM, WL, CG, UH, NN, $K, aL, WM, KJ, oK, VH, DG, LA, vI, fD, $E, XL, bL, PF, cL, wI, xI, nH, bC, aF, LJ, fJ, QF, pK, TO, XM, ON, MJ, dL, yI, UO, qK, QQ, NJ, RQ, sS, eL, fL, rK, YM, gL, gJ, YL, hL, tS, uS, sK, OJ, xB, RF, oH, hJ, EG, FG, zI, iJ, iL, DC, jL, tK, kL, lL, mL, SQ, PN, jJ, ZL, TQ, ZM, rE, pH, HD, bF, sE, tE, EC, yB, uE, vS, kJ, $M, nL, vE, wE, $L, PJ, aN, oL, uK, bN, QJ, SF, aM, QN, CU, bM, pL, RN, cM, NP, cN, dM, SN, qL, eM, OP, RJ, PP, qH, GG, cF, lJ, rL, wS, pz, UQ, SJ, TN, UN, fM, Gz, TJ, ID, sL, gM, QP, VO, VQ, hM, WQ,
        gD, tL, iM, RP, mJ, VN, SP, dN, uL, WN;
    b = 0;
    e = STACKTOP;
    STACKTOP = STACKTOP + 40 | 0;
    g = e + 8;
    h = e + 16;
    j = e + 24;
    i = e + 32;
    l = a + 205692;
    k = HEAP32[l >> 2];
    m = a + 205752;
    n = HEAP32[m >> 2] + k;
    p = HEAP32[c >> 2];
    q = c + (p + 8);
    r = HEAP32[q >> 2];
    0 == (r | 0) ? s = 0 : (t = HEAP32[r >> 2], u = r + t, s = w = HEAP32[u >> 2]);
    v = HEAP32[c + (p + 28) >> 2];
    x = HEAP32[c + (p + 32) >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return y = 0, STACKTOP = e, y;
    z = HEAP32[f + 24 >> 2];
    A = (v | 0) < (z | 0);
    do
        if (!A && (D = d + 24, B = HEAP32[D >> 2], G = (x | 0) < (B | 0), !G)) {
            C = f + 12;
            F = HEAP32[C >> 2];
            E = F & 1024;
            J = 0 == (E | 0);
            do
                if (J && (L = d + 12, I = HEAP32[L >> 2], H = I & 64512, K =
                        0 == (H | 0))) {
                    (N = 0 == (B | 0)) ? S = 1: (T = d + 28, S = V = HEAP32[T >> 2]);
                    Q = p + 12;
                    M = P = c + Q;
                    aa = O = R = HEAP32[M >> 2];
                    Z = HEAP32[aa >> 2];
                    ba = $ = O + Z;
                    ka = HEAP32[ba >> 2];
                    ea = ka >>> 31;
                    ha = ka >> 31;
                    (da = 1 == (ka | 0)) ? ga = 1: (U = -1 == (ka | 0), ga = ca = U & 1);
                    Y = (X = 0 == (ea | 0)) ? 0 : ga;
                    ja = HEAP32[31134];
                    fa = (ja | 0) == (f | 0);
                    a: do
                        if (fa) {
                            ia = 2 > (B | 0);
                            do
                                if (ia && (ra = I & 3, sa = 0 == (ra | 0), !sa)) {
                                    wa = ta = d;
                                    za = HEAP32[wa >> 2];
                                    Ba = ta + za;
                                    ua = 0 == ga << 24 >> 24;
                                    ya = S - 1;
                                    xa = ua ? ya : 0;
                                    oa = za + xa;
                                    pa = ta + oa;
                                    la = HEAP8[pa];
                                    qa = la << 24 >> 24;
                                    Da = d;
                                    Aa = qa;
                                    Ea = Ba;
                                    break a
                                }
                            while (0);
                            (Sa = 0 == (S | 0)) ?
                            Ha = Oa = HEAP32[31086]: (Ma = (Ga =
                                0 != ga << 24 >> 24) ? 1 : -1, Ia = HEAP32[31080], db = Ia + (Ma << 2), W = HEAP32[db >> 2], Xa = _jttake(a, W, d), Ha = Ta = _jteps(a, d, Xa));
                            if (fb = 0 == (Ha | 0)) return y = 0, STACKTOP = e, y;
                            ma = mb = Ha;
                            ab = HEAP32[ma >> 2];
                            Na = mb + ab;
                            Da = Ha;
                            Aa = 1;
                            Ea = Na
                        } else {
                            $a = f + 20;
                            Ua = HEAP32[$a >> 2];
                            Pa = 0 != (Ua | 0);
                            bb = 0 == (S | 0);
                            La = Pa | bb;
                            if (!La) {
                                Ja = p + 20;
                                Ya = Qa = c + Ja;
                                lb = HEAP32[Ya >> 2];
                                Ca = lb & 256;
                                if (gb = 0 == (Ca | 0)) return y = Fa = getFUNCTION_TABLE(s)(a, d, r), STACKTOP = e, y;
                                Za = p + 16;
                                ib = qb = c + Za;
                                ub = HEAP32[ib >> 2];
                                eb = ub + 20;
                                rb = HEAP32[eb >> 2];
                                (wb = 0 == (rb | 0)) ? (Ka = a + 4408, ob = nb = Va = HEAP32[Ka >> 2], cb = HEAP32[ob >>
                                                                                                                   2], Wa = cb + 36, Cb = yb = nb + Wa, Pb = HEAP32[Cb >> 2], zb = Pb + 20, Zb = HEAP32[zb >> 2], Hb = ac = Pb, Ib = HEAP32[Hb >> 2], Qb = ac + Ib, _jtjsigstr(a, 9, Zb, Qb), y = 0) : (Ob = Rb = ub, Bb = HEAP32[Ob >> 2], dc = xb = Rb + Bb, Mb = oc = tb = HEAP32[dc >> 2], Tb = HEAP32[Mb >> 2], Nb = Ra = oc + Tb, Ab = sb = HEAP32[Nb >> 2], y = Eb = getFUNCTION_TABLE(Ab)(a, d, tb));
                                STACKTOP = e;
                                return y
                            }
                            Lb = 0 == (Ua | 0);
                            do
                                if (!Lb && (vb = F & 32, wc = 0 == (vb | 0), !wc)) {
                                    if (Ec = 0 == (c | 0)) return y = 0, STACKTOP = e, y;
                                    Db = yc = f;
                                    bc = HEAP32[Db >> 2];
                                    Fb = pb = yc + bc;
                                    jb = f;
                                    gc = f + 4;
                                    ic = HEAP32[gc >> 2];
                                    vc = ic & 14;
                                    uc = (hc = 0 != (vc | 0)) ? jb : 0;
                                    if (Ac = (Ua | 0) > (B | 0)) return xc =
                                        a + 4408, Tc = jc = cd = HEAP32[xc >> 2], Fc = HEAP32[Tc >> 2], Bc = Fc + 36, Xb = ec = jc + Bc, sc = HEAP32[Xb >> 2], nc = sc + 20, tc = HEAP32[nc >> 2], $c = Ub = sc, ad = HEAP32[$c >> 2], qc = Ub + ad, _jtjsigstr(a, 9, tc, qc), y = 0, STACKTOP = e, y;
                                    Uc = _jtga(a, 32, Ua, 1, 0);
                                    if (rc = 0 == (Uc | 0)) return y = 0, STACKTOP = e, y;
                                    Jb = kb = Uc;
                                    $b = HEAP32[Jb >> 2];
                                    Vb = na = kb + $b;
                                    kc = _jtga(a, 32, Ua, 1, 0);
                                    if (va = 0 == (kc | 0)) return y = 0, STACKTOP = e, y;
                                    Yb = Wc = kc;
                                    fc = HEAP32[Yb >> 2];
                                    Gb = Kb = Wc + fc;
                                    gd = 0 < (Ua | 0);
                                    b: do
                                        if (gd) {
                                            mc = 0 == (uc | 0);
                                            Gc = 0 < (ka | 0);
                                            dd = a + 205336;
                                            kd = 0;
                                            c: for (;;) {
                                                Fd = Fb + (kd << 2);
                                                Vc = HEAP32[Fd >> 2];
                                                mc ? Hd = Vc :
                                                    (bd = Vc, Hd = Ic = cc = bd + uc);
                                                fd = Hd + 20;
                                                xd = HEAP32[fd >> 2];
                                                Xc = d + 28 + (kd << 2);
                                                Wd = HEAP32[Xc >> 2];
                                                Wb = Hd + 24;
                                                Sb = HEAP32[Wb >> 2];
                                                pc = 2 > (Sb | 0);
                                                if (!pc) {
                                                    b = 33;
                                                    break
                                                }
                                                zc = 0 != (xd | 0);
                                                hd = 0 == (Wd | 0);
                                                Yc = zc | hd;
                                                do
                                                    if (Yc) {
                                                        Ad = Hd + 12;
                                                        Gd = HEAP32[Ad >> 2];
                                                        hb = Gd & 1;
                                                        if (ld = 0 == (hb | 0)) {
                                                            ed = HEAP32[dd >> 2];
                                                            HEAP32[dd >> 2] = 0;
                                                            Jc = _jtccvt(a, 1, Hd, i);
                                                            HEAP32[dd >> 2] = ed;
                                                            if (Oc = 0 == Jc << 24 >> 24) {
                                                                b = 40;
                                                                break c
                                                            }
                                                            Pc = HEAP32[i >> 2];
                                                            if (ke = 0 == (Pc | 0)) {
                                                                y = 0;
                                                                b = 425;
                                                                break c
                                                            }
                                                            Ed = Pc + 24;
                                                            pd = HEAP32[Ed >> 2];
                                                            id = Pc;
                                                            Cc = pd
                                                        } else id = Hd, Cc = Sb;
                                                        if (Qc = 0 == (Cc | 0)) {
                                                            vd = Zc = id;
                                                            $d = HEAP32[vd >> 2];
                                                            je = Zc + $d;
                                                            Kc =
                                                                HEAP8[je];
                                                            if (Bd = 0 == Kc << 24 >> 24) {
                                                                od = HEAP32[31086];
                                                                Vd = Gb + (kd << 2);
                                                                HEAP32[Vd >> 2] = od;
                                                                Zd = Vb + (kd << 2);
                                                                HEAP32[Zd >> 2] = od;
                                                                break
                                                            }
                                                            Jd = Wd - 1;
                                                            Md = _jtga(a, 4, Wd, 1, 0);
                                                            if (Cd = 0 == (Md | 0)) {
                                                                b = 46;
                                                                break c
                                                            }
                                                            if (hd) fe = Vb + (kd << 2), HEAP32[fe >> 2] = Md;
                                                            else {
                                                                Xd = Md;
                                                                qd = HEAP32[Xd >> 2];
                                                                Od = Md;
                                                                Dd = Mc = Od + qd;
                                                                Td = -1;
                                                                for (le = Dd; !(me = Td + 1, wd = le + 4, HEAP32[le >> 2] = me, Ie = (me | 0) == (Jd | 0));) Td = me, le = wd;
                                                                xe = Vb + (kd << 2);
                                                                HEAP32[xe >> 2] = Md
                                                            }
                                                            ye = _jtga(a, 4, 1, 0, 0);
                                                            (Fe = 0 == (ye | 0)) ? nf = 0: (Id = Je = ye, Qe = HEAP32[Id >> 2], ge = sd = Je + Qe, HEAP32[ge >> 2] = Wd, nf = ye);
                                                            ud = HEAP32[31058];
                                                            md = HEAP32[30648];
                                                            de = Gc ? ud : md;
                                                            ae = _jtreshape(a, nf, de);
                                                            Dc = Gb + (kd << 2);
                                                            HEAP32[Dc >> 2] = ae;
                                                            if (Nc = 0 == (ae | 0)) {
                                                                y = 0;
                                                                b = 425;
                                                                break c
                                                            } else break
                                                        }
                                                        yd = (xd | 0) == (Wd | 0);
                                                        if (!yd) {
                                                            b = 57;
                                                            break c
                                                        }
                                                        Sc = jd = id;
                                                        lc = HEAP32[Sc >> 2];
                                                        if (nd = 0 < (xd | 0))
                                                            for (Hc = Rc = 0;;)
                                                                if (Kd = Hc + lc, Rd = jd + Kd, Nd = HEAP8[Rd], be = Nd << 24 >> 24, zd = be + Rc, we = Hc + 1, Lc = (we | 0) < (xd | 0)) Rc = zd, Hc = we;
                                                                else {
                                                                    rd = zd;
                                                                    break
                                                                } else rd = 0;
                                                        se = _jtga(a, 4, rd, 1, 0);
                                                        if (Ud = 0 == (se | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        td = Cf = se;
                                                        Te = HEAP32[td >> 2];
                                                        Pd = pe = Cf + Te;
                                                        Me = Vb + (kd << 2);
                                                        HEAP32[Me >> 2] = se;
                                                        Sd = _jtga(a, 4, rd, 1, 0);
                                                        if ($e = 0 == (Sd | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        Ce =
                                                            qe = Sd;
                                                        cf = HEAP32[Ce >> 2];
                                                        Ue = sf = qe + cf;
                                                        kf = Gb + (kd << 2);
                                                        HEAP32[kf >> 2] = Sd;
                                                        Re = 0 == (rd | 0);
                                                        if (!Re)
                                                            if (2 == (ka | 0)) {
                                                                if (nd) {
                                                                    ce = Pd;
                                                                    De = Ue;
                                                                    Ge = -1;
                                                                    for (He = 0;;)
                                                                        if (We = He + lc, Yd = jd + We, Ne = HEAP8[Yd], (Se = 0 == Ne << 24 >> 24) ? (Ee = Ge, Ld = De, he = ce) : (Qd = Ge + 1, re = ce + 4, HEAP32[ce >> 2] = Qd, Ke = He - Ge, Ae = De + 4, HEAP32[De >> 2] = Ke, Ee = He, Ld = Ae, he = re), te = He + 1, ie = (te | 0) < (xd | 0)) ce = he, De = Ld, Ge = Ee, He = te;
                                                                        else break
                                                                }
                                                            } else if (-2 == (ka | 0)) {
                                                            if (nd) {
                                                                ff = Pd;
                                                                ue = Ue;
                                                                Oe = -1;
                                                                for (ne = 0;;)
                                                                    if (ze = ne + lc, vf = jd + ze, lf = HEAP8[vf], (Xe = 0 == lf << 24 >> 24) ? (Be = Oe, hf = ue, af = ff) : (zf = Oe + 1, uf = ff +
                                                                            4, HEAP32[ff >> 2] = zf, ve = ~Oe, If = ne + ve, Df = ue + 4, HEAP32[ue >> 2] = If, Be = ne, hf = Df, af = uf), Ef = ne + 1, Gf = (Ef | 0) < (xd | 0)) ff = af, ue = hf, Oe = Be, ne = Ef;
                                                                    else break
                                                            }
                                                        } else if (1 == (ka | 0)) {
                                                            if (nd) {
                                                                of = Pd;
                                                                Lf = Ue;
                                                                pf = -1;
                                                                for (bf = 0;;)
                                                                    if (Bf = bf + lc, Pf = jd + Bf, Ye = HEAP8[Pf], (Hf = 0 == Ye << 24 >> 24) ? (jf = pf, mf = Lf, Le = of) : (Ve = of + 4, HEAP32[of >> 2] = bf, (df = -1 < (pf | 0)) ? (wf = bf - pf, Yf = Lf + 4, HEAP32[Lf >> 2] = wf, jf = bf, mf = Yf) : (jf = bf, mf = Lf), Le = Ve), Jf = bf + 1, Qf = (Jf | 0) < (xd | 0)) of = Le, Lf = mf, pf = jf, bf = Jf;
                                                                    else {
                                                                        Sf = mf;
                                                                        Mf = jf;
                                                                        break
                                                                    }
                                                            } else Sf = Ue, Mf = -1;
                                                            ee = xd - Mf;
                                                            HEAP32[Sf >> 2] = ee
                                                        } else if (-1 ==
                                                            (ka | 0)) {
                                                            if (nd) {
                                                                oe = Pd;
                                                                rf = Ue;
                                                                Ff = -1;
                                                                xf = 0;
                                                                for (Pe = 1;;)
                                                                    if (qf = xf + lc, yf = jd + qf, Nf = HEAP8[yf], Zf = 0 == Nf << 24 >> 24, tg = xf + 1, Zf ? (Ze = Ff, gf = rf, ef = oe) : (Kf = oe + 4, HEAP32[oe >> 2] = tg, (bg = -1 < (Ff | 0)) ? (lg = Pe - 1, Rf = lg + xf, Ug = rf + 4, HEAP32[rf >> 2] = Rf, Ze = xf, gf = Ug) : (Ze = xf, gf = rf), ef = Kf), Vf = -Ze, Jg = (tg | 0) < (xd | 0)) oe = ef, rf = gf, Ff = Ze, xf = tg, Pe = Vf;
                                                                    else {
                                                                        hg = gf;
                                                                        Lg = Vf;
                                                                        break
                                                                    }
                                                            } else hg = Ue, Lg = 1;
                                                            $f = xd - 1;
                                                            ah = $f + Lg;
                                                            HEAP32[hg >> 2] = ah
                                                        }
                                                    } else {
                                                        nh = HEAP32[30648];
                                                        dh = Vb + (kd << 2);
                                                        HEAP32[dh >> 2] = nh;
                                                        mg = _jtga(a, 4, 1, 0, 0);
                                                        if (yh = 0 == (mg | 0)) {
                                                            b = 36;
                                                            break c
                                                        }
                                                        ig = Bg = mg;
                                                        ng = HEAP32[ig >>
                                                            2];
                                                        Ch = Ng = Bg + ng;
                                                        HEAP32[Ch >> 2] = Wd;
                                                        Dg = Gb + (kd << 2);
                                                        HEAP32[Dg >> 2] = mg
                                                    }
                                                while (0);
                                                Vg = kd + 1;
                                                if (pg = (Vg | 0) < (Ua | 0)) kd = Vg;
                                                else break b
                                            }
                                            if (33 == b) return zg = a + 4408, dg = cg = Pg = HEAP32[zg >> 2], qg = HEAP32[dg >> 2], vg = qg + 56, Zg = bh = cg + vg, Eg = HEAP32[Zg >> 2], wg = Eg + 20, vh = HEAP32[wg >> 2], $g = Kh = Eg, Ag = HEAP32[$g >> 2], Lh = Kh + Ag, _jtjsigstr(a, 14, vh, Lh), y = 0, STACKTOP = e, y;
                                            if (36 == b) return xg = Gb + (kd << 2), y = HEAP32[xg >> 2] = 0, STACKTOP = e, y;
                                            if (40 == b) return Mg = a + 4408, jg = Sg = rg = HEAP32[Mg >> 2], Uh = HEAP32[jg >> 2], Of = Uh + 12, qi = Tg = Sg + Of, eg = HEAP32[qi >> 2], gi = eg + 20, kg =
                                                HEAP32[gi >> 2], Wg = Qg = eg, wi = HEAP32[Wg >> 2], zh = Qg + wi, _jtjsigstr(a, 3, kg, zh), y = 0, STACKTOP = e, y;
                                            if (46 == b) return Wf = Vb + (kd << 2), y = HEAP32[Wf >> 2] = 0, STACKTOP = e, y;
                                            if (57 == b) return di = a + 4408, Fg = Mh = ch = HEAP32[di >> 2], Rg = HEAP32[Fg >> 2], Vh = Rg + 36, eh = Gg = Mh + Vh, kh = HEAP32[eh >> 2], fh = kh + 20, Wh = HEAP32[fh >> 2], og = qh = kh, Og = HEAP32[og >> 2], Kg = qh + Og, _jtjsigstr(a, 9, Wh, Kg), y = 0, STACKTOP = e, y;
                                            if (425 == b) return STACKTOP = e, y
                                        }
                                    while (0);
                                    Ih = _jtcatalog(a, Uc);
                                    ai = _jtope(a, Ih);
                                    if (wh = 0 == (ai | 0)) return y = 0, STACKTOP = e, y;
                                    Xh = _jtcatalog(a, kc);
                                    Nh = _jtope(a, Xh);
                                    if (Jh = 0 == (Nh | 0)) return y = 0, STACKTOP = e, y;
                                    lj = ai + 20;
                                    gh = HEAP32[lj >> 2];
                                    (rh = 0 == (gh | 0)) ? (Ph = ai + 24, hi = HEAP32[Ph >> 2], sh = _jtga(a, 4, hi, 1, 0), (fg = 0 == (sh | 0)) ? Yi = 0 : (xi = mj = ai + 28, Ii = Hi = sh, lh = HEAP32[Ii >> 2], yg = Hi + lh, vj = hi << 2, _memcpy(yg, xi, vj) | 0, Yi = sh), Ji = _jtga(a, 4, 2, 1, 0), (Xj = 0 == (Ji | 0)) ? yi = 0 : (Aj = hh = Ji, ih = HEAP32[Aj >> 2], zi = Hj = hh + ih, ni = ih + 4, Cg = ti = hh + ni, HEAP32[zi >> 2] = 2, HEAP32[Cg >> 2] = 0, yi = Ji), Ah = _jtover(a, Yi, yi), oh = th = _jtiota(a, Ah)) : oh = Hg = _jtirs2(a, ai, Nh, 0, 1, 1, 1034);
                                    if (bi = 0 == (oh | 0)) return y = 0, STACKTOP = e, y;
                                    y = ui = _jtcut02(a,
                                        oh, d, c);
                                    STACKTOP = e;
                                    return y
                                }
                            while (0);
                            gj = F & 1;
                            if (rj = 0 == (gj | 0)) {
                                Ki = a + 205336;
                                Pj = HEAP32[Ki >> 2];
                                HEAP32[Ki >> 2] = 0;
                                Zi = _jtccvt(a, 1, f, j);
                                HEAP32[Ki >> 2] = Pj;
                                if (ii = 0 == Zi << 24 >> 24) return mh = a + 4408, Qh = vi = ji = HEAP32[mh >> 2], Ij = HEAP32[Qh >> 2], ik = Ij + 12, Xg = hj = vi + ik, Li = HEAP32[Xg >> 2], ph = Li + 20, al = HEAP32[ph >> 2], Yh = oi = Li, ek = HEAP32[Yh >> 2], ki = oi + ek, _jtjsigstr(a, 3, al, ki), y = 0, STACKTOP = e, y;
                                ci = HEAP32[j >> 2];
                                if (Rh = 0 == (ci | 0)) return y = 0, STACKTOP = e, y;
                                Bj = ci + 24;
                                wj = HEAP32[Bj >> 2];
                                Cj = ci;
                                Qi = wj
                            } else Cj = f, Qi = z;
                            if (Ri = 0 == (Qi | 0)) {
                                Qj = _jtga(a, 4, 1, 0,
                                    0);
                                (Dh = 0 == (Qj | 0)) ? Vk = 0: (Dj = Sh = Qj, xj = HEAP32[Dj >> 2], Rj = Eh = Sh + xj, HEAP32[Rj >> 2] = S, Vk = Qj);
                                Ai = _jtreshape(a, Vk, Cj);
                                if (Vi = 0 == (Ai | 0)) return y = 0, STACKTOP = e, y;
                                Yg = Ai
                            } else Yg = Cj;
                            Fh = ri = Yg;
                            fk = HEAP32[Fh >> 2];
                            Ei = ri + fk;
                            Da = Yg;
                            Aa = 1;
                            Ea = Ei
                        }
                    while (0);
                    Nk = Da + 24;
                    jk = HEAP32[Nk >> 2];
                    (qk = 0 == (jk | 0)) ? nj = 1: (pi = Da + 28, nj = yj = HEAP32[pi >> 2]);
                    Ig = (S | 0) == (nj | 0);
                    if (!Ig) return Th = a + 4408, Yj = Ej = ij = HEAP32[Th >> 2], $i = HEAP32[Yj >> 2], Ik = $i + 36, sj = zk = Ej + Ik, Fj = HEAP32[sj >> 2], Jj = Fj + 20, Wk = HEAP32[Jj >> 2], jj = Fi = Fj, Ak = HEAP32[jj >> 2], jl = Fi + Ak, _jtjsigstr(a, 9, Wk,
                        jl), y = 0, STACKTOP = e, y;
                    tk = Wi = r;
                    ei = HEAP32[tk >> 2];
                    Bk = p + 20;
                    kj = zj = c + Bk;
                    Bi = HEAP32[kj >> 2];
                    Ck = Bi & 256;
                    (ol = 0 == (Ck | 0)) ? (Ci = ei + 40, Sj = Wi + Ci, Kj = HEAP8[Sj], Zj = Kj << 24 >> 24, bl = Tj = 0, Jk = Zj, Ui = 0) : (fi = p + 16, oj = xh = c + fi, cl = gk = Dk = HEAP32[oj >> 2], uk = HEAP32[cl >> 2], Lj = sg = gk + uk, ul = Dk + 20, pj = HEAP32[ul >> 2], Tj = Dk, bl = Lj, Jk = 0, Ui = pj);
                    tf = HEAP32[D >> 2];
                    $j = (Xi = 1 > (tf | 0)) ? 1 : tf;
                    Si = d + 28;
                    Kk = gg = d;
                    Gh = HEAP32[Kk >> 2];
                    ag = gg + Gh;
                    (jh = 0 == (tf | 0)) ? (Hh = 1, b = 123) : (Af = HEAP32[Si >> 2], (Mi = 0 == (Af | 0)) ? b = 125 : (Hh = Af, b = 123));
                    123 == b && (kl = HEAP32[L >> 2], si = kl & 64512, (Ok = 0 ==
                        (si | 0)) ? (Zh = d + 20, dl = HEAP32[Zh >> 2], li = Lk = (dl | 0) / (Hh | 0) & -1) : b = 125);
                    a: do
                        if (125 == b) {
                            Uj = tf - 1;
                            fm = 0 < (Uj | 0);
                            do
                                if (fm) {
                                    Di = 1;
                                    for (Mk = 0;;)
                                        if (qj = Mk + 1, Pk = d + 28 + (qj << 2), vl = HEAP32[Pk >> 2], Mj = vl | 0, ak = Di * Mj, mi = (qj | 0) < (Uj | 0)) Di = ak, Mk = qj;
                                        else break;
                                    if (Jl = 2147483647 < ak) {
                                        Nj = a + 4408;
                                        ll = fl = Oh = HEAP32[Nj >> 2];
                                        vk = HEAP32[ll >> 2];
                                        bk = vk + 40;
                                        ck = Vj = fl + bk;
                                        ml = HEAP32[ck >> 2];
                                        rk = ml + 20;
                                        pl = HEAP32[rk >> 2];
                                        Qk = Kl = ml;
                                        wl = HEAP32[Qk >> 2];
                                        Ek = Kl + wl;
                                        _jtjsigstr(a, 10, pl, Ek);
                                        li = 0;
                                        break a
                                    } else Gi = ak
                                } else Gi = 1;
                            while (0);
                            li = sk = Gi & -1
                        }
                    while (0);
                    Bl = 8 == (I | 0) ? I : 1 ==
                        (I | 0) ? I : 2 == (I | 0) | 2097152 == (I | 0) | 33554432 == (I | 0) ? 1 : 131072 == (I | 0) ? 2 : 4 == (I | 0) | 67108864 == (I | 0) | 134217728 == (I | 0) | 4194304 == (I | 0) | 8388608 == (I | 0) ? 4 : 32 == (I | 0) ? 4 : 64 == (I | 0) ? 4 : 128 == (I | 0) ? 8 : 262144 == (I | 0) | 524288 == (I | 0) | 1048576 == (I | 0) ? 44 : 16777216 == (I | 0) ? 12 : 65536 == (I | 0) ? 4 : 268435456 == (I | 0) ? 12 : 536870912 == (I | 0) ? 24 : 16 == (I | 0) | 1024 == (I | 0) | 4096 == (I | 0) | 8192 == (I | 0) | 16384 == (I | 0) | 2048 == (I | 0) | 32768 == (I | 0) ? 16 : -1;
                    aj = Math_imul(Bl, li) | 0;
                    kk = d;
                    Ni = HEAP32[L >> 2];
                    Oi = Ni & 32;
                    (lk = 0 == (Oi | 0)) ? mk = 0: (nk = d + 4, Fl = HEAP32[nk >> 2], Xk = Fl & 14, bj = 0 != (Xk |
                        0), mk = Ll = bj & 1);
                    $h = -mk;
                    gl = kk & $h;
                    Bh = ga & 255;
                    cj = 91 == (Jk | 0) | 93 == (Jk | 0) ? 2 : Rk = (Fk = 44 == (Jk | 0)) ? 2 : 0;
                    dj = cj | Bh;
                    a: do
                        if (2 == (dj | 0)) {
                            ql = Ea - 1;
                            if (Sk = 0 < (S | 0)) {
                                dk = xl = ej = 0;
                                for (hk = Gl = ql;;)
                                    if (nl = Gl + 1, Yk = HEAP8[nl], ok = Yk << 24 >> 24, (Wj = (Aa | 0) == (ok | 0)) ? (Rl = ej + 1, pk = nl, Vl = hk, rl = pk - Vl, Gj = (Zk = (dk | 0) > (rl | 0)) ? dk : rl, Cl = nl, Gk = Gj, gm = Rl) : (Cl = hk, Gk = dk, gm = ej), hl = xl + 1, sl = (hl | 0) < (S | 0)) ej = gm, xl = hl, dk = Gk, Gl = nl, hk = Cl;
                                    else {
                                        Xf = gm;
                                        mm = Gk;
                                        $k = Cl;
                                        break
                                    }
                            } else mm = Xf = 0, $k = ql;
                            tl = Dl = Da;
                            bm = HEAP32[tl >> 2];
                            Ti = Dl + bm;
                            ug = $k;
                            Tf = Ti;
                            uh = mm;
                            Uf = Xf;
                            tj = S
                        } else
                    if (0 ==
                        (dj | 0))
                        if (uj = Da + 12, Sl = HEAP32[uj >> 2], il = Sl & 1, Wl = 0 != (il | 0), yn = 1 == (Aa | 0), im = Wl & yn) {
                            Xn = Ea;
                            io = (S | 0) / 1020 & -1;
                            if (ln = 1019 < (S | 0)) {
                                qm = 2039 < (S | 0);
                                el = 1020 * io & -1;
                                Il = qm ? el : 1020;
                                mn = Ea + Il;
                                $m = 0;
                                Jm = Xn;
                                for (om = 0;;) {
                                    jo = Eo = Am = zm = 0;
                                    hm = Jm;
                                    for (Fo = 0;;)
                                        if (ko = hm + 4, pm = HEAP32[hm >> 2], Bm = zm << 24, Km = Am << 16, Cm = Km | Bm, rm = Eo << 8, Lm = Cm | rm, Tm = Lm | jo, Qm = pm + Tm, an = Qm >>> 8, wk = Qm >>> 16, Go = Qm >>> 24, nn = Fo + 1, on = Qm & 255, cm = an & 255, In = wk & 255, bp = 255 > (nn | 0)) zm = Go, Am = In, Eo = cm, jo = on, hm = ko, Fo = nn;
                                        else break;
                                    Dp = Jm + 1020;
                                    lo = Go + om;
                                    bn = lo + In;
                                    cn = bn + cm;
                                    Um = cn + on;
                                    Ro = $m +
                                        1;
                                    if (Yn = (Ro | 0) < (io | 0)) $m = Ro, Jm = Dp, om = Um;
                                    else break
                                }
                                pn = Yl = mn;
                                Hk = Um
                            } else pn = Xn, Hk = 0;
                            vo = -1020 * io & -1;
                            Ho = vo + S;
                            if (Pp = 0 < (Ho | 0)) {
                                mo = vp = pn;
                                Io = 0;
                                for (hp = Hk;;)
                                    if (Vm = mo + 1, sm = HEAP8[mo], Zn = sm & 255, Oj = Zn + hp, Mm = Io + 1, Yp = (Mm | 0) < (Ho | 0)) mo = Vm, Io = Mm, hp = Oj;
                                    else {
                                        ug = 0;
                                        Tf = Ea;
                                        uh = 0;
                                        Uf = Oj;
                                        tj = S;
                                        break
                                    }
                            } else ug = 0, Tf = Ea, uh = 0, Uf = Hk, tj = S
                        } else {
                            if (Im = 0 < (S | 0)) {
                                zl = Ea - 1;
                                vm = Xl = 0;
                                for (Tl = zl;;)
                                    if (Ml = Tl + 1, kn = HEAP8[Ml], nm = kn << 24 >> 24, Fn = (Aa | 0) == (nm | 0), Nl = Fn & 1, Gn = Nl + vm, Pm = Xl + 1, Hl = (Pm | 0) < (S | 0)) Xl = Pm, vm = Gn, Tl = Ml;
                                    else {
                                        Op = Gn;
                                        break
                                    }
                            } else Op = 0;
                            uo = Hn =
                                Da;
                            Ol = HEAP32[uo >> 2];
                            Do = Hn + Ol;
                            ug = 0;
                            Tf = Do;
                            uh = 0;
                            Uf = Op;
                            tj = S
                        } else if (1 == (dj | 0)) {
                        Tq = Da + 12;
                        Dm = HEAP32[Tq >> 2];
                        Zl = Dm & 1;
                        dn = 0 == (Zl | 0);
                        do
                            if (!dn && (Nm = HEAP8[Ea], Rm = 1 == Nm << 24 >> 24)) {
                                jm = Ea;
                                Ep = (S | 0) / 1020 & -1;
                                if (cp = 1019 < (S | 0)) {
                                    So = 2039 < (S | 0);
                                    Jo = 1020 * Ep & -1;
                                    Jn = So ? Jo : 1020;
                                    Ko = Ea + Jn;
                                    $n = 0;
                                    Em = jm;
                                    for (dm = 0;;) {
                                        rq = El = Kn = To = 0;
                                        Zp = Em;
                                        for (Bq = 0;;)
                                            if (zn = Zp + 4, wp = HEAP32[Zp >> 2], no = To << 24, ip = Kn << 16, Er = ip | no, Lo = El << 8, sq = Er | Lo, An = sq | rq, jp = wp + An, Mo = jp >>> 8, Ln = jp >>> 16, kp = jp >>> 24, en = Bq + 1, Bn = jp & 255, Mn = Mo & 255, gq = Ln & 255, Nn = 255 > (en | 0)) To = kp, Kn = gq,
                                                El = Mn, rq = Bn, Zp = zn, Bq = en;
                                            else break;
                                        Hq = Em + 1020;
                                        dp = kp + dm;
                                        wo = dp + gq;
                                        Fp = wo + Mn;
                                        fn = Fp + Bn;
                                        On = $n + 1;
                                        if (ao = (On | 0) < (Ep | 0)) $n = On, Em = Hq, dm = fn;
                                        else break
                                    }
                                    gn = Qp = Ko;
                                    tm = fn
                                } else gn = jm, tm = 0;
                                um = -1020 * Ep & -1;
                                xo = um + S;
                                No = 0 < (xo | 0);
                                if (!No) {
                                    ug = 0;
                                    Tf = Ea;
                                    uh = 0;
                                    Uf = tm;
                                    tj = S;
                                    break a
                                }
                                $l = Gp = gn;
                                lp = 0;
                                for (km = tm;;)
                                    if (am = $l + 1, mp = HEAP8[$l], Fm = mp & 255, Ar = Fm + km, hq = lp + 1, iq = (hq | 0) < (xo | 0)) $l = am, lp = hq, km = Ar;
                                    else {
                                        ug = 0;
                                        Tf = Ea;
                                        uh = 0;
                                        Uf = Ar;
                                        tj = S;
                                        break a
                                    }
                            }
                        while (0);
                        Hp = Ea + S;
                        if (hn = 0 < (S | 0)) {
                            yo = Pn = 0;
                            for (qn = np = Hp;;)
                                if (tq = np - 1, rn = HEAP8[tq], $p = rn << 24 >> 24, Uq = (Aa |
                                        0) == ($p | 0), Rp = Uq & 1, Cq = Rp + yo, sn = Uq ? tq : qn, Qn = Pn + 1, uq = (Qn | 0) < (S | 0)) Pn = Qn, yo = Cq, np = tq, qn = sn;
                                else {
                                    Iq = Cq;
                                    Uo = Ea;
                                    Rn = sn;
                                    break
                                }
                        } else Iq = 0, Rn = Uo = Hp;
                        Vo = Rn;
                        Sn = Uo;
                        Ip = Sn + S;
                        ep = Ip - Vo;
                        Tf = ug = Rn;
                        uh = 0;
                        Uf = Iq;
                        tj = ep
                    } else if (3 == (dj | 0)) {
                        Cn = Ea + S;
                        if (Pi = 0 < (S | 0)) {
                            yl = Tk = xk = 0;
                            for (tn = yk = Cn;;)
                                if (lm = yk - 1, Tn = HEAP8[lm], vq = Tn << 24 >> 24, (Dn = (Aa | 0) == (vq | 0)) ? (oo = xk + 1, Wo = tn, wm = lm, Pl = Wo - wm, Vq = (Sp = (yl | 0) > (Pl | 0)) ? yl : Pl, Tp = lm, Oo = Vq, fp = oo) : (Tp = tn, Oo = yl, fp = xk), jq = Tk + 1, un = (jq | 0) < (S | 0)) xk = fp, Tk = jq, yl = Oo, yk = lm, tn = Tp;
                                else {
                                    Ul = fp;
                                    op = Oo;
                                    rr = Ea;
                                    Up = Tp;
                                    break
                                }
                        } else op =
                            Ul = 0, Up = rr = Cn;
                        bo = Up;
                        Po = rr;
                        Un = Po + S;
                        Jq = Un - bo;
                        Tf = ug = Up;
                        uh = op;
                        Uf = Ul;
                        tj = Jq
                    } else ug = 0, Tf = Ea, Uf = uh = 0, tj = S;
                    while (0);
                    xp = (aq = 0 != (gl | 0)) ? 0 : Jk;
                    a: do switch (xp | 0) {
                            case 44:
                            case 91:
                            case 93:
                                kq = (Gm = 0 == (uh | 0)) ? 0 : ea;
                                co = uh - kq;
                                pp = Math_imul(Uf, li) | 0;
                                En = pp | 0;
                                Kq = co | 0;
                                eo = En * Kq;
                                (dr = 2147483647 < eo) ? (Ql = a + 4408, Xo = kr = Wq = HEAP32[Ql >> 2], yp = HEAP32[Xo >> 2], Jp = yp + 40, Yo = qp = kr + Jp, Wm = HEAP32[Yo >> 2], Vn = Wm + 20, Vp = HEAP32[Vn >> 2], lq = Zo = Wm, Kp = HEAP32[lq >> 2], sr = Zo + Kp, _jtjsigstr(a, 10, Vp, sr), Lp = 0) : Lp = mq = eo & -1;
                                zo = a + 204545;
                                fo = HEAP8[zo];
                                Br = 0 == fo << 24 >>
                                    24;
                                if (!Br) return y = 0, STACKTOP = e, y;
                                rp = 44 == (Jk | 0);
                                nq = $j + 1;
                                Xq = rp ? 2 : nq;
                                Yr = d + 24;
                                Dq = _jtga(a, I, Lp, Xq, Yr);
                                if (Cr = 0 == (Dq | 0)) return y = 0, STACKTOP = e, y;
                                tr = lr = Dq;
                                wq = HEAP32[tr >> 2];
                                Lq = lr + wq;
                                _fillv(I, Lp, Lq);
                                oq = Dq + 28;
                                HEAP32[oq >> 2] = Uf;
                                bq = rp ? er = Math_imul(co, li) | 0 : co;
                                mr = Dq + 32;
                                HEAP32[mr >> 2] = bq;
                                Yq = Math_imul(co, aj) | 0;
                                if (po = 1 > (Uf | 0)) {
                                    qo = Dq;
                                    fr = ug;
                                    $o = Tf;
                                    Xm = tj;
                                    b = 328;
                                    break a
                                }
                                gp = 0 != ga << 24 >> 24;
                                go = Y & 255;
                                Ym = go + S;
                                ro = ga ^ 1;
                                ap = ro & 255;
                                ho = tj;
                                Zm = 1;
                                Ao = Lq;
                                Wn = Tf;
                                for (so = ug;;)
                                    if (fj = (Zm | 0) == (Uf | 0), (Mq = gp & fj) ? (sp = so, tp = ho) : (Zq = Wn + Bh, Uk = ho - Bh, zp =
                                            _memchr(Zq, Aa, Uk), to = em = zp + ap, vn = Wn, Hm = to - vn, sp = em, tp = Hm), xm = tp - ea, wn = Ym - ho, Ap = Math_imul(wn, aj) | 0, ym = Ap + Gh, jn = gg + ym, Om = Math_imul(xm, aj) | 0, _memcpy(Ao, jn, Om) | 0, Mp = Ao + Yq, xn = ho - tp, Bo = Zm + 1, Zr = (Zm | 0) < (Uf | 0)) ho = xn, Zm = Bo, Ao = Mp, so = Wn = sp;
                                    else {
                                        qo = Dq;
                                        $o = fr = sp;
                                        Xm = xn;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 60:
                                Qo = (Ur = 0 != (Uf | 0)) ? 32 : 1;
                                Wp = _jtga(a, Qo, Uf, 1, 0);
                                if (xq = 0 == (Wp | 0)) return y = 0, STACKTOP = e, y;
                                if (Fr = 1 > (Uf | 0)) {
                                    Eq = Wp;
                                    break a
                                }
                                yq = Wp;
                                qs = HEAP32[yq >> 2];
                                Lr = Wp;
                                cq = ur = Lr + qs;
                                is = 0 != ga << 24 >> 24;
                                Fq = Y & 255;
                                nr = Fq + S;
                                Bp = ga ^ 1;
                                Gr = Bp & 255;
                                Gq = tj;
                                pq = 1;
                                Mr =
                                    Tf;
                                $q = ug;
                                for (vr = cq;;) {
                                    Nq = (pq | 0) == (Uf | 0);
                                    (js = is & Nq) ? (Hr = $q, Np = Gq) : (qq = Mr + Bh, Oq = Gq - Bh, ar = _memchr(qq, Aa, Oq), wr = zq = ar + Gr, br = Mr, Al = wr - br, Hr = zq, Np = Al);
                                    Co = Np - ea;
                                    dq = Math_imul(Co, li) | 0;
                                    Aq = _jtga(a, I, dq, $j, Si);
                                    if (Vr = 0 == (Aq | 0)) {
                                        y = 0;
                                        break
                                    }
                                    eq = nr - Gq;
                                    Xp = Math_imul(eq, aj) | 0;
                                    fq = Xp + Gh;
                                    $r = gg + fq;
                                    Ir = Aq + 28;
                                    HEAP32[Ir >> 2] = Co;
                                    Rr = Nr = Aq;
                                    Pq = HEAP32[Rr >> 2];
                                    Or = Nr + Pq;
                                    Es = Math_imul(Co, aj) | 0;
                                    _memcpy(Or, $r, Es) | 0;
                                    ks = vr + 4;
                                    HEAP32[vr >> 2] = Aq;
                                    gr = Gq - Np;
                                    ls = pq + 1;
                                    if (dt = (pq | 0) < (Uf | 0)) Gq = gr, pq = ls, $q = Mr = Hr, vr = ks;
                                    else {
                                        qo = Wp;
                                        $o = fr = Hr;
                                        Xm = gr;
                                        b = 328;
                                        break a
                                    }
                                }
                                STACKTOP =
                                    e;
                                return y;
                            case -84:
                                ms = Math_imul(Uf, li) | 0;
                                Qq = _jtga(a, I, ms, $j, Si);
                                if (as = 0 == (Qq | 0)) return y = 0, STACKTOP = e, y;
                                Jr = Qq;
                                Wr = HEAP32[Jr >> 2];
                                bs = Qq + 28;
                                HEAP32[bs >> 2] = Uf;
                                if (nt = 1 > (Uf | 0)) {
                                    Eq = Qq;
                                    break a
                                }
                                Rq = Qq;
                                or = Rq + Wr;
                                hr = 0 != ga << 24 >> 24;
                                Dr = Y & 255;
                                Fs = Dr + S;
                                Kr = ga ^ 1;
                                As = Kr & 255;
                                Gs = tj;
                                ir = 1;
                                pr = or;
                                Xr = Tf;
                                for (Vs = ug;;)
                                    if (Bs = (ir | 0) == (Uf | 0), (Ws = hr & Bs) ? (rs = Vs, Js = Gs) : (Cp = Xr + Bh, Sr = Gs - Bh, cs = _memchr(Cp, Aa, Sr), cr = ss = cs + As, jr = Xr, et = cr - jr, rs = ss, Js = et), (Wt = (Js | 0) == (ea | 0)) ? _fillv(I, li, pr) : (ku = Fs - Gs, Xt = Math_imul(ku, aj) | 0, ft = Xt + Gh, Ps = gg + ft, _memcpy(pr,
                                            Ps, aj) | 0), Xs = pr + aj, Cs = Gs - Js, Dt = ir + 1, vt = (ir | 0) < (Uf | 0)) Gs = Cs, ir = Dt, pr = Xs, Vs = Xr = rs;
                                    else {
                                        qo = Qq;
                                        $o = fr = rs;
                                        Xm = Cs;
                                        b = 328;
                                        break
                                    }
                                break;
                            case -83:
                                ot = Math_imul(Uf, li) | 0;
                                ns = _jtga(a, I, ot, $j, Si);
                                if (Ks = 0 == (ns | 0)) return y = 0, STACKTOP = e, y;
                                Ds = ns;
                                Tr = HEAP32[Ds >> 2];
                                Ys = ns + 28;
                                HEAP32[Ys >> 2] = Uf;
                                if (lu = 1 > (Uf | 0)) {
                                    Eq = ns;
                                    break a
                                }
                                Yt = ns;
                                Nt = Yt + Tr;
                                xt = 0 != ga << 24 >> 24;
                                xr = Y & 255;
                                qr = S - 1;
                                Zs = qr + ha;
                                Et = Zs + xr;
                                Ku = ga ^ 1;
                                gt = Ku & 255;
                                Qs = tj;
                                xs = 1;
                                pt = Nt;
                                $s = Tf;
                                for (Zt = ug;;)
                                    if (qt = (xs | 0) == (Uf | 0), (ds = xt & qt) ? (yt = Zt, ys = Qs) : (Lu = $s + Bh, us = Qs - Bh, at = _memchr(Lu, Aa, us),
                                            Rs = zs = at + gt, Pr = $s, os = Rs - Pr, yt = zs, ys = os), ($t = (ys | 0) == (ea | 0)) ? _fillv(I, li, pt) : (Ls = Et - Qs, Ss = Ls + ys, ht = Math_imul(Ss, aj) | 0, wt = ht + Gh, yu = gg + wt, _memcpy(pt, yu, aj) | 0), kv = pt + aj, Ft = Qs - ys, uv = xs + 1, au = (xs | 0) < (Uf | 0)) Qs = Ft, xs = uv, pt = kv, Zt = $s = yt;
                                    else {
                                        qo = ns;
                                        $o = fr = yt;
                                        Xm = Ft;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 64:
                            case -75:
                            case 38:
                            case -73:
                                rt = ei + 8;
                                vv = mu = Wi + rt;
                                wv = HEAP32[vv >> 2];
                                if (Mu = 0 == (wv | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                bu = wv + 12;
                                it = HEAP32[bu >> 2];
                                Ot = it & 1835008;
                                if (qw = 0 == (Ot | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                zt = zu = wv;
                                Gt = HEAP32[zt >>
                                    2];
                                jt = Gt + 40;
                                cu = zu + jt;
                                nu = HEAP8[cu];
                                Zu = 60 == nu << 24 >> 24;
                                if (!Zu) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                st = ei + 12;
                                ws = kt = Wi + st;
                                lt = HEAP32[ws >> 2];
                                if (xv = 0 == (lt | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                qy = lt + 12;
                                Pv = HEAP32[qy >> 2];
                                Nu = Pv & 1835008;
                                if (Pt = 0 == (Nu | 0)) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                ou = cw = lt;
                                dw = HEAP32[ou >> 2];
                                Ou = dw + 40;
                                Qv = cw + Ou;
                                At = HEAP8[Qv];
                                yv = At << 24 >> 24;
                                zv = -82 == At << 24 >> 24;
                                lv = yv + 82;
                                Pu = 2 > lv >>> 0;
                                if (!Pu) {
                                    Sm = tj;
                                    es = Tf;
                                    vs = ug;
                                    b = 329;
                                    break a
                                }
                                Av = ($u = 0 != (Uf | 0)) ? 32 : 1;
                                Ms = _jtga(a, Av, Uf, 1, 0);
                                if (rw = 0 == (Ms | 0)) return y = 0, STACKTOP = e,
                                    y;
                                if (Hs = 1 > (Uf | 0)) {
                                    Eq = Ms;
                                    break a
                                }
                                du = Ms;
                                mt = HEAP32[du >> 2];
                                Au = Ms;
                                mv = Bu = Au + mt;
                                Bv = 0 != ga << 24 >> 24;
                                sw = Y & 255;
                                av = sw + S;
                                Rv = zv ? aj : 0;
                                Qt = Rv + Gh;
                                pu = ha - 1;
                                Ew = ga ^ 1;
                                bt = Ew & 255;
                                yr = tj;
                                Rt = 1;
                                Cv = Tf;
                                Ht = ug;
                                for (qu = mv;;) {
                                    ix = (Rt | 0) == (Uf | 0);
                                    (Fw = Bv & ix) ? (ct = Ht, Sv = yr) : (Dv = Cv + Bh, Qu = yr - Bh, Ru = _memchr(Dv, Aa, Qu), Is = Bt = Ru + bt, Tv = Cv, Ev = Is - Tv, ct = Bt, Sv = Ev);
                                    bv = (Sv | 0) == (ea | 0);
                                    It = pu + Sv;
                                    Jt = bv ? 0 : It;
                                    gs = Math_imul(Jt, li) | 0;
                                    Cu = _jtga(a, I, gs, $j, Si);
                                    if (Ts = 0 == (Cu | 0)) {
                                        y = 0;
                                        break
                                    }
                                    vx = av - yr;
                                    Fv = Math_imul(vx, aj) | 0;
                                    Su = Cu + 28;
                                    HEAP32[Su >> 2] = Jt;
                                    Du = Tu = Cu;
                                    Pw = HEAP32[Du >>
                                        2];
                                    ru = Tu + Pw;
                                    Qw = Qt + Fv;
                                    Kt = gg + Qw;
                                    wx = Math_imul(Jt, aj) | 0;
                                    _memcpy(ru, Kt, wx) | 0;
                                    hs = qu + 4;
                                    HEAP32[qu >> 2] = Cu;
                                    up = yr - Sv;
                                    tw = Rt + 1;
                                    if (Ix = (Rt | 0) < (Uf | 0)) yr = up, Rt = tw, Ht = Cv = ct, qu = hs;
                                    else {
                                        qo = Ms;
                                        $o = fr = ct;
                                        Xm = up;
                                        b = 328;
                                        break a
                                    }
                                }
                                STACKTOP = e;
                                return y;
                            case 47:
                                Us = ei + 8;
                                Sq = ts = Wi + Us;
                                vw = uw = xx = HEAP32[Sq >> 2];
                                eu = HEAP32[vw >> 2];
                                Uv = eu + 40;
                                ew = uw + Uv;
                                fw = HEAP8[ew];
                                (Jx = -67 == fw << 24 >> 24) ? (Uu = eu + 8, su = Vv = uw + Uu, nv = HEAP32[su >> 2], gw = nv + 12, hw = HEAP32[gw >> 2], fu = hw & 4, (Gv = 0 == (fu | 0)) ? gu = -67 : (Qr = nv + 24, iw = HEAP32[Qr >> 2], (cv = 0 == (iw | 0)) ? (tu = Hv = nv, Vu = HEAP32[tu >>
                                    2], Ns = ww = Hv + Vu, uu = HEAP32[Ns >> 2], Lt = uu - 16, St = 16 > Lt >>> 0, Kx = uu & 255, gu = hu = St ? Kx : -67) : gu = -67)) : gu = fw;
                                Rw = gu & 255;
                                Wv = Rw + 56;
                                Lx = HEAP8[Wv];
                                Xv = (Iz = 0 == Lx << 24 >> 24) ? 0 : gu;
                                iu = a + 204545;
                                ov = HEAP8[iu];
                                Iv = 50 == ov << 24 >> 24;
                                do
                                    if (Iv) HEAP8[iu] = 0, (pv = 43 == Xv << 24 >> 24) ? (Os = 8, tt = 1024, Tt = 206) : (jx = (Sw = 45 == Xv << 24 >> 24) ? 382 : 1208, Os = 8, tt = 1024, Tt = jx);
                                    else {
                                        yx = I & 805402077;
                                        if (Mx = 0 == (yx | 0)) {
                                            Sm = tj;
                                            es = Tf;
                                            vs = ug;
                                            b = 329;
                                            break a
                                        }
                                        Wu = Xv & 255;
                                        jw = Wu + 56;
                                        Tw = HEAP8[jw];
                                        ut = Tw & 255;
                                        Dy = I & 1;
                                        (xw = 0 == (Dy | 0)) ? (kx = I & 4, (Ey = 0 == (kx | 0)) ? (Jv = I & 8, (Gw = 0 == (Jv | 0)) ? (dy = I & 16, (kA = 0 == (dy | 0)) ? (Eu = I & 64, (Vy = 0 == (Eu | 0)) ? (Wy = I >>> 7, zx = Wy & 1, vu = Xy = 6 - zx) : vu = 4) : vu = 3) : vu = 2) : vu = 1) : vu = 0;
                                        Yy = 912 + (272 * ut & -1) + (vu << 3);
                                        Uw = HEAP32[Yy >> 2];
                                        Nx = 912 + (272 * ut & -1) + (vu << 3) + 4;
                                        kw = HEAP32[Nx >> 2];
                                        if (ey = 0 == (Uw | 0)) {
                                            Sm = tj;
                                            es = Tf;
                                            vs = ug;
                                            b = 329;
                                            break a
                                        } else Fy = Uw, fy = kw;
                                        yw = fy & 256;
                                        (Yv = 0 == (yw | 0)) ? (Kv = fy, Zy = Fy, Lv = Kv & 512, (Hw = 0 == (Lv | 0)) ? (Xu = Zy, Ox = Kv, Zv = Ox & 1024, (Ut = 0 == (Zv | 0)) ? (Fu = Ox & 2048, (Vw = 0 == (Fu | 0)) ? (Px = Ox & 8192, (Qx = 0 == (Px | 0)) ? (Rx = Ox & 4096, Os = Ax = (ry = 0 != (Rx | 0)) ? 64 : 65536) : Os = 128) : Os = 16) : Os = 8, tt = Ox, Tt = Xu) : (Os = 4, tt = Kv, Tt =
                                            Zy)) : (Os = 1, tt = fy, Tt = Fy)
                                    }
                                while (0);
                                zr = Math_imul(Uf, li) | 0;
                                qv = _jtga(a, Os, zr, $j, Si);
                                if (lx = 0 == (qv | 0)) return y = 0, STACKTOP = e, y;
                                Sx = qv + 28;
                                HEAP32[Sx >> 2] = Uf;
                                Tx = qv + 20;
                                Jz = HEAP32[Tx >> 2];
                                if (sy = 0 == (Jz | 0)) return y = qv, STACKTOP = e, y;
                                Iw = gy = qv;
                                Ww = HEAP32[Iw >> 2];
                                dv = gy + Ww;
                                zw = 4 == (Os | 0) ? 4 : 64 == (Os | 0) ? 4 : 128 == (Os | 0) ? 8 : 65536 == (Os | 0) ? 4 : 1 == (Os | 0) | 16 == (Os | 0) | 8 == (Os | 0) ? Os : -1;
                                Mt = Math_imul(zw, li) | 0;
                                Ux = tt & 1835071;
                                if (MA = 0 == (Ux | 0)) mx = d, Bx = ag;
                                else if (Gy = tt & 1, (Vx = 0 == (Gy | 0)) ? (rv = tt & 2, (Cx = 0 == (rv | 0)) ? (lw = tt & 4, (NA = 0 == (lw | 0)) ? (Gu = tt & 8, (nx = 0 == (Gu |
                                        0)) ? (ty = tt << 1, ox = ty & 64, Hy = Iy = ox + 64) : Hy = 16) : Hy = 8) : Hy = 4) : Hy = 1, Jw = (Hy | 0) == (I | 0)) mx = d, Bx = ag;
                                else {
                                    Aw = a + 205336;
                                    ev = HEAP32[Aw >> 2];
                                    HEAP32[Aw >> 2] = 0;
                                    Wx = _jtccvt(a, Hy, d, h);
                                    HEAP32[Aw >> 2] = ev;
                                    if (Xx = 0 == Wx << 24 >> 24) return Xw = a + 4408, qz = hy = uy = HEAP32[Xw >> 2], sv = HEAP32[qz >> 2], lA = sv + 12, px = vy = hy + lA, wy = HEAP32[px >> 2], fv = wy + 20, xy = HEAP32[fv >> 2], mw = Dx = wy, Ex = HEAP32[mw >> 2], qx = Dx + Ex, _jtjsigstr(a, 3, xy, qx), y = 0, STACKTOP = e, y;
                                    gv = HEAP32[h >> 2];
                                    if (Kz = 0 == (gv | 0)) return y = 0, STACKTOP = e, y;
                                    Hu = Ct = gv;
                                    mA = HEAP32[Hu >> 2];
                                    $y = Ct + mA;
                                    mx = gv;
                                    Bx = $y
                                }
                                nA = 1 > (Uf |
                                    0);
                                b: do
                                    if (nA) b = 316;
                                    else {
                                        Lz = 0 != ga << 24 >> 24;
                                        az = Y & 255;
                                        OA = az + S;
                                        bz = ga ^ 1;
                                        rz = bz & 255;
                                        Jy = a + 205336;
                                        Mz = a + 4408;
                                        Yw = (rx = (zw | 0) < (Mt | 0)) ? zw : Mt;
                                        nw = Tt;
                                        Iu = tj;
                                        oA = 1;
                                        Ky = 0;
                                        Yx = dv;
                                        Nz = Tf;
                                        Zx = ug;
                                        c: for (;;) {
                                            Ly = (oA | 0) == (Uf | 0);
                                            (pA = Lz & Ly) ? (PA = Zx, Yu = Iu) : (Zw = Nz + Bh, Mv = Iu - Bh, QA = _memchr(Zw, Aa, Mv), sz = $v = QA + rz, Kw = Nz, My = sz - Kw, PA = $v, Yu = My);
                                            $x = Yu - ea;
                                            qA = (Yu | 0) == (ea | 0);
                                            do
                                                if (qA) {
                                                    if (Fx = 0 == (Ky | 0)) {
                                                        tz = HEAP32[q >> 2];
                                                        iy = HEAP32[30648];
                                                        $w = ow = tz;
                                                        RA = HEAP32[$w >> 2];
                                                        kB = RA + 8;
                                                        cz = ND = ow + kB;
                                                        dz = HEAP32[cz >> 2];
                                                        Oz = _jtiden(a, dz);
                                                        (HC = 0 == (Oz | 0)) ? ez = 0: (pw = SA = Oz, rA = HEAP32[pw >>
                                                                                                                  2], Bw = hv = SA + rA, fz = iv = HEAP32[Bw >> 2], ez = Pz = getFUNCTION_TABLE(fz)(a, iy, Oz));
                                                        ax = HEAP8[iu];
                                                        iD = 0 == ax << 24 >> 24;
                                                        if (!iD) {
                                                            Qz = ax;
                                                            break b
                                                        }
                                                        bx = ez + 12;
                                                        uz = HEAP32[bx >> 2];
                                                        if (OD = (uz | 0) > (Os | 0)) break c;
                                                        if (vz = (uz | 0) < (Os | 0))
                                                            if (lB = HEAP32[Jy >> 2], HEAP32[Jy >> 2] = 0, cx = _jtccvt(a, Os, ez, g), HEAP32[Jy >> 2] = lB, (jy = 0 == cx << 24 >> 24) ? (BB = Ny = gz = HEAP32[Mz >> 2], IC = HEAP32[BB >> 2], jD = IC + 12, PD = JC = Ny + jD, eC = HEAP32[PD >> 2], ky = eC + 20, Rz = HEAP32[ky >> 2], ly = Sz = eC, ay = HEAP32[ly >> 2], kD = Sz + ay, _jtjsigstr(a, 3, Rz, kD), Oy = 0) : Oy = AE = HEAP32[g >> 2], Tz = HEAP8[iu], by = 0 == Tz << 24 >>
                                                                24) Vt = Oy;
                                                            else {
                                                                Qz = Tz;
                                                                break b
                                                            } else Vt = ez;
                                                        hz = wz = Vt;
                                                        Py = HEAP32[hz >> 2];
                                                        Cw = wz + Py;
                                                        if (Qy = 0 == (Cw | 0)) {
                                                            b = 316;
                                                            break b
                                                        } else Dw = Cw
                                                    } else Dw = Ky;
                                                    _memcpy(Yx, Dw, Yw) | 0;
                                                    if (rx)
                                                        for (iz = zw;;)
                                                            if (mB = Mt - iz, fC = Yx + iz, lD = (Uz = (iz | 0) < (mB | 0)) ? iz : mB, _memcpy(fC, Yx, lD) | 0, gC = iz << 1, xz = (gC | 0) < (Mt | 0)) iz = gC;
                                                            else {
                                                                cy = Dw;
                                                                break
                                                            } else cy = Dw
                                                } else hC = OA - Iu, iC = Math_imul(hC, aj) | 0, yz = Bx + iC, nB = Math_imul($x, li) | 0, getFUNCTION_TABLE(nw)(a, 1, nB, $x, Yx, yz), cy = Ky;
                                            while (0);
                                            CB = Yx + Mt;
                                            QD = Iu - Yu;
                                            dx = oA + 1;
                                            if (aw = (oA | 0) < (Uf | 0)) Iu = QD, oA = dx, Ky = cy, Yx = CB, Zx = Nz = PA;
                                            else {
                                                b = 316;
                                                break b
                                            }
                                        }
                                        oB = HEAP32[30858];
                                        Ry = HEAP32[M >> 2];
                                        sA = _jtcut(a, oB, Ry);
                                        jz = _jtcut2(a, Da, mx, sA);
                                        DB = HEAP32[30860];
                                        my = _jtamp(a, tz, DB);
                                        if (iF = 0 == (my | 0)) b = 316;
                                        else if (tA = pB = my, TA = HEAP32[tA >> 2], Sy = Gx = pB + TA, Ju = UA = HEAP32[Sy >> 2], KC = getFUNCTION_TABLE(Ju)(a, jz, my), LC = 0 == (KC | 0)) b = 316;
                                        else return y = KC, STACKTOP = e, y
                                    }
                                while (0);
                                316 == b && (Qz = EB = HEAP8[iu]);
                                if (50 == Qz << 24 >> 24) return y = MC = _jtcut2(a, Da, mx, c), STACKTOP = e, y;
                                if (0 == Qz << 24 >> 24) {
                                    uA = tt & 196608;
                                    if (RD = 0 == (uA | 0)) return y = qv, STACKTOP = e, y;
                                    VA = qv + 12;
                                    NC = HEAP32[VA >> 2];
                                    mD = tt & 65536;
                                    zz = 0 ==
                                        (mD | 0);
                                    vA = 8 == (NC | 0);
                                    cI = zz | vA;
                                    if (!cI) return Vz = a + 205336, Wz = HEAP32[Vz >> 2], HEAP32[Vz >> 2] = 0, Ty = _jtccvt(a, 8, qv, e), HEAP32[Vz >> 2] = Wz, Xz = 0 != Ty << 24 >> 24, BE = HEAP32[e >> 2], y = nD = Xz ? BE : qv, STACKTOP = e, y;
                                    Az = tt & 131072;
                                    wA = 0 == (Az | 0);
                                    oD = 4 == (NC | 0);
                                    if (OC = wA | oD) return y = qv, STACKTOP = e, y;
                                    ex = HEAP32[Tx >> 2];
                                    bw = HEAP32[Iw >> 2];
                                    Lw = qv + 24;
                                    jv = HEAP32[Lw >> 2];
                                    wu = _jtga(a, 4, ex, jv, Sx);
                                    if (Yz = 0 == (wu | 0)) return y = 0, STACKTOP = e, y;
                                    sx = 0 < (ex | 0);
                                    if (!sx) return y = wu, STACKTOP = e, y;
                                    Zz = wu;
                                    Bz = HEAP32[Zz >> 2];
                                    $z = wu;
                                    Nv = $z + Bz;
                                    kz = gy + bw;
                                    xA = Nv;
                                    II = kz;
                                    yA = 0;
                                    Cz = II;
                                    for (lz =
                                        xA;;) {
                                        wH = HEAPF64[Cz >> 3];
                                        XF = -2147483648 > wH;
                                        YF = 2147483647 < wH;
                                        if (zA = XF | YF) {
                                            y = qv;
                                            b = 425;
                                            break
                                        }
                                        SD = Cz + 8;
                                        tv = wH & -1;
                                        FB = lz + 4;
                                        HEAP32[lz >> 2] = tv;
                                        AA = yA + 1;
                                        if (Dz = (AA | 0) < (ex | 0)) yA = AA, Cz = SD, lz = FB;
                                        else {
                                            y = wu;
                                            b = 425;
                                            break
                                        }
                                    }
                                    if (425 == b) return STACKTOP = e, y
                                } else return y = 0, STACKTOP = e, y;
                                break;
                            case 35:
                                ny = _jtga(a, 4, Uf, 1, 0);
                                if (yy = 0 == (ny | 0)) return y = 0, STACKTOP = e, y;
                                if (Mw = 1 > (Uf | 0)) {
                                    Eq = ny;
                                    break a
                                }
                                ju = ny;
                                Nw = HEAP32[ju >> 2];
                                WA = ny;
                                pD = GB = WA + Nw;
                                aA = 0 != ga << 24 >> 24;
                                qB = ga ^ 1;
                                mz = qB & 255;
                                tx = pD;
                                bA = tj;
                                Ez = 1;
                                XA = Tf;
                                for (YA = ug;;)
                                    if (cA = (Ez | 0) == (Uf | 0), (qD = aA &
                                            cA) ? (TD = YA, rB = bA) : (dA = XA + Bh, LG = bA - Bh, PC = _memchr(dA, Aa, LG), UD = HB = PC + mz, jC = XA, rD = UD - jC, TD = HB, rB = rD), ZA = rB - ea, ZF = tx + 4, HEAP32[tx >> 2] = ZA, kC = bA - rB, MG = Ez + 1, IL = (Ez | 0) < (Uf | 0)) tx = ZF, bA = kC, Ez = MG, YA = XA = TD;
                                    else {
                                        qo = ny;
                                        $o = fr = TD;
                                        Xm = kC;
                                        b = 328;
                                        break
                                    }
                                break;
                            case 36:
                                lC = _jtga(a, 4, Uf, 1, 0);
                                if (NG = 0 == (lC | 0)) return y = 0, STACKTOP = e, y;
                                sD = 1 > (Uf | 0);
                                if (!sD) {
                                    $F = lC;
                                    dI = HEAP32[$F >> 2];
                                    jF = lC;
                                    eI = OG = jF + dI;
                                    tD = 0 != ga << 24 >> 24;
                                    uD = ga ^ 1;
                                    VD = uD & 255;
                                    CE = eI;
                                    WD = tj;
                                    mC = 1;
                                    IB = Tf;
                                    for (kF = ug;;)
                                        if (JB = (mC | 0) == (Uf | 0), (xH = tD & JB) ? (DE = kF, vD = WD) : (XD = IB + Bh, zy = WD - Bh,
                                                KB = _memchr(XD, Aa, zy), lF = BA = KB + VD, mF = IB, nC = lF - mF, DE = BA, vD = nC), $A = vD - ea, wJ = CE + 4, HEAP32[CE >> 2] = $A, aG = WD - vD, JI = mC + 1, EE = (mC | 0) < (Uf | 0)) CE = wJ, WD = aG, mC = JI, kF = IB = DE;
                                        else break
                                }
                                nF = $j - 1;
                                aB = _jtga(a, 4, nF, 1, 0);
                                (yH = 0 == (aB | 0)) ? wD = 0: (cG = bG = d + 32, FE = YD = aB, oC = HEAP32[FE >> 2], pC = YD + oC, dG = nF << 2, _memcpy(pC, cG, dG) | 0, wD = aB);
                                y = ZD = _jtirs2(a, lC, wD, 0, 0, 1, 774);
                                STACKTOP = e;
                                return y;
                            default:
                                Sm = tj, es = Tf, vs = ug, b = 329
                        }
                        while (0);
                        328 == b && ((zH = 0 == (qo | 0)) ? (Sm = Xm, es = $o, vs = fr, b = 329) : Eq = qo);
                    a: do
                        if (329 == b) {
                            if (PG = 0 == (Uf | 0)) return fI = HEAP32[30648],
                            QG = _jtreitem(a, fI, d), (eG = 0 == (Tj | 0)) ? nz = gI = getFUNCTION_TABLE(s)(a, QG, r) : (xD = HEAP32[bl >> 2], (xJ = 0 == (xD | 0)) ? nz = 0 : (LI = KI = xD, AH = HEAP32[LI >> 2], oF = fG = KI + AH, pF = BH = HEAP32[oF >> 2], nz = yJ = getFUNCTION_TABLE(pF)(a, QG, xD))), RG = a + 204545, HEAP8[RG] = 0, CA = a + 4400, HEAP32[CA >> 2] = 0, GE = HEAP32[30648], QC = 0 != (nz | 0), zJ = HEAP32[31086], qC = QC ? nz : zJ, ($D = 0 == (qC | 0)) ? oy = 0 : (MI = qC + 24, rC = HEAP32[MI >> 2], bB = _jtga(a, 4, rC, 1, 0), (sB = 0 == (bB | 0)) ? oy = 0 : (NI = gG = qC + 28, sC = qF = bB, LB = HEAP32[sC >> 2], rF = qF + LB, CH = rC << 2, _memcpy(rF, NI, CH) | 0, oy = bB)), yD = _jtover(a, GE, oy),
                                y = hG = _jtiota(a, yD), STACKTOP = e, y;
                            sF = _jtga(a, 32, Uf, 1, 0);
                            if (cB = 0 == (sF | 0)) return y = 0, STACKTOP = e, y;
                            tB = py = sF;
                            Ow = HEAP32[tB >> 2];
                            hI = SG = py + Ow;
                            TG = aq ? 2 : 0;
                            OI = 0 != (Tj | 0);
                            MB = OI & 1;
                            aE = TG | MB;
                            b: do
                                if (2 == (aE | 0)) {
                                    if (tF = 1 > (Uf | 0)) {
                                        Eq = sF;
                                        break a
                                    }
                                    UG = 0 != ga << 24 >> 24;
                                    NB = Y & 255;
                                    PI = NB + S;
                                    QI = ga ^ 1;
                                    zD = QI & 255;
                                    bE = Sm;
                                    uF = Uy = 1;
                                    tC = es;
                                    cK = vs;
                                    cE = hI;
                                    c: for (;;) {
                                        dE = (Uy | 0) == (Uf | 0);
                                        (RC = UG & dE) ? (iI = cK, DA = bE) : (EA = tC + Bh, dB = bE - Bh, AD = _memchr(EA, Aa, dB), AJ = uC = AD + zD, dK = tC, iG = AJ - dK, iI = uC, DA = iG);
                                        SC = DA - ea;
                                        HE = HEAP32[l >> 2];
                                        jG = HEAP32[m >> 2];
                                        vF = jG + HE;
                                        BD = Math_imul(SC,
                                            li) | 0;
                                        fx = _jtga(a, I, BD, $j, Si);
                                        if (DH = 0 == (fx | 0)) {
                                            y = 0;
                                            b = 425;
                                            break
                                        }
                                        IE = PI - bE;
                                        kG = Math_imul(IE, aj) | 0;
                                        TC = kG + Gh;
                                        VG = gg + TC;
                                        JE = fx + 28;
                                        HEAP32[JE >> 2] = SC;
                                        WG = lG = fx;
                                        JL = HEAP32[WG >> 2];
                                        Ay = CD = lG + JL;
                                        XG = VG;
                                        if (wF = 0 < (SC | 0))
                                            for (eE = 0;;)
                                                if (mG = XG + (eE << 2), xF = HEAP32[mG >> 2], aq ? (KE = xF, yF = vC = eA = KE + gl) : yF = xF, LE = Ay + (eE << 2), HEAP32[LE >> 2] = yF, UC = eE + 1, RI = (UC | 0) < (SC | 0)) eE = UC;
                                                else break;
                                        eB = getFUNCTION_TABLE(s)(a, fx, r);
                                        if (OK = 0 == (eB | 0)) {
                                            y = 0;
                                            b = 425;
                                            break
                                        }
                                        if (nG = 0 == uF << 24 >> 24) DD = cE + 4, wC = HEAP32[cE >> 2] = eB, FA = vF, OB = 0, PB = DD, b = 399;
                                        else {
                                            QB = eB + 24;
                                            fB = HEAP32[QB >>
                                                2];
                                            (zF = 0 == (fB | 0)) ? (oG = eB + 12, fE = HEAP32[oG >> 2], YG = fE & 32, (RB = 0 == (YG | 0)) ? b = 394 : (ME = GA = eB, ED = HEAP32[ME >> 2], ZG = jI = GA + ED, NE = HEAP32[ZG >> 2], HEAP32[cE >> 2] = NE, gE = cE, xC = uF, SB = vF, PK = NE)) : b = 394;
                                            if (394 == b) {
                                                b = 0;
                                                EH = Uy - 1;
                                                OE = HEAP32[tB >> 2];
                                                pG = PE = py + OE;
                                                if (AF = 0 < (EH | 0)) {
                                                    BF = pG;
                                                    for (yC = 0;;) {
                                                        FH = HEAP32[BF >> 2];
                                                        $G = _jtbox(a, FH);
                                                        HEAP32[BF >> 2] = $G;
                                                        if (hE = 0 == ($G | 0)) {
                                                            y = 0;
                                                            b = 425;
                                                            break c
                                                        }
                                                        aH = BF + 4;
                                                        QE = yC + 1;
                                                        if (RE = (QE | 0) < (EH | 0)) BF = aH, yC = QE;
                                                        else {
                                                            bH = aH;
                                                            break
                                                        }
                                                    }
                                                } else bH = pG;
                                                HEAP32[bH >> 2] = eB;
                                                SI = HEAP32[l >> 2];
                                                eK = HEAP32[m >> 2];
                                                SE = eK + SI;
                                                gE = bH;
                                                xC = 0;
                                                SB =
                                                    SE;
                                                PK = eB
                                            }
                                            CF = gE + 4;
                                            (GH = 0 == (PK | 0)) ? (FD = 0, zC = SB, Fz = xC, HA = CF) : (wC = PK, FA = SB, OB = xC, PB = CF, b = 399)
                                        }
                                        399 == b && (b = 0, _jttraverse(a, wC, 654), oz = wC + 16, fK = HEAP32[oz >> 2], TB = fK + 1, HEAP32[oz >> 2] = TB, FD = wC, zC = FA, Fz = OB, HA = PB);
                                        _jttpop(a, zC);
                                        _jttpush(a, FD);
                                        qG = bE - DA;
                                        iE = Uy + 1;
                                        if (HH = (Uy | 0) < (Uf | 0)) bE = qG, Uy = iE, uF = Fz, cK = tC = iI, cE = HA;
                                        else {
                                            fA = Fz;
                                            break b
                                        }
                                    }
                                    if (425 == b) return STACKTOP = e, y
                                } else
                            if (1 == (aE | 0)) {
                                if (UB = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                IH = 0 != ga << 24 >> 24;
                                cH = Y & 255;
                                jE = cH + S;
                                DF = ga ^ 1;
                                VB = DF & 255;
                                VC = Sm;
                                kE = TE = 1;
                                EF = es;
                                gA = vs;
                                hA = hI;
                                c: for (;;) {
                                    uB = (TE | 0) ==
                                        (Uf | 0);
                                    (UE = IH & uB) ? (WC = gA, gB = VC) : (BJ = EF + Bh, IA = VC - Bh, FF = _memchr(BJ, Aa, IA), rG = XC = FF + VB, GD = EF, sG = rG - GD, WC = XC, gB = sG);
                                    vB = gB - ea;
                                    WB = HEAP32[l >> 2];
                                    lE = HEAP32[m >> 2];
                                    XB = lE + WB;
                                    dH = Math_imul(vB, li) | 0;
                                    GF = _jtga(a, I, dH, $j, Si);
                                    if (gK = 0 == (GF | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    eH = jE - VC;
                                    JH = Math_imul(eH, aj) | 0;
                                    mE = JH + Gh;
                                    VE = gg + mE;
                                    WE = GF + 28;
                                    HEAP32[WE >> 2] = vB;
                                    kI = TI = GF;
                                    lI = HEAP32[kI >> 2];
                                    KH = TI + lI;
                                    By = Math_imul(vB, aj) | 0;
                                    _memcpy(KH, VE, By) | 0;
                                    gx = TE - 1;
                                    ux = (gx | 0) % (Ui | 0) & -1;
                                    HF = bl + (ux << 2);
                                    fH = HEAP32[HF >> 2];
                                    if (mI = 0 == (fH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    YC = tG = fH;
                                    ZC = HEAP32[YC >>
                                        2];
                                    nE = hK = tG + ZC;
                                    LH = JA = HEAP32[nE >> 2];
                                    YB = getFUNCTION_TABLE(LH)(a, GF, fH);
                                    if (hx = 0 == (YB | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (uG = 0 == kE << 24 >> 24) oE = hA + 4, $C = HEAP32[hA >> 2] = YB, IF = XB, UI = 0, AC = oE, b = 379;
                                    else {
                                        MH = YB + 24;
                                        XE = HEAP32[MH >> 2];
                                        (QK = 0 == (XE | 0)) ? (wB = YB + 12, gH = HEAP32[wB >> 2], hB = gH & 32, (YE = 0 == (hB | 0)) ? b = 374 : (ZB = JF = YB, aD = HEAP32[ZB >> 2], VI = KF = JF + aD, iA = HEAP32[VI >> 2], HEAP32[hA >> 2] = iA, bD = hA, iB = kE, jB = XB, KA = iA)) : b = 374;
                                        if (374 == b) {
                                            b = 0;
                                            LF = HEAP32[tB >> 2];
                                            cD = hH = py + LF;
                                            if (iK = 0 < (gx | 0)) {
                                                MF = 0;
                                                for (nI = cD;;) {
                                                    BC = HEAP32[nI >> 2];
                                                    NH = _jtbox(a, BC);
                                                    HEAP32[nI >> 2] =
                                                        NH;
                                                    if (dD = 0 == (NH | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    RK = nI + 4;
                                                    iH = MF + 1;
                                                    if (CJ = (iH | 0) < (gx | 0)) MF = iH, nI = RK;
                                                    else {
                                                        oI = RK;
                                                        break
                                                    }
                                                }
                                            } else oI = cD;
                                            HEAP32[oI >> 2] = YB;
                                            DJ = HEAP32[l >> 2];
                                            RM = HEAP32[m >> 2];
                                            WI = RM + DJ;
                                            bD = oI;
                                            iB = 0;
                                            jB = WI;
                                            KA = YB
                                        }
                                        OH = bD + 4;
                                        (PO = 0 == (KA | 0)) ? (QO = 0, SK = jB, EJ = iB, RO = OH) : ($C = KA, IF = jB, UI = iB, AC = OH, b = 379)
                                    }
                                    379 == b && (b = 0, _jttraverse(a, $C, 654), FJ = $C + 16, TK = HEAP32[FJ >> 2], pI = TK + 1, HEAP32[FJ >> 2] = pI, QO = $C, SK = IF, EJ = UI, RO = AC);
                                    _jttpop(a, SK);
                                    _jttpush(a, QO);
                                    KL = VC - gB;
                                    XI = TE + 1;
                                    if (jK = (TE | 0) < (Uf | 0)) VC = KL, TE = XI, kE = EJ, gA = EF = WC, hA = RO;
                                    else {
                                        fA = EJ;
                                        break b
                                    }
                                }
                                if (425 ==
                                    b) return STACKTOP = e, y
                            } else if (0 == (aE | 0)) {
                                if (PH = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                QH = 0 != ga << 24 >> 24;
                                NF = Y & 255;
                                kK = NF + S;
                                vG = ga ^ 1;
                                RH = vG & 255;
                                $B = Sm;
                                UK = CC = 1;
                                VK = es;
                                LL = vs;
                                jH = hI;
                                c: for (;;) {
                                    SO = (CC | 0) == (Uf | 0);
                                    (ML = QH & SO) ? (wG = LL, xG = $B) : (IN = VK + Bh, JN = $B - Bh, GJ = _memchr(IN, Aa, JN), kH = SH = GJ + RH, NL = VK, YI = kH - NL, wG = SH, xG = YI);
                                    lK = xG - ea;
                                    ZI = HEAP32[l >> 2];
                                    SM = HEAP32[m >> 2];
                                    ZE = SM + ZI;
                                    OL = Math_imul(lK, li) | 0;
                                    TH = _jtga(a, I, OL, $j, Si);
                                    if (PL = 0 == (TH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    qI = kK - $B;
                                    aC = Math_imul(qI, aj) | 0;
                                    KN = aC + Gh;
                                    eD = gg + KN;
                                    QL = TH + 28;
                                    HEAP32[QL >> 2] = lK;
                                    mK = $I = TH;
                                    WK =
                                        HEAP32[mK >> 2];
                                    XK = $I + WK;
                                    OF = Math_imul(lK, aj) | 0;
                                    _memcpy(XK, eD, OF) | 0;
                                    pE = getFUNCTION_TABLE(s)(a, TH, r);
                                    if (PQ = 0 == (pE | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (LN = 0 == UK << 24 >> 24) RL = jH + 4, qE = HEAP32[jH >> 2] = pE, lH = ZE, HJ = 0, aJ = RL, b = 362;
                                    else {
                                        TM = pE + 24;
                                        yG = HEAP32[TM >> 2];
                                        (rI = 0 == (yG | 0)) ? (bJ = pE + 12, cJ = HEAP32[bJ >> 2], nK = cJ & 32, (YK = 0 == (nK | 0)) ? b = 357 : (sI = zG = pE, AG = HEAP32[sI >> 2], MN = dJ = zG + AG, SL = HEAP32[MN >> 2], HEAP32[jH >> 2] = SL, TL = jH, IJ = UK, tI = ZE, JJ = SL)) : b = 357;
                                        if (357 == b) {
                                            b = 0;
                                            UL = CC - 1;
                                            UM = HEAP32[tB >> 2];
                                            eJ = VL = py + UM;
                                            if (BG = 0 < (UL | 0)) {
                                                Hx = 0;
                                                for (mH = eJ;;) {
                                                    uI = HEAP32[mH >>
                                                        2];
                                                    ZK = _jtbox(a, uI);
                                                    HEAP32[mH >> 2] = ZK;
                                                    if (VM = 0 == (ZK | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    WL = mH + 4;
                                                    CG = Hx + 1;
                                                    if (UH = (CG | 0) < (UL | 0)) Hx = CG, mH = WL;
                                                    else {
                                                        NN = WL;
                                                        break
                                                    }
                                                }
                                            } else NN = eJ;
                                            HEAP32[NN >> 2] = pE;
                                            $K = HEAP32[l >> 2];
                                            aL = HEAP32[m >> 2];
                                            WM = aL + $K;
                                            TL = NN;
                                            IJ = 0;
                                            tI = WM;
                                            JJ = pE
                                        }
                                        KJ = TL + 4;
                                        (oK = 0 == (JJ | 0)) ? (VH = 0, DG = tI, LA = IJ, vI = KJ) : (qE = JJ, lH = tI, HJ = IJ, aJ = KJ, b = 362)
                                    }
                                    362 == b && (b = 0, _jttraverse(a, qE, 654), fD = qE + 16, $E = HEAP32[fD >> 2], XL = $E + 1, HEAP32[fD >> 2] = XL, VH = qE, DG = lH, LA = HJ, vI = aJ);
                                    _jttpop(a, DG);
                                    _jttpush(a, VH);
                                    bL = $B - xG;
                                    PF = CC + 1;
                                    if (cL = (CC | 0) < (Uf | 0)) $B = bL, CC = PF, UK =
                                        LA, LL = VK = wG, jH = vI;
                                    else {
                                        fA = LA;
                                        break b
                                    }
                                }
                                if (425 == b) return STACKTOP = e, y
                            } else if (3 == (aE | 0)) {
                                if (wI = 1 > (Uf | 0)) {
                                    Eq = sF;
                                    break a
                                }
                                xI = 0 != ga << 24 >> 24;
                                nH = Y & 255;
                                bC = nH + S;
                                aF = ga ^ 1;
                                LJ = aF & 255;
                                fJ = Sm;
                                pK = QF = 1;
                                TO = es;
                                XM = vs;
                                ON = hI;
                                c: for (;;) {
                                    MJ = (QF | 0) == (Uf | 0);
                                    (dL = xI & MJ) ? (yI = XM, UO = fJ) : (qK = TO + Bh, QQ = fJ - Bh, NJ = _memchr(qK, Aa, QQ), sS = RQ = NJ + LJ, eL = TO, fL = sS - eL, yI = RQ, UO = fL);
                                    rK = UO - ea;
                                    YM = HEAP32[l >> 2];
                                    gL = HEAP32[m >> 2];
                                    gJ = gL + YM;
                                    YL = Math_imul(rK, li) | 0;
                                    hL = _jtga(a, I, YL, $j, Si);
                                    if (tS = 0 == (hL | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    uS = bC - fJ;
                                    sK = Math_imul(uS, aj) | 0;
                                    OJ = sK + Gh;
                                    xB = gg + OJ;
                                    RF = hL + 28;
                                    HEAP32[RF >> 2] = rK;
                                    hJ = oH = hL;
                                    EG = HEAP32[hJ >> 2];
                                    zI = FG = oH + EG;
                                    iJ = xB;
                                    if (iL = 0 < (rK | 0))
                                        for (DC = 0;;)
                                            if (jL = iJ + (DC << 2), tK = HEAP32[jL >> 2], aq ? (kL = tK, SQ = mL = lL = kL + gl) : SQ = tK, PN = zI + (DC << 2), HEAP32[PN >> 2] = SQ, jJ = DC + 1, ZL = (jJ | 0) < (rK | 0)) DC = jJ;
                                            else break;
                                    TQ = QF - 1;
                                    ZM = (TQ | 0) % (Ui | 0) & -1;
                                    rE = bl + (ZM << 2);
                                    pH = HEAP32[rE >> 2];
                                    if (HD = 0 == (pH | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    sE = bF = pH;
                                    tE = HEAP32[sE >> 2];
                                    yB = EC = bF + tE;
                                    vS = uE = HEAP32[yB >> 2];
                                    kJ = getFUNCTION_TABLE(vS)(a, hL, pH);
                                    if ($M = 0 == (kJ | 0)) {
                                        y = 0;
                                        b = 425;
                                        break
                                    }
                                    if (nL = 0 == pK << 24 >> 24) vE = ON + 4, wE = HEAP32[ON >> 2] =
                                        kJ, $L = gJ, PJ = 0, aN = vE, b = 420;
                                    else {
                                        oL = kJ + 24;
                                        uK = HEAP32[oL >> 2];
                                        (bN = 0 == (uK | 0)) ? (QJ = kJ + 12, SF = HEAP32[QJ >> 2], aM = SF & 32, (QN = 0 == (aM | 0)) ? b = 415 : (bM = CU = kJ, pL = HEAP32[bM >> 2], cM = RN = CU + pL, NP = HEAP32[cM >> 2], HEAP32[ON >> 2] = NP, cN = ON, dM = pK, SN = gJ, qL = NP)) : b = 415;
                                        if (415 == b) {
                                            b = 0;
                                            eM = HEAP32[tB >> 2];
                                            RJ = OP = py + eM;
                                            if (PP = 0 < (TQ | 0)) {
                                                qH = RJ;
                                                for (GG = 0;;) {
                                                    cF = HEAP32[qH >> 2];
                                                    lJ = _jtbox(a, cF);
                                                    HEAP32[qH >> 2] = lJ;
                                                    if (rL = 0 == (lJ | 0)) {
                                                        y = 0;
                                                        b = 425;
                                                        break c
                                                    }
                                                    wS = qH + 4;
                                                    pz = GG + 1;
                                                    if (UQ = (pz | 0) < (TQ | 0)) qH = wS, GG = pz;
                                                    else {
                                                        SJ = wS;
                                                        break
                                                    }
                                                }
                                            } else SJ = RJ;
                                            HEAP32[SJ >> 2] = kJ;
                                            TN = HEAP32[l >>
                                                2];
                                            UN = HEAP32[m >> 2];
                                            fM = UN + TN;
                                            cN = SJ;
                                            dM = 0;
                                            SN = fM;
                                            qL = kJ
                                        }
                                        Gz = cN + 4;
                                        (TJ = 0 == (qL | 0)) ? (ID = 0, sL = SN, gM = dM, QP = Gz) : (wE = qL, $L = SN, PJ = dM, aN = Gz, b = 420)
                                    }
                                    420 == b && (b = 0, _jttraverse(a, wE, 654), VO = wE + 16, VQ = HEAP32[VO >> 2], hM = VQ + 1, HEAP32[VO >> 2] = hM, ID = wE, sL = $L, gM = PJ, QP = aN);
                                    _jttpop(a, sL);
                                    _jttpush(a, ID);
                                    WQ = fJ - UO;
                                    gD = QF + 1;
                                    if (tL = (QF | 0) < (Uf | 0)) fJ = WQ, QF = gD, pK = gM, XM = TO = yI, ON = QP;
                                    else {
                                        fA = gM;
                                        break b
                                    }
                                }
                                if (425 == b) return STACKTOP = e, y
                            } else {
                                Eq = sF;
                                break a
                            }
                            while (0);
                            if (iM = 0 == fA << 24 >> 24) {
                                RP = _jtope(a, sF);
                                if (mJ = 0 == (RP | 0)) return y = 0, STACKTOP = e, y;
                                Eq = RP
                            } else Eq =
                                sF
                        }
                    while (0);
                    _jttraverse(a, Eq, 654);
                    VN = Eq + 16;
                    SP = HEAP32[VN >> 2];
                    dN = SP + 1;
                    HEAP32[VN >> 2] = dN;
                    _jttpop(a, n);
                    y = uL = _jttpush(a, Eq);
                    STACKTOP = e;
                    return y
                }
            while (0);
            y = WN = _jtcut2sx(a, f, d, c);
            STACKTOP = e;
            return y
        }
    while (0);
    y = _jtrank2ex(a, f, d, c, v, x, 1816);
    STACKTOP = e;
    return y
}
function _withl(a, f, d) {
    var c, b, e;
    c = d;
    b = HEAP32[d >> 2];
    d = HEAP32[b + (c + 8) >> 2];
    b = HEAP32[b + (c + 12) >> 2];
    e = 0 == (b | 0) ? 0 : HEAP32[b + (HEAP32[b >> 2] + 4) >> 2];
    c = HEAP32[a + 205336 >> 2];
    return 0 == (c | 0) ? getFUNCTION_TABLE(e)(a, d, f, b) : _jtirs2(a, d, f, b, HEAP32[d + 24 >> 2], HEAP32[c + 4 >> 2], e)
}

function _jttail(a, f) {
    var d, c, b;
    if (0 == (f | 0)) return 0;
    d = HEAP32[f + 24 >> 2];
    c = HEAP32[a + 205336 >> 2];
    b = 0 == (c | 0) ? d : HEAP32[c + 4 >> 2];
    return 0 != (b | 0) && 0 == (HEAP32[f + 28 + (d - b << 2) >> 2] | 0) ? (0 == (HEAP32[f + 12 >> 2] & 64512 | 0) ? d = _jtrsh0(a, f) : (c = HEAP32[31069], d = _jtirs2(a, c, _jttake(a, HEAP32[31068], f), 0, 0, b, 2062)), d) : d = _jtfrom(a, HEAP32[31068], f)

}

function _xv1(a, f, d) {
    d = HEAP32[d + (HEAP32[d >> 2] + 8) >> 2];
    return 0 == (d | 0) ? 0 : a = getFUNCTION_TABLE(HEAP32[d + HEAP32[d >> 2] >> 2])(a, f, d)
}

function _jtsetfv(a, f, d) {
    var c, b, e, g, h, j, i;
    c = 0;
    b = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    e = b + 8;
    g = HEAP32[a + 204448 >> 2];
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = b, 0;
    h = 0 == (HEAP32[f + 20 >> 2] | 0) ? 0 == (HEAP32[d + 20 >> 2] | 0) ? 0 : HEAP32[d + 12 >> 2] : HEAP32[f + 12 >> 2];
    if (0 == (g | 0)) c = 18;
    else if (0 == (HEAP32[g + 20 >> 2] | 0)) c = 18;
    else {
        f = g + 12;
        j = _jtmaxtype(a, h, HEAP32[f >> 2]);
        if (0 != (HEAP8[a + 204545] | 0)) return STACKTOP = b, 0;
        if ((j | 0) == (HEAP32[f >> 2] | 0)) e = g, g = j;
        else {
            f = a + 205336;
            i = HEAP32[f >> 2];
            HEAP32[f >> 2] = 0;
            g = _jtccvt(a, j, g, e);
            HEAP32[f >> 2] = i;
            if (0 == g << 24 >>
                24) return g = HEAP32[a + 4408 >> 2], i = HEAP32[g + (HEAP32[g >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[i + 20 >> 2], i + HEAP32[i >> 2]), STACKTOP = b, 0;
            i = HEAP32[e >> 2];
            if (0 == (i | 0)) return STACKTOP = b, 0;
            e = i;
            g = HEAP32[i + 12 >> 2]
        }
        if (0 != (g & 32 | 0) && 0 != (HEAP32[e + 4 >> 2] & 14 | 0)) {
            f = _jtcpa(a, 1, e);
            if (0 == (f | 0)) return STACKTOP = b, 0;
            e = f
        }
        f = e + HEAP32[e >> 2];
        i = HEAP32[a + 204452 >> 2] = f
    }
    18 == c && (c = 0 == (h | 0) ? HEAP32[d + 12 >> 2] : h, h = a + 204456, _fillv(c, 1, h), HEAP32[a + 204452 >> 2] = h, j = c, i = h);
    h = d + 12;
    c = HEAP32[h >> 2];
    0 != (c & 32 | 0) && 0 != (HEAP32[d + 4 >> 2] & 14 | 0) && (c = a + 204456, HEAP32[c >>
        2] = HEAP32[i >> 2] - d, HEAP32[a + 204452 >> 2] = c, c = HEAP32[h >> 2]);
    if ((j | 0) == (c | 0)) return STACKTOP = b, d;
    c = a + 205336;
    h = HEAP32[c >> 2];
    HEAP32[c >> 2] = 0;
    i = _jtccvt(a, j, d, b);
    HEAP32[c >> 2] = h;
    0 == i << 24 >> 24 ? (i = HEAP32[a + 4408 >> 2], h = HEAP32[i + (HEAP32[i >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[h + 20 >> 2], h + HEAP32[h >> 2]), a = 0) : a = HEAP32[b >> 2];
    STACKTOP = b;
    return a
}

function _jtleft2(a, f, d) {
    return _jtlr2(a, 1, f, d)
}

function _jtlr2(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x;
    b = 0;
    if (0 == (d | 0) | 0 == (c | 0)) return 0;
    g = HEAP32[d + 24 >> 2];
    h = HEAP32[a + 205336 >> 2];
    0 == (h | 0) ? (i = j = HEAP32[c + 24 >> 2], l = g, k = 0, m = j) : (j = HEAP32[h >> 2], i = HEAP32[h + 4 >> 2], l = j, k = g - j, m = HEAP32[c + 24 >> 2]);
    j = d + 28;
    h = m - i;
    m = c + 28;
    if (0 == f << 24 >> 24)
        if ((h | 0) < (k | 0)) n = c + HEAP32[c >> 2], p = i, q = c, r = c + 28 + (h << 2);
        else {
            g = _jttpush(a, c);
            if (0 == (g | 0)) return 0;
            _jttraverse(a, g, 654);
            f = g + 16;
            HEAP32[f >> 2] += 1;
            return g
        } else if ((k | 0) < (h | 0)) n = d + HEAP32[d >> 2], p = l, q = d, r = d + 28 + (k << 2);
    else {
        g = _jttpush(a,
            d);
        if (0 == (g | 0)) return 0;
        _jttraverse(a, g, 654);
        f = g + 16;
        HEAP32[f >> 2] += 1;
        return g
    }
    i = HEAP32[q + 20 >> 2];
    f = HEAP32[q + 12 >> 2];
    q = (g | 0) != (l | 0);
    a: do
        if (q) {
            do
                if (0 < (k | 0)) {
                    l = 1;
                    for (g = 0;;)
                        if (s = l * (HEAP32[d + 28 + (g << 2) >> 2] | 0), g += 1, (g | 0) < (k | 0)) l = s;
                        else break;
                    if (2147483647 >= s) l = s;
                    else {
                        g = HEAP32[a + 4408 >> 2];
                        l = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
                        g = 0;
                        l = k;
                        break a
                    }
                } else l = 1;
            while (0);
            g = l & -1;
            l = k
        } else {
            do
                if (0 < (h | 0)) {
                    l = 1;
                    for (g = 0;;)
                        if (t = l * (HEAP32[c + 28 + (g << 2) >> 2] | 0), g += 1, (g | 0) < (h | 0)) l = t;
                        else break;
                    if (2147483647 >= t) u = t;
                    else {
                        g = HEAP32[a + 4408 >> 2];
                        l = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
                        g = 0;
                        l = h;
                        break a
                    }
                } else u = 1;
            while (0);
            g = u & -1;
            l = h
        }
    while (0);
    h = a + 204545;
    if (0 != (HEAP8[h] | 0)) return 0;
    do
        if (0 < (p | 0)) {
            u = 1;
            for (t = 0;;)
                if (w = u * (HEAP32[r + (t << 2) >> 2] | 0), c = t + 1, (c | 0) < (p | 0)) u = w, t = c;
                else break;
            2147483647 >= w ? (v = w, b = 30) : (t = HEAP32[a + 4408 >> 2], u = HEAP32[t + (HEAP32[t >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), x = 0)
        } else v = 1, b = 30;
    while (0);
    30 == b && (x = v & -1 | 0);
    v = (g | 0) * x;
    2147483647 < v ? (x = HEAP32[a + 4408 >> 2], g = HEAP32[x + (HEAP32[x >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), d = 0) : d = v & -1;
    if (0 != (HEAP8[h] | 0)) return 0;
    h = _jtga(a, f, d, l + p, q ? j : m);
    if (0 == (h | 0)) return 0;
    _memcpy(h + 28 + (l << 2), r, p << 2) | 0;
    a = 32 == (f | 0) ? 4 : 131072 == (f | 0) ? 2 : 2 == (f | 0) | 2097152 == (f | 0) | 33554432 == (f | 0) ? 1 : 64 == (f | 0) ? 4 : 262144 == (f | 0) | 524288 == (f | 0) | 1048576 == (f | 0) ? 44 : 1 == (f | 0) | 8 == (f | 0) | 16 == (f | 0) ? f : 536870912 == (f | 0) ? 24 : 16777216 == (f | 0) ? 12 : 65536 == (f | 0) ? 4 : 268435456 == (f | 0) ? 12 : 4 == (f | 0) | 67108864 == (f | 0) | 134217728 ==
        (f | 0) | 4194304 == (f | 0) | 8388608 == (f | 0) ? 4 : 1024 == (f | 0) | 4096 == (f | 0) | 8192 == (f | 0) | 16384 == (f | 0) | 2048 == (f | 0) | 32768 == (f | 0) ? 16 : 128 == (f | 0) ? 8 : -1;
    f = Math_imul(a, d) | 0;
    d = h;
    p = HEAP32[h >> 2];
    r = d + p;
    l = Math_imul(a, i) | 0;
    i = (l | 0) < (f | 0);
    _memcpy(r, n, i ? l : f) | 0;
    if (i) i = l;
    else return h;
    for (;;)
        if (l = f - i, _memcpy(d + (p + i), r, (i | 0) < (l | 0) ? i : l) | 0, l = i << 1, (l | 0) < (f | 0)) i = l;
        else {
            e = h;
            break
        }
    return e
}

function _jtlr2(a, f, d, c) {
    var b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x;
    b = 0;
    if (0 == (d | 0) | 0 == (c | 0)) return 0;
    g = HEAP32[d + 24 >> 2];
    h = HEAP32[a + 205336 >> 2];
    0 == (h | 0) ? (i = j = HEAP32[c + 24 >> 2], l = g, k = 0, m = j) : (j = HEAP32[h >> 2], i = HEAP32[h + 4 >> 2], l = j, k = g - j, m = HEAP32[c + 24 >> 2]);
    j = d + 28;
    h = m - i;
    m = c + 28;
    if (0 == f << 24 >> 24)
        if ((h | 0) < (k | 0)) n = c + HEAP32[c >> 2], p = i, q = c, r = c + 28 + (h << 2);
        else {
            g = _jttpush(a, c);
            if (0 == (g | 0)) return 0;
            _jttraverse(a, g, 654);
            f = g + 16;
            HEAP32[f >> 2] += 1;
            return g
        } else if ((k | 0) < (h | 0)) n = d + HEAP32[d >> 2], p = l, q = d, r = d + 28 + (k << 2);
    else {
        g = _jttpush(a,
            d);
        if (0 == (g | 0)) return 0;
        _jttraverse(a, g, 654);
        f = g + 16;
        HEAP32[f >> 2] += 1;
        return g
    }
    i = HEAP32[q + 20 >> 2];
    f = HEAP32[q + 12 >> 2];
    q = (g | 0) != (l | 0);
    a: do
        if (q) {
            do
                if (0 < (k | 0)) {
                    l = 1;
                    for (g = 0;;)
                        if (s = l * (HEAP32[d + 28 + (g << 2) >> 2] | 0), g += 1, (g | 0) < (k | 0)) l = s;
                        else break;
                    if (2147483647 >= s) l = s;
                    else {
                        g = HEAP32[a + 4408 >> 2];
                        l = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
                        g = 0;
                        l = k;
                        break a
                    }
                } else l = 1;
            while (0);
            g = l & -1;
            l = k
        } else {
            do
                if (0 < (h | 0)) {
                    l = 1;
                    for (g = 0;;)
                        if (t = l * (HEAP32[c + 28 + (g << 2) >> 2] | 0), g += 1, (g | 0) < (h | 0)) l = t;
                        else break;
                    if (2147483647 >= t) u = t;
                    else {
                        g = HEAP32[a + 4408 >> 2];
                        l = HEAP32[g + (HEAP32[g >> 2] + 40) >> 2];
                        _jtjsigstr(a, 10, HEAP32[l + 20 >> 2], l + HEAP32[l >> 2]);
                        g = 0;
                        l = h;
                        break a
                    }
                } else u = 1;
            while (0);
            g = u & -1;
            l = h
        }
    while (0);
    h = a + 204545;
    if (0 != (HEAP8[h] | 0)) return 0;
    do
        if (0 < (p | 0)) {
            u = 1;
            for (t = 0;;)
                if (w = u * (HEAP32[r + (t << 2) >> 2] | 0), c = t + 1, (c | 0) < (p | 0)) u = w, t = c;
                else break;
            2147483647 >= w ? (v = w, b = 30) : (t = HEAP32[a + 4408 >> 2], u = HEAP32[t + (HEAP32[t >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[u + 20 >> 2], u + HEAP32[u >> 2]), x = 0)
        } else v = 1, b = 30;
    while (0);
    30 == b && (x = v & -1 | 0);
    v = (g | 0) * x;
    2147483647 < v ? (x = HEAP32[a + 4408 >> 2], g = HEAP32[x + (HEAP32[x >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[g + 20 >> 2], g + HEAP32[g >> 2]), d = 0) : d = v & -1;
    if (0 != (HEAP8[h] | 0)) return 0;
    h = _jtga(a, f, d, l + p, q ? j : m);
    if (0 == (h | 0)) return 0;
    _memcpy(h + 28 + (l << 2), r, p << 2) | 0;
    a = 32 == (f | 0) ? 4 : 131072 == (f | 0) ? 2 : 2 == (f | 0) | 2097152 == (f | 0) | 33554432 == (f | 0) ? 1 : 64 == (f | 0) ? 4 : 262144 == (f | 0) | 524288 == (f | 0) | 1048576 == (f | 0) ? 44 : 1 == (f | 0) | 8 == (f | 0) | 16 == (f | 0) ? f : 536870912 == (f | 0) ? 24 : 16777216 == (f | 0) ? 12 : 65536 == (f | 0) ? 4 : 268435456 == (f | 0) ? 12 : 4 == (f | 0) | 67108864 == (f | 0) | 134217728 ==
        (f | 0) | 4194304 == (f | 0) | 8388608 == (f | 0) ? 4 : 1024 == (f | 0) | 4096 == (f | 0) | 8192 == (f | 0) | 16384 == (f | 0) | 2048 == (f | 0) | 32768 == (f | 0) ? 16 : 128 == (f | 0) ? 8 : -1;
    f = Math_imul(a, d) | 0;
    d = h;
    p = HEAP32[h >> 2];
    r = d + p;
    l = Math_imul(a, i) | 0;
    i = (l | 0) < (f | 0);
    _memcpy(r, n, i ? l : f) | 0;
    if (i) i = l;
    else return h;
    for (;;)
        if (l = f - i, _memcpy(d + (p + i), r, (i | 0) < (l | 0) ? i : l) | 0, l = i << 1, (l | 0) < (f | 0)) i = l;
        else {
            e = h;
            break
        }
    return e
}


function _swap2(a, f, d, c) {
    var b, e;
    b = HEAP32[c + (HEAP32[c >> 2] + 8) >> 2];
    e = 0 == (b | 0) ? 0 : HEAP32[b + (HEAP32[b >> 2] + 4) >> 2];
    c = HEAP32[a + 205336 >> 2];
    return 0 == (c | 0) ? getFUNCTION_TABLE(e)(a, d, f, b) : _jtirs2(a, d, f, b, HEAP32[c + 4 >> 2], HEAP32[c >> 2], e)
}


function _jttake(a, f, d) {
    var c, b, e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v;
    c = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    b = c;
    e = c + 8;
    if (0 == (f | 0) | 0 == (d | 0)) return STACKTOP = c, 0;
    if (0 == (HEAP32[f + 12 >> 2] & 64512 | 0)) g = f;
    else {
        h = _jtdenseit(a, f);
        if (0 == (h | 0)) return STACKTOP = c, 0;
        g = h
    }
    if (0 == (HEAP32[d + 12 >> 2] & 64512 | 0)) {
        f = _jtsetfv(a, d, d);
        if (0 == (f | 0)) return STACKTOP = c, 0;
        j = f
    } else j = d;
    d = HEAP32[g + 24 >> 2];
    f = a + 205336;
    h = HEAP32[f >> 2];
    0 == (h | 0) ? (l = i = HEAP32[j + 24 >> 2], k = d, m = i) : (l = HEAP32[h + 4 >> 2], k = HEAP32[h >> 2], m = HEAP32[j + 24 >> 2]);
    h = m - l;
    HEAP32[f >> 2] = 0;
    i = (d |
        0) != (k | 0);
    if (i | 1 < (k | 0)) return a = _jtrank2ex(a, g, j, 0, i ? k : 1, l, 2984), STACKTOP = c, a;
    k = HEAP32[g + 20 >> 2];
    i = 0 != (l | 0);
    if (i & (k | 0) > (l | 0)) return d = HEAP32[a + 4408 >> 2], n = HEAP32[d + (HEAP32[d >> 2] + 36) >> 2], _jtjsigstr(a, 9, HEAP32[n + 20 >> 2], n + HEAP32[n >> 2]), STACKTOP = c, 0;
    n = g + 12;
    d = HEAP32[n >> 2];
    do
        if (0 == (d & 5 | 0)) {
            p = _jtvib(a, g);
            if (0 == (p | 0)) return a = 0, STACKTOP = c, a;
            if (0 == (HEAP32[n >> 2] & 8 | 0)) {
                q = HEAP32[f >> 2];
                HEAP32[f >> 2] = 0;
                r = _jtccvt(a, 8, g, e);
                HEAP32[f >> 2] = q;
                if (0 == r << 24 >> 24) return r = HEAP32[a + 4408 >> 2], q = HEAP32[r + (HEAP32[r >> 2] + 12) >> 2], _jtjsigstr(a,
                    3, HEAP32[q + 20 >> 2], q + HEAP32[q >> 2]), a = 0, STACKTOP = c, a;
                q = HEAP32[e >> 2];
                if (0 == (q | 0)) return a = 0, STACKTOP = c, a
            } else q = g;
            q += HEAP32[q >> 2];
            r = p + HEAP32[p >> 2];
            if (0 >= (k | 0)) s = p;
            else if (t = HEAPF64[14142], u = HEAPF64[14141], i)
                for (w = 0;;)
                    if (v = HEAPF64[q + (w << 3) >> 3], -2147483648 == v ? HEAP32[r + (w << 2) >> 2] = v & -1 : v == t | v == u && (HEAP32[r + (w << 2) >> 2] = HEAP32[j + 28 + (w + h << 2) >> 2]), v = w + 1, (v | 0) < (k | 0)) w = v;
                    else {
                        s = p;
                        break
                    } else
                for (w = 0;;)
                    if (v = HEAPF64[q + (w << 3) >> 3], -2147483648 == v ? HEAP32[r + (w << 2) >> 2] = v & -1 : v == t | v == u && (HEAP32[r + (w << 2) >> 2] = 1), v = w + 1, (v | 0) <
                        (k | 0)) w = v;
                    else {
                        s = p;
                        break
                    }
        } else {
            if (0 == (g | 0)) return a = 0, STACKTOP = c, a;
            if (0 != (d & 4 | 0)) s = g;
            else {
                HEAP32[f >> 2] = 0;
                p = _jtccvt(a, 4, g, b);
                HEAP32[f >> 2] = 0;
                if (0 == p << 24 >> 24) return p = HEAP32[a + 4408 >> 2], w = HEAP32[p + (HEAP32[p >> 2] + 12) >> 2], _jtjsigstr(a, 3, HEAP32[w + 20 >> 2], w + HEAP32[w >> 2]), a = 0, STACKTOP = c, a;
                w = HEAP32[b >> 2];
                if (0 == (w | 0)) return a = 0, STACKTOP = c, a;
                s = w
            }
        }
    while (0);
    if (i & (m | 0) == (l | 0)) f = j, m = s;
    else {
        l = k + h;
        m = _jtga(a, 4, l, 1, 0);
        if (0 == (m | 0)) return STACKTOP = c, 0;
        f = b = m;
        _memcpy(b + HEAP32[f >> 2], j + 28, l << 2) | 0;
        l = b + HEAP32[f >> 2];
        f = l + (h << 2);
        do
            if (i) d = j;
            else {
                if (0 < (k | 0))
                    for (b = 0;;)
                        if (HEAP32[l + (b + h << 2) >> 2] = 1, g = b + 1, (g | 0) < (k | 0)) b = g;
                        else break;
                b = _jtreshape(a, m, j);
                if (0 == (b | 0)) return a = 0, STACKTOP = c, a;
                d = b
            }
        while (0);
        _memcpy(f, s + HEAP32[s >> 2], k << 2) | 0;
        f = d
    }
    a = _jttk(a, m, f);
    STACKTOP = c;
    return a
}

function _jtconjug(a, f) {
    return _jtva1(a, f, 43)
}

function _jtdecrem(a, f) {
    return _jtva2(a, f, HEAP32[31058], 45)
}

function _rank1i(a, f, d) {
    var c, b, e, g, h, j;
    c = STACKTOP;
    STACKTOP = STACKTOP + 8 | 0;
    b = d;
    e = HEAP32[d >> 2];
    d = HEAP32[e + (b + 8) >> 2];
    g = 0 == (d | 0) ? 0 : HEAP32[d + HEAP32[d >> 2] >> 2];
    h = HEAP32[e + (b + 16) >> 2];
    b = HEAP32[h + HEAP32[h >> 2] >> 2];
    h = a + 205336;
    e = HEAP32[h >> 2];
    if (0 == (f | 0)) return STACKTOP = c, 0;
    j = HEAP32[f + 24 >> 2];
    0 > (b | 0) ? (b = j + b, b = 0 > (b | 0) ? 0 : b) : b = (j | 0) > (b | 0) ? b : j;
    HEAP32[c + 4 >> 2] = b;
    (b | 0) < (j | 0) ? (j = c, HEAP32[j >> 2] = 0, HEAP32[h >> 2] = j, j = getFUNCTION_TABLE(g)(a, f, d), HEAP32[h >> 2] = e, a = j) : a = getFUNCTION_TABLE(g)(a, f, d);
    STACKTOP = c;
    return a
} 

function _jtio1(a, f, d, c, b, e, g, h, j, i, l, k, m, n, p, q) {
    var r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb, Wa, yb, Cb, Pb, zb, Zb, ac, Hb, Ib, Qb, Rb, Ob, Bb, xb, dc, tb, oc, Mb, Tb, Ra, Nb, sb, Ab, Eb, Lb, vb, wc, Ec, yc, Db, bc, pb, Fb, jb, gc, ic, vc, hc, uc, Ac, xc, cd, jc, Tc, Fc, Bc, ec, Xb, sc, nc, tc, Ub, $c, ad, qc, Uc, rc, kb, Jb, $b, na,
        Vb, kc, va, Wc, Yb, fc, Kb, Gb, gd, mc, Gc, dd, kd, Fd, Vc, Hd, bd, cc, Ic, fd, xd, Xc, Wd, Wb, Sb, pc, zc, hd, Yc, Ad, Gd, hb, ld, ed, Jc, Oc, Pc, ke, Ed, pd, id, Cc, Qc, Zc, vd, $d, je, Kc, Bd, od, Vd, Zd, Jd, Md, Cd, fe, Xd, qd, Od, Mc, Dd, Td, le, me, wd, Ie, xe, ye, Fe, nf, Je, Id, Qe, sd, ge, ud, md, de, ae, Dc, Nc, yd, jd, Sc, lc, nd, Rc, Hc, Kd, Rd, Nd, be, zd, we, Lc, rd, se, Ud, Cf, td, Te, pe, Pd, Me, Sd, $e, qe, Ce, cf, sf, Ue, kf, Re, ce, De, Ge, He, We, Yd, Ne, Se, Ee, Ld, he, Qd, re, Ke, Ae, te, ie, ff, ue, Oe, ne, ze, vf, lf, Xe, Be, hf, af, zf, uf, ve, If, Df, Ef, Gf, of, Lf, pf, bf, Bf, Pf, Ye, Hf, jf, mf, Le, Ve, df, wf, Yf, Jf, Qf, Sf, Mf,
        ee, oe, rf, Ff, xf, Pe, qf, yf, Nf, Zf, tg, Ze, gf, ef, Kf, bg, lg, Rf, Ug, Vf, Jg, hg, Lg, $f, ah, nh, dh, mg, yh, Bg, ig, ng, Ng, Ch, Dg, Vg, pg, zg, Pg, cg, dg, qg, vg, bh, Zg, Eg, wg, vh, Kh, $g, Ag, Lh, xg, Mg, rg, Sg, jg, Uh, Of, Tg, qi, eg, gi, kg, Qg, Wg, wi, zh, Wf, di, ch, Mh, Fg, Rg, Vh, Gg, eh, kh, fh, Wh, qh, og, Og, Kg, Ih, ai, wh, Xh;
    r = HEAP32[p >> 2];
    s = 30 > (f | 0);
    t = f - 30;
    u = s ? f : t;
    w = 0 == (f | 0);
    2 > f >>> 0 & (m | 0) == (n | 0) ? (v = (j | 0) == (i | 0), y = x = v & 1) : y = 0;
    z = q + HEAP32[q >> 2];
    A = HEAP32[r + 20 >> 2];
    D = HEAP32[a + 204960 >> 2];
    B = HEAP32[r >> 2];
    G = r + B;
    C = B - D;
    F = 1 == (i | 0) ? 0 : b;
    E = (HEAP32[31134] | 0) == (n | 0) ? 0 : b;
    if (!(0 <
            (j | 0))) return q;
    J = HEAP32[n >> 2];
    L = HEAP32[m >> 2];
    I = n + J;
    H = m + L;
    K = 0 == y << 24 >> 24;
    N = 0 < (E | 0);
    S = q + 28;
    T = q + 20;
    V = 0 < (A | 0);
    Q = 0 < (d | 0);
    P = A << 2;
    M = z;
    R = I;
    O = H;
    Z = aa = z;
    $ = 0;
    for (ba = z;;) {
        a: do
            if (K) switch (u | 0) {
                case 3:
                    _memset(G, 1, A) | 0;
                    if (N) {
                        ka = 0;
                        ea = M;
                        for (ha = R;;)
                            if (da = ha + 1, ga = HEAP8[ha], U = ga & 255, ca = U + C, X = r + ca, Y = HEAP8[X], (ja = 0 == Y << 24 >> 24) ? fa = ea : (ia = ea + 1, HEAP8[ea] = ga, HEAP8[X] = 0, fa = ia), ra = ka + 1, sa = (ra | 0) < (E | 0)) ka = ra, ea = fa, ha = da;
                            else {
                                ta = fa;
                                break
                            }
                    } else ta = M;
                    wa = ta;
                    za = aa;
                    Ba = wa - za;
                    HEAP32[S >> 2] = Ba;
                    ua = Math_imul(Ba, c) | 0;
                    HEAP32[T >> 2] = ua;
                    ya =
                        ba;
                    xa = Z;
                    oa = aa;
                    pa = ta;
                    break a;
                case 4:
                    do
                        if (s && (_memset(G, 1, A) | 0, Q)) {
                            la = 0;
                            for (qa = O;;)
                                if (Da = qa + 1, Aa = HEAP8[qa], Ea = Aa & 255, Sa = Ea + C, Oa = r + Sa, HEAP8[Oa] = 0, Ha = la + 1, Ga = (Ha | 0) < (d | 0)) la = Ha, qa = Da;
                                else break
                        }
                    while (0);
                    if (N) {
                        Ma = 0;
                        Ia = M;
                        for (db = R;;)
                            if (W = db + 1, Xa = HEAP8[db], Ta = Xa & 255, fb = Ta + C, mb = r + fb, ma = HEAP8[mb], (ab = 0 == ma << 24 >> 24) ? Na = Ia : ($a = Ia + 1, HEAP8[Ia] = Xa, Na = $a), Ua = Ma + 1, Pa = (Ua | 0) < (E | 0)) Ma = Ua, Ia = Na, db = W;
                            else {
                                bb = Na;
                                break
                            }
                    } else bb = M;
                    La = bb;
                    Ja = aa;
                    Qa = La - Ja;
                    HEAP32[S >> 2] = Qa;
                    Ya = Math_imul(Qa, c) | 0;
                    HEAP32[T >> 2] = Ya;
                    ya = ba;
                    xa = Z;
                    oa = aa;
                    pa = bb;
                    break a;
                case 5:
                    _memset(G, 1, A) | 0;
                    if (N) {
                        lb = 0;
                        Ca = R;
                        for (gb = Z;;)
                            if (Fa = Ca + 1, Za = HEAP8[Ca], qb = Za & 255, ib = qb + C, ub = r + ib, eb = HEAP8[ub], (rb = 0 == eb << 24 >> 24) ? wb = gb : (Ka = gb + 4, HEAP32[gb >> 2] = lb, HEAP8[ub] = 0, wb = Ka), Va = lb + 1, nb = (Va | 0) < (E | 0)) lb = Va, Ca = Fa, gb = wb;
                            else {
                                ob = wb;
                                break
                            }
                    } else ob = Z;
                    cb = ob;
                    Wa = aa;
                    yb = cb - Wa;
                    Cb = yb >> 2;
                    HEAP32[T >> 2] = Cb;
                    HEAP32[S >> 2] = Cb;
                    ya = ba;
                    xa = ob;
                    oa = aa;
                    pa = M;
                    break a;
                case 2:
                    _memset(G, 1, A) | 0;
                    if (N) Pb = 0, zb = R, Zb = ba;
                    else {
                        ya = ba;
                        xa = Z;
                        oa = aa;
                        pa = M;
                        break a
                    }
                    for (;;)
                        if (ac = zb + 1, Hb = HEAP8[zb], Ib = Hb & 255, Qb = Ib + C, Rb = r + Qb, Ob =
                            HEAP8[Rb], Bb = Zb + 1, HEAP8[Zb] = Ob, (xb = 0 == Ob << 24 >> 24) || (HEAP8[Rb] = 0), dc = Pb + 1, tb = (dc | 0) < (E | 0)) Pb = dc, zb = ac, Zb = Bb;
                        else break;
                    ya = oc = ba + E;
                    xa = Z;
                    oa = aa;
                    pa = M;
                    break a;
                case 14:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            Mb = O;
                            for (Tb = 0;;)
                                if (Ra = Mb + 1, Nb = HEAP8[Mb], sb = Nb & 255, Ab = sb + C, Eb = r + Ab, HEAP8[Eb] = 1, Lb = Tb + 1, vb = (Lb | 0) < (d | 0)) Mb = Ra, Tb = Lb;
                                else break
                        }
                    while (0);
                    if (N) {
                        wc = R;
                        Ec = Z;
                        for (yc = 0;;)
                            if (Db = wc + 1, bc = HEAP8[wc], pb = bc & 255, Fb = pb + C, jb = r + Fb, gc = HEAP8[jb], (ic = 0 == gc << 24 >> 24) ? vc = Ec : (hc = Ec + 4, HEAP32[Ec >> 2] = yc, vc = hc), uc = yc + 1, Ac = (uc | 0) < (E | 0)) wc =
                                Db, Ec = vc, yc = uc;
                            else {
                                xc = vc;
                                break
                            }
                    } else xc = Z;
                    cd = xc;
                    jc = aa;
                    Tc = cd - jc;
                    Fc = Tc >> 2;
                    HEAP32[T >> 2] = Fc;
                    HEAP32[S >> 2] = Fc;
                    ya = ba;
                    xa = xc;
                    oa = aa;
                    pa = M;
                    break a;
                case 0:
                    do
                        if (s) {
                            if (V)
                                for (Bc = 0;;)
                                    if (ec = G + (Bc << 2), HEAP32[ec >> 2] = d, Xb = Bc + 1, sc = (Xb | 0) < (A | 0)) Bc = Xb;
                                    else break;
                            if (Q) {
                                tc = nc = O + d;
                                for (Ub = d;;)
                                    if ($c = Ub - 1, ad = tc - 1, qc = HEAP8[ad], Uc = qc & 255, rc = Uc - D, kb = G + (rc << 2), HEAP32[kb >> 2] = $c, Jb = 0 < ($c | 0)) tc = ad, Ub = $c;
                                    else break
                            }
                        }
                    while (0);
                    if (N) $b = 0, na = R, Vb = aa;
                    else {
                        ya = ba;
                        xa = Z;
                        oa = aa;
                        pa = M;
                        break a
                    }
                    for (;;)
                        if (kc = na + 1, va = HEAP8[na], Wc = va & 255, Yb = Wc - D, fc =
                            G + (Yb << 2), Kb = HEAP32[fc >> 2], Gb = Vb + 4, HEAP32[Vb >> 2] = Kb, gd = $b + 1, mc = (gd | 0) < (E | 0)) $b = gd, na = kc, Vb = Gb;
                        else break;
                    Gc = aa + (E << 2);
                    ya = ba;
                    xa = Z;
                    oa = Gc;
                    pa = M;
                    break a;
                case 9:
                    do
                        if (s && (_memset(G, 1, A) | 0, Q)) {
                            dd = 0;
                            for (kd = O;;)
                                if (Fd = kd + 1, Vc = HEAP8[kd], Hd = Vc & 255, bd = Hd + C, cc = r + bd, HEAP8[cc] = 0, Ic = dd + 1, fd = (Ic | 0) < (d | 0)) dd = Ic, kd = Fd;
                                else break
                        }
                    while (0);
                    Xc = xd = R + b;
                    for (Wd = E;;) {
                        Wb = Wd - 1;
                        Sb = 0 < (Wd | 0);
                        if (!Sb) {
                            pc = b;
                            break
                        }
                        zc = Xc - 1;
                        hd = HEAP8[zc];
                        Yc = hd & 255;
                        Ad = Yc + C;
                        Gd = r + Ad;
                        hb = HEAP8[Gd];
                        if (ld = 0 == hb << 24 >> 24) Xc = zc, Wd = Wb;
                        else {
                            pc = Wb;
                            break
                        }
                    }
                    ed = aa + 4;
                    HEAP32[aa >>
                        2] = pc;
                    ya = ba;
                    xa = Z;
                    oa = ed;
                    pa = M;
                    break a;
                case 7:
                    do
                        if (s && (_memset(G, 1, A) | 0, Q)) {
                            Jc = 0;
                            for (Oc = O;;)
                                if (Pc = Oc + 1, ke = HEAP8[Oc], Ed = ke & 255, pd = Ed + C, id = r + pd, HEAP8[id] = 0, Cc = Jc + 1, Qc = (Cc | 0) < (d | 0)) Jc = Cc, Oc = Pc;
                                else break
                        }
                    while (0);
                    b: do
                        if (N) {
                            Zc = 0;
                            for (vd = R;;) {
                                $d = HEAP8[vd];
                                je = $d & 255;
                                Kc = je + C;
                                Bd = r + Kc;
                                od = HEAP8[Bd];
                                Vd = 0 == od << 24 >> 24;
                                if (!Vd) {
                                    Zd = Zc;
                                    break b
                                }
                                Jd = vd + 1;
                                Md = Zc + 1;
                                if (Cd = (Md | 0) < (E | 0)) Zc = Md, vd = Jd;
                                else {
                                    Zd = b;
                                    break
                                }
                            }
                        } else Zd = b;
                    while (0);
                    fe = aa + 4;
                    HEAP32[aa >> 2] = Zd;
                    ya = ba;
                    xa = Z;
                    oa = fe;
                    pa = M;
                    break a;
                case 6:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            Xd =
                                0;
                            for (qd = O;;)
                                if (Od = qd + 1, Mc = HEAP8[qd], Dd = Mc & 255, Td = Dd + C, le = r + Td, HEAP8[le] = 1, me = Xd + 1, wd = (me | 0) < (d | 0)) Xd = me, qd = Od;
                                else break
                        }
                    while (0);
                    if (N) Ie = 0, xe = R, ye = ba;
                    else {
                        ya = ba;
                        xa = Z;
                        oa = aa;
                        pa = M;
                        break a
                    }
                    for (;;)
                        if (Fe = xe + 1, nf = HEAP8[xe], Je = nf & 255, Id = Je + C, Qe = r + Id, sd = HEAP8[Qe], ge = ye + 1, HEAP8[ye] = sd, ud = Ie + 1, md = (ud | 0) < (E | 0)) Ie = ud, xe = Fe, ye = ge;
                        else break;
                    ya = de = ba + E;
                    xa = Z;
                    oa = aa;
                    pa = M;
                    break a;
                case 1:
                    do
                        if (s) {
                            if (V)
                                for (ae = 0;;)
                                    if (Dc = G + (ae << 2), HEAP32[Dc >> 2] = d, Nc = ae + 1, yd = (Nc | 0) < (A | 0)) ae = Nc;
                                    else break;
                            if (Q) {
                                jd = 0;
                                for (Sc = O;;)
                                    if (lc = Sc +
                                        1, nd = HEAP8[Sc], Rc = nd & 255, Hc = Rc - D, Kd = G + (Hc << 2), HEAP32[Kd >> 2] = jd, Rd = jd + 1, Nd = (Rd | 0) < (d | 0)) jd = Rd, Sc = lc;
                                    else break
                            }
                        }
                    while (0);
                    if (N) be = 0, zd = R, we = aa;
                    else {
                        ya = ba;
                        xa = Z;
                        oa = aa;
                        pa = M;
                        break a
                    }
                    for (;;)
                        if (Lc = zd + 1, rd = HEAP8[zd], se = rd & 255, Ud = se - D, Cf = G + (Ud << 2), td = HEAP32[Cf >> 2], Te = we + 4, HEAP32[we >> 2] = td, pe = be + 1, Pd = (pe | 0) < (E | 0)) be = pe, zd = Lc, we = Te;
                        else break;
                    Me = aa + (E << 2);
                    ya = ba;
                    xa = Z;
                    oa = Me;
                    pa = M;
                    break a;
                case 13:
                    do
                        if (s && (_memset(G, 1, A) | 0, Q)) {
                            Sd = 0;
                            for ($e = O;;)
                                if (qe = $e + 1, Ce = HEAP8[$e], cf = Ce & 255, sf = cf + C, Ue = r + sf, HEAP8[Ue] = 0, kf = Sd + 1,
                                    Re = (kf | 0) < (d | 0)) Sd = kf, $e = qe;
                                else break
                        }
                    while (0);
                    b: do
                        if (N) {
                            ce = R;
                            for (De = 0;;) {
                                Ge = HEAP8[ce];
                                He = Ge & 255;
                                We = He + C;
                                Yd = r + We;
                                Ne = HEAP8[Yd];
                                Se = 0 == Ne << 24 >> 24;
                                if (!Se) {
                                    Ee = 0;
                                    break b
                                }
                                Ld = ce + 1;
                                he = De + 1;
                                if (Qd = (he | 0) < (E | 0)) ce = Ld, De = he;
                                else {
                                    Ee = 1;
                                    break
                                }
                            }
                        } else Ee = 1;
                    while (0);
                    re = ba + 1;
                    HEAP8[ba] = Ee;
                    ya = re;
                    xa = Z;
                    oa = aa;
                    pa = M;
                    break a;
                case 12:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            Ke = 0;
                            for (Ae = O;;)
                                if (te = Ae + 1, ie = HEAP8[Ae], ff = ie & 255, ue = ff + C, Oe = r + ue, HEAP8[Oe] = 1, ne = Ke + 1, ze = (ne | 0) < (d | 0)) Ke = ne, Ae = te;
                                else break
                        }
                    while (0);
                    b: do
                        if (N) {
                            vf = 0;
                            for (lf = R;;) {
                                Xe =
                                    HEAP8[lf];
                                Be = Xe & 255;
                                hf = Be + C;
                                af = r + hf;
                                zf = HEAP8[af];
                                uf = 0 == zf << 24 >> 24;
                                if (!uf) {
                                    ve = 1;
                                    break b
                                }
                                If = lf + 1;
                                Df = vf + 1;
                                if (Ef = (Df | 0) < (E | 0)) vf = Df, lf = If;
                                else {
                                    ve = 0;
                                    break
                                }
                            }
                        } else ve = 0;
                    while (0);
                    Gf = ba + 1;
                    HEAP8[ba] = ve;
                    ya = Gf;
                    xa = Z;
                    oa = aa;
                    pa = M;
                    break a;
                case 10:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            of = 0;
                            for (Lf = O;;)
                                if (pf = Lf + 1, bf = HEAP8[Lf], Bf = bf & 255, Pf = Bf + C, Ye = r + Pf, HEAP8[Ye] = 1, Hf = of + 1, jf = (Hf | 0) < (d | 0)) of = Hf, Lf = pf;
                                else break
                        }
                    while (0);
                    Le = mf = R + b;
                    for (Ve = E;;) {
                        df = Ve - 1;
                        wf = 0 < (Ve | 0);
                        if (!wf) {
                            Yf = b;
                            break
                        }
                        Jf = Le - 1;
                        Qf = HEAP8[Jf];
                        Sf = Qf & 255;
                        Mf = Sf + C;
                        ee = r + Mf;
                        oe = HEAP8[ee];
                        if (rf = 0 == oe << 24 >> 24) Le = Jf, Ve = df;
                        else {
                            Yf = df;
                            break
                        }
                    }
                    Ff = aa + 4;
                    HEAP32[aa >> 2] = Yf;
                    ya = ba;
                    xa = Z;
                    oa = Ff;
                    pa = M;
                    break a;
                case 8:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            xf = 0;
                            for (Pe = O;;)
                                if (qf = Pe + 1, yf = HEAP8[Pe], Nf = yf & 255, Zf = Nf + C, tg = r + Zf, HEAP8[tg] = 1, Ze = xf + 1, gf = (Ze | 0) < (d | 0)) xf = Ze, Pe = qf;
                                else break
                        }
                    while (0);
                    b: do
                        if (N) {
                            ef = 0;
                            for (Kf = R;;) {
                                bg = HEAP8[Kf];
                                lg = bg & 255;
                                Rf = lg + C;
                                Ug = r + Rf;
                                Vf = HEAP8[Ug];
                                Jg = 0 == Vf << 24 >> 24;
                                if (!Jg) {
                                    hg = ef;
                                    break b
                                }
                                Lg = Kf + 1;
                                $f = ef + 1;
                                if (ah = ($f | 0) < (E | 0)) ef = $f, Kf = Lg;
                                else {
                                    hg = b;
                                    break
                                }
                            }
                        } else hg = b;
                    while (0);
                    nh = aa + 4;
                    HEAP32[aa >> 2] = hg;
                    ya = ba;
                    xa = Z;
                    oa = nh;
                    pa = M;
                    break a;
                case 11:
                    do
                        if (s && (_memset(G, 0, A) | 0, Q)) {
                            dh = O;
                            for (mg = 0;;)
                                if (yh = dh + 1, Bg = HEAP8[dh], ig = Bg & 255, ng = ig + C, Ng = r + ng, HEAP8[Ng] = 1, Ch = mg + 1, Dg = (Ch | 0) < (d | 0)) dh = yh, mg = Ch;
                                else break
                        }
                    while (0);
                    if (N) {
                        Vg = R;
                        for (zg = pg = 0;;)
                            if (Pg = Vg + 1, cg = HEAP8[Vg], dg = cg & 255, qg = dg + C, vg = r + qg, bh = HEAP8[vg], Zg = 0 != bh << 24 >> 24, Eg = Zg & 1, wg = Eg + zg, vh = pg + 1, Kh = (vh | 0) < (E | 0)) Vg = Pg, pg = vh, zg = wg;
                            else {
                                $g = wg;
                                break
                            }
                    } else $g = 0;
                    Ag = aa + 4;
                    HEAP32[aa >> 2] = $g;
                    ya = ba;
                    xa = Z;
                    oa = Ag;
                    pa = M;
                    break a;
                default:
                    ya = ba;
                    xa = Z;
                    oa = aa;
                    pa = M;
                    break a
            } else {
                if (w)
                    if (V &&
                        _memset(G, -1, P) | 0, Q) {
                        Lh = 0;
                        xg = R;
                        for (Mg = aa;;)
                            if (rg = xg + 1, Sg = HEAP8[xg], jg = Sg & 255, Uh = jg - D, Of = G + (Uh << 2), Tg = HEAP32[Of >> 2], eg = (qi = 0 > (Tg | 0)) ? HEAP32[Of >> 2] = Lh : Tg, gi = Mg + 4, HEAP32[Mg >> 2] = eg, kg = Lh + 1, Qg = (kg | 0) < (d | 0)) Lh = kg, xg = rg, Mg = gi;
                            else break;
                        Wg = aa + (d << 2);
                        ya = ba;
                        xa = Z;
                        oa = Wg
                    } else ya = ba, xa = Z, oa = aa;
                else {
                    V && _memset(G, -1, P) | 0;
                    wi = aa + (d << 2);
                    if (Q) {
                        Wf = zh = R + d;
                        di = wi;
                        for (ch = d;;)
                            if (Mh = ch - 1, Fg = Wf - 1, Rg = HEAP8[Fg], Vh = Rg & 255, Gg = Vh - D, eh = G + (Gg << 2), kh = HEAP32[eh >> 2], Wh = (fh = 0 > (kh | 0)) ? HEAP32[eh >> 2] = Mh : kh, qh = di - 4, HEAP32[qh >> 2] = Wh, og = 0 <
                                (Mh | 0)) Wf = Fg, di = qh, ch = Mh;
                            else {
                                Og = aa;
                                break
                            }
                    } else Og = wi;
                    Kg = Og + (d << 2);
                    ya = ba;
                    xa = Z;
                    oa = Kg
                }
                pa = M
            }
            while (0);Ih = $ + 1;ai = O + d;wh = R + F;
        if (Xh = (Ih | 0) < (j | 0)) M = pa,
        R = wh,
        O = ai,
        aa = oa,
        Z = xa,
        $ = Ih,
        ba = ya;
        else break
    }
    return q
}

function _jtsquare(a, f) {
    return _jtva2(a, f, f, 42)
}

function _bw0000II(a, f, d, c, b, e, g) {
    g = b;
    if (1 == (c | 0)) 0 >= (d | 0) || _memset(g, 0, d << 2) | 0;
    else if (g = 0 < (d | 0) & 0 < (c | 0), 0 == f << 24 >> 24) {
        if (g) {
            f = c << 2;
            e = 0;
            for (a = b;;)
                if (_memset(a, 0, f) | 0, b = e + 1, (b | 0) < (d | 0)) e = b, a += c << 2;
                else break
        }
    } else if (g) {
        g = c << 2;
        a = 0;
        for (e = b;;)
            if (_memset(e, 0, g) | 0, b = a + 1, (b | 0) < (d | 0)) a = b, e += c << 2;
            else break
    }
}

function _Joutput(a, f, d) {
    f = HEAP32[_stdout >> 2];
    _fputs(d, f);
    _fflush(f)
}
function _jtfmtI(a, f, d) {
    var c, a = 0;
    c = STACKTOP;
    _sprintf(f, 120296, (a = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[a >> 2] = HEAP32[d >> 2], a));
    STACKTOP = a;
    45 == (HEAP8[f] | 0) && (HEAP8[f] = 95);
    STACKTOP = c
}

function _jtrank1ex(a, f, d, c, b) {
    var e, g, h, j, i, l, k, m, n, p, q, r, s, t, u, w, v, x, y, z, A, D, B, G, C, F, E, J, L, I, H, K, N, S, T, V, Q, P, M, R, O, aa, Z, $, ba, ka, ea, ha, da, ga, U, ca, X, Y, ja, fa, ia, ra, sa, ta, wa, za, Ba, ua, ya, xa, oa, pa, la, qa, Da, Aa, Ea, Sa, Oa, Ha, Ga, Ma, Ia, db, W, Xa, Ta, fb, mb, ma, ab, Na, $a, Ua, Pa, bb, La, Ja, Qa, Ya, lb, Ca, gb, Fa, Za, qb, ib, ub, eb, rb, wb, Ka, Va, nb, ob, cb;
    e = 0;
    g = a + 205692;
    h = a + 205752;
    j = HEAP32[h >> 2] + HEAP32[g >> 2];
    if (0 == (f | 0)) return i = 0;
    l = f + 12;
    k = HEAP32[l >> 2];
    m = HEAP32[f + 24 >> 2];
    n = f + 28;
    p = 0 > (c | 0);
    if (0 != (k & 64512 | 0)) {
        p ? (q = m + c, r = 0 > (q | 0) ? 0 : q) :
            r = (m | 0) > (c | 0) ? c : m;
        q = m - r;
        if ((m | 0) == (r | 0)) return i = getFUNCTION_TABLE(b)(a, f, d);
        a: do
            if (0 < (q | 0)) {
                for (s = 0;;) {
                    t = s + 1;
                    if (0 == (HEAP32[f + 28 + (s << 2) >> 2] | 0)) break;
                    if ((t | 0) < (q | 0)) s = t;
                    else break a
                }
                s = HEAP32[a + 4408 >> 2];
                t = HEAP32[s + (HEAP32[s >> 2] + 44) >> 2];
                _jtjsigstr(a, 11, HEAP32[t + 20 >> 2], t + HEAP32[t >> 2]);
                return i = 0
            }
        while (0);
        t = _jtsprarg(a, q, f);
        if (0 == (t | 0)) return i = 0;
        s = t;
        u = HEAP32[t >> 2];
        w = s + u;
        v = s + (HEAP32[u + (s + 12) >> 2] + u);
        x = HEAP32[u + (s + 8) >> 2] + u;
        z = y = s + x;
        do
            if (0 == (c | 0)) {
                A = _jtca(a, z);
                if (0 == (A | 0)) return i = 0;
                D = _jtrank1ex(a, v, d, 0, b);
                if (0 == (D | 0)) return i = 0;
                B = getFUNCTION_TABLE(b)(a, s + (HEAP32[u + (s + 4) >> 2] + u), d);
                if (0 == (B | 0)) return i = 0;
                G = D;
                C = B;
                F = A
            } else {
                A = HEAP32[t + 12 >> 2];
                B = x + (s + 28);
                D = HEAP32[B >> 2];
                E = x + (s + 32);
                J = HEAP32[E >> 2];
                L = y;
                I = s + (HEAP32[L >> 2] + x);
                H = _jtga(a, 4, 1, 0, 0);
                0 == (H | 0) ? K = 0 : (HEAP32[H + HEAP32[H >> 2] >> 2] = q, K = H);
                H = _jtirs2(a, K, z, 0, 2147483647, 1, 656);
                if (0 == (H | 0)) return i = 0;
                N = HEAP32[B >> 2];
                B = HEAP32[E >> 2];
                E = 0 != (N | 0);
                S = E & 1;
                T = _jtga(a, 1, N, 1, 0);
                if (0 == (T | 0)) return i = 0;
                V = T;
                Q = HEAP32[T >> 2];
                T = V + Q;
                if (E) {
                    E = N - 1;
                    if (0 < (E | 0)) {
                        N = q << 2;
                        P = S;
                        M = s + (HEAP32[L >> 2] + x);
                        for (L = 0;;) {
                            R = M + (B << 2);
                            O = N;
                            aa = M;
                            for (Z = R;;) {
                                if ((HEAP8[aa] | 0) != (HEAP8[Z] | 0)) {
                                    $ = 1;
                                    break
                                }
                                ba = O - 1;
                                if (0 == (ba | 0)) {
                                    $ = 0;
                                    break
                                } else O = ba, aa += 1, Z += 1
                            }
                            HEAP8[V + (L + Q)] = $ & 1;
                            Z = ($ & 1) + P;
                            aa = L + 1;
                            if ((aa | 0) < (E | 0)) P = Z, M = R, L = aa;
                            else {
                                ka = Z;
                                break
                            }
                        }
                    } else ka = S;
                    HEAP8[V + (E + Q)] = 1;
                    ea = ka
                } else ea = S;
                if (0 == (T | 0)) return i = 0;
                L = _jtsprinit(a, q, r, n, A, w);
                if (0 == (L | 0)) return i = 0;
                M = L;
                P = HEAP32[L >> 2];
                N = b;
                B = getFUNCTION_TABLE(N)(a, L, d);
                if (0 == (B | 0)) return i = 0;
                Z = _jtga(a, 32, ea, 1, 0);
                if (0 == (Z | 0)) return i = 0;
                aa = Z + HEAP32[Z >> 2];
                O = _jtga(a, 4, Math_imul(ea, q) | 0, 2,
                    0);
                if (0 == (O | 0)) return i = 0;
                ba = HEAP32[O >> 2];
                HEAP32[O + 28 >> 2] = ea;
                HEAP32[O + 32 >> 2] = q;
                a: do
                    if (0 < (ea | 0)) {
                        ha = q << 2;
                        da = M + P;
                        ga = P + (M + 8);
                        U = P + (M + 12);
                        ca = 0;
                        X = O + ba;
                        for (Y = 0;;) {
                            ja = V + (ca + Q);
                            fa = _memchr(ja, 1, D - ca) + 1 - ja;
                            _memcpy(X, I + (Math_imul(ca, J) << 2), ha) | 0;
                            ja = X + (q << 2);
                            ia = ca - 1;
                            ra = fa - 1 + ca;
                            sa = _jtga(a, 4, fa, 1, 0);
                            if (0 == (sa | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            if ((ia | 0) != (ra | 0)) {
                                ta = ia;
                                for (ia = sa + HEAP32[sa >> 2]; !(wa = ta + 1, HEAP32[ia >> 2] = wa, (wa | 0) == (ra | 0));) ta = wa, ia += 4
                            }
                            ia = _jtfrom(a, sa, H) - da;
                            HEAP32[ga >> 2] = ia;
                            if (0 == (M + (ia + P) | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            ia = _jtfrom(a,
                                sa, v) - da;
                            HEAP32[U >> 2] = ia;
                            if (0 == (M + (ia + P) | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            ia = getFUNCTION_TABLE(N)(a, L, d);
                            HEAP32[aa + (Y << 2) >> 2] = ia;
                            if (0 == (ia | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            ia = Y + 1;
                            if ((ia | 0) < (ea | 0)) ca = fa + ca, X = ja, Y = ia;
                            else break a
                        }
                        if (181 == e) return i
                    }
                while (0);
                aa = _jtope(a, Z);
                if (0 == (aa | 0)) return i = 0;
                G = aa;
                C = B;
                F = O
            }
        while (0);
        ea = _jtsprz(a, G, F, C, q, n);
        0 != (ea | 0) && (_jttraverse(a, ea, 654), q = ea + 16, HEAP32[q >> 2] += 1);
        _jttpop(a, j);
        return i = _jttpush(a, ea)
    }
    p ? (p = m + c, za = 0 > (p | 0) ? 0 : p) : za = (m | 0) > (c | 0) ? c : m;
    c = m - za;
    Ba = 0 == (k & 32 | 0) ? 0 : 0 != (HEAP32[f + 4 >> 2] & 14 | 0) |
        0;
    if ((m | 0) == (za | 0)) return i = getFUNCTION_TABLE(b)(a, f, d);
    m = f + 28 + (c << 2);
    do
        if (0 < (za | 0)) {
            p = 1;
            for (ea = 0;;)
                if (ua = p * (HEAP32[f + 28 + (c + ea << 2) >> 2] | 0), q = ea + 1, (q | 0) < (za | 0)) p = ua, ea = q;
                else break;
            2147483647 >= ua ? (ya = ua, e = 59) : (ea = HEAP32[a + 4408 >> 2], p = HEAP32[ea + (HEAP32[ea >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[p + 20 >> 2], p + HEAP32[p >> 2]), xa = 0)
        } else ya = 1, e = 59;
    while (0);
    59 == e && (xa = ya & -1);
    ya = a + 204545;
    if (0 != (HEAP8[ya] | 0)) return i = 0;
    oa = 2 == (k | 0) | 2097152 == (k | 0) | 33554432 == (k | 0) ? 1 : 65536 == (k | 0) ? 4 : 268435456 == (k | 0) ? 12 : 128 == (k | 0) ? 8 : 1024 == (k |
        0) | 4096 == (k | 0) | 8192 == (k | 0) | 16384 == (k | 0) | 2048 == (k | 0) | 32768 == (k | 0) ? 16 : 262144 == (k | 0) | 524288 == (k | 0) | 1048576 == (k | 0) ? 44 : 16777216 == (k | 0) ? 12 : 131072 == (k | 0) ? 2 : 4 == (k | 0) | 67108864 == (k | 0) | 134217728 == (k | 0) | 4194304 == (k | 0) | 8388608 == (k | 0) ? 4 : 1 == (k | 0) | 8 == (k | 0) | 16 == (k | 0) ? k : 32 == (k | 0) ? 4 : 64 == (k | 0) ? 4 : 536870912 == (k | 0) ? 24 : -1;
    ua = Math_imul(oa, xa) | 0;
    oa = f;
    p = HEAP32[f >> 2];
    ea = oa + (p - ua);
    O = _jtga(a, k, xa, za, m);
    if (0 == (O | 0)) return i = 0;
    Z = B = O;
    q = B + HEAP32[Z >> 2];
    do
        if (0 < (c | 0)) {
            C = 1;
            for (F = 0;;)
                if (pa = C * (HEAP32[f + 28 + (F << 2) >> 2] | 0), G = F + 1, (G | 0) < (c |
                        0)) C = pa, F = G;
                else break;
            2147483647 >= pa ? (la = pa, e = 80) : (F = HEAP32[a + 4408 >> 2], C = HEAP32[F + (HEAP32[F >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[C + 20 >> 2], C + HEAP32[C >> 2]), qa = 0)
        } else la = 1, e = 80;
    while (0);
    80 == e && (qa = la & -1);
    if (0 != (HEAP8[ya] | 0)) return i = 0;
    do
        if (0 == (HEAP32[f + 20 >> 2] | 0)) {
            la = _jtga(a, 4, za, 1, 0);
            0 == (la | 0) ? Da = 0 : (_memcpy(la + HEAP32[la >> 2], m, za << 2) | 0, Da = la);
            la = _jtga(a, HEAP32[l >> 2], 1, 0, 0);
            0 == (la | 0) ? Aa = 0 : (_fillv(HEAP32[l >> 2], 1, la + HEAP32[la >> 2]), Aa = la);
            la = _jtreshape(a, Da, Aa);
            if (0 == (la | 0)) return i = 0;
            Ea = la;
            Sa = ea
        } else if (la =
        oa + p, _memcpy(q, la, ua) | 0, 0 == Ba << 24 >> 24) Ea = O, Sa = la;
    else if (pa = f - O, C = O + 4, HEAP32[C >> 2] |= 8, C = B + HEAP32[Z >> 2], F = HEAP32[O + 20 >> 2], 0 < (F | 0))
        for (Oa = 0;;)
            if (G = C + (Oa << 2), HEAP32[G >> 2] += pa, G = Oa + 1, (G | 0) < (F | 0)) Oa = G;
            else {
                Ea = O;
                Sa = la;
                break
            } else Ea = O, Sa = la;
    while (0);
    if (O = 0 != (qa | 0)) {
        Oa = getFUNCTION_TABLE(b)(a, Ea, d);
        if (0 == (Oa | 0)) return i = 0;
        Ga = Ha = Oa
    } else Oa = a + 1176, Z = HEAP32[Oa >> 2], HEAP32[Oa >> 2] = 0, B = getFUNCTION_TABLE(b)(a, Ea, d), HEAP32[Oa >> 2] = Z, 0 != (HEAP8[ya] | 0) && (B = HEAP32[30648], HEAP8[ya] = 0, HEAP32[a + 4400 >> 2] = 0), Ha = B, Ga = 0;
    B = HEAP32[Ha +
        12 >> 2];
    Z = HEAP32[Ha + 24 >> 2];
    Oa = Ha + 28;
    p = HEAP32[Ha + 20 >> 2];
    Ma = 536870912 == (B | 0) ? 24 : 1 == (B | 0) | 8 == (B | 0) | 16 == (B | 0) ? B : 4 == (B | 0) | 67108864 == (B | 0) | 134217728 == (B | 0) | 4194304 == (B | 0) | 8388608 == (B | 0) ? 4 : 32 == (B | 0) ? 4 : 64 == (B | 0) ? 4 : 128 == (B | 0) ? 8 : 1024 == (B | 0) | 4096 == (B | 0) | 8192 == (B | 0) | 16384 == (B | 0) | 2048 == (B | 0) | 32768 == (B | 0) ? 16 : 262144 == (B | 0) | 524288 == (B | 0) | 1048576 == (B | 0) ? 44 : 16777216 == (B | 0) ? 12 : 65536 == (B | 0) ? 4 : 268435456 == (B | 0) ? 12 : 2 == (B | 0) | 2097152 == (B | 0) | 33554432 == (B | 0) ? 1 : 131072 == (B | 0) ? 2 : -1;
    oa = Math_imul(Ma, p) | 0;
    O ? 0 == (B & 196895 | 0) ? (Ia = Ha,
        db = Ea, W = 0, Xa = Sa, Ta = q, fb = 0) : 0 == (HEAP32[f + 4 >> 2] & 14 | 0) ? e = 112 : (Ia = Ha, db = Ea, W = 0, Xa = Sa, Ta = q, fb = 0) : e = 112;
    a: do
        if (112 == e) {
            if (1 < (HEAP32[Ea + 16 >> 2] | 0)) {
                Ma = _jtca(a, Ea);
                if (0 == (Ma | 0)) return i = 0;
                mb = Ma;
                ma = Ma + HEAP32[Ma >> 2]
            } else mb = Ea, ma = q;
            Ma = (qa | 0) * (p | 0);
            2147483647 < Ma ? (ea = HEAP32[a + 4408 >> 2], Aa = HEAP32[ea + (HEAP32[ea >> 2] + 40) >> 2], _jtjsigstr(a, 10, HEAP32[Aa + 20 >> 2], Aa + HEAP32[Aa >> 2]), ab = 0) : ab = Ma & -1;
            if (0 != (HEAP8[ya] | 0)) return i = 0;
            Ma = _jtga(a, B, ab, Z + c, 0);
            if (0 == (Ma | 0)) return i = 0;
            _memcpy(Ma + 28, n, c << 2) | 0;
            Aa = Oa;
            ea = Z << 2;
            _memcpy(Ma +
                28 + (c << 2), Aa, ea) | 0;
            if (O)
                if (Da = Ma + HEAP32[Ma >> 2], _memcpy(Da, Ha + HEAP32[Ha >> 2], oa) | 0, l = HEAP32[h >> 2] + HEAP32[g >> 2], 1 >= (qa | 0)) Ia = Ha, db = mb, W = Ma, Xa = Sa, Ta = ma, fb = 1;
                else {
                    la = b;
                    F = 0 == (Z | 0);
                    pa = f;
                    if (0 == Ba << 24 >> 24) {
                        C = 1;
                        G = Da;
                        v = 1;
                        w = ma;
                        r = Sa;
                        for (ka = mb;;) {
                            if (1 < (HEAP32[ka + 16 >> 2] | 0)) {
                                $ = _jtga(a, k, xa, za, m);
                                if (0 == ($ | 0)) {
                                    i = 0;
                                    e = 181;
                                    break
                                }
                                Na = $;
                                $a = $ + HEAP32[$ >> 2]
                            } else Na = ka, $a = w;
                            $ = r + ua;
                            _memcpy($a, $, ua) | 0;
                            x = getFUNCTION_TABLE(la)(a, Na, d);
                            if (0 == (x | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            if ((B | 0) != (HEAP32[x + 12 >> 2] | 0)) {
                                Ia = x;
                                db = Na;
                                W = Ma;
                                Xa = $;
                                Ta = $a;
                                fb = v;
                                break a
                            }
                            if ((Z |
                                    0) != (HEAP32[x + 24 >> 2] | 0)) {
                                Ia = x;
                                db = Na;
                                W = Ma;
                                Xa = $;
                                Ta = $a;
                                fb = v;
                                break a
                            }
                            if (!F) {
                                s = ea;
                                z = x + 28;
                                for (K = Aa;;) {
                                    if ((HEAP8[z] | 0) != (HEAP8[K] | 0)) {
                                        Ia = x;
                                        db = Na;
                                        W = Ma;
                                        Xa = $;
                                        Ta = $a;
                                        fb = v;
                                        break a
                                    }
                                    y = s - 1;
                                    if (0 == (y | 0)) break;
                                    else s = y, z += 1, K += 1
                                }
                            }
                            K = G + oa;
                            _memcpy(K, x + HEAP32[x >> 2], oa) | 0;
                            0 == C << 24 >> 24 ? Ua = 0 : 1 != (HEAP32[Na + 16 >> 2] | 0) ? Ua = 0 : (_jttpop(a, l), Ua = C);
                            z = v + 1;
                            if ((z | 0) < (qa | 0)) C = Ua, G = K, v = z, w = $a, r = $, ka = Na;
                            else {
                                Ia = x;
                                db = Na;
                                W = Ma;
                                Xa = $;
                                Ta = $a;
                                fb = z;
                                break a
                            }
                        }
                        if (181 == e) return i
                    } else Pa = 1, bb = Da, La = 1, Ja = ma, Qa = Sa, Ya = mb;
                    for (;;) {
                        if (1 < (HEAP32[Ya + 16 >> 2] |
                                0)) {
                            ka = _jtga(a, k, xa, za, m);
                            if (0 == (ka | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            r = ka + HEAP32[ka >> 2];
                            w = Qa + ua;
                            _memcpy(r, w, ua) | 0;
                            lb = r;
                            Ca = w;
                            gb = ka
                        } else if (ka = Qa + ua, _memcpy(Ja, ka, ua) | 0, 0 == (Ya | 0)) {
                            i = 0;
                            e = 181;
                            break
                        } else lb = Ja, Ca = ka, gb = Ya;
                        ka = pa - gb;
                        w = gb + 4;
                        HEAP32[w >> 2] |= 8;
                        w = gb + HEAP32[gb >> 2];
                        r = HEAP32[gb + 20 >> 2];
                        if (0 < (r | 0))
                            for (v = 0;;)
                                if (G = w + (v << 2), HEAP32[G >> 2] += ka, G = v + 1, (G | 0) < (r | 0)) v = G;
                                else break;
                        else if (0 == (gb | 0)) {
                            i = 0;
                            e = 181;
                            break
                        }
                        v = getFUNCTION_TABLE(la)(a, gb, d);
                        if (0 == (v | 0)) {
                            i = 0;
                            e = 181;
                            break
                        }
                        if ((B | 0) != (HEAP32[v + 12 >> 2] | 0)) {
                            Ia = v;
                            db = gb;
                            W = Ma;
                            Xa =
                                Ca;
                            Ta = lb;
                            fb = La;
                            break a
                        }
                        if ((Z | 0) != (HEAP32[v + 24 >> 2] | 0)) {
                            Ia = v;
                            db = gb;
                            W = Ma;
                            Xa = Ca;
                            Ta = lb;
                            fb = La;
                            break a
                        }
                        if (!F) {
                            r = ea;
                            ka = v + 28;
                            for (w = Aa;;) {
                                if ((HEAP8[ka] | 0) != (HEAP8[w] | 0)) {
                                    Ia = v;
                                    db = gb;
                                    W = Ma;
                                    Xa = Ca;
                                    Ta = lb;
                                    fb = La;
                                    break a
                                }
                                $ = r - 1;
                                if (0 == ($ | 0)) break;
                                else r = $, ka += 1, w += 1
                            }
                        }
                        w = bb + oa;
                        _memcpy(w, v + HEAP32[v >> 2], oa) | 0;
                        0 == Pa << 24 >> 24 ? Fa = 0 : 1 != (HEAP32[gb + 16 >> 2] | 0) ? Fa = 0 : (_jttpop(a, l), Fa = Pa);
                        ka = La + 1;
                        if ((ka | 0) < (qa | 0)) Pa = Fa, bb = w, La = ka, Ja = lb, Qa = Ca, Ya = gb;
                        else {
                            Ia = v;
                            db = gb;
                            W = Ma;
                            Xa = Ca;
                            Ta = lb;
                            fb = ka;
                            break a
                        }
                    }
                    if (181 == e) return i
                } else Ia = Ha, db = mb, W =
                Ma, Xa = Sa, Ta = ma, fb = 1
        }
    while (0);
    if ((fb | 0) < (qa | 0)) {
        lb = _jtga(a, 32, qa, c, n);
        if (0 == (lb | 0)) return i = 0;
        n = lb + HEAP32[lb >> 2];
        a: do {
            if (0 < (fb | 0)) {
                c = Ga + 12;
                Ca = Ga + 20;
                gb = Ga + 24;
                Ya = Ga + 28;
                Qa = W + (HEAP32[W >> 2] - oa);
                Ja = n;
                for (La = 0;;) {
                    bb = _jtga(a, HEAP32[c >> 2], HEAP32[Ca >> 2], HEAP32[gb >> 2], Ya);
                    if (0 == (bb | 0)) {
                        i = 0;
                        break
                    }
                    Fa = Qa + oa;
                    _memcpy(bb + HEAP32[bb >> 2], Fa, oa) | 0;
                    Pa = Ja + 4;
                    HEAP32[Ja >> 2] = bb;
                    bb = La + 1;
                    if ((bb | 0) < (fb | 0)) Qa = Fa, Ja = Pa, La = bb;
                    else {
                        Za = Pa;
                        break a
                    }
                }
                return i
            }
            Za = n
        } while (0);
        HEAP32[Za >> 2] = Ia;
        Ia = qa - 1 - fb;
        fb = Za + 4;
        a: do
            if (0 < (Ia | 0)) {
                Za = b;
                qa =
                    f;
                if (0 == Ba << 24 >> 24) {
                    n = Ta;
                    oa = Xa;
                    Ga = db;
                    La = 0;
                    for (Ja = fb;;) {
                        if (1 < (HEAP32[Ga + 16 >> 2] | 0)) {
                            Qa = _jtga(a, k, xa, za, m);
                            if (0 == (Qa | 0)) {
                                i = 0;
                                e = 181;
                                break
                            }
                            qb = Qa;
                            ib = Qa + HEAP32[Qa >> 2]
                        } else qb = Ga, ib = n;
                        Qa = oa + ua;
                        _memcpy(ib, Qa, ua) | 0;
                        Ya = getFUNCTION_TABLE(Za)(a, qb, d);
                        if (0 == (Ya | 0)) {
                            i = 0;
                            e = 181;
                            break
                        }
                        HEAP32[Ja >> 2] = Ya;
                        Ya = La + 1;
                        if ((Ya | 0) < (Ia | 0)) n = ib, oa = Qa, Ga = qb, La = Ya, Ja += 4;
                        else break a
                    }
                    if (181 == e) return i
                } else ub = Ta, eb = Xa, rb = db, wb = 0, Ka = fb;
                for (;;) {
                    if (1 < (HEAP32[rb + 16 >> 2] | 0)) {
                        Ja = _jtga(a, k, xa, za, m);
                        if (0 == (Ja | 0)) {
                            i = 0;
                            e = 181;
                            break
                        }
                        La = Ja + HEAP32[Ja >>
                            2];
                        Ga = eb + ua;
                        _memcpy(La, Ga, ua) | 0;
                        Va = La;
                        nb = Ga;
                        ob = Ja
                    } else if (Ja = eb + ua, _memcpy(ub, Ja, ua) | 0, 0 == (rb | 0)) {
                        i = 0;
                        e = 181;
                        break
                    } else Va = ub, nb = Ja, ob = rb;
                    Ja = qa - ob;
                    Ga = ob + 4;
                    HEAP32[Ga >> 2] |= 8;
                    Ga = ob + HEAP32[ob >> 2];
                    La = HEAP32[ob + 20 >> 2];
                    if (0 < (La | 0))
                        for (oa = 0;;)
                            if (n = Ga + (oa << 2), HEAP32[n >> 2] += Ja, n = oa + 1, (n | 0) < (La | 0)) oa = n;
                            else break;
                    else if (0 == (ob | 0)) {
                        i = 0;
                        e = 181;
                        break
                    }
                    oa = getFUNCTION_TABLE(Za)(a, ob, d);
                    if (0 == (oa | 0)) {
                        i = 0;
                        e = 181;
                        break
                    }
                    HEAP32[Ka >> 2] = oa;
                    oa = wb + 1;
                    if ((oa | 0) < (Ia | 0)) ub = Va, eb = nb, rb = ob, wb = oa, Ka += 4;
                    else break a
                }
                if (181 == e) return i
            }
        while (0);
        cb = _jtope(a, lb)
    } else cb = W;
    0 != (cb | 0) && (_jttraverse(a, cb, 654), W = cb + 16, HEAP32[W >> 2] += 1);
    _jttpop(a, j);
    return i = _jttpush(a, cb)
}


function _jttally(a, f) {
    var d, c;
    if (0 == (f | 0)) return 0;
    d = 0 == (HEAP32[f + 24 >> 2] | 0) ? 1 : HEAP32[f + 28 >> 2];
    c = _jtga(a, 4, 1, 0, 0);
    0 == (c | 0) ? d = 0 : (HEAP32[c + HEAP32[c >> 2] >> 2] = d, d = c);
    return 0 == (HEAP32[f + 12 >> 2] & 192 | 0) ? d : d = _jtxco1(a, d)
}

function _jtlevel1(a, f) {
    var d;
    if (0 == (f | 0)) return 0;
    d = _level(f);
    f = _jtga(a, 4, 1, 0, 0);
    if (0 == (f | 0)) return 0;
    HEAP32[f + HEAP32[f >> 2] >> 2] = d;
    return f
}

function _ltII(a, f, d, c, b, e, g) {
    var h, j, i, l, k;
    if (1 == (c | 0)) {
        if (0 < (d | 0)) {
            h = 0;
            j = e;
            for (i = b;;)
                if (HEAP8[i] = (HEAP32[j >> 2] | 0) < (HEAP32[g >> 2] | 0) | 0, a = h + 1, (a | 0) < (d | 0)) h = a, g += 4, j += 4, i += 1;
                else break
        }
    } else if (i = 0 < (d | 0), 0 == f << 24 >> 24) {
        if (i) {
            f = 0 < (c | 0);
            j = g;
            g = 0;
            h = e;
            for (a = b;;) {
                b = j + 4;
                i = HEAP32[j >> 2];
                if (f) {
                    l = a + c;
                    k = h;
                    j = 0;
                    for (e = a;;)
                        if (HEAP8[e] = (HEAP32[k >> 2] | 0) < (i | 0) | 0, a = j + 1, (a | 0) < (c | 0)) k += 4, j = a, e += 1;
                        else break;
                    k = h + (c << 2)
                } else k = h, l = a;
                e = g + 1;
                if ((e | 0) < (d | 0)) j = b, g = e, h = k, a = l;
                else break
            }
        }
    } else if (i) {
        i = 0 < (c | 0);
        l = 0;
        a = g;
        g = e;
        for (e = b;;) {
            b =
                g + 4;
            k = HEAP32[g >> 2];
            if (i) {
                h = e + c;
                g = 0;
                j = a;
                for (f = e;;)
                    if (HEAP8[f] = (k | 0) < (HEAP32[j >> 2] | 0) | 0, e = g + 1, (e | 0) < (c | 0)) g = e, j += 4, f += 1;
                    else break;
                a += c << 2
            } else h = e;
            f = l + 1;
            if ((f | 0) < (d | 0)) l = f, g = b, e = h;
            else break
        }
    }
}


function _jtfpown(a, f, d) {
    var c, b, e, g, h, j, i;
    c = 0;
    if (0 == (f | 0)) return 0;
    e = d;
    g = HEAP32[d >> 2];
    d = HEAP32[g + (e + 16) >> 2];
    h = HEAP32[d + HEAP32[d >> 2] >> 2];
    if (0 == (h | 0)) return b = _jtca(a, f);
    if (1 == (h | 0)) return d = HEAP32[g + (e + 8) >> 2], b = getFUNCTION_TABLE(HEAP32[d + HEAP32[d >> 2] >> 2])(a, f, d);
    d = HEAP32[g + (e + 8) >> 2];
    e = HEAP32[a + 205752 >> 2] + HEAP32[a + 205692 >> 2];
    g = HEAP32[d + HEAP32[d >> 2] >> 2];
    if (0 < (h | 0)) j = 0;
    else return f;
    for (;;) {
        f = getFUNCTION_TABLE(g)(a, f, d);
        if (0 == (f | 0)) {
            b = 0;
            c = 8;
            break
        }
        _jttraverse(a, f, 654);
        i = f + 16;
        HEAP32[i >> 2] += 1;
        _jttpop(a, e);
        _jttpush(a,
            f);
        i = j + 1;
        if ((i | 0) < (h | 0)) j = i;
        else {
            b = f;
            c = 8;
            break
        }
    }
    if (8 == c) return b
}
function _jtdspell(a, f, d) {
    var c, b, e, g, h;
    c = STACKTOP;
    STACKTOP = STACKTOP + 24 | 0;
    b = c + 8;
    e = c + 16; - 24 != f << 24 >> 24 ? (HEAP8[e] = 32, HEAP8[e + 4] = 0, g = e + 1, _spellit(f, g), f = HEAP8[g], d = 46 == f << 24 >> 24 | 58 == f << 24 >> 24 ? 0 : 0 == (HEAP8[a + 204980] | 0) ? 1 : 2 != (HEAP8[(f << 24 >> 24) + 113216] | 0) | 0, g = e + d, d = _strlen(g), e = a + 4400, f = HEAP32[e >> 2], b = 2E3 - f, h = (b | 0) > (d | 0) ? d : b, 0 >= (h | 0) || (_memcpy(f + (a + 2396), g, h) | 0, HEAP32[e >> 2] += h)) : (0 == (HEAP8[a + 204980] | 0) ? f = HEAP32[a + 4400 >> 2] : (HEAP8[b] = 32, h = a + 4400, e = HEAP32[h >> 2], g = 2E3 - e, f = 1 < (g | 0) ? 1 : g, 0 >= (f | 0) || (_memcpy(e + (a +
        2396), b, f) | 0, e = HEAP32[h >> 2] + f, HEAP32[h >> 2] = e), f = e), b = a + 4400, e = 2E3 - f, h = _jtthv(a, HEAP32[d + (HEAP32[d >> 2] + 16) >> 2], 200 > (e | 0) ? e : 200, f + (a + 2396)), f = HEAP32[b >> 2] + h, HEAP32[b >> 2] = f, HEAP8[c] = 58, h = 2E3 - f, e = 1 < (h | 0) ? 1 : h, 0 >= (e | 0) || (_memcpy(f + (a + 2396), c, e) | 0, HEAP32[b >> 2] += e));
    STACKTOP = c
}


//console.log('HEAP8: ' + HEAP8[99]);


STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = !0;
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var fidx=0;
var gF=function(f){
    fidx+=1;
    if (window[f]) {
        return window[f]
    } else {
        return (function(i) {
            return function() {
                var msg = 'missing ' + f + ' at  ' + ((i*2));
                console.log(msg);
                throw msg
            }
        })(fidx);
    }
}

var FUNCTION_TABLE = [0, 0, gF("_anyneID"), 0, gF("_anyneIB"), 0, gF("_jtxrx"), 0, gF("_jtrollx"), 0, gF("_anyneII"), 0, gF("_ifbneBB"), 0, gF("_i0eqDD"), 0, gF("_ifbneBI"), 0, gF("_jtppq"), 0, gF("_jtpps"), 0, gF("_jtrollk"), 0, gF("_jtioi"), 0, gF("_i1eqIB"), 0, gF("_neSS"), 0, gF("_mininsX"), 0, gF("_jtscind"), 0, gF("_i1eqID"), 0, gF("_i1eqII"), 0, gF("_mininsS"), 0, gF("_neSC"), 0, gF("_mininsI"), 0, gF("_jtiepdos"), 0, gF("_mininsD"), 0, gF("_jtpco2"), 0, gF("_bw1000CC"), 0, gF("_ifbltS"), 0, gF("_ltDD"), 0, gF("_ltDB"), 0, gF("_jtundco2"), 0, gF("_lcmZZ"), 0, gF("_ltDI"), 0, gF("_i0eqDB"), 0, gF("_ifbneBD"), 0, gF("_sumeqDB"), 0, gF("_bw1011sfxI"), 0, gF("_sumeqDD"), 0, gF("_sumeqDI"), 0, gF("_i0eqDI"), 0, gF("_bw1110sfxI"), 0, gF("_bw0001II"), 0, gF("_jtdx_next"), 0, gF("_jtanyebar"), 0, gF("_jtpderiv1"), 0, gF("_jtpderiv2"), 0, gF("_anygtBD"),
                      0, gF("_anygtBB"), 0, gF("_jtrngraw"), 0, gF("_anygtBI"), 0, gF("_j0geBI"), 0, gF("_sumgtID"), 0, gF("_sumgtIB"), 0, gF("_absQ"), 0, gF("_jtddot1"), 0, gF("_j0geBB"), 0, gF("_jtiobs"), 0, gF("_absZ"), 0, gF("_absX"), 0, gF("_sumgtII"), 0, gF("_absD"), 0, gF("_cirID"), 0, gF("_absI"), 0, gF("_allneII"), 0, gF("_jtpunc"), 0, gF("_allneID"), 0, gF("_jtbitwise0000"), 0, gF("_jtbitwise0001"), 0, gF("_jti0eps"), 0, gF("_jtscapco1"), 0, gF("_jtscapco2"), 0, gF("_jtioax1"), 0, gF("_pixX"), 0, gF("_tymesBD"), 0, gF("_jtsuffix"), 0, gF("_tymesBI"), 0, gF("_jtj0eps"), 0, gF("_amipn2"), 0, gF("_jtposq"), 0, gF("_jtposs"), 0, gF("_powZZ"), 0, gF("_jtreshape"), 0, gF("_maxDI"), 0, gF("_plusQQ"), 0, gF("_divXX"), 0, gF("_maxDB"), 0, gF("_maxDD"), 0, gF("_jtdet"), 0, gF("_j1ltDI"), 0, gF("_jtderiv1"), 0, gF("_logX"), 0, gF("_j1ltDD"), 0, gF("_j1ltDB"), 0, gF("_sqrtQ"), 0, gF("_sqrtX"), 0,
                      gF("_sqrtZ"), 0, gF("_remII"), 0, gF("_minusBD"), 0, gF("_sqrtD"), 0, gF("_sqrtI"), 0, gF("_idf"), 0, gF("_plusinsZ"), 0, gF("_plusinsD"), 0, gF("_plusinsB"), 0, gF("_plusinsO"), 0, gF("_jthktake"), 0, gF("_plusinsI"), 0, gF("_jtfitpoly2"), 0, gF("_jtgoutfix"), 0, gF("_jtdiff0"), 0, gF("_jtlocexmark"), 0, gF("_jtcrc1"), 0, gF("_jtply1s"), 0, gF("_sumneID"), 0, gF("_j0geS"), 0, gF("_sumneIB"), 0, gF("_sumneII"), 0, gF("_jtevmq"), 0, gF("_jtlcapco"), 0, gF("_jtevms"), 0, gF("_anyleDB"), 0, gF("_powDI"), 0, gF("_anyleDD"), 0, gF("_i1neII"), 0, gF("_powDD"), 0, gF("_i1neID"), 0, gF("_anyleDI"), 0, gF("_i1neIB"), 0, gF("_powDB"), 0, gF("_i0neS"), 0, gF("_with2"), 0, gF("_i0neC"), 0, gF("_neBD"), 0, gF("_neBB"), 0, gF("_jtsfrom"), 0, gF("_neBI"), 0, gF("_amccv2"), 0, gF("_withr"), 0, gF("_jtapplystr"), 0, gF("_i1neS"), 0, gF("_nandinsB"), 0, gF("_nepfxB"), 0, gF("_jtdbstepover2"),
                      0, gF("_jtdbstepover1"), 0, gF("_withl"), 0, gF("_i1neC"), 0, gF("_j0neID"), 0, gF("_j0neIB"), 0, gF("_jtscm112"), 0, gF("_j0neII"), 0, gF("_jtvis"), 0, gF("_jtbminv"), 0, gF("_sumltDD"), 0, gF("_sumltDB"), 0, gF("_sumltDI"), 0, gF("_jtdotnamess"), 0, gF("_jtdotnamesq"), 0, gF("_jtiocx"), 0, gF("_jttdot"), 0, gF("_jtfixa"), 0, gF("_bw0110II"), 0, gF("_allneC"), 0, gF("_ltQQ"), 0, gF("_allneS"), 0, gF("_bw1000sfxI"), 0, gF("_ixfixedright"), 0, gF("_jtdbq"), 0, gF("_minID"), 0, gF("_minIB"), 0, gF("_minII"), 0, gF("_j0gtS"), 0, gF("_jtfindrange"), 0, gF("_j0ltDI"), 0, gF("_j0ltDD"), 0, gF("_j0ltDB"), 0, gF("_jtbitwise0011"), 0, gF("_jtbitwise0010"), 0, gF("_j0gtDI"), 0, gF("_jtbitwise1010"), 0, gF("_jtbitwise1011"), 0, gF("_allleBI"), 0, gF("_jtatco"), 0, gF("_jtmdiv"), 0, gF("_allleBD"), 0, gF("_allleBB"), 0, gF("_jtsclass"), 0, gF("_jtbitwiseshift"),
                      0, gF("_j0gtBD"), 0, gF("_minusinsD"), 0, gF("_minusinsB"), 0, gF("_jtexpn2"), 0, gF("_j0gtBB"), 0, gF("_minusinsO"), 0, gF("_j0gtBI"), 0, gF("_minusinsI"), 0, gF("_eqpfxB"), 0, gF("_minusinsZ"), 0, gF("_jtunder2"), 0, gF("_jtunder1"), 0, gF("_xop1"), 0, gF("_xop2"), 0, gF("_jtrazecut2"), 0, gF("_jtrazecut0"), 0, gF("_jtrazecut1"), 0, gF("_ltC"), 0, gF("_j0eqBI"), 0, gF("_j0eqBB"), 0, gF("_jtxco2"), 0, gF("_sumgeDD"), 0, gF("_anyltBD"), 0, gF("_bw0000II"), 0, gF("_sumgeDB"), 0, gF("_anyltBB"), 0, gF("_plusBB"), 0, gF("_anyltBI"), 0, gF("_sumgeDI"), 0, gF("_plusBD"), 0, gF("_andsfxB"), 0, gF("_jttsit2"), 0, gF("_jtsct1"), 0, gF("_jtsct2"), 0, gF("_jtiepq"), 0, gF("_jtieps"), 0, gF("_sumneS"), 0, gF("_jtmaximum"), 0, gF("_sumneC"), 0, gF("_jtfolkcomp0"), 0, gF("_binXX"), 0, gF("_jtaro"), 0, gF("_jtddot"), 0, gF("_jtsqroot"), 0, gF("_jtsympool"), 0, gF("_jtless"),
                      0, gF("_jtfloor1"), 0, gF("_jtdbcall"), 0, gF("_jtsp"), 0, gF("_jtprx"), 0, gF("_i0eqBI"), 0, gF("_ifbneDD"), 0, gF("_jthead"), 0, gF("_ifbneDB"), 0, gF("_i0eqBB"), 0, gF("_ifbneDI"), 0, gF("_i0eqBD"), 0, gF("_jtsnl"), 0, gF("_odd1"), 0, gF("_jtpowv2a"), 0, gF("_jtifbeps"), 0, gF("_jttrident"), 0, gF("_jtscm102"), 0, gF("_j1geII"), 0, gF("_j1geIB"), 0, gF("_jtswap"), 0, gF("_j1geID"), 0, gF("_j0geBD"), 0, gF("_lcmXX"), 0, gF("_bw1011II"), 0, gF("_compspdsD"), 0, gF("_neCC"), 0, gF("_compspdsB"), 0, gF("_geC"), 0, gF("_jtunbin"), 0, gF("_compspdsI"), 0, gF("_neCS"), 0, gF("_jtifrom"), 0, gF("_jtcrcfixedleft"), 0, gF("_jtplus"), 0, gF("_compspdsZ"), 0, gF("_jtunder"), 0, gF("_ifbleDB"), 0, gF("_ifbleDD"), 0, gF("_jtisf"), 0, gF("_ifbleDI"), 0, gF("_j1ltS"), 0, gF("_jtkeyslash"), 0, gF("_eqDI"), 0, gF("_eqDB"), 0, gF("_eqDD"), 0, gF("_j1gtID"), 0, gF("_jtpdt"), 0, gF("_j1gtIB"),
                      0, gF("_j1gtII"), 0, gF("_jtoutof"), 0, gF("_jthkodom"), 0, gF("_i0geBD"), 0, gF("_i0geBB"), 0, gF("_jtbitwise1001"), 0, gF("_jtbitwise1000"), 0, gF("_i0geBI"), 0, gF("_allneIB"), 0, gF("_gtSS"), 0, gF("_jtevger"), 0, gF("_jtiod"), 0, gF("_jtdbnext"), 0, gF("_jtfitexp2"), 0, gF("_minussfxZ"), 0, gF("_jtxfactor"), 0, gF("_minussfxI"), 0, gF("_minussfxO"), 0, gF("_sumgeS"), 0, gF("_minussfxB"), 0, gF("_minussfxD"), 0, gF("_divZZ"), 0, gF("_jtjdot2"), 0, gF("_jtbdot"), 0, gF("_bw1111II"), 0, gF("_mergn1"), 0, gF("_bw1011insC"), 0, gF("_gcdDD"), 0, gF("_bw1011insI"), 0, gF("_divsfxZ"), 0, gF("_jtvconj"), 0, gF("_jtnc"), 0, gF("_divsfxD"), 0, gF("_jtne"), 0, gF("_jtbitwisechar"), 0, gF("_compd1"), 0, gF("_j0eqBD"), 0, gF("_jthalve"), 0, gF("_anyltDD"), 0, gF("_jtio4"), 0, gF("_jtio1"), 0, gF("_jtio2"), 0, gF("_jtpowop"), 0, gF("_norinsB"), 0, gF("_jtqpctr"),
                      0, gF("_ifbleS"), 0, gF("_i1gtDI"), 0, gF("_jtra"), 0, gF("_jtdrop"), 0, gF("_i1gtDD"), 0, gF("_i1gtDB"), 0, gF("_jtiox"), 0, gF("_lcmIO"), 0, gF("_lcmII"), 0, gF("_bw0111CC"), 0, gF("_jtioz"), 0, gF("_expD"), 0, gF("_i0gtS"), 0, gF("_jtioa"), 0, gF("_leSS"), 0, gF("_jtioc"), 0, gF("_expB"), 0, gF("_jtprefix"), 0, gF("_expI"), 0, gF("_jtjdot1"), 0, gF("_ifbgtDB"), 0, gF("_jtioq"), 0, gF("_ifbgtDD"), 0, gF("_ifbgtDI"), 0, gF("_jtlocmap"), 0, gF("_expX"), 0, gF("_expZ"), 0, gF("_alleqII"), 0, gF("_alleqID"), 0, gF("_spfreecomp"), 0, gF("_alleqIB"), 0, gF("_jtfitf1"), 0, gF("_jtfitf2"), 0, gF("_jtlcpa"), 0, gF("_jtlcpb"), 0, gF("_anygeIB"), 0, gF("_jtnl2"), 0, gF("_jtnl1"), 0, gF("_anygeID"), 0, gF("_jtiosc"), 0, gF("_leC"), 0, gF("_jtfetch"), 0, gF("_gtC"), 0, gF("_i0gtII"), 0, gF("_jtdbcutback"), 0, gF("_i0gtID"), 0, gF("_i0gtIB"), 0, gF("_jtonf1"), 0, gF("_bw0100II"), 0, gF("_jtgcr2"), 0,
                      gF("_jtgcr1"), 0, gF("_jtordstat"), 0, gF("_jtspfor1"), 0, gF("_anyneC"), 0, gF("_anyneS"), 0, gF("_jtamna"), 0, gF("_jtamne"), 0, gF("_jtxroota"), 0, gF("_ixfixedleft"), 0, gF("_jtioau"), 0, gF("_jtscapco"), 0, gF("_jthkdrop"), 0, gF("_jtover"), 0, gF("_anyeqDI"), 0, gF("_sumgtS"), 0, gF("_bw1001pfxI"), 0, gF("_anyeqDD"), 0, gF("_jtdcap"), 0, gF("_anyeqDB"), 0, gF("_jtcatalog"), 0, gF("_anyneDB"), 0, gF("_bw0000insI"), 0, gF("_allltBD"), 0, gF("_jthkfrom"), 0, gF("_anyneDI"), 0, gF("_allltBI"), 0, gF("_bw0000insC"), 0, gF("_ltSS"), 0, gF("_jtparsercalls"), 0, gF("_divpfxZ"), 0, gF("_jtindexseqlim1"), 0, gF("_divpfxD"), 0, gF("_jtindexseqlim2"), 0, gF("_bw0110insI"), 0, gF("_jtordstati"), 0, gF("_bw0110insC"), 0, gF("_jtbitwise1100"), 0, gF("_jtbitwise1101"), 0, gF("_jtlocsizeq"), 0, gF("_anygtS"), 0, gF("_jtlocsizes"),
                      0, gF("_maxII"), 0, gF("_maxID"), 0, gF("_maxIB"), 0, gF("_jtpix"), 0, gF("_j0ltBI"), 0, gF("_sumeqIB"), 0, gF("_sumeqID"), 0, gF("_jtmmaxs"), 0, gF("_sumeqII"), 0, gF("_j0ltBB"), 0, gF("_j0ltBD"), 0, gF("_jtcase1b"), 0, gF("_i1eqDD"), 0, gF("_divII"), 0, gF("_i1eqDB"), 0, gF("_divID"), 0, gF("_jtpowseq"), 0, gF("_i1eqDI"), 0, gF("_divIB"), 0, gF("_jtnumbpx"), 0, gF("_andpfxB"), 0, gF("_jtobverse"), 0, gF("_jtcut02"), 0, gF("_jtoutstr"), 0, gF("_gcdIO"), 0, gF("_gcdII"), 0, gF("_jtrazefrom"), 0, gF("_jtleft2"), 0, gF("_jtredg"), 0, gF("_tymesID"), 0, gF("_tymesIB"), 0, gF("_tymesIO"), 0, gF("_tymesII"), 0, gF("_jtmatchs"), 0, gF("_remID"), 0, gF("_jtcharmapb"), 0, gF("_eqID"), 0, gF("_eqII"), 0, gF("_jtpmunpack"), 0, gF("_bw1010insC"), 0, gF("_jtofxinv"), 0, gF("_bw1010insI"), 0, gF("_jtpmarea2"), 0, gF("_jtpmarea1"), 0, gF("_jtisnan"), 0, gF("_anyleIB"), 0,
                      gF("_anyleID"), 0, gF("_anyleII"), 0, gF("_jtfxx"), 0, gF("_jtic2"), 0, gF("_minusBB"), 0, gF("_jtjfwrite"), 0, gF("_jtqr"), 0, gF("_jtqq"), 0, gF("_jtbslash"), 0, gF("_i1ltID"), 0, gF("_j0neBD"), 0, gF("_j0neBB"), 0, gF("_jtstitch"), 0, gF("_i1ltII"), 0, gF("_j0neBI"), 0, gF("_jtdbetx"), 0, gF("_gesfxB"), 0, gF("_jtnumq"), 0, gF("_compi1"), 0, gF("_remDD"), 0, gF("_tymesXX"), 0, gF("_jtbehead"), 0, gF("_jthkindexofmaxmin"), 0, gF("_gepfxB"), 0, gF("_minpfxS"), 0, gF("_minpfxQ"), 0, gF("_minpfxX"), 0, gF("_jtredstitch"), 0, gF("_allgtDI"), 0, gF("_jtscm012"), 0, gF("_minpfxD"), 0, gF("_minpfxI"), 0, gF("_allgtDB"), 0, gF("_allgtDD"), 0, gF("_jtsb1"), 0, gF("_jtsb2"), 0, gF("_ifbleBD"), 0, gF("_ifbleBB"), 0, gF("_minXX"), 0, gF("_ifbleBI"), 0, gF("_jtabase2"), 0, gF("_i1geDD"), 0, gF("_jtabase1"), 0, gF("_i1geDB"), 0, gF("_jtnand"), 0, gF("_eqZZ"), 0, gF("_i1geDI"),
                      0, gF("_i1leBD"), 0, gF("_jtgcd"), 0, gF("_jtbitwise1111"), 0, gF("_jtbitwise1110"), 0, gF("_j0leBI"), 0, gF("_jtscm10"), 0, gF("_bw0011CC"), 0, gF("_jtlamin1"), 0, gF("_jtlamin2"), 0, gF("_bw0011sfxI"), 0, gF("_jtreduce"), 0, gF("_gtQQ"), 0, gF("_jtscm00"), 0, gF("_jtscm01"), 0, gF("_jtlogar1"), 0, gF("_jtlogar2"), 0, gF("_lepfxB"), 0, gF("_lesfxB"), 0, gF("_jtlt"), 0, gF("_hic2"), 0, gF("_jtle"), 0, gF("_jtvhook"), 0, gF("_plusII"), 0, gF("_allgeID"), 0, gF("_geQQ"), 0, gF("_allgeIB"), 0, gF("_anyltIB"), 0, gF("_anyltII"), 0, gF("_allgeII"), 0, gF("_plusID"), 0, gF("_jtrbrace"), 0, gF("_allgeS"), 0, gF("_orsfxB"), 0, gF("_maxpfxX"), 0, gF("_maxpfxQ"), 0, gF("_maxpfxS"), 0, gF("_jtfit"), 0, gF("_maxpfxI"), 0, gF("_maxpfxD"), 0, gF("_jtundco1"), 0, gF("_jtfix"), 0, gF("_jtdbtrapq"), 0, gF("_jtdbtraps"), 0, gF("_leQQ"), 0, gF("_ifbgtBD"), 0, gF("_ifbgtBB"),
                      0, gF("_jttayrecip"), 0, gF("_jthexrep1"), 0, gF("_bw0001sfxI"), 0, gF("_ifbgtBI"), 0, gF("_jthexrep2"), 0, gF("_logQZ"), 0, gF("_logZ"), 0, gF("_jtlev1"), 0, gF("_jtlev2"), 0, gF("_eqsfxB"), 0, gF("_jtslash"), 0, gF("_logI"), 0, gF("_logD"), 0, gF("_jtrngselectq"), 0, gF("_logQD"), 0, gF("_logB"), 0, gF("_jtdbrun"), 0, gF("_bw1100CC"), 0, gF("_sumleBI"), 0, gF("_jtoblique"), 0, gF("_sumleBB"), 0, gF("_sumleBD"), 0, gF("_tymesZZ"), 0, gF("_jthgeom"), 0, gF("_jtcurtail"), 0, gF("_jttsit1"), 0, gF("_i1eqBI"), 0, gF("_maxsfxQ"), 0, gF("_maxsfxS"), 0, gF("_jtmemo1"), 0, gF("_jtgcl1"), 0, gF("_jtgcl2"), 0, gF("_jtmemo2"), 0, gF("_maxsfxX"), 0, gF("_maxsfxD"), 0, gF("_maxsfxI"), 0, gF("_i1geID"), 0, gF("_j1geDI"), 0, gF("_j1geDD"), 0, gF("_j1geDB"), 0, gF("_jttco1"), 0, gF("_maxinsX"), 0, gF("_bw0010insC"), 0, gF("_neXX"), 0, gF("_jtfitct1"), 0, gF("_jtfitct2"),
                      0, gF("_bw0010insI"), 0, gF("_tymesinsD"), 0, gF("_ifbgeII"), 0, gF("_tymesinsO"), 0, gF("_ifbgeID"), 0, gF("_tymesinsI"), 0, gF("_ifbgeIB"), 0, gF("_jtdbstackz"), 0, gF("_bw0001pfxI"), 0, gF("_tymesinsZ"), 0, gF("_jtsparse1"), 0, gF("_jtsparse2"), 0, gF("_jtdgrade2"), 0, gF("_jtdgrade1"), 0, gF("_jtroll"), 0, gF("_jtloccre2"), 0, gF("_jtloccre1"), 0, gF("_allltBB"), 0, gF("_ifbneIB"), 0, gF("_ifbneID"), 0, gF("_ifbneII"), 0, gF("_j1leS"), 0, gF("_tymespfxI"), 0, gF("_jtbsdot"), 0, gF("_jtthorn1"), 0, gF("_anyneDD"), 0, gF("_jtthorn2"), 0, gF("_jtmovavg"), 0, gF("_jtsscan"), 0, gF("_jtcant1"), 0, gF("_jtcant2"), 0, gF("_jtcase2"), 0, gF("_jtcase1"), 0, gF("_jtoprod"), 0, gF("_i1leS"), 0, gF("_maxinsD"), 0, gF("_jtcanta"), 0, gF("_j0leBD"), 0, gF("_i1leBI"), 0, gF("_j0leBB"), 0, gF("_jtbitwiseinsertchar"), 0, gF("_jtatop"), 0,
                      gF("_jtscm11"), 0, gF("_i1leBB"), 0, gF("_jtcasev"), 0, gF("_j1eqS"), 0, gF("_bw0111pfxI"), 0, gF("_sumgtBI"), 0, gF("_sumgtBB"), 0, gF("_jtunquote1"), 0, gF("_sumgtBD"), 0, gF("_jtjfread"), 0, gF("_jtpolar"), 0, gF("_j0eqII"), 0, gF("_jtbit1"), 0, gF("_j0eqIB"), 0, gF("_jtbit2"), 0, gF("_jtindexof"), 0, gF("_j0eqID"), 0, gF("_sumneDB"), 0, gF("_alleqDD"), 0, gF("_alleqDB"), 0, gF("_sumneDD"), 0, gF("_sumneDI"), 0, gF("_alleqDI"), 0, gF("_neAA"), 0, gF("_jtmean"), 0, gF("_jtsumeps"), 0, gF("_jtalleps"), 0, gF("_jtexppi"), 0, gF("_bw1111insI"), 0, gF("_powQQ"), 0, gF("_gtsfxB"), 0, gF("_bw1111insC"), 0, gF("_jtrepeat"), 0, gF("_neinsB"), 0, gF("_jtasserts"), 0, gF("_j1leID"), 0, gF("_jtiota1rev"), 0, gF("_geBI"), 0, gF("_j1leIB"), 0, gF("_geBD"), 0, gF("_j1leII"), 0, gF("_ixfixedright0"), 0, gF("_geBB"), 0, gF("_i0ltBD"), 0, gF("_i0ltBB"), 0, gF("_i0ltBI"),
                      0, gF("_jtgrade2"), 0, gF("_i1neBI"), 0, gF("_i1neBD"), 0, gF("_jtscz2"), 0, gF("_jtsquare"), 0, gF("_jtscz1"), 0, gF("_binDD"), 0, gF("_jtrotate"), 0, gF("_jtspfor"), 0, gF("_jtioa1"), 0, gF("_jtamen2"), 0, gF("_jtwd"), 0, gF("_jtnubind"), 0, gF("_leDD"), 0, gF("_leDB"), 0, gF("_leDI"), 0, gF("_anyeqID"), 0, gF("_anyeqIB"), 0, gF("_orBB"), 0, gF("_anyeqII"), 0, gF("_bw0101CC"), 0, gF("_jtminus"), 0, gF("_jtdbstops"), 0, gF("_jtdbstopq"), 0, gF("_lcmDD"), 0, gF("_jtmmaxq"), 0, gF("_ltBB"), 0, gF("_ltBD"), 0, gF("_factD"), 0, gF("_factI"), 0, gF("_ltBI"), 0, gF("_factQ"), 0, gF("_jtself1"), 0, gF("_j1eqID"), 0, gF("_jtself2"), 0, gF("_factX"), 0, gF("_i0gtDD"), 0, gF("_j1eqII"), 0, gF("_i0gtDB"), 0, gF("_allgtBB"), 0, gF("_ceilQ"), 0, gF("_jttie"), 0, gF("_ltpfxB"), 0, gF("_bw1010II"), 0, gF("_ceilD"), 0, gF("_maxXX"), 0, gF("_jtdecrem"), 0, gF("_i0ltID"), 0, gF("_i1geBB"), 0, gF("_eqXX"),
                      0, gF("_j1geBI"), 0, gF("_i1geBI"), 0, gF("_jtnotmatch"), 0, gF("_jticap2"), 0, gF("_jtnub"), 0, gF("_jtpmstats"), 0, gF("_ifbltII"), 0, gF("_ifbltID"), 0, gF("_ifbltIB"), 0, gF("_sumltIB"), 0, gF("_orinsB"), 0, gF("_sumltID"), 0, gF("_sumltII"), 0, gF("_bw1110insC"), 0, gF("_bw1110insI"), 0, gF("_i0leII"), 0, gF("_norsfxB"), 0, gF("_i0leID"), 0, gF("_i0leIB"), 0, gF("_sgnZ"), 0, gF("_compx"), 0, gF("_sgnX"), 0, gF("_minsfxI"), 0, gF("_sgnQ"), 0, gF("_minsfxS"), 0, gF("_minsfxQ"), 0, gF("_sgnI"), 0, gF("_sgnD"), 0, gF("_jtdberr"), 0, gF("_ifbgeDI"), 0, gF("_jttally"), 0, gF("_ifbgeDB"), 0, gF("_jtlevel1"), 0, gF("_ifbgeDD"), 0, gF("_jtreitem"), 0, gF("_minDD"), 0, gF("_j1ltBI"), 0, gF("_minDB"), 0, gF("_jtiepdoq"), 0, gF("_jtofxassoc"), 0, gF("_j1ltBD"), 0, gF("_bw0010II"), 0, gF("_gcdXX"), 0, gF("_minDI"), 0, gF("_j1ltBB"), 0, gF("_tcv"), 0, gF("_geSS"), 0, gF("_powBI"),
                      0, gF("_jtkeyheadtally"), 0, gF("_jtexpandg"), 0, gF("_jtexpandf"), 0, gF("_powBD"), 0, gF("_jtnubsieve"), 0, gF("_jtdyad"), 0, gF("_ifbneS"), 0, gF("_ifbneC"), 0, gF("_anygeBI"), 0, gF("_anygeBB"), 0, gF("_anygeBD"), 0, gF("_remQQ"), 0, gF("_i0geDB"), 0, gF("_jtconjug"), 0, gF("_minusZZ"), 0, gF("_ifbeqS"), 0, gF("_jtapip"), 0, gF("_jtinsert"), 0, gF("_ifbgeS"), 0, gF("_ifbeqC"), 0, gF("_jtgrade1"), 0, gF("_jti1ebar"), 0, gF("_jtfolkcomp"), 0, gF("_i1neBB"), 0, gF("_divBI"), 0, gF("_jttaydiv"), 0, gF("_bw0101sfxI"), 0, gF("_jtdbret"), 0, gF("_compc"), 0, gF("_jttss"), 0, gF("_jtseg"), 0, gF("_nandpfxB"), 0, gF("_neZZ"), 0, gF("_jtminimum"), 0, gF("_jtrecip"), 0, gF("_jtobqfslash"), 0, gF("_bw1100insC"), 0, gF("_jtts0"), 0, gF("_jtj1eps"), 0, gF("_bw1100insI"), 0, gF("_jtrdot2"), 0, gF("_jtrdot1"), 0, gF("_nandsfxB"), 0, gF("_lcmQQ"), 0, gF("_cirZZ"),
                      0, gF("_i1gtS"), 0, gF("_jtssg"), 0, gF("_ifbltDI"), 0, gF("_j1gtDD"), 0, gF("_j1gtDB"), 0, gF("_ifbltDB"), 0, gF("_ifbltDD"), 0, gF("_j1gtDI"), 0, gF("_jtmt_next"), 0, gF("_jttcap1"), 0, gF("_bw0100insC"), 0, gF("_jtjico1"), 0, gF("_bw0100insI"), 0, gF("_jtrngseeds"), 0, gF("_jtrngseedq"), 0, gF("_jtscm002"), 0, gF("_sumltS"), 0, gF("_jtsignum"), 0, gF("_i0neBI"), 0, gF("_jtlocnc"), 0, gF("_i0neBD"), 0, gF("_i0neBB"), 0, gF("_gtpfxB"), 0, gF("_ltinsB"), 0, gF("_factZ"), 0, gF("_gtinsB"), 0, gF("_anyeqS"), 0, gF("_divQQ"), 0, gF("_bw0101insC"), 0, gF("_anyeqC"), 0, gF("_bw0101insI"), 0, gF("_jtmatth1"), 0, gF("_alleqBI"), 0, gF("_alleqBD"), 0, gF("_jtdotprod"), 0, gF("_alleqBB"), 0, gF("_jtadverse"), 0, gF("_sumgeII"), 0, gF("_jtgt"), 0, gF("_bw0111insC"), 0, gF("_bw0111insI"), 0, gF("_jtge"), 0, gF("_plusXX"), 0, gF("_floorQ"), 0, gF("_floorZ"), 0,
                      gF("_allgtS"), 0, gF("_floorD"), 0, gF("_jtexec2"), 0, gF("_bw0000CC"), 0, gF("_jtexec1"), 0, gF("_eqIB"), 0, gF("_bw1000insI"), 0, gF("_compspssI"), 0, gF("_bw1000insC"), 0, gF("_jtifbebar"), 0, gF("_geDI"), 0, gF("_geDB"), 0, gF("_geDD"), 0, gF("_allltID"), 0, gF("_jtcts"), 0, gF("_jtctq"), 0, gF("_i1eqC"), 0, gF("_jtam1sp"), 0, gF("_bw1001CC"), 0, gF("_jtnvv1"), 0, gF("_jtnvv2"), 0, gF("_i1eqS"), 0, gF("_allgeDB"), 0, gF("_allgeDD"), 0, gF("_jtrngselects"), 0, gF("_jtmemo"), 0, gF("_allgeDI"), 0, gF("_swap1"), 0, gF("_swap2"), 0, gF("_jteps"), 0, gF("_jtpmctr"), 0, gF("_jtcut2"), 0, gF("_jtcut1"), 0, gF("_atcomp"), 0, gF("_pluspfxI"), 0, gF("_jtkeymean"), 0, gF("_bw1000II"), 0, gF("_jtlocswitch"), 0, gF("_jtbasis1"), 0, gF("_jtam1e"), 0, gF("_jtam1a"), 0, gF("_jtvfolk"), 0, gF("_jtcorx2"), 0, gF("_neIB"), 0, gF("_i0gtBI"), 0, gF("_cons1a"), 0, gF("_neID"), 0, gF("_i0gtBB"),
                      0, gF("_neII"), 0, gF("_i0gtBD"), 0, gF("_i1ltS"), 0, gF("_jti1eps"), 0, gF("_sumeqC"), 0, gF("_jtiod1"), 0, gF("_j0neC"), 0, gF("_i0ltS"), 0, gF("_j0gtIB"), 0, gF("_j0gtID"), 0, gF("_j0gtII"), 0, gF("_jtspcount"), 0, gF("_bw0011pfxI"), 0, gF("_jttrr"), 0, gF("_hic"), 0, gF("_jttrx"), 0, gF("_floorDI"), 0, gF("_jttdot1"), 0, gF("_jtfmt21"), 0, gF("_jtfmt22"), 0, gF("_jtamp"), 0, gF("_minsfxD"), 0, gF("_jtroot"), 0, gF("_jtginfix"), 0, gF("_allltIB"), 0, gF("_jttlimq"), 0, gF("_jttlims"), 0, gF("_allltII"), 0, gF("_jtfx"), 0, gF("_bw0001CC"), 0, gF("_jtfa"), 0, gF("_bw0101II"), 0, gF("_jtdivide"), 0, gF("_amipv2"), 0, gF("_jtdbstepout1"), 0, gF("_jtdbstepout2"), 0, gF("_jtstype"), 0, gF("_bw1101II"), 0, gF("_andinsB"), 0, gF("_jtplt"), 0, gF("_atcomp0"), 0, gF("_bw1111CC"), 0, gF("_minBD"), 0, gF("_minBI"), 0, gF("_alleqS"), 0, gF("_taa"), 0, gF("_sumeqBB"), 0, gF("_allleII"),
                      0, gF("_sumeqBD"), 0, gF("_allleIB"), 0, gF("_sumeqBI"), 0, gF("_alleqC"), 0, gF("_allleID"), 0, gF("_tymesDB"), 0, gF("_jtduble"), 0, gF("_tymesDD"), 0, gF("_jtvpunc"), 0, gF("_tymesDI"), 0, gF("_jtbitwise0110"), 0, gF("_jtbitwise0111"), 0, gF("_jtnum2"), 0, gF("_jtnum1"), 0, gF("_j1eqIB"), 0, gF("_jtsumebar"), 0, gF("_i1gtBI"), 0, gF("_jtdomainerr2"), 0, gF("_jtdomainerr1"), 0, gF("_jtkey"), 0, gF("_i1gtBD"), 0, gF("_i1gtBB"), 0, gF("_jteven"), 0, gF("_allgtBI"), 0, gF("_anygeDI"), 0, gF("_anygeDD"), 0, gF("_anygeDB"), 0, gF("_jtnumi"), 0, gF("_jtranking"), 0, gF("_jtnumx"), 0, gF("_allgtBD"), 0, gF("_bw1110CC"), 0, gF("_j1neBD"), 0, gF("_j1neBB"), 0, gF("_minusXX"), 0, gF("_j1neBI"), 0, gF("_jtfolk1"), 0, gF("_jtxlog2a"), 0, gF("_jtfolk2"), 0, gF("_cons2a"), 0, gF("_j1eqDB"), 0, gF("_j1eqDD"), 0, gF("_jtqco2"), 0, gF("_jtuco2"), 0, gF("_jtuco1"),
                      0, gF("_ceilZ"), 0, gF("_jtfsm"), 0, gF("_gtIB"), 0, gF("_gtID"), 0, gF("_gtII"), 0, gF("_on1"), 0, gF("_on2"), 0, gF("_jtexpn1"), 0, gF("_binQQ"), 0, gF("_anyleBD"), 0, gF("_divinsZ"), 0, gF("_jtintg0"), 0, gF("_jtspforloc"), 0, gF("_jtfrom"), 0, gF("_jtrollkx"), 0, gF("_divinsD"), 0, gF("_jtcut"), 0, gF("_bw0010sfxI"), 0, gF("_neDD"), 0, gF("_neDB"), 0, gF("_neDI"), 0, gF("_j0geII"), 0, gF("_jtoutparmq"), 0, gF("_jtoutparms"), 0, gF("_j0geID"), 0, gF("_j0geIB"), 0, gF("_jtoutfix"), 0, gF("_bw0110CC"), 0, gF("_jtmapx"), 0, gF("_jtdbjump"), 0, gF("_jttco"), 0, gF("_bw0011insC"), 0, gF("_jtforeign"), 0, gF("_jtamnsp"), 0, gF("_i1ltDB"), 0, gF("_jtiota1"), 0, gF("_ifbeqIB"), 0, gF("_i1geBD"), 0, gF("_bw0011insI"), 0, gF("_ifbeqII"), 0, gF("_i1ltDI"), 0, gF("_anyneBB"), 0, gF("_jtdbstepinto2"), 0, gF("_jtdbstepinto1"), 0, gF("_anyneBD"), 0, gF("_anyneBI"), 0, gF("_j1neS"),
                      0, gF("_Joutput"), 0, gF("_j1neC"), 0, gF("_sumltBD"), 0, gF("_jtbitwiseshifta"), 0, gF("_j1gtBB"), 0, gF("_j1gtBD"), 0, gF("_j1gtBI"), 0, gF("_jttcoh1"), 0, gF("_i0neDI"), 0, gF("_i0neDB"), 0, gF("_i0neDD"), 0, gF("_minSS"), 0, gF("_i0geIB"), 0, gF("_i0geID"), 0, gF("_i0geII"), 0, gF("_jtanyeps"), 0, gF("_i1eqBB"), 0, gF("_jtdrr"), 0, gF("_i1eqBD"), 0, gF("_jtincrem"), 0, gF("_xadv"), 0, gF("_jtdrx"), 0, gF("_jttess2"), 0, gF("_ltsfxB"), 0, gF("_jtdbc"), 0, gF("_Jinput_"), 0, gF("_geinsB"), 0, gF("_jttcap"), 0, gF("_jthook1"), 0, gF("_jthook2"), 0, gF("_jtovg"), 0, gF("_plusZZ"), 0, gF("_jtmodpow2"), 0, gF("_jtmodpow1"), 0, gF("_jttoutf8"), 0, gF("_jtbitwiserotate"), 0, gF("_jteq"), 0, gF("_i0leDI"), 0, gF("_geII"), 0, gF("_i0leDD"), 0, gF("_i0leDB"), 0, gF("_jtex"), 0, gF("_tvc"), 0, gF("_jtrinv"), 0, gF("_jtbitwise0101"), 0, gF("_jtbitwise0100"), 0, gF("_eqCS"),
                      0, gF("_jtcolon"), 0, gF("_j0gtDD"), 0, gF("_j0gtDB"), 0, gF("_minusID"), 0, gF("_minusII"), 0, gF("_minusIO"), 0, gF("_eqCC"), 0, gF("_nandBB"), 0, gF("_jtodd"), 0, gF("_geIB"), 0, gF("_xv2"), 0, gF("_xv1"), 0, gF("_jtfact"), 0, gF("_powII"), 0, gF("_powIB"), 0, gF("_jtpolymult"), 0, gF("_i1ltIB"), 0, gF("_jtxdefn"), 0, gF("_jtloccrenum"), 0, gF("_tymesQQ"), 0, gF("_jtcork2"), 0, gF("_jtcork1"), 0, gF("_anyltDB"), 0, gF("_plusDI"), 0, gF("_jtdenseit"), 0, gF("_plusDD"), 0, gF("_anyltDI"), 0, gF("_jtpinv"), 0, gF("_plusDB"), 0, gF("_gtXX"), 0, gF("_bw1100sfxI"), 0, gF("_ifbgtS"), 0, gF("_pluspfxO"), 0, gF("_jtdeal"), 0, gF("_pluspfxB"), 0, gF("_pluspfxD"), 0, gF("_pluspfxX"), 0, gF("_pluspfxZ"), 0, gF("_pluspfxQ"), 0, gF("_jtnumd"), 0, gF("_jtpoly1"), 0, gF("_j0neDD"), 0, gF("_jtpoly2"), 0, gF("_j0neDB"), 0, gF("_j0neDI"), 0, gF("_jtbreakfnq"), 0, gF("_jtbreakfns"),
                      0, gF("_jtiota"), 0, gF("_jtnch"), 0, gF("_jtrngstateq"), 0, gF("_jtrngstates"), 0, gF("_j0ltS"), 0, gF("_minuspfxI"), 0, gF("_minuspfxO"), 0, gF("_sumleS"), 0, gF("_rank2i"), 0, gF("_minuspfxB"), 0, gF("_minuspfxD"), 0, gF("_minuspfxX"), 0, gF("_minuspfxZ"), 0, gF("_anygeII"), 0, gF("_minuspfxQ"), 0, gF("_jtpparity"), 0, gF("_jttable"), 0, gF("_jtcharfn2"), 0, gF("_bw0111sfxI"), 0, gF("_tymespfxZ"), 0, gF("_tymespfxX"), 0, gF("_maxC"), 0, gF("_maxinsS"), 0, gF("_minC"), 0, gF("_tymespfxQ"), 0, gF("_maxinsI"), 0, gF("_tymespfxO"), 0, gF("_jtvmonad"), 0, gF("_jtfmt02"), 0, gF("_ltXX"), 0, gF("_jtfmt01"), 0, gF("_tymespfxD"), 0, gF("_bw0011II"), 0, gF("_ceilDI"), 0, gF("_ifbeqDI"), 0, gF("_ifbeqDD"), 0, gF("_ifbeqDB"), 0, gF("_eqBI"), 0, gF("_eqBD"), 0, gF("_eqBB"), 0, gF("_jtlock1"), 0, gF("_jtlock2"), 0, gF("_jtvadv"), 0, gF("_jtnegate"), 0,
                      gF("_jtdot"), 0, gF("_bw0100sfxI"), 0, gF("_jtjoff"), 0, gF("_jtamip"), 0, gF("_i1leII"), 0, gF("_i0geDD"), 0, gF("_jtbdot2"), 0, gF("_bw1010CC"), 0, gF("_jtbdot1"), 0, gF("_j0eqS"), 0, gF("_i1leIB"), 0, gF("_i1leID"), 0, gF("_i0geDI"), 0, gF("_divBB"), 0, gF("_bw0000sfxI"), 0, gF("_divBD"), 0, gF("_j0eqC"), 0, gF("_jtredravel"), 0, gF("_jtkeybox"), 0, gF("_jtfslashatg"), 0, gF("_jtfromis"), 0, gF("_bw1001sfxI"), 0, gF("_jtjico2"), 0, gF("_sumgeIB"), 0, gF("_mergv1"), 0, gF("_jtconj"), 0, gF("_eqinsB"), 0, gF("_bw0010CC"), 0, gF("_compspssD"), 0, gF("_sumgeID"), 0, gF("_compspssB"), 0, gF("_jtltiea"), 0, gF("_bw0001insI"), 0, gF("_jtltieb"), 0, gF("_compspssZ"), 0, gF("_bw0001insC"), 0, gF("_minsfxX"), 0, gF("_jtundco"), 0, gF("_jtfc2"), 0, gF("_j0eqDI"), 0, gF("_jtcorx1"), 0, gF("_j0eqDD"), 0, gF("_jtdl"), 0, gF("_j0eqDB"), 0, gF("_j1neDB"), 0, gF("_jtceil1"),
                      0, gF("_j1neDD"), 0, gF("_jtgsuffix"), 0, gF("_jttess1"), 0, gF("_j1neDI"), 0, gF("_jtcut01"), 0, gF("_sumeqS"), 0, gF("_allleDI"), 0, gF("_jticap"), 0, gF("_amccn2"), 0, gF("_jtminv"), 0, gF("_jttymes"), 0, gF("_jthgeom1"), 0, gF("_jthgeom2"), 0, gF("_ltIB"), 0, gF("_ltID"), 0, gF("_bw1100II"), 0, gF("_ltII"), 0, gF("_jtretcomms"), 0, gF("_leID"), 0, gF("_j0leS"), 0, gF("_allleDB"), 0, gF("_leIB"), 0, gF("_leII"), 0, gF("_bw1010sfxI"), 0, gF("_jtcut2sx"), 0, gF("_jtqpfreq"), 0, gF("_jtra1"), 0, gF("_j1leDD"), 0, gF("_jttail"), 0, gF("_geID"), 0, gF("_bw0110sfxI"), 0, gF("_j1leDI"), 0, gF("_i0leS"), 0, gF("_jtredcateach"), 0, gF("_jtsm_next"), 0, gF("_jtlocpath2"), 0, gF("_jtlocpath1"), 0, gF("_norpfxB"), 0, gF("_j1geBD"), 0, gF("_j1geBB"), 0, gF("_oneB"), 0, gF("_j1eqDI"), 0, gF("_jtravel"), 0, gF("_oneF"), 0, gF("_anyeqBI"), 0, gF("_anyeqBB"), 0, gF("_anyeqBD"),
                      0, gF("_j1eqBB"), 0, gF("_sumleDI"), 0, gF("_j1eqBD"), 0, gF("_sumleDD"), 0, gF("_j1eqBI"), 0, gF("_sumleDB"), 0, gF("_bw1101sfxI"), 0, gF("_i1ltBB"), 0, gF("_i1ltBD"), 0, gF("_i1ltBI"), 0, gF("_jtsldot"), 0, gF("_jtlrx"), 0, gF("_gcdZZ"), 0, gF("_sumgtDI"), 0, gF("_jtfmtD"), 0, gF("_jtfmtI"), 0, gF("_sumgtDD"), 0, gF("_eqSC"), 0, gF("_sumgtDB"), 0, gF("_anygtID"), 0, gF("_jtgav1"), 0, gF("_jtgav2"), 0, gF("_anygtIB"), 0, gF("_jtfmtZ"), 0, gF("_anygtII"), 0, gF("_eqSS"), 0, gF("_jtfmt12"), 0, gF("_cjugZ"), 0, gF("_jtupon2"), 0, gF("_maxQQ"), 0, gF("_jtfmt11"), 0, gF("_cirBD"), 0, gF("_jtfactor"), 0, gF("_jtassertq"), 0, gF("_allneBI"), 0, gF("_allltDB"), 0, gF("_rank1i"), 0, gF("_allltDI"), 0, gF("_allneBB"), 0, gF("_allneBD"), 0, gF("_orpfxB"), 0, gF("_allleS"), 0, gF("_j1ltII"), 0, gF("_jthkeps"), 0, gF("_j1ltIB"), 0, gF("_j1ltID"), 0, gF("_jtope"), 0, gF("_jtfmtparse"),
                      0, gF("_jtright2"), 0, gF("_jtright1"), 0, gF("_secf2"), 0, gF("_i0leBI"), 0, gF("_leXX"), 0, gF("_sumneBB"), 0, gF("_i0leBB"), 0, gF("_i0leBD"), 0, gF("_plussfxO"), 0, gF("_plussfxI"), 0, gF("_plussfxD"), 0, gF("_anyleBB"), 0, gF("_plussfxB"), 0, gF("_plussfxX"), 0, gF("_plussfxZ"), 0, gF("_eqAA"), 0, gF("_plussfxQ"), 0, gF("_jtwords"), 0, gF("_i0gtDI"), 0, gF("_anyleBI"), 0, gF("_bw0110pfxI"), 0, gF("_jtlcm"), 0, gF("_gtDI"), 0, gF("_j1neID"), 0, gF("_j1neIB"), 0, gF("_jteach2"), 0, gF("_allltDD"), 0, gF("_jtcrc2"), 0, gF("_jteach1"), 0, gF("_j1neII"), 0, gF("_gtDD"), 0, gF("_logXD"), 0, gF("_bw1001II"), 0, gF("_andBB"), 0, gF("_jtraze"), 0, gF("_j1gtS"), 0, gF("_jtloccre"), 0, gF("_logXZ"), 0, gF("_minQQ"), 0, gF("_i1neDI"), 0, gF("_i1neDD"), 0, gF("_i1neDB"), 0, gF("_jtboxs"), 0, gF("_jtboxq"), 0, gF("_remZZ"), 0, gF("_jtmonad"), 0, gF("_jtadot1"), 0, gF("_jtadot2"), 0,
                      gF("_jtdbrr1"), 0, gF("_jtdbrr2"), 0, gF("_i1geS"), 0, gF("_powID"), 0, gF("_jtampco"), 0, gF("_jtweight"), 0, gF("_jtxco1"), 0, gF("_jtredsemi"), 0, gF("_jttpush"), 0, gF("_anyltS"), 0, gF("_bw1011CC"), 0, gF("_jtioz1"), 0, gF("_jtmap"), 0, gF("_jtsslope"), 0, gF("_jtmag"), 0, gF("_j0leIB"), 0, gF("_j0leID"), 0, gF("_jtspit"), 0, gF("_j0leII"), 0, gF("_jtcircle"), 0, gF("_jtply1"), 0, gF("_jtafrom"), 0, gF("_jtebar"), 0, gF("_jtply2"), 0, gF("_jtdbsig2"), 0, gF("_jtdbsig1"), 0, gF("_neQQ"), 0, gF("_allltS"), 0, gF("_norBB"), 0, gF("_bw0000pfxI"), 0, gF("_ifbeqBD"), 0, gF("_bw1001insI"), 0, gF("_cons2"), 0, gF("_jtfpown"), 0, gF("_ifbeqBB"), 0, gF("_cons1"), 0, gF("_bw1001insC"), 0, gF("_ifbeqBI"), 0, gF("_jtlevs2"), 0, gF("_jtlevs1"), 0, gF("_j0ltII"), 0, gF("_i0neII"), 0, gF("_jtagenda"), 0, gF("_j0ltID"), 0, gF("_i0neID"), 0, gF("_i0neIB"), 0, gF("_j0ltIB"), 0,
                      gF("_anygtDI"), 0, gF("_anygtDD"), 0, gF("_anygtDB"), 0, gF("_j0geDI"), 0, gF("_j0geDD"), 0, gF("_j0geDB"), 0, gF("_ifbgeBI"), 0, gF("_jtfitfill1"), 0, gF("_jtfitfill2"), 0, gF("_ifbgeBB"), 0, gF("_ifbgeBD"), 0, gF("_leinsB"), 0, gF("_jtmatch"), 0, gF("_divDI"), 0, gF("_jtinv1"), 0, gF("_jtinv2"), 0, gF("_divDB"), 0, gF("_divDD"), 0, gF("_jtrect"), 0, gF("_powXX"), 0, gF("_allgeBI"), 0, gF("_j1geS"), 0, gF("_bw1101CC"), 0, gF("_jtresidue"), 0, gF("_jtbinrep1"), 0, gF("_jtbinrep2"), 0, gF("_j1eqC"), 0, gF("_anyleS"), 0, gF("_bw1111pfxI"), 0, gF("_jtredcat"), 0, gF("_geXX"), 0, gF("_maxBI"), 0, gF("_maxBD"), 0, gF("_bw0101pfxI"), 0, gF("_jtmr_next"), 0, gF("_jtcharmapa"), 0, gF("_ifbeqID"), 0, gF("_i1ltDD"), 0, gF("_bw1111sfxI"), 0, gF("_minusDB"), 0, gF("_minusDD"), 0, gF("_minusDI"), 0, gF("_i0ltIB"), 0, gF("_bw0100CC"), 0, gF("_i0ltII"), 0, gF("_jtdcapco"),
                      0, gF("_sumneBD"), 0, gF("_jtbox"), 0, gF("_secf1"), 0, gF("_zeroF"), 0, gF("_jtversq"), 0, gF("_ad1"), 0, gF("_ad2"), 0, gF("_jttake"), 0, gF("_jtrazein"), 0, gF("_bw0111II"), 0, gF("_bw1110II"), 0, gF("_j1leDB"), 0, gF("_sumneBI"), 0, gF("_j1leBB"), 0, gF("_j1leBD"), 0, gF("_j1leBI"), 0, gF("_jtlink"), 0, gF("_jtdealx"), 0, gF("_jtreverse"), 0, gF("_allgtII"), 0, gF("_tymessfxZ"), 0, gF("_tymessfxX"), 0, gF("_allgtIB"), 0, gF("_allgtID"), 0, gF("_tymessfxQ"), 0, gF("_tymessfxO"), 0, gF("_tymessfxI"), 0, gF("_tymessfxD"), 0, gF("_jtfsmfx"), 0, gF("_jtshapex"), 0, gF("_jtmovfslash"), 0, gF("_j0neS"), 0, gF("_jtlocname"), 0, gF("_jtdbstack"), 0, gF("_i0eqII"), 0, gF("_i0eqIB"), 0, gF("_i0eqID"), 0, gF("_jtgprefix"), 0, gF("_jtbase2"), 0, gF("_jtbase1"), 0, gF("_rank1"), 0, gF("_rank2"), 0, gF("_jtuponf2"), 0, gF("_ifbltBI"), 0, gF("_ifbltBB"), 0, gF("_eqQQ"),
                      0, gF("_ifbltBD"), 0, gF("_maxSS"), 0, gF("_sumltBI"), 0, gF("_jtfitpp1"), 0, gF("_sumltBB"), 0, gF("_cirDD"), 0, gF("_jtemend"), 0, gF("_j0leDD"), 0, gF("_j0leDB"), 0, gF("_i1leDI"), 0, gF("_jtseclevq"), 0, gF("_jtseclevs"), 0, gF("_i1leDD"), 0, gF("_i1leDB"), 0, gF("_j0leDI"), 0, gF("_jtbident"), 0, gF("_jtinfix"), 0, gF("_jtprime"), 0, gF("_xn1"), 0, gF("_allneDI"), 0, gF("_allneDD"), 0, gF("_allneDB"), 0, gF("_jtcdot2"), 0, gF("_jtcdot1"), 0, gF("_ifbleIB"), 0, gF("_ifbleID"), 0, gF("_ifbleII"), 0, gF("_jtbfrom"), 0, gF("_jtadv"), 0, gF("_jtjocolz"), 0, gF("_jtjocold"), 0, gF("_ifbgtIB"), 0, gF("_jtpscan"), 0, gF("_ifbgtID"), 0, gF("_jtis"), 0, gF("_jtgf1"), 0, gF("_jtgf2"), 0, gF("_ifbgtII"), 0, gF("_jtgb_next"), 0, gF("_jtretcommq"), 0, gF("_jtunquote"), 0, gF("_jtunderai1"), 0, gF("_allleDD"), 0, gF("_jtpowv2"), 0, gF("_jtpowv1"), 0, gF("_i1geIB"), 0,
                      gF("_jtnubind0"), 0, gF("_i1geII"), 0, gF("_gcdQQ"), 0, gF("_compu"), 0, gF("_compp"), 0, gF("_compq"), 0, gF("_compr"), 0, gF("_jtcon2"), 0, gF("_jtcon1"), 0, gF("_compd"), 0, gF("_compa"), 0, gF("_jtvdyad"), 0, gF("_compi"), 0, gF("_anyltID"), 0, gF("_jtdisps"), 0, gF("_bw1101insC"), 0, gF("_jtdispq"), 0, gF("_minusQQ"), 0, gF("_bw1101insI"), 0, gF("_plusIO"), 0, gF("_gtBB"), 0, gF("_gtBD"), 0, gF("_nesfxB"), 0, gF("_gtBI"), 0, gF("_jtarx"), 0, gF("_jtiocold"), 0, gF("_jtiocolz"), 0, gF("_even1"), 0, gF("_jtgroup"), 0, gF("_jtdigits10"), 0, gF("_allgeBB"), 0, gF("_allgeBD"), 0, gF("_sumgeBI"), 0, gF("_sumgeBD"), 0, gF("_remXX"), 0, gF("_sumgeBB"), 0, gF("_jtkeytally"), 0, gF("_jtinfixd"), 0, gF("_anygeS"), 0, gF("_sumleID"), 0, gF("_jtgausselm"), 0, gF("_sumleIB"), 0, gF("_sumleII"), 0, gF("_gtDB"), 0, gF("_jtnot"), 0, gF("_jtnor"), 0, gF("_ixfixedleft0"), 0, gF("_i0ltDD"),
                      0, gF("_i0ltDB"), 0, gF("_jttaysqrt"), 0, gF("_i0ltDI"), 0, gF("_jtlcapco2"), 0, gF("_jtlcapco1"), 0, gF("_jtlocnl1"), 0, gF("_jtlocnl2"), 0, gF("_obv2"), 0, gF("_obv1"), 0, gF("_i1gtII"), 0, gF("_binZZ"), 0, gF("_i1gtIB"), 0, gF("_i1gtID"), 0, gF("_jtredstiteach"), 0, gF("_leBD"), 0, gF("_i0eqS"), 0, gF("_jthkiota"), 0, gF("_leBB"), 0, gF("_leBI"), 0, gF("_i0geS"), 0, gF("_i0eqC"), 0, gF("_jtbitwise1"), 0, gF("_jtsysq"), 0
                     ];


FUNCTION_TABLE[3295] = function(a,f,d) {
    if (window.foreign) {
        window.foreign(a,f,d);
    }
    return 0;
}
if (memoryInitializer)
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
        var data = Module.readBinary(memoryInitializer);
        HEAPU8.set(data, STATIC_BASE)
    } else addRunDependency("memory initializer"), Browser.asyncLoad(memoryInitializer, function(a) {
        HEAPU8.set(a, STATIC_BASE);
        removeRunDependency("memory initializer")
    }, function() {
        throw "could not load memory initializer " + memoryInitializer;
    });
function ExitStatus(a) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + a + ")";
    this.status = a
}



var shouldRunNow = !0;
Module.noInitialRun && (shouldRunNow = !1);
run();




